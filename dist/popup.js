/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"popup": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./src/index.js","vendor","background_csv_editor_popup_vision_editor","background_popup"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/index.js!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/app.scss":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/postcss-loader/lib!./node_modules/sass-loader/lib/loader.js!./src/app.scss ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(undefined);
// imports


// module
exports.push([module.i, "body {\n  margin: 0;\n  padding: 0;\n  font-size: 16px; }\n\n* {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box; }\n\n.app {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column; }\n  .app .app-inner {\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row; }\n  .app.with-alert .backup-alert {\n    display: block; }\n  .app .backup-alert {\n    display: none;\n    padding: 5px 0;\n    text-align: center;\n    font-size: 14px;\n    background: #fdfdc2; }\n    .app .backup-alert .backup-actions {\n      margin-left: 20px; }\n      .app .backup-alert .backup-actions button {\n        margin-right: 10px; }\n  .app .content {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-flex: 3;\n        -ms-flex: 3;\n            flex: 3;\n    background: #fff;\n    overflow-y: auto; }\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/components/header.scss":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/postcss-loader/lib!./node_modules/sass-loader/lib/loader.js!./src/components/header.scss ***!
  \*****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(undefined);
// imports


// module
exports.push([module.i, ".header {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n  overflow: hidden;\n  padding: 0 20px;\n  width: 100%;\n  height: 44px;\n  border-bottom: 2px solid #ccc;\n  background-color: #f9f9f9; }\n  .header .status {\n    float: right;\n    line-height: 42px;\n    font-size: 14px; }\n    .header .status h1 {\n      margin: 0;\n      font-size: 20px;\n      line-height: 44px; }\n  .header .select-case {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    line-height: 44px;\n    font-size: 13px; }\n    .header .select-case .test-case-name {\n      margin-right: 15px;\n      line-height: 35px;\n      max-width: 120px;\n      overflow: hidden;\n      display: inline-block;\n      white-space: nowrap;\n      text-overflow: ellipsis; }\n      .header .select-case .test-case-name.unsaved {\n        color: orange; }\n        .header .select-case .test-case-name.unsaved::after {\n          content: '*';\n          margin-left: 3px; }\n  .header .actions {\n    margin-top: 6px; }\n    .header .actions .ant-btn-group > .ant-btn-group {\n      float: none; }\n    .header .actions .play-actions {\n      margin: 0 10px; }\n\n.ant-dropdown-menu {\n  max-height: 300px;\n  overflow-y: auto; }\n  .ant-dropdown-menu .editing {\n    color: blue !important; }\n\n.settings-modal .ant-checkbox-wrapper + .ant-checkbox-wrapper {\n  margin-left: 0; }\n\n.settings-modal .tip {\n  margin-left: 15px;\n  color: #aaa; }\n\n.settings-modal .backup-pane {\n  padding: 0 20px; }\n  .settings-modal .backup-pane h4 {\n    font-size: 16px;\n    margin-bottom: 10px; }\n  .settings-modal .backup-pane .row {\n    margin-bottom: 10px; }\n  .settings-modal .backup-pane p {\n    margin-bottom: 5px; }\n  .settings-modal .backup-pane ul li {\n    margin-bottom: 5px; }\n\n.settings-modal .security-pane {\n  padding: 0 20px 20px; }\n  .settings-modal .security-pane h4 {\n    font-size: 16px;\n    margin-bottom: 10px; }\n  .settings-modal .security-pane p {\n    margin-bottom: 10px; }\n  .settings-modal .security-pane label {\n    margin-right: 10px; }\n  .settings-modal .security-pane .ant-radio-wrapper {\n    display: block;\n    height: 30px;\n    line-height: 30px; }\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/containers/dashboard/dashboard.scss":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/postcss-loader/lib!./node_modules/sass-loader/lib/loader.js!./src/containers/dashboard/dashboard.scss ***!
  \******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(undefined);
// imports


// module
exports.push([module.i, ".dashboard {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  margin: 15px 15px 0; }\n  .dashboard .flex-row {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row; }\n  .dashboard .form-group {\n    margin-bottom: 15px; }\n  .dashboard .toolbox {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n    .dashboard .toolbox .record-ops {\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1;\n      text-align: right; }\n    .dashboard .toolbox .play-ops {\n      margin-left: 15px; }\n  .dashboard .ant-table-pagination {\n    display: none; }\n  .dashboard .ant-table-header {\n    overflow: hidden !important;\n    margin-bottom: 0 !important;\n    padding-bottom: 0 !important; }\n    .dashboard .ant-table-header .ant-table-thead > tr > th {\n      padding: 13px 8px; }\n  .dashboard .ant-table-body .ant-table-thead > tr > th {\n    padding: 10px 8px; }\n  .dashboard .ant-table-tbody > tr > td {\n    padding: 8px 8px; }\n  .dashboard tr.selected-command > td {\n    background-color: #fdffd1 !important; }\n  .dashboard tr.error-command > td {\n    background-color: #f7c1c1 !important; }\n  .dashboard tr.running-command > td {\n    background-color: #d5d6f9 !important; }\n  .dashboard tr.done-command > td {\n    background-color: #d1ffd8 !important; }\n  .dashboard .ant-btn-group > .ant-btn-group {\n    float: none; }\n  .dashboard .ant-form-item {\n    margin-bottom: 15px; }\n  .dashboard .editor-wrapper {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-flex: 2;\n        -ms-flex: 2;\n            flex: 2; }\n  .dashboard .commands-view {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-flex: 2;\n        -ms-flex: 2;\n            flex: 2; }\n    .dashboard .commands-view .ant-tabs-bar {\n      margin-bottom: 0; }\n    .dashboard .commands-view .ant-tabs-content {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-orient: vertical;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: column;\n              flex-direction: column;\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1;\n      padding: 10px;\n      border: 1px solid #d9d9d9;\n      border-width: 0 1px 1px; }\n      .dashboard .commands-view .ant-tabs-content .ant-tabs-tabpane {\n        -webkit-box-flex: 1;\n            -ms-flex: 1;\n                flex: 1;\n        -ms-flex-negative: unset !important;\n            flex-shrink: unset !important;\n        position: relative; }\n      .dashboard .commands-view .ant-tabs-content .table-wrapper {\n        position: absolute;\n        top: 0;\n        bottom: 140px;\n        left: 0;\n        right: 0;\n        overflow-y: auto; }\n      .dashboard .commands-view .ant-tabs-content .fields-wrapper {\n        position: absolute;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        height: 130px; }\n      .dashboard .commands-view .ant-tabs-content .react-codemirror2 {\n        position: relative; }\n        .dashboard .commands-view .ant-tabs-content .react-codemirror2.has-error {\n          height: calc(100% - 70px); }\n        .dashboard .commands-view .ant-tabs-content .react-codemirror2.no-error {\n          height: calc(100% - 0px); }\n        .dashboard .commands-view .ant-tabs-content .react-codemirror2 .CodeMirror {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          left: 0;\n          right: 0;\n          height: auto;\n          font-size: 13px; }\n      .dashboard .commands-view .ant-tabs-content .ant-table-wrapper,\n      .dashboard .commands-view .ant-tabs-content .ant-spin-nested-loading,\n      .dashboard .commands-view .ant-tabs-content .ant-spin-container,\n      .dashboard .commands-view .ant-tabs-content .ant-table,\n      .dashboard .commands-view .ant-tabs-content .ant-table-content,\n      .dashboard .commands-view .ant-tabs-content .ant-table-scroll {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-orient: vertical;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: column;\n                flex-direction: column;\n        -webkit-box-flex: 1;\n            -ms-flex: 1;\n                flex: 1; }\n      .dashboard .commands-view .ant-tabs-content .ant-table-scroll {\n        overflow-y: auto; }\n    .dashboard .commands-view .command-row {\n      position: relative;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: row;\n              flex-direction: row;\n      padding-left: 5px;\n      border-bottom: 1px solid #e9e9e9;\n      line-height: 45px;\n      font-size: 13px; }\n      .dashboard .commands-view .command-row:hover {\n        background: #ecf6fd; }\n      .dashboard .commands-view .command-row.header-row, .dashboard .commands-view .command-row.footer-row {\n        background-color: #f7f7f7;\n        font-weight: bold; }\n      .dashboard .commands-view .command-row.footer-row {\n        display: block;\n        text-align: center;\n        cursor: pointer; }\n      .dashboard .commands-view .command-row.breakpoint-command::before {\n        content: \"\";\n        position: absolute;\n        top: 50%;\n        left: 0;\n        -webkit-transform: translateY(-50%);\n                transform: translateY(-50%);\n        width: 0;\n        height: 0;\n        border: 8px solid transparent;\n        border-left-color: green; }\n      .dashboard .commands-view .command-row.selected-command {\n        background-color: #fdffd1; }\n      .dashboard .commands-view .command-row.error-command {\n        background-color: #f7c1c1; }\n      .dashboard .commands-view .command-row.running-command {\n        background-color: #d5d6f9; }\n      .dashboard .commands-view .command-row.done-command {\n        background-color: #d1ffd8; }\n      .dashboard .commands-view .command-row.comment-command {\n        background-color: transparent;\n        color: #ccc;\n        font-style: italic; }\n        .dashboard .commands-view .command-row.comment-command.selected-command {\n          background-color: #fdffd1; }\n      .dashboard .commands-view .command-row .row-col {\n        padding: 0 8px; }\n        .dashboard .commands-view .command-row .row-col.command-col {\n          width: 130px;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis; }\n        .dashboard .commands-view .command-row .row-col.target-col {\n          width: 30%;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis; }\n        .dashboard .commands-view .command-row .row-col.value-col {\n          -webkit-box-flex: 1;\n              -ms-flex: 1;\n                  flex: 1;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis; }\n        .dashboard .commands-view .command-row .row-col.op-col {\n          width: 80px;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis; }\n  .dashboard .table-footer {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    line-height: 32px;\n    text-align: center;\n    font-weight: bold;\n    background: #f7f7f7;\n    cursor: pointer; }\n    .dashboard .table-footer:hover {\n      background: #e0e0e0; }\n  .dashboard .logs-screenshots {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    position: relative;\n    margin-top: 15px; }\n    .dashboard .logs-screenshots .resize-handler {\n      position: absolute;\n      top: -10px;\n      left: 0;\n      width: 100%;\n      height: 6px;\n      background: transparent;\n      cursor: row-resize; }\n      .dashboard .logs-screenshots .resize-handler:hover, .dashboard .logs-screenshots .resize-handler.focused {\n        height: 6px;\n        background: #ccc; }\n    .dashboard .logs-screenshots .ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab {\n      padding: 5px 12px 4px; }\n    .dashboard .logs-screenshots .ant-tabs {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-orient: vertical;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: column;\n              flex-direction: column;\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1; }\n    .dashboard .logs-screenshots .ant-tabs-bar {\n      margin-bottom: 0; }\n    .dashboard .logs-screenshots .ant-tabs-content {\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1;\n      overflow-y: auto;\n      min-height: 70px;\n      border: 1px solid #d9d9d9;\n      border-width: 0 1px 1px; }\n    .dashboard .logs-screenshots .ls-toolbox {\n      position: absolute;\n      right: 10px;\n      top: 0px; }\n    .dashboard .logs-screenshots .screenshot-content,\n    .dashboard .logs-screenshots .log-content {\n      padding: 10px 0; }\n    .dashboard .logs-screenshots .screenshot-content li {\n      padding: 0 20px 20px; }\n      .dashboard .logs-screenshots .screenshot-content li .timestamp {\n        display: block;\n        margin-bottom: 10px;\n        font-size: 14px; }\n      .dashboard .logs-screenshots .screenshot-content li .filename {\n        font-weight: bold; }\n      .dashboard .logs-screenshots .screenshot-content li a {\n        display: inline-block;\n        margin-left: 20px; }\n        .dashboard .logs-screenshots .screenshot-content li a img {\n          max-width: 250px;\n          border: 1px solid #ccc; }\n    .dashboard .logs-screenshots .log-content {\n      list-style: none;\n      margin: 0;\n      padding: 0 10px;\n      height: calc(100% - 38px);\n      overflow-y: auto; }\n      .dashboard .logs-screenshots .log-content li {\n        padding: 5px 0;\n        font-size: 12px;\n        border-bottom: 1px solid #f3f3f3; }\n        .dashboard .logs-screenshots .log-content li:after {\n          content: \"\";\n          display: table;\n          clear: both; }\n        .dashboard .logs-screenshots .log-content li.error {\n          color: red;\n          font-weight: bold; }\n        .dashboard .logs-screenshots .log-content li.warning {\n          color: orange; }\n        .dashboard .logs-screenshots .log-content li .log-type {\n          float: left;\n          margin-right: 10px; }\n        .dashboard .logs-screenshots .log-content li .log-detail {\n          white-space: pre-wrap; }\n    .dashboard .logs-screenshots .csv-content {\n      padding: 10px; }\n      .dashboard .logs-screenshots .csv-content button {\n        margin-right: 5px; }\n    .dashboard .logs-screenshots .variable-content {\n      padding: 10px; }\n      .dashboard .logs-screenshots .variable-content .variable-options {\n        margin-bottom: 10px; }\n      .dashboard .logs-screenshots .variable-content .ant-checkbox-wrapper {\n        margin-left: 0 !important;\n        margin-right: 10px; }\n      .dashboard .logs-screenshots .variable-content .read-only {\n        color: #ccc; }\n    .dashboard .logs-screenshots .vision-content {\n      padding: 10px; }\n      .dashboard .logs-screenshots .vision-content .vision-top-actions {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-pack: justify;\n            -ms-flex-pack: justify;\n                justify-content: space-between;\n        -webkit-box-align: center;\n            -ms-flex-align: center;\n                align-items: center;\n        margin-bottom: 15px; }\n        .dashboard .logs-screenshots .vision-content .vision-top-actions .main-actions {\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n          .dashboard .logs-screenshots .vision-content .vision-top-actions .main-actions > * {\n            margin-right: 15px; }\n            .dashboard .logs-screenshots .vision-content .vision-top-actions .main-actions > *:last-child {\n              margin-right: 0; }\n          .dashboard .logs-screenshots .vision-content .vision-top-actions .main-actions .load-image-button {\n            padding: 0;\n            display: -webkit-box;\n            display: -ms-flexbox;\n            display: flex;\n            -webkit-box-orient: vertical;\n            -webkit-box-direction: normal;\n                -ms-flex-direction: column;\n                    flex-direction: column;\n            -webkit-box-pack: center;\n                -ms-flex-pack: center;\n                    justify-content: center; }\n            .dashboard .logs-screenshots .vision-content .vision-top-actions .main-actions .load-image-button label {\n              padding: 0 15px;\n              cursor: pointer; }\n        .dashboard .logs-screenshots .vision-content .vision-top-actions .more-info {\n          font-size: 14px; }\n      .dashboard .logs-screenshots .vision-content .vision-image {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -webkit-box-pack: center;\n            -ms-flex-pack: center;\n                justify-content: center;\n        -ms-flex-line-pack: center;\n            align-content: center;\n        overflow: hidden;\n        width: 100px;\n        height: 100px;\n        border: 1px solid #ccc; }\n        .dashboard .logs-screenshots .vision-content .vision-image img {\n          max-height: 100px; }\n      .dashboard .logs-screenshots .vision-content .vision-name {\n        font-size: 14px;\n        word-break: break-all; }\n      .dashboard .logs-screenshots .vision-content .vision-actions button {\n        margin-right: 5px; }\n        .dashboard .logs-screenshots .vision-content .vision-actions button:last-child {\n          margin-right: 0; }\n  .dashboard .online-help {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -webkit-box-pack: justify;\n        -ms-flex-pack: justify;\n            justify-content: space-between;\n    margin-top: 15px;\n    padding: 0 10px;\n    height: 25px;\n    line-height: 25px;\n    font-size: 14px;\n    text-align: right; }\n  .dashboard #context_menu {\n    z-index: 10; }\n    .dashboard #context_menu .ant-menu {\n      border: '1px solid #ccc';\n      border-radius: 4px;\n      -webkit-box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);\n              box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2); }\n      .dashboard #context_menu .ant-menu .ant-menu-item {\n        height: 36px;\n        line-height: 36px; }\n        .dashboard #context_menu .ant-menu .ant-menu-item:hover {\n          background: #ecf6fd; }\n\n.source-error {\n  color: red;\n  white-space: pre-wrap;\n  font-size: 12px; }\n\n.ant-dropdown .ant-dropdown-menu {\n  max-height: none; }\n\n@media (max-width: 768px) {\n  .rename-modal,\n  .duplicate-modal,\n  .save-modal,\n  .play-loop-modal {\n    width: 400px !important;\n    margin: 0 auto; } }\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/containers/sidebar/sidebar.scss":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/postcss-loader/lib!./node_modules/sass-loader/lib/loader.js!./src/containers/sidebar/sidebar.scss ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(undefined);
// imports


// module
exports.push([module.i, ".sidebar {\n  position: relative;\n  -webkit-box-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  min-width: 260px;\n  height: 100%;\n  border-right: 2px solid #ccc; }\n  .sidebar .sidebar-inner {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    overflow-y: auto; }\n  .sidebar .sidebar-title {\n    padding: 0 10px;\n    height: 44px;\n    line-height: 44px;\n    border-bottom: 2px solid #ccc;\n    background-color: #f9f9f9;\n    font-size: 16px; }\n  .sidebar .sidebar-test-cases {\n    font-size: 14px;\n    line-height: 18px; }\n    .sidebar .sidebar-test-cases li {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: row;\n              flex-direction: row;\n      -webkit-box-pack: justify;\n          -ms-flex-pack: justify;\n              justify-content: space-between;\n      -webkit-box-align: center;\n          -ms-flex-align: center;\n              align-items: center;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      padding: 5px 10px;\n      cursor: pointer;\n      -webkit-user-select: none;\n         -moz-user-select: none;\n          -ms-user-select: none;\n              user-select: none; }\n      .sidebar .sidebar-test-cases li.success {\n        background: #cfefdf; }\n      .sidebar .sidebar-test-cases li.error {\n        background: #fcdbd9; }\n      .sidebar .sidebar-test-cases li.selected {\n        background: #fdffd1; }\n        .sidebar .sidebar-test-cases li.selected.error, .sidebar .sidebar-test-cases li.selected.success {\n          padding: 1px 10px 1px 6px; }\n        .sidebar .sidebar-test-cases li.selected.error {\n          border: 4px solid #fcdbd9; }\n        .sidebar .sidebar-test-cases li.selected.success {\n          border: 4px solid #cfefdf; }\n      .sidebar .sidebar-test-cases li.disabled {\n        -webkit-filter: grayscale(60%);\n                filter: grayscale(60%);\n        cursor: not-allowed; }\n      .sidebar .sidebar-test-cases li .test-case-name {\n        -webkit-box-flex: 1;\n            -ms-flex: 1;\n                flex: 1; }\n      .sidebar .sidebar-test-cases li .more-button {\n        display: none; }\n      .sidebar .sidebar-test-cases li:hover .more-button {\n        display: block; }\n  .sidebar .test-case-actions,\n  .sidebar .test-suite-actions {\n    padding: 0 10px 10px; }\n    .sidebar .test-case-actions button,\n    .sidebar .test-suite-actions button {\n      margin-right: 10px; }\n  .sidebar .test-case-actions {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n  .sidebar .sidebar-test-suites .test-suite-item {\n    padding: 0 0 10px 0;\n    margin-bottom: 5px; }\n    .sidebar .sidebar-test-suites .test-suite-item.playing {\n      background: #fdffd1; }\n    .sidebar .sidebar-test-suites .test-suite-item.fold {\n      margin-bottom: 0;\n      padding-bottom: 0; }\n      .sidebar .sidebar-test-suites .test-suite-item.fold .test-suite-more-actions,\n      .sidebar .sidebar-test-suites .test-suite-item.fold .test-suite-cases {\n        display: none; }\n    .sidebar .sidebar-test-suites .test-suite-item .test-suite-row {\n      padding: 5px 10px;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-pack: justify;\n          -ms-flex-pack: justify;\n              justify-content: space-between;\n      -webkit-box-align: center;\n          -ms-flex-align: center;\n              align-items: center;\n      cursor: pointer; }\n      .sidebar .sidebar-test-suites .test-suite-item .test-suite-row .test-suite-title {\n        -webkit-box-flex: 1;\n            -ms-flex: 1;\n                flex: 1;\n        margin-left: 10px; }\n      .sidebar .sidebar-test-suites .test-suite-item .test-suite-row .more-button {\n        display: none; }\n      .sidebar .sidebar-test-suites .test-suite-item .test-suite-row:hover .more-button {\n        display: block; }\n    .sidebar .sidebar-test-suites .test-suite-item .test-suite-cases {\n      padding: 3px 5px; }\n      .sidebar .sidebar-test-suites .test-suite-item .test-suite-cases li {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-pack: justify;\n            -ms-flex-pack: justify;\n                justify-content: space-between;\n        -webkit-box-align: center;\n            -ms-flex-align: center;\n                align-items: center;\n        padding: 3px 5px 3px 20px;\n        margin-bottom: 5px; }\n        .sidebar .sidebar-test-suites .test-suite-item .test-suite-cases li.done-tc {\n          background: #cfefdf; }\n        .sidebar .sidebar-test-suites .test-suite-item .test-suite-cases li.error-tc {\n          background: #fcdbd9; }\n        .sidebar .sidebar-test-suites .test-suite-item .test-suite-cases li.current-tc {\n          background: #d5d6f9; }\n    .sidebar .sidebar-test-suites .test-suite-item .test-suite-more-actions {\n      padding-left: 27px; }\n  .sidebar .ant-tabs {\n    min-height: 100%; }\n  .sidebar .ant-tabs-bar {\n    border-bottom: 2px solid #ccc; }\n  .sidebar .ant-tabs-nav-container-scrolling {\n    padding-left: 0;\n    padding-right: 0; }\n  .sidebar .ant-tabs-tab-prev.ant-tabs-tab-arrow-show,\n  .sidebar .ant-tabs-tab-next.ant-tabs-tab-arrow-show {\n    display: none; }\n  .sidebar .ant-tabs-nav {\n    height: 44px; }\n  .sidebar .ant-tabs-nav .ant-tabs-tab {\n    margin-right: 0;\n    line-height: 27px; }\n  .sidebar .ant-tabs-nav-scroll {\n    text-align: center; }\n  .sidebar .resize-handler {\n    position: absolute;\n    right: -2px;\n    top: 0;\n    bottom: 0;\n    width: 2px;\n    background: #ccc;\n    cursor: col-resize; }\n    .sidebar .resize-handler:hover, .sidebar .resize-handler.focused {\n      right: -4px;\n      width: 6px;\n      background: #aaa; }\n\n.with-sidebar .sidebar {\n  display: block; }\n\n.context-menu {\n  z-index: 10; }\n  .context-menu .ant-menu {\n    border: '1px solid #ccc';\n    border-radius: 4px;\n    -webkit-box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);\n            box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2); }\n    .context-menu .ant-menu .ant-menu-item {\n      height: 36px;\n      line-height: 36px; }\n      .context-menu .ant-menu .ant-menu-item:hover {\n        background: #ecf6fd; }\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./src/actions/action_types.js":
/*!*************************************!*\
  !*** ./src/actions/action_types.js ***!
  \*************************************/
/*! exports provided: make3, type3, types */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "make3", function() { return make3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "type3", function() { return type3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "types", function() { return types; });
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Generate three action types, used in actions that return promises
var make3 = function make3(name) {
  return [name + '_REQUEST', name + '_SUCCESS', name + '_FAIL'];
};

var type3 = function type3(name) {
  return make3(name).map(function (key) {
    return types[key];
  });
};

var promiseTypes = ['START_RECORDING', 'STOP_RECORDING', 'START_INSPECTING', 'STOP_INSPECTING'].reduce(function (prev, cur) {
  make3(cur).forEach(function (key) {
    prev[key] = key;
  });

  return prev;
}, {});

var simpleTypes = ['SET_ROUTE', 'SET_EDITOR_ACTIVE_TAB', 'DONE_INSPECTING', 'UPDATE_BASE_URL', 'APPEND_COMMAND', 'DUPLICATE_COMMAND', 'INSERT_COMMAND', 'UPDATE_COMMAND', 'REMOVE_COMMAND', 'SELECT_COMMAND', 'CUT_COMMAND', 'COPY_COMMAND', 'PASTE_COMMAND', 'NORMALIZE_COMMANDS', 'UPDATE_SELECTED_COMMAND', 'SAVE_EDITING_AS_EXISTED', 'SAVE_EDITING_AS_NEW', 'SET_TEST_CASES', 'SET_EDITING', 'EDIT_TEST_CASE', 'EDIT_NEW_TEST_CASE', 'ADD_TEST_CASES', 'RENAME_TEST_CASE', 'REMOVE_TEST_CASE', 'UPDATE_TEST_CASE_STATUS', 'SET_PLAYER_STATE', 'SET_PLAYER_MODE', 'PLAYER_ADD_ERROR_COMMAND_INDEX', 'SET_TEST_SUITES', 'UPDATE_TEST_SUITE', 'ADD_BREAKPOINT', 'REMOVE_BREAKPOINT', 'ADD_LOGS', 'CLEAR_LOGS', 'ADD_SCREENSHOT', 'CLEAR_SCREENSHOTS', 'ADD_VISION', 'CLEAR_VISIONS', 'START_PLAYING', 'STOP_PLAYING', 'SET_CSV_LIST', 'SET_SCREENSHOT_LIST', 'SET_VISION_LIST', 'SET_VARIABLE_LIST', 'SET_SOURCE_ERROR', 'SET_SOURCE_CURRENT', 'UPDATE_CONFIG', 'UPDATE_UI'].reduce(function (prev, cur) {
  prev[cur] = cur;
  return prev;
}, {});

var types = _extends({}, simpleTypes, promiseTypes);

/***/ }),

/***/ "./src/actions/index.js":
/*!******************************!*\
  !*** ./src/actions/index.js ***!
  \******************************/
/*! exports provided: setRoute, startRecording, stopRecording, startInspecting, stopInspecting, startPlaying, stopPlaying, doneInspecting, appendCommand, duplicateCommand, insertCommand, updateCommand, removeCommand, selectCommand, cutCommand, copyCommand, pasteCommand, normalizeCommands, updateSelectedCommand, setSourceError, setSourceCurrent, saveSourceCodeToEditing, saveEditingAsExisted, saveEditingAsNew, setTestCases, setEditing, editTestCase, editNewTestCase, upsertTestCase, addTestCases, renameTestCase, removeTestCase, removeCurrentTestCase, duplicateTestCase, setPlayerState, setTimeoutStatus, addPlayerErrorCommandIndex, addLog, clearLogs, addScreenshot, clearScreenshots, addVision, clearVisions, updateConfig, updateTestCasePlayStatus, playerPlay, listCSV, listScreenshots, listVisions, setTestSuites, addTestSuite, addTestSuites, updateTestSuite, removeTestSuite, setPlayerMode, runBackup, setVariables, updateUI, addBreakpoint, removeBreakpoint, setEditorActiveTab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setRoute", function() { return setRoute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startRecording", function() { return startRecording; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stopRecording", function() { return stopRecording; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startInspecting", function() { return startInspecting; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stopInspecting", function() { return stopInspecting; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startPlaying", function() { return startPlaying; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stopPlaying", function() { return stopPlaying; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doneInspecting", function() { return doneInspecting; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendCommand", function() { return appendCommand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "duplicateCommand", function() { return duplicateCommand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertCommand", function() { return insertCommand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateCommand", function() { return updateCommand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeCommand", function() { return removeCommand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "selectCommand", function() { return selectCommand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cutCommand", function() { return cutCommand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyCommand", function() { return copyCommand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pasteCommand", function() { return pasteCommand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeCommands", function() { return normalizeCommands; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateSelectedCommand", function() { return updateSelectedCommand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSourceError", function() { return setSourceError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSourceCurrent", function() { return setSourceCurrent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveSourceCodeToEditing", function() { return saveSourceCodeToEditing; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveEditingAsExisted", function() { return saveEditingAsExisted; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveEditingAsNew", function() { return saveEditingAsNew; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTestCases", function() { return setTestCases; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setEditing", function() { return setEditing; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editTestCase", function() { return editTestCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editNewTestCase", function() { return editNewTestCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "upsertTestCase", function() { return upsertTestCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addTestCases", function() { return addTestCases; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renameTestCase", function() { return renameTestCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeTestCase", function() { return removeTestCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeCurrentTestCase", function() { return removeCurrentTestCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "duplicateTestCase", function() { return duplicateTestCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setPlayerState", function() { return setPlayerState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTimeoutStatus", function() { return setTimeoutStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addPlayerErrorCommandIndex", function() { return addPlayerErrorCommandIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addLog", function() { return addLog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearLogs", function() { return clearLogs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addScreenshot", function() { return addScreenshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearScreenshots", function() { return clearScreenshots; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addVision", function() { return addVision; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearVisions", function() { return clearVisions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateConfig", function() { return updateConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateTestCasePlayStatus", function() { return updateTestCasePlayStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "playerPlay", function() { return playerPlay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listCSV", function() { return listCSV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listScreenshots", function() { return listScreenshots; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listVisions", function() { return listVisions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTestSuites", function() { return setTestSuites; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addTestSuite", function() { return addTestSuite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addTestSuites", function() { return addTestSuites; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateTestSuite", function() { return updateTestSuite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeTestSuite", function() { return removeTestSuite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setPlayerMode", function() { return setPlayerMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "runBackup", function() { return runBackup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setVariables", function() { return setVariables; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateUI", function() { return updateUI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addBreakpoint", function() { return addBreakpoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeBreakpoint", function() { return removeBreakpoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setEditorActiveTab", function() { return setEditorActiveTab; });
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _action_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./action_types */ "./src/actions/action_types.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/utils */ "./src/common/utils.js");
/* harmony import */ var _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/ipc/ipc_cs */ "./src/common/ipc/ipc_cs.js");
/* harmony import */ var _common_storage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/storage */ "./src/common/storage/index.js");
/* harmony import */ var _models_test_case_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/test_case_model */ "./src/models/test_case_model.js");
/* harmony import */ var _models_test_suite_model__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/test_suite_model */ "./src/models/test_suite_model.js");
/* harmony import */ var _common_player__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/player */ "./src/common/player.js");
/* harmony import */ var _common_csv_man__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/csv_man */ "./src/common/csv_man.js");
/* harmony import */ var _common_screenshot_man__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/screenshot_man */ "./src/common/screenshot_man.js");
/* harmony import */ var _common_vision_man__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/vision_man */ "./src/common/vision_man.js");
/* harmony import */ var _common_backup__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common/backup */ "./src/common/backup.js");
/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../common/log */ "./src/common/log.js");
/* harmony import */ var _common_convert_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../common/convert_utils */ "./src/common/convert_utils.js");


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };















var recordedCount = 0;

var saveEditing = function saveEditing(_ref) {
  var dispatch = _ref.dispatch,
      getState = _ref.getState;

  var _getState = getState(),
      editor = _getState.editor;

  var editing = editor.editing;


  _common_storage__WEBPACK_IMPORTED_MODULE_4__["default"].set('editing', editing);
};

var saveConfig = function () {
  var lastSize = {};

  return function (_ref2) {
    var dispatch = _ref2.dispatch,
        getState = _ref2.getState;

    var _getState2 = getState(),
        config = _getState2.config;

    config = config || {};

    var savedSize = config.size ? config.size[config.showSidebar ? 'with_sidebar' : 'standard'] : null;
    var finalSize = savedSize || (config.showSidebar ? {
      width: 850,
      height: 775
    } : {
      width: 520,
      height: 775
    });

    if (finalSize.width !== lastSize.width || finalSize.height !== lastSize.height) {
      _common_storage__WEBPACK_IMPORTED_MODULE_4__["default"].get('config').then(function (oldConfig) {
        if (oldConfig.showSidebar === config.showSidebar) return;

        if (finalSize.width !== window.outerWidth || finalSize.height !== window.outerHeight) {
          _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_3__["default"].ask('PANEL_RESIZE_WINDOW', { size: finalSize });
        }
      });
    }

    _common_storage__WEBPACK_IMPORTED_MODULE_4__["default"].set('config', config);
    lastSize = finalSize;
  };
}();

function setRoute(data) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_ROUTE,
    data: data
  };
}

function startRecording() {
  recordedCount = 0;

  return {
    types: Object(_action_types__WEBPACK_IMPORTED_MODULE_1__["type3"])('START_RECORDING'),
    promise: function promise() {
      setTimeout(function () {
        _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_3__["default"].ask('PANEL_TRY_TO_RECORD_OPEN_COMMAND');
      });

      return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_3__["default"].ask('PANEL_START_RECORDING', {});
    }
  };
}

function stopRecording() {
  return {
    types: Object(_action_types__WEBPACK_IMPORTED_MODULE_1__["type3"])('STOP_RECORDING'),
    promise: function promise() {
      return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_3__["default"].ask('PANEL_STOP_RECORDING', {});
    }
  };
}

function startInspecting() {
  return {
    types: Object(_action_types__WEBPACK_IMPORTED_MODULE_1__["type3"])('START_INSPECTING'),
    promise: function promise() {
      return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_3__["default"].ask('PANEL_START_INSPECTING', {});
    }
  };
}

function stopInspecting() {
  return {
    types: Object(_action_types__WEBPACK_IMPORTED_MODULE_1__["type3"])('STOP_INSPECTING'),
    promise: function promise() {
      return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_3__["default"].ask('PANEL_STOP_INSPECTING', {});
    }
  };
}

function startPlaying() {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].START_PLAYING,
    data: null
  };
}

function stopPlaying() {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].STOP_PLAYING,
    data: null
  };
}

function doneInspecting() {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].DONE_INSPECTING,
    data: {}
  };
}

function appendCommand(cmdObj) {
  var fromRecord = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (fromRecord) {
    recordedCount += 1;
    // Note: show in badge the recorded count
    _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_3__["default"].ask('PANEL_UPDATE_BADGE', {
      type: 'record',
      text: '' + recordedCount
    });
  }

  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].APPEND_COMMAND,
    data: { command: cmdObj },
    post: saveEditing
  };
}

function duplicateCommand(index) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].DUPLICATE_COMMAND,
    data: { index: index },
    post: saveEditing
  };
}

function insertCommand(cmdObj, index) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].INSERT_COMMAND,
    data: {
      index: index,
      command: cmdObj
    },
    post: saveEditing
  };
}

function updateCommand(cmdObj, index) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].UPDATE_COMMAND,
    data: {
      command: cmdObj,
      index: index
    },
    post: saveEditing
  };
}

function removeCommand(index) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].REMOVE_COMMAND,
    data: { index: index },
    post: saveEditing
  };
}

function selectCommand(index, forceClick) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SELECT_COMMAND,
    data: { index: index, forceClick: forceClick },
    post: saveEditing
  };
}

function cutCommand(index) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].CUT_COMMAND,
    data: { indices: [index] },
    post: saveEditing
  };
}

function copyCommand(index) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].COPY_COMMAND,
    data: { indices: [index] }
  };
}

function pasteCommand(index) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].PASTE_COMMAND,
    data: { index: index },
    post: saveEditing
  };
}

function normalizeCommands() {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].NORMALIZE_COMMANDS,
    data: {},
    post: saveEditing
  };
}

function updateSelectedCommand(obj) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].UPDATE_SELECTED_COMMAND,
    data: obj,
    post: saveEditing
  };
}

function setSourceError(error) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_SOURCE_ERROR,
    data: error
  };
}

function setSourceCurrent(str) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_SOURCE_CURRENT,
    data: str
  };
}

function saveSourceCodeToEditing(str) {
  return function (dispatch, getState) {
    var _getState$editor = getState().editor,
        editing = _getState$editor.editing,
        editingSource = _getState$editor.editingSource;

    if (editingSource.pure === editing.current) return;

    Object(_common_log__WEBPACK_IMPORTED_MODULE_12__["default"])('ACTION, saveSourceCodeToEditing', str);

    try {
      var obj = Object(_common_convert_utils__WEBPACK_IMPORTED_MODULE_13__["fromJSONString"])(str, 'untitled');

      dispatch(setEditing(_extends({}, obj.data, {
        meta: editing.meta
      })));

      dispatch(setSourceError(null));
    } catch (e) {
      antd_lib_message__WEBPACK_IMPORTED_MODULE_0___default.a.error('There are errors in the source');
      dispatch(setSourceError(e.message));
    }
  };
}

// In the form of redux-thunnk, it saves current editing test case to local storage
function saveEditingAsExisted() {
  return function (dispatch, getState) {
    var state = getState();
    var src = state.editor.editing.meta.src;
    var tc = state.editor.testCases.find(function (tc) {
      return tc.id === src.id;
    });
    var data = Object(_common_utils__WEBPACK_IMPORTED_MODULE_2__["pick"])(['commands'], state.editor.editing);

    // Make sure, only 'cmd', 'value', 'target' are saved in storage
    data.commands = data.commands.map(_models_test_case_model__WEBPACK_IMPORTED_MODULE_5__["normalizeCommand"]);

    return _models_test_case_model__WEBPACK_IMPORTED_MODULE_5__["default"].update(src.id, _extends({}, tc, { data: data })).then(function () {
      dispatch({
        type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SAVE_EDITING_AS_EXISTED,
        data: null,
        post: saveEditing
      });
    });
  };
}

// In the form of redux-thunnk, it saves the current editing test case as a new named test case
function saveEditingAsNew(name) {
  return function (dispatch, getState) {
    var state = getState();
    var data = Object(_common_utils__WEBPACK_IMPORTED_MODULE_2__["pick"])(['commands'], state.editor.editing);
    var sameName = state.editor.testCases.find(function (tc) {
      return tc.name === name;
    });

    if (sameName) {
      return Promise.reject(new Error('The macro name already exists!'));
    }

    return _models_test_case_model__WEBPACK_IMPORTED_MODULE_5__["default"].insert({ name: name, data: data }).then(function (id) {
      dispatch({
        type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SAVE_EDITING_AS_NEW,
        data: {
          id: id,
          name: name
        },
        post: saveEditing
      });
    });
  };
}

function setTestCases(tcs) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_TEST_CASES,
    data: tcs,
    post: function post(_ref3) {
      var dispatch = _ref3.dispatch,
          getState = _ref3.getState;

      var state = getState();
      var shouldSelectDefault = state.editor.testCases.length > 0 && !state.editor.editing.meta.src && state.editor.editing.commands.length === 0;

      if (shouldSelectDefault) {
        dispatch(editTestCase(state.editor.testCases[0].id));
      }
    }
  };
}

function setEditing(editing) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_EDITING,
    data: editing
  };
}

function editTestCase(id) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].EDIT_TEST_CASE,
    data: id,
    post: saveEditing
  };
}

function editNewTestCase() {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].EDIT_NEW_TEST_CASE,
    data: null,
    post: saveEditing
  };
}

function upsertTestCase(tc) {
  return function (dispatch, getState) {
    var state = getState();
    var testCases = state.editor.testCases;
    var existedTc = testCases.find(function (item) {
      return item.name === tc.name;
    });

    Object(_common_log__WEBPACK_IMPORTED_MODULE_12__["default"])('upsertTestCase', tc);
    if (!existedTc) return _models_test_case_model__WEBPACK_IMPORTED_MODULE_5__["default"].insert(tc);
    return _models_test_case_model__WEBPACK_IMPORTED_MODULE_5__["default"].update(existedTc.id, tc);
  };
}

function addTestCases(tcs) {
  return function (dispatch, getState) {
    var state = getState();
    var testCases = state.editor.testCases;
    var validTcs = tcs.filter(function (tc) {
      return !testCases.find(function (tcc) {
        return tcc.name === tc.name;
      });
    });
    var failTcs = tcs.filter(function (tc) {
      return testCases.find(function (tcc) {
        return tcc.name === tc.name;
      });
    });

    var passCount = validTcs.length;
    var failCount = tcs.length - passCount;

    if (passCount === 0) {
      return Promise.resolve({ passCount: passCount, failCount: failCount, failTcs: failTcs });
    }

    return _models_test_case_model__WEBPACK_IMPORTED_MODULE_5__["default"].bulkInsert(validTcs).then(function () {
      return { passCount: passCount, failCount: failCount, failTcs: failTcs };
    });
  };
}

function renameTestCase(name, tcId) {
  return function (dispatch, getState) {
    var state = getState();
    var editingId = state.editor.editing.meta.src.id;
    var tc = state.editor.testCases.find(function (tc) {
      return tc.id === tcId;
    });
    var sameName = state.editor.testCases.find(function (tc) {
      return tc.name === name;
    });

    if (!tc) {
      return Promise.reject(new Error('No macro found with id \'' + tcId + '\'!'));
    }

    if (sameName) {
      return Promise.reject(new Error('The macro name already exists!'));
    }

    return _models_test_case_model__WEBPACK_IMPORTED_MODULE_5__["default"].update(tcId, _extends({}, tc, { name: name })).then(function () {
      if (editingId === tcId) {
        dispatch({
          type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].RENAME_TEST_CASE,
          data: name,
          post: saveEditing
        });
      }
    });
  };
}

function removeTestCase(tcId) {
  return function (dispatch, getState) {
    var state = getState();
    var curId = state.editor.editing.meta.src.id;
    var tss = state.editor.testSuites.filter(function (ts) {
      return ts.cases.find(function (m) {
        return m.testCaseId === tcId;
      });
    });

    if (tss.length > 0) {
      return Promise.reject(new Error('Can\'t delete this macro for now, it\'s currently used in following test suites: ' + tss.map(function (item) {
        return item.name;
      })));
    }

    return _models_test_case_model__WEBPACK_IMPORTED_MODULE_5__["default"].remove(tcId).then(function () {
      dispatch({
        type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].REMOVE_TEST_CASE,
        data: {
          isCurrent: curId === tcId
        },
        post: saveEditing
      });
    }).catch(function (e) {
      return _common_log__WEBPACK_IMPORTED_MODULE_12__["default"].error(e.stack);
    });
  };
}

function removeCurrentTestCase() {
  return function (dispatch, getState) {
    var state = getState();
    var id = state.editor.editing.meta.src.id;

    return removeTestCase(id)(dispatch, getState);
  };
}

// Note: duplicate current editing and save to another
function duplicateTestCase(newTestCaseName, tcId) {
  return function (dispatch, getState) {
    var state = getState();
    var tc = state.editor.testCases.find(function (tc) {
      return tc.id === tcId;
    });
    var sameName = state.editor.testCases.find(function (tc) {
      return tc.name === newTestCaseName;
    });

    if (!tc) {
      return Promise.reject(new Error('No macro found with id \'' + tcId + '\'!'));
    }

    if (sameName) {
      return Promise.reject(new Error('The macro name already exists!'));
    }

    return _models_test_case_model__WEBPACK_IMPORTED_MODULE_5__["default"].insert(_extends({}, tc, { name: newTestCaseName }));
  };
}

function setPlayerState(obj) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_PLAYER_STATE,
    data: obj
  };
}

function setTimeoutStatus(args) {
  return function (dispatch) {
    dispatch(setPlayerState({
      timeoutStatus: args
    }));

    // Note: show in badge the timeout left
    _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_3__["default"].ask('PANEL_UPDATE_BADGE', {
      type: 'play',
      text: (args.total - args.past) / 1000 + 's'
    });
  };
}

function addPlayerErrorCommandIndex(index) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].PLAYER_ADD_ERROR_COMMAND_INDEX,
    data: index
  };
}

function addLog(type, text) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].ADD_LOGS,
    data: [{
      type: type,
      text: text,
      options: options,
      id: Object(_common_utils__WEBPACK_IMPORTED_MODULE_2__["uid"])(),
      createTime: new Date()
    }]
  };
}

function clearLogs() {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].CLEAR_LOGS,
    data: null
  };
}

function addScreenshot(screenshot) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].ADD_SCREENSHOT,
    data: _extends({}, screenshot, {
      createTime: new Date()
    })
  };
}

function clearScreenshots() {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].CLEAR_SCREENSHOTS,
    data: null,
    post: function post() {
      return Object(_common_screenshot_man__WEBPACK_IMPORTED_MODULE_9__["getScreenshotMan"])().clear();
    }
  };
}

function addVision(vision) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].ADD_VISION,
    data: _extends({}, vision, {
      createTime: new Date()
    })
  };
}

function clearVisions() {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].CLEAR_VISIONS,
    data: null,
    post: function post() {
      return Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_10__["getVisionMan"])().clear();
    }
  };
}

function updateConfig(data) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].UPDATE_CONFIG,
    data: data,
    post: saveConfig
  };
}

function updateTestCasePlayStatus(id, status) {
  return function (dispatch, getState) {
    var state = getState();
    var tc = state.editor.testCases.find(function (tc) {
      return tc.id === id;
    });

    return _models_test_case_model__WEBPACK_IMPORTED_MODULE_5__["default"].update(id, _extends({}, tc, { status: status })).then(function () {
      dispatch({
        type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].UPDATE_TEST_CASE_STATUS,
        data: { id: id, status: status }
      });
    });
  };
}

function playerPlay(options) {
  return function (dispatch, getState) {
    var state = getState();
    var config = state.config;

    var cfg = Object(_common_utils__WEBPACK_IMPORTED_MODULE_2__["pick"])(['playHighlightElements', 'playScrollElementsIntoView'], config);
    var macroName = state.editor.editing.meta.src ? state.editor.editing.meta.src.name : 'Untitled';
    var scope = _extends({
      '!MACRONAME': macroName,
      '!TIMEOUT_PAGELOAD': parseInt(config.timeoutPageLoad, 10),
      '!TIMEOUT_WAIT': parseInt(config.timeoutElement, 10),
      '!TIMEOUT_MACRO': parseInt(config.timeoutMacro, 10),
      '!TIMEOUT_DOWNLOAD': parseInt(config.timeoutDownload, 10),
      '!REPLAYSPEED': {
        '0': 'FAST',
        '0.3': 'MEDIUM',
        '2': 'SLOW'
      }[options.postDelay / 1000] || 'MEDIUM'
    }, options.overrideScope || {});
    var breakpoints = state.player.breakpointIndices || [];

    var opts = Object(_common_utils__WEBPACK_IMPORTED_MODULE_2__["compose"])(Object(_common_utils__WEBPACK_IMPORTED_MODULE_2__["on"])('resources'), _common_utils__WEBPACK_IMPORTED_MODULE_2__["map"], Object(_common_utils__WEBPACK_IMPORTED_MODULE_2__["on"])('extra'))(function () {
      var extra = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _extends({}, extra, cfg, options.commandExtra || {});
    })(options);

    Object(_common_player__WEBPACK_IMPORTED_MODULE_7__["getPlayer"])().play(_extends({
      breakpoints: breakpoints
    }, opts, {
      public: _extends({}, opts.public || {}, {
        scope: scope
      })
    }));
  };
}

function listCSV() {
  return function (dispatch, getState) {
    var man = Object(_common_csv_man__WEBPACK_IMPORTED_MODULE_8__["getCSVMan"])();

    man.list().then(function (list) {
      return Promise.all(list.map(function (item) {
        return man.getLink(item.fileName).then(function (url) {
          return {
            url: url,
            name: item.fileName,
            size: item.size,
            createTime: new Date(item.lastModified)
          };
        });
      }));
    }).then(function (list) {
      dispatch({
        type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_CSV_LIST,
        data: list
      });
    });
  };
}

function listScreenshots() {
  return function (dispatch, getState) {
    var man = Object(_common_screenshot_man__WEBPACK_IMPORTED_MODULE_9__["getScreenshotMan"])();

    man.list().then(function (list) {
      list.reverse();

      return Promise.all(list.map(function (item) {
        return man.getLink(item.fileName).then(function (url) {
          return {
            url: url,
            name: item.fileName,
            createTime: new Date(item.lastModified)
          };
        });
      }));
    }).then(function (list) {
      dispatch({
        type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_SCREENSHOT_LIST,
        data: list
      });
    });
  };
}

function listVisions() {
  return function (dispatch, getState) {
    var man = Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_10__["getVisionMan"])();

    man.list().then(function (list) {
      list.reverse();

      return Promise.all(list.map(function (item) {
        return man.getLink(item.fileName).then(function (url) {
          return {
            url: url,
            name: item.fileName,
            createTime: new Date(item.lastModified)
          };
        });
      }));
    }).then(function (list) {
      dispatch({
        type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_VISION_LIST,
        data: list
      });
    });
  };
}

function setTestSuites(tss) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_TEST_SUITES,
    data: tss
  };
}

function addTestSuite(ts) {
  return function (dispatch, getState) {
    return _models_test_suite_model__WEBPACK_IMPORTED_MODULE_6__["default"].insert(ts);
  };
}

function addTestSuites(tss) {
  return function (dispatch, getState) {
    var state = getState();
    // const testCases = state.editor.testCases
    var validTss = tss;
    // const failTcs   = tcs.filter(tc => testCases.find(tcc => tcc.name === tc.name))

    var passCount = validTss.length;
    var failCount = tss.length - passCount;

    if (passCount === 0) {
      return Promise.resolve({ passCount: passCount, failCount: failCount, failTss: [] });
    }

    return _models_test_suite_model__WEBPACK_IMPORTED_MODULE_6__["default"].bulkInsert(validTss).then(function () {
      return { passCount: passCount, failCount: failCount, failTss: [] };
    });
  };
}

function updateTestSuite(id, data) {
  return function (dispatch, getState) {
    var state = getState();
    var ts = state.editor.testSuites.find(function (ts) {
      return ts.id === id;
    });

    var revised = _extends({}, ts, typeof data === 'function' ? data(ts) : data);

    dispatch({
      type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].UPDATE_TEST_SUITE,
      data: {
        id: id,
        updated: revised
      }
    });

    return _models_test_suite_model__WEBPACK_IMPORTED_MODULE_6__["default"].update(id, revised);
  };
}

function removeTestSuite(id) {
  return function (dispatch, getState) {
    return _models_test_suite_model__WEBPACK_IMPORTED_MODULE_6__["default"].remove(id);
  };
}

function setPlayerMode(mode) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_PLAYER_STATE,
    data: { mode: mode }
  };
}

function runBackup() {
  return function (dispatch, getState) {
    var _getState3 = getState(),
        config = _getState3.config,
        editor = _getState3.editor;

    var autoBackupTestCases = config.autoBackupTestCases,
        autoBackupTestSuites = config.autoBackupTestSuites,
        autoBackupScreenshots = config.autoBackupScreenshots,
        autoBackupCSVFiles = config.autoBackupCSVFiles,
        autoBackupVisionImages = config.autoBackupVisionImages;


    return Promise.all([Object(_common_csv_man__WEBPACK_IMPORTED_MODULE_8__["getCSVMan"])().list(), Object(_common_screenshot_man__WEBPACK_IMPORTED_MODULE_9__["getScreenshotMan"])().list(), Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_10__["getVisionMan"])().list()]).then(function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 3),
          csvs = _ref5[0],
          screenshots = _ref5[1],
          visions = _ref5[2];

      return Object(_common_backup__WEBPACK_IMPORTED_MODULE_11__["default"])({
        csvs: csvs,
        screenshots: screenshots,
        visions: visions,
        testCases: editor.testCases,
        testSuites: editor.testSuites,
        backup: {
          testCase: autoBackupTestCases,
          testSuite: autoBackupTestSuites,
          screenshot: autoBackupScreenshots,
          csv: autoBackupCSVFiles,
          vision: autoBackupVisionImages
        }
      });
    }).catch(function (e) {
      _common_log__WEBPACK_IMPORTED_MODULE_12__["default"].error(e.stack);
    });
  };
}

function setVariables(variables) {
  variables.sort(function (a, b) {
    if (a.key < b.key) return -1;
    if (a.key > b.key) return 1;
    return 0;
  });

  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_VARIABLE_LIST,
    data: variables
  };
}

function updateUI(data) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].UPDATE_UI,
    data: data
  };
}

function addBreakpoint(commandIndex) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].ADD_BREAKPOINT,
    data: commandIndex
  };
}

function removeBreakpoint(commandIndex) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].REMOVE_BREAKPOINT,
    data: commandIndex
  };
}

function setEditorActiveTab(tab) {
  return {
    type: _action_types__WEBPACK_IMPORTED_MODULE_1__["types"].SET_EDITOR_ACTIVE_TAB,
    data: tab
  };
}

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/es/index.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actions */ "./src/actions/index.js");
/* harmony import */ var _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./common/ipc/ipc_cs */ "./src/common/ipc/ipc_cs.js");
/* harmony import */ var _components_header__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/header */ "./src/components/header.js");
/* harmony import */ var _containers_sidebar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./containers/sidebar */ "./src/containers/sidebar/index.js");
/* harmony import */ var _containers_dashboard__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./containers/dashboard */ "./src/containers/dashboard/index.js");
/* harmony import */ var antd_dist_antd_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! antd/dist/antd.css */ "./node_modules/antd/dist/antd.css");
/* harmony import */ var antd_dist_antd_css__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(antd_dist_antd_css__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _app_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./app.scss */ "./src/app.scss");
/* harmony import */ var _app_scss__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_app_scss__WEBPACK_IMPORTED_MODULE_11__);



var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }















var App = function (_Component) {
  _inherits(App, _Component);

  function App() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, App);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = App.__proto__ || Object.getPrototypeOf(App)).call.apply(_ref, [this].concat(args))), _this), _this.hideBackupAlert = function () {
      _this.props.updateConfig({
        lastBackupActionTime: new Date() * 1
      });
      _this.$app.classList.remove('with-alert');
    }, _this.onClickBackup = function () {
      _this.props.runBackup();
      _this.hideBackupAlert();
    }, _this.onClickNoBackup = function () {
      _this.hideBackupAlert();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(App, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var run = function run() {
        _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_TIME_FOR_BACKUP', {}).then(function (isTime) {
          if (!isTime) return;
          _this2.$app.classList.add('with-alert');
        });
      };

      // Note: check whether it's time for backup every 5 minutes
      this.timer = setInterval(run, 5 * 60000);
      run();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearInterval(this.timer);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
        'div',
        { className: 'app with-sidebar', ref: function ref(el) {
            _this3.$app = el;
          } },
        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
          'div',
          { className: 'backup-alert' },
          react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
            'span',
            null,
            'Do you want to run the automated backup?'
          ),
          react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
            'span',
            { className: 'backup-actions' },
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
              { type: 'primary', onClick: this.onClickBackup },
              'Yes'
            ),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
              { onClick: this.onClickNoBackup },
              'No'
            )
          )
        ),
        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
          'div',
          { className: 'app-inner' },
          react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_containers_sidebar__WEBPACK_IMPORTED_MODULE_8__["default"], null),
          react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
            'section',
            { className: 'content' },
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_components_header__WEBPACK_IMPORTED_MODULE_7__["default"], null),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_containers_dashboard__WEBPACK_IMPORTED_MODULE_9__["default"], null)
          )
        )
      );
    }
  }]);

  return App;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_2__["connect"])(function (state) {
  return {};
}, function (dispatch) {
  return Object(redux__WEBPACK_IMPORTED_MODULE_3__["bindActionCreators"])(_extends({}, _actions__WEBPACK_IMPORTED_MODULE_5__), dispatch);
})(App));

/***/ }),

/***/ "./src/app.scss":
/*!**********************!*\
  !*** ./src/app.scss ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(/*! !../node_modules/css-loader!../node_modules/postcss-loader/lib!../node_modules/sass-loader/lib/loader.js!./app.scss */ "./node_modules/css-loader/index.js!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/app.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(/*! ../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {}

/***/ }),

/***/ "./src/common/backup.js":
/*!******************************!*\
  !*** ./src/common/backup.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return backup; });
/* harmony import */ var _lib_file_saver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/file_saver */ "./src/common/lib/file_saver.js");
/* harmony import */ var _lib_file_saver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_file_saver__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jszip */ "./node_modules/jszip/lib/index.js");
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./src/common/utils.js");
/* harmony import */ var _convert_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./convert_utils */ "./src/common/convert_utils.js");
/* harmony import */ var _convert_suite_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./convert_suite_utils */ "./src/common/convert_suite_utils.js");
/* harmony import */ var _screenshot_man__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./screenshot_man */ "./src/common/screenshot_man.js");
/* harmony import */ var _csv_man__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./csv_man */ "./src/common/csv_man.js");
/* harmony import */ var _vision_man__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vision_man */ "./src/common/vision_man.js");









function backup(_ref) {
  var backup = _ref.backup,
      testCases = _ref.testCases,
      testSuites = _ref.testSuites,
      screenshots = _ref.screenshots,
      csvs = _ref.csvs,
      visions = _ref.visions;

  var zip = new jszip__WEBPACK_IMPORTED_MODULE_1___default.a();
  var ps = [];

  if (backup.testCase && testCases && testCases.length) {
    var folder = zip.folder('macros');

    testCases.forEach(function (tc) {
      folder.file(tc.name + '.json', Object(_convert_utils__WEBPACK_IMPORTED_MODULE_3__["toJSONString"])({
        name: tc.name,
        commands: tc.data.commands
      }));
    });
  }

  if (backup.testSuite && testCases && testSuites && testSuites.length) {
    var _folder = zip.folder('testsuites');
    var genName = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["nameFactory"])();

    testSuites.forEach(function (ts) {
      var name = genName(ts.name);
      _folder.file(name + '.json', Object(_convert_suite_utils__WEBPACK_IMPORTED_MODULE_4__["stringifyTestSuite"])(ts, testCases));
    });
  }

  if (backup.screenshot && screenshots && screenshots.length) {
    var _folder2 = zip.folder('screenshots');
    var man = Object(_screenshot_man__WEBPACK_IMPORTED_MODULE_5__["getScreenshotMan"])();

    screenshots.forEach(function (ss) {
      ps.push(man.read(ss.fileName).then(function (buffer) {
        _folder2.file(ss.fileName, buffer, { binary: true });
      }));
    });
  }

  if (backup.vision && visions && visions.length) {
    var _folder3 = zip.folder('images');
    var _man = Object(_vision_man__WEBPACK_IMPORTED_MODULE_7__["getVisionMan"])();

    visions.forEach(function (vision) {
      ps.push(_man.read(vision.fileName).then(function (buffer) {
        _folder3.file(vision.fileName, buffer, { binary: true });
      }));
    });
  }

  if (backup.csv && csvs && csvs.length) {
    var _folder4 = zip.folder('datasources');
    var _man2 = Object(_csv_man__WEBPACK_IMPORTED_MODULE_6__["getCSVMan"])();

    csvs.forEach(function (csv) {
      ps.push(_man2.read(csv.fileName).then(function (text) {
        return _folder4.file(csv.fileName, text);
      }));
    });
  }

  return Promise.all(ps).then(function () {
    zip.generateAsync({ type: 'blob' }).then(function (blob) {
      _lib_file_saver__WEBPACK_IMPORTED_MODULE_0___default.a.saveAs(blob, 'kantu_backup.zip');
    });
  });
}

/***/ }),

/***/ "./src/common/bookmark.js":
/*!********************************!*\
  !*** ./src/common/bookmark.js ***!
  \********************************/
/*! exports provided: createBookmarkOnBar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBookmarkOnBar", function() { return createBookmarkOnBar; });
/* harmony import */ var _web_extension__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./web_extension */ "./src/common/web_extension.js");
/* harmony import */ var _web_extension__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_web_extension__WEBPACK_IMPORTED_MODULE_0__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



// Note: Get ids of bookmarks bar and other bookmarks
var pBookmarksBarId = function getIdsOfOtherBookmarksAndBookmarksBar() {
  var bookmarksBarIndex = _web_extension__WEBPACK_IMPORTED_MODULE_0___default.a.isFirefox() ? 1 : 0;

  return _web_extension__WEBPACK_IMPORTED_MODULE_0___default.a.bookmarks.getTree().then(function (nodes) {
    var bookmarksBar = nodes[0].children[bookmarksBarIndex];
    return bookmarksBar.id;
  });
}();

var createBookmarkOnBar = function createBookmarkOnBar(bookmark) {
  return pBookmarksBarId.then(function (barId) {
    return _web_extension__WEBPACK_IMPORTED_MODULE_0___default.a.bookmarks.create(_extends({}, bookmark, { parentId: barId }));
  });
};

/***/ }),

/***/ "./src/common/command_runner.js":
/*!**************************************!*\
  !*** ./src/common/command_runner.js ***!
  \**************************************/
/*! exports provided: getElementByLocator, getFrameByLocator, run */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElementByLocator", function() { return getElementByLocator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFrameByLocator", function() { return getFrameByLocator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "run", function() { return run; });
/* harmony import */ var kd_glob_to_regexp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! kd-glob-to-regexp */ "./node_modules/kd-glob-to-regexp/index.js");
/* harmony import */ var kd_glob_to_regexp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(kd_glob_to_regexp__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/common/utils.js");
/* harmony import */ var _dom_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom_utils */ "./src/common/dom_utils.js");
/* harmony import */ var _ipc_cs_postmessage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ipc/cs_postmessage */ "./src/common/ipc/cs_postmessage.js");
/* harmony import */ var _web_extension__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./web_extension */ "./src/common/web_extension.js");
/* harmony import */ var _web_extension__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_web_extension__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./log */ "./src/common/log.js");
/* harmony import */ var _drag_mock__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./drag_mock */ "./src/common/drag_mock/index.js");
/* harmony import */ var _drag_mock__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_drag_mock__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _send_keys__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./send_keys */ "./src/common/send_keys.js");
/* harmony import */ var _encrypt__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./encrypt */ "./src/common/encrypt.js");
/* harmony import */ var _constant__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./constant */ "./src/common/constant.js");
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }












var HIGHLIGHT_TIMEOUT = 500;

var globMatch = function globMatch(pattern, text) {
  return kd_glob_to_regexp__WEBPACK_IMPORTED_MODULE_0___default()(pattern).test(text);
};

var getElementByXPath = function getElementByXPath(xpath) {
  var snapshot = document.evaluate(xpath, document.body, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);

  return snapshot.snapshotItem(0);
};

// reference: https://github.com/timoxley/offset
var viewportOffset = function viewportOffset(el) {
  var box = el.getBoundingClientRect();

  // Note: simply use bouddingClientRect since elementFromPoint uses
  // the same top/left relative to the current viewport/window instead of whole document
  return {
    top: box.top,
    left: box.left
  };
};

var untilInjected = function untilInjected() {
  var api = {
    eval: function _eval(code) {
      Object(_log__WEBPACK_IMPORTED_MODULE_5__["default"])('sending INJECT_RUN_EVAL');
      return Object(_ipc_cs_postmessage__WEBPACK_IMPORTED_MODULE_3__["postMessage"])(window, window, { cmd: 'INJECT_RUN_EVAL', args: { code: code } }, '*', 5000).then(function (data) {
        Object(_log__WEBPACK_IMPORTED_MODULE_5__["default"])('eval result', data);
        return data.result;
      });
    }
  };
  var injected = !!document.body.getAttribute('data-injected');
  if (injected) return Promise.resolve(api);

  Object(_utils__WEBPACK_IMPORTED_MODULE_1__["insertScript"])(_web_extension__WEBPACK_IMPORTED_MODULE_4___default.a.extension.getURL('inject.js'));

  return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["retry"])(function () {
    Object(_log__WEBPACK_IMPORTED_MODULE_5__["default"])('sending INJECT_READY');
    return Object(_ipc_cs_postmessage__WEBPACK_IMPORTED_MODULE_3__["postMessage"])(window, window, { cmd: 'INJECT_READY' }, '*', 500);
  }, {
    shouldRetry: function shouldRetry() {
      return true;
    },
    timeout: 5000,
    retryInterval: 0
  })().then(function () {
    return api;
  }).catch(function (e) {
    Object(_log__WEBPACK_IMPORTED_MODULE_5__["default"])(e.stack);
    throw new Error('fail to inject');
  });
};

var isElementFromPoint = function isElementFromPoint(str) {
  return (/^#elementfrompoint/i.test(str.trim())
  );
};

var pageCoordinateByElementFromPoint = function pageCoordinateByElementFromPoint(str) {
  var reg = /^#elementfrompoint\s*\((\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\)/i;
  var m = str.trim().match(reg);

  if (!m) {
    throw new Error('Invalid \'#elementfrompoint\' expression');
  }

  var pageX = parseFloat(m[1]);
  var pageY = parseFloat(m[2]);

  if (pageX <= 0 || pageY <= 0) {
    throw new Error('\'#elementfrompoint\' only accepts positive numbers');
  }

  return [pageX, pageY];
};

var viewportCoordinateByElementFromPoint = function viewportCoordinateByElementFromPoint(str) {
  var _pageCoordinateByElem = pageCoordinateByElementFromPoint(str),
      _pageCoordinateByElem2 = _slicedToArray(_pageCoordinateByElem, 2),
      pageX = _pageCoordinateByElem2[0],
      pageY = _pageCoordinateByElem2[1];

  var offset = 0;
  var x = offset + pageX - Object(_dom_utils__WEBPACK_IMPORTED_MODULE_2__["scrollLeft"])(document);
  var y = offset + pageY - Object(_dom_utils__WEBPACK_IMPORTED_MODULE_2__["scrollTop"])(document);

  return [x, y];
};

var elementByElementFromPoint = function elementByElementFromPoint(str) {
  var _viewportCoordinateBy = viewportCoordinateByElementFromPoint(str),
      _viewportCoordinateBy2 = _slicedToArray(_viewportCoordinateBy, 2),
      x = _viewportCoordinateBy2[0],
      y = _viewportCoordinateBy2[1];

  var el = document.elementFromPoint(x, y);

  return el;
};

// Note: parse the locator and return the element found accordingly
var getElementByLocator = function getElementByLocator(str, shouldWaitForVisible) {
  var i = str.indexOf('=');
  var el = void 0;

  if (/^\//.test(str)) {
    el = getElementByXPath(str);
  } else if (/^#elementfrompoint/i.test(str.trim())) {
    el = elementByElementFromPoint(str);
    Object(_log__WEBPACK_IMPORTED_MODULE_5__["default"])('elementfrompoint', el);
  } else if (i === -1) {
    throw new Error('getElementByLocator: invalid locator, ' + str);
  } else {
    var method = str.substr(0, i);
    var value = str.substr(i + 1);

    switch (method && method.toLowerCase()) {
      case 'id':
        el = document.getElementById(value);
        break;

      case 'name':
        el = document.getElementsByName(value)[0];
        break;

      case 'identifier':
        el = document.getElementById(value) || document.getElementsByName(value)[0];
        break;

      case 'link':
        {
          var links = [].slice.call(document.getElementsByTagName('a'));
          // Note: there are cases such as 'link=exact:xxx'
          var realVal = value.replace(/^exact:/, '');
          // Note: position support. eg. link=Download@POS=3
          var match = realVal.match(/^(.+)@POS=(\d+)$/i);
          var index = 0;

          if (match) {
            realVal = match[1];
            index = parseInt(match[2]) - 1;
          }

          // Note: use textContent instead of innerText to avoid influence from text-transform
          var candidates = links.filter(function (a) {
            return globMatch(realVal, Object(_dom_utils__WEBPACK_IMPORTED_MODULE_2__["domText"])(a));
          });
          el = candidates[index];
          break;
        }

      case 'css':
        el = document.querySelector(value);
        break;

      case 'xpath':
        el = getElementByXPath(value);
        break;

      default:
        throw new Error('getElementByLocator: unsupported locator method, ' + method);
    }
  }

  if (!el) {
    throw new Error('getElementByLocator: fail to find element based on the locator, ' + str);
  }

  if (shouldWaitForVisible && !Object(_dom_utils__WEBPACK_IMPORTED_MODULE_2__["isVisible"])(el)) {
    throw new Error('getElementByLocator: element is found but not visible yet');
  }

  return el;
};

var getFrameByLocator = function getFrameByLocator(str, helpers) {
  var i = str.indexOf('=');

  // Note: try to parse format of 'index=0' and 'relative=top/parent'
  if (i !== -1) {
    var method = str.substr(0, i);
    var value = str.substr(i + 1);

    switch (method) {
      case 'index':
        {
          var index = parseInt(value, 10);
          var frames = window.frames;
          var frame = frames[index];

          if (!frame) {
            throw new Error('Frame index out of range (index ' + value + ' in ' + frames.length + ' frames');
          }

          return { frame: frame };
        }

      case 'relative':
        {
          if (value === 'top') {
            return { frame: window.top };
          }

          if (value === 'parent') {
            return { frame: window.parent };
          }

          throw new Error('Unsupported relative type, ' + value);
        }
    }
  }

  // Note: consider it as name, if no '=' found and it has no xpath pattern
  if (i === -1 && !/^\//.test(str)) {
    str = 'name=' + str;
  }

  var frameDom = getElementByLocator(str);

  if (!frameDom || !frameDom.contentWindow) {
    throw new Error('The element found based on ' + str + ' is NOT a frame/iframe');
  }

  // Note: for those iframe/frame that don't have src, they won't load content_script.js
  // so we have to inject the script by ourselves
  if (!frameDom.getAttribute('src')) {
    var file = _web_extension__WEBPACK_IMPORTED_MODULE_4___default.a.extension.getURL('content_script.js');
    var doc = frameDom.contentDocument;
    var s = doc.constructor.prototype.createElement.call(doc, 'script');

    s.setAttribute('type', 'text/javascript');
    s.setAttribute('src', file);

    doc.documentElement.appendChild(s);
    s.parentNode.removeChild(s);

    helpers.hackAlertConfirmPrompt(doc);
  }

  // Note: can't return the contentWindow directly, because Promise 'resolve' will
  // try to test its '.then' method, which will cause a cross origin violation
  // so, we wrap it in an object
  return { frame: frameDom.contentWindow };
};

var run = function run(command, csIpc, helpers) {
  var cmd = command.cmd,
      target = command.target,
      value = command.value,
      extra = command.extra;

  var wrap = function wrap(fn, genOptions) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var options = genOptions.apply(undefined, args);

      return new Promise(function (resolve, reject) {
        try {
          resolve(fn.apply(undefined, args));
        } catch (e) {
          reject(new Error(options.errorMsg(e.message)));
        }
      });
    };
  };
  var getElementByLocatorWithLogForEfp = function getElementByLocatorWithLogForEfp(locator, shouldWaitForVisible) {
    var el = getElementByLocator(locator, shouldWaitForVisible);

    if (isElementFromPoint(locator)) {
      var elXpath = 'unkown';

      try {
        elXpath = helpers.xpath(el);
      } catch (e) {}

      var msg = locator + ' => xpath "' + elXpath + '"';

      console.log(msg, el);
      csIpc.ask('CS_ADD_LOG', { info: msg });
    }

    return el;
  };
  var __getFrameByLocator = wrap(getFrameByLocator, function (locator) {
    return {
      errorMsg: function errorMsg(msg) {
        return 'timeout reached when looking for frame \'' + locator + '\'';
      }
    };
  });
  var __getElementByLocator = wrap(getElementByLocatorWithLogForEfp, function (locator) {
    return {
      errorMsg: function errorMsg(msg) {
        if (/element is found but not visible yet/.test(msg)) {
          return 'element is found but not visible yet for \'' + locator + '\' (use !WaitForVisible = false to disable waiting for visible)';
        }

        return 'timeout reached when looking for element \'' + locator + '\'';
      }
    };
  });

  switch (cmd) {
    case 'open':
      if (window.noCommandsYet) {
        return true;
      }

      return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["until"])('document.body', function () {
        return {
          pass: !!document.body,
          result: document.body
        };
      }).then(function (body) {
        window.location.href = command.target;
        return true;
      });

    case 'refresh':
      setTimeout(function () {
        return window.location.reload();
      }, 0);
      return true;

    case 'mouseOver':
      {
        return __getElementByLocator(target).then(function (el) {
          try {
            if (extra.playScrollElementsIntoView) el.scrollIntoView({ block: 'center' });
            if (extra.playHighlightElements) helpers.highlightDom(el, HIGHLIGHT_TIMEOUT);
          } catch (e) {
            _log__WEBPACK_IMPORTED_MODULE_5__["default"].error('error in scroll and highlight', e.message);
          }

          el.dispatchEvent(new MouseEvent('mouseover', { bubbles: true }));
          return true;
        });
      }

    case 'dragAndDropToObject':
      {
        return Promise.all([__getElementByLocator(target), __getElementByLocator(value)]).then(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              $src = _ref2[0],
              $tgt = _ref2[1];

          _drag_mock__WEBPACK_IMPORTED_MODULE_6___default.a.triggerDragEvent($src, $tgt);
          return true;
        });
      }

    case 'waitForVisible':
      {
        return __getElementByLocator(target, true).then(function () {
          return true;
        });
      }

    case 'clickAt':
      {
        var getIframeOffset = function getIframeOffset() {
          if (window === window.top) {
            return Promise.resolve({ x: 0, y: 0 });
          }

          return Object(_ipc_cs_postmessage__WEBPACK_IMPORTED_MODULE_3__["postMessage"])(window.parent, window, {
            action: 'SOURCE_PAGE_OFFSET',
            data: {}
          });
        };
        var isEfp = isElementFromPoint(target);
        var pTarget = function () {
          if (!isEfp) return Promise.resolve(target);
          return getIframeOffset().then(function (iframeOffset) {
            Object(_log__WEBPACK_IMPORTED_MODULE_5__["default"])('iframeOffset', iframeOffset);

            var _viewportCoordinateBy3 = viewportCoordinateByElementFromPoint(target),
                _viewportCoordinateBy4 = _slicedToArray(_viewportCoordinateBy3, 2),
                x = _viewportCoordinateBy4[0],
                y = _viewportCoordinateBy4[1];

            return '#elementfrompoint (' + (x - iframeOffset.x) + ', ' + (y - iframeOffset.y) + ')';
          });
        }();

        return pTarget.then(function (target) {
          return __getElementByLocator(target, extra.waitForVisible).then(function (el) {
            if (!/^\d+\s*,\s*\d+$/.test(value) && !isElementFromPoint(target)) {
              throw new Error('invalid offset for clickAt: ' + value);
            }

            var scrollAndHighlight = function scrollAndHighlight() {
              try {
                if (extra.playScrollElementsIntoView) el.scrollIntoView({ block: 'center' });
                if (extra.playHighlightElements) helpers.highlightDom(el, HIGHLIGHT_TIMEOUT);
              } catch (e) {
                _log__WEBPACK_IMPORTED_MODULE_5__["default"].error('error in scroll and highlight');
              }
            };

            var _ref3 = function () {
              if (isEfp) {
                return viewportCoordinateByElementFromPoint(target);
              } else {
                var _value$split$map = value.split(',').map(function (str) {
                  return parseInt(str.trim(), 10);
                }),
                    _value$split$map2 = _slicedToArray(_value$split$map, 2),
                    x = _value$split$map2[0],
                    y = _value$split$map2[1];

                var _viewportOffset = viewportOffset(el),
                    top = _viewportOffset.top,
                    left = _viewportOffset.left;

                return [left + x, top + y];
              }
            }(),
                _ref4 = _slicedToArray(_ref3, 2),
                origClientX = _ref4[0],
                origClientY = _ref4[1];

            var lastScrollX = window.scrollX;
            var lastScrollY = window.scrollY;

            if (!isEfp) scrollAndHighlight();

            var clientX = origClientX + (lastScrollX - window.scrollX);
            var clientY = origClientY + (lastScrollY - window.scrollY);

            Object(_log__WEBPACK_IMPORTED_MODULE_5__["default"])('clickAt clientX/clientY', clientX, clientY);['mousedown', 'mouseup', 'click'].forEach(function (eventType) {
              el.dispatchEvent(new MouseEvent(eventType, {
                view: window,
                bubbles: true,
                cancelable: true,
                clientX: clientX,
                clientY: clientY
              }));
            });

            // Note: delay scroll and highlight for efp,
            // otherwise that scroll could mess up the whole coodirnate calculation
            if (isEfp) scrollAndHighlight();

            return true;
          });
        });
      }

    case 'click':
    case 'clickAndWait':
      {
        return __getElementByLocator(target, extra.waitForVisible).then(function (el) {
          try {
            if (extra.playScrollElementsIntoView) el.scrollIntoView({ block: 'center' });
            if (extra.playHighlightElements) helpers.highlightDom(el, HIGHLIGHT_TIMEOUT);
          } catch (e) {
            _log__WEBPACK_IMPORTED_MODULE_5__["default"].error('error in scroll and highlight');
          }

          el.click();
          return true;
        });
      }

    case 'select':
    case 'selectAndWait':
      {
        return __getElementByLocator(target, extra.waitForVisible).then(function (el) {
          var options = [].slice.call(el.getElementsByTagName('option'));
          var i = value.indexOf('=');
          var optionType = value.substring(0, i);
          var optionValue = value.substring(i + 1);

          var option = function () {
            switch (optionType) {
              case 'label':
                return options.find(function (op) {
                  return globMatch(optionValue, Object(_dom_utils__WEBPACK_IMPORTED_MODULE_2__["domText"])(op).trim());
                });

              case 'index':
                return options.find(function (_, index) {
                  return index === parseInt(optionValue);
                });

              case 'id':
                return options.find(function (op, index) {
                  return op.id === optionValue;
                });

              case 'value':
                return options.find(function (op) {
                  return op.value === optionValue;
                });

              default:
                throw new Error('Option type "' + optionType + '" not supported');
            }
          }();

          if (!option) {
            throw new Error('cannot find option with \'' + value + '\'');
          }

          if (extra.playScrollElementsIntoView) el.scrollIntoView({ block: 'center' });
          if (extra.playHighlightElements) helpers.highlightDom(el, HIGHLIGHT_TIMEOUT);

          el.value = option.value;
          el.dispatchEvent(new Event('change'));

          return true;
        });
      }

    case 'type':
      {
        return __getElementByLocator(target, extra.waitForVisible).then(function (el) {
          var tag = el.tagName.toLowerCase();

          if (tag !== 'input' && tag !== 'textarea') {
            throw new Error('run command: element found is neither input nor textarea');
          }

          if (extra.playScrollElementsIntoView) el.scrollIntoView({ block: 'center' });
          if (extra.playHighlightElements) helpers.highlightDom(el, HIGHLIGHT_TIMEOUT);

          // Note: need the help of chrome.debugger to set file path to file input
          if (el.type && el.type.toLowerCase() === 'file') {
            if (_web_extension__WEBPACK_IMPORTED_MODULE_4___default.a.isFirefox()) {
              throw new Error('Setting file path fo file inputs is not supported by Firefox extension api yet');
            }

            return csIpc.ask('CS_SET_FILE_INPUT_FILES', {
              files: value.split(';'),
              selector: Object(_dom_utils__WEBPACK_IMPORTED_MODULE_2__["cssSelector"])(el)
            });
          }

          return Object(_encrypt__WEBPACK_IMPORTED_MODULE_8__["decryptIfNeeded"])(value, el).then(function (realValue) {
            el.value = '';
            Object(_send_keys__WEBPACK_IMPORTED_MODULE_7__["default"])(el, realValue, true);

            el.value = realValue;
            el.dispatchEvent(new Event('change'));
            return true;
          });
        }).catch(function (e) {
          if (/This input element accepts a filename/i.test(e.message)) {
            throw new Error('Sorry, upload can not be automated Chrome (API limitation).');
          }

          throw e;
        });
      }

    case 'editContent':
      {
        return __getElementByLocator(target, extra.waitForVisible).then(function (el) {
          if (el.contentEditable !== 'true') {
            throw new Error('Target is not contenteditable');
          }

          if (extra.playScrollElementsIntoView) el.scrollIntoView({ block: 'center' });
          if (extra.playHighlightElements) helpers.highlightDom(el, HIGHLIGHT_TIMEOUT);

          el.innerHTML = value;
          return true;
        });
      }

    case 'selectFrame':
      {
        return __getFrameByLocator(target, helpers).then(function (frameWindow) {
          if (!frameWindow) {
            throw new Error('Invalid frame/iframe');
          }

          return frameWindow;
        });
      }

    case 'verifyText':
      {
        return __getElementByLocator(target).then(function (el) {
          var text = Object(_dom_utils__WEBPACK_IMPORTED_MODULE_2__["domText"])(el);

          if (!globMatch(value, text)) {
            return {
              log: {
                error: 'text not matched, \n\texpected: "' + value + '", \n\tactual: "' + text + '"'
              }
            };
          }

          return true;
        });
      }

    case 'verifyTitle':
      {
        if (!globMatch(target, document.title)) {
          return {
            log: {
              error: 'title not matched, \n\texpected: "' + target + '", \n\tactual: "' + document.title + '"'
            }
          };
        }

        return true;
      }

    case 'verifyElementPresent':
      {
        var _ref5 = extra || {},
            timeoutElement = _ref5.timeoutElement,
            retryInfo = _ref5.retryInfo;

        return __getElementByLocator(target).then(function () {
          return true;
        }, function (e) {
          var shotsLeft = timeoutElement * 1000 / retryInfo.retryInterval - retryInfo.retryCount;
          var isLastChance = shotsLeft <= 1;

          if (isLastChance) {
            return {
              log: {
                error: '\'' + target + '\' element not present'
              }
            };
          }

          throw e;
        });
      }

    case 'verifyChecked':
      {
        return __getElementByLocator(target).then(function (el) {
          var checked = !!el.checked;

          if (!checked) {
            return {
              log: {
                error: '\'' + target + '\' is not checked'
              }
            };
          }
        });
      }

    case 'verifyAttribute':
      {
        var index = target.lastIndexOf('@');

        if (index === -1) {
          throw new Error('invalid target for verifyAttribute - ' + target);
        }

        var locator = target.substr(0, index);
        var attrName = target.substr(index + 1);

        return __getElementByLocator(locator).then(function (el) {
          var attr = el.getAttribute(attrName);

          if (!globMatch(value, attr)) {
            return {
              log: {
                error: 'attribute not matched, \n\texpected: "' + value + '", \n\tactual: "' + attr + '"'
              }
            };
          }
        });
      }

    case 'verifyError':
      {
        if (extra.lastCommandOk) {
          return {
            log: {
              error: target
            }
          };
        }

        return true;
      }

    case 'assertText':
      {
        return __getElementByLocator(target).then(function (el) {
          var text = Object(_dom_utils__WEBPACK_IMPORTED_MODULE_2__["domText"])(el);

          if (!globMatch(value, text)) {
            throw new Error('text not matched, \n\texpected: "' + value + '", \n\tactual: "' + text + '"');
          }

          return true;
        });
      }

    case 'assertTitle':
      {
        if (!globMatch(target, document.title)) {
          throw new Error('title not matched, \n\texpected: "' + target + '", \n\tactual: "' + document.title + '"');
        }

        return true;
      }

    case 'assertElementPresent':
      {
        return __getElementByLocator(target).then(function () {
          return true;
        });
      }

    case 'assertChecked':
      {
        return __getElementByLocator(target).then(function (el) {
          var checked = !!el.checked;

          if (!checked) {
            throw new Error('\'' + target + '\' is not checked');
          }
        });
      }

    case 'assertAttribute':
      {
        var _index = target.lastIndexOf('@');

        if (_index === -1) {
          throw new Error('invalid target for assertAttribute - ' + target);
        }

        var _locator = target.substr(0, _index);
        var _attrName = target.substr(_index + 1);

        return __getElementByLocator(_locator).then(function (el) {
          var attr = el.getAttribute(_attrName);

          if (!globMatch(value, attr)) {
            throw new Error('attribute not matched, \n\texpected: "' + value + '", \n\tactual: "' + attr + '"');
          }
        });
      }

    case 'assertError':
      {
        if (extra.lastCommandOk) {
          throw new Error(target);
        }

        return true;
      }

    case 'assertAlert':
      {
        var msg = document.body.getAttribute('data-alert');

        if (!msg) {
          throw new Error('no alert found!');
        }

        if (!globMatch(target, msg)) {
          throw new Error('unmatched alert msg, \n\texpected: "' + target + '", \n\tactual: "' + msg + '"');
        }

        document.body.setAttribute('data-alert', '');
        return true;
      }

    case 'assertConfirmation':
      {
        var _msg = document.body.getAttribute('data-confirm');

        if (!_msg) {
          throw new Error('no confirm found!');
        }

        if (!globMatch(target, _msg)) {
          throw new Error('unmatched confirm msg, \n\texpected: "' + target + '", \n\tactual: "' + _msg + '"');
        }

        document.body.setAttribute('data-confirm', '');
        return true;
      }

    case 'assertPrompt':
      {
        var _msg2 = document.body.getAttribute('data-prompt');

        if (!_msg2) {
          throw new Error('no prompt found!');
        }

        if (!globMatch(target, _msg2)) {
          throw new Error('unmatched prompt msg, \n\texpected: "' + target + '", \n\tactual: "' + _msg2 + '"');
        }

        document.body.setAttribute('data-prompt', '');
        return true;
      }

    case 'answerOnNextPrompt':
      {
        document.body.setAttribute('data-prompt-answer', target);
        return true;
      }

    case 'waitForPageToLoad':
      return true;

    case 'storeTitle':
      {
        return {
          vars: _defineProperty({}, value, document.title)
        };
      }

    case 'storeText':
      {
        return __getElementByLocator(target).then(function (el) {
          return {
            vars: _defineProperty({}, value, Object(_dom_utils__WEBPACK_IMPORTED_MODULE_2__["domText"])(el))
          };
        });
      }

    case 'storeAttribute':
      {
        var _index2 = target.lastIndexOf('@');

        if (_index2 === -1) {
          throw new Error('invalid target for storeAttribute - ' + target);
        }

        var _locator2 = target.substr(0, _index2);
        var _attrName2 = target.substr(_index2 + 1);

        return __getElementByLocator(_locator2).then(function (el) {
          var attr = el.getAttribute(_attrName2);

          if (!attr) {
            throw new Error('missing attribute \'' + _attrName2 + '\'');
          }

          return {
            vars: _defineProperty({}, value, attr)
          };
        });
      }

    case 'storeEval':
      {
        return untilInjected().then(function (api) {
          return api.eval(target).then(function (result) {
            return {
              vars: _defineProperty({}, value, result)
            };
          }).catch(function (e) {
            throw new Error('Error in runEval code: ' + e.message);
          });
        });
      }

    case 'storeValue':
      {
        return __getElementByLocator(target).then(function (el) {
          var text = el.value || '';

          return {
            vars: _defineProperty({}, value, text)
          };
        });
      }

    case 'storeChecked':
      {
        return __getElementByLocator(target).then(function (el) {
          var checked = !!el.checked;

          return {
            vars: _defineProperty({}, value, checked)
          };
        });
      }

    case 'verifyValue':
      {
        return __getElementByLocator(target).then(function (el) {
          var text = el.value;

          if (!globMatch(value, text)) {
            return {
              log: {
                error: 'value not matched, \n\texpected: "' + value + '", \n\tactual: "' + text + '"'
              }
            };
          }

          return true;
        });
      }

    case 'assertValue':
      {
        return __getElementByLocator(target).then(function (el) {
          var text = el.value;

          if (!globMatch(value, text)) {
            throw new Error('value not matched, \n\texpected: "' + value + '", \n\tactual: "' + text + '"');
          }

          return true;
        });
      }

    case 'sendKeys':
      {
        return __getElementByLocator(target).then(function (el) {
          Object(_send_keys__WEBPACK_IMPORTED_MODULE_7__["default"])(el, value);
          return true;
        });
      }

    case 'selectWindow':
      {
        var p = target && target.toUpperCase() === 'TAB=CLOSEALLOTHER' ? csIpc.ask('CS_CLOSE_OTHER_TABS', {}) : csIpc.ask('CS_SELECT_WINDOW', { target: target, value: value });

        // Note: let `selectWindow` pass through cs and back to background,
        // to keep the flow more consistent with the other commands
        return p.then(function () {
          return true;
        });
      }

    case 'sourceSearch':
    case 'sourceExtract':
      {
        if (!target) {
          throw new Error('Must provide text / regular expression to search for');
        }

        if (!value) {
          throw new Error('Must specify a variable to save the result');
        }

        var getMatchAndCaptureIndex = function getMatchAndCaptureIndex(str) {
          var nonZeroIndex = function nonZeroIndex(n) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (n === undefined) return 0;
            return Math.max(0, parseInt(n, 10) + offset);
          };
          var m = /@\s*(\d+)(?:\s*,\s*(\d+))?\s*$/.exec(str);

          if (!m) {
            return {
              rest: str,
              matchIndex: 0,
              captureIndex: 0
            };
          }

          return {
            rest: str.substring(0, m.index),
            matchIndex: nonZeroIndex(m[1], -1),
            captureIndex: nonZeroIndex(m[2])
          };
        };

        // Note: get matchIndex captureIndex first, no matter it's for regexp or simple text

        var _getMatchAndCaptureIn = getMatchAndCaptureIndex(target),
            rest = _getMatchAndCaptureIn.rest,
            matchIndex = _getMatchAndCaptureIn.matchIndex,
            captureIndex = _getMatchAndCaptureIn.captureIndex;

        if (cmd === 'sourceSearch' && rest !== target) {
          throw new Error('The @ parameter is only supported in sourceExtract');
        }

        var regexp = function () {
          if (!/^regex(=|:)/i.test(rest)) return null;

          var raw = rest.replace(/^regex(=|:)/i, '');
          var regexpText = raw.replace(/^\/|\/g?$/g, '');

          return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["toRegExp"])(regexpText, { needEncode: false, flag: 'g' });
        }();
        var regexpForText = function () {
          if (regexp) return null;
          var raw = rest.replace(/^text(=|:)/i, '');

          if (cmd === 'sourceExtract' && !/\*/.test(raw)) {
            throw new Error('Missing * or REGEX in sourceExtract. Extracting a plain text doesn\'t make much sense');
          }

          return kd_glob_to_regexp__WEBPACK_IMPORTED_MODULE_0___default()(raw, { capture: true, flags: 'g' });
        }();
        var matches = function () {
          var html = document.documentElement.outerHTML;
          var reg = regexp || regexpForText;
          var result = [];
          var m = void 0;

          // eslint-disable-next-line no-cond-assign
          while (m = reg.exec(html)) {
            result.push(m);

            // Note: save some energy, if it's already enough to get what users want
            if (cmd === 'sourceExtract' && result.length >= matchIndex + 1) {
              break;
            }
          }

          return result;
        }();

        Object(_log__WEBPACK_IMPORTED_MODULE_5__["default"])('matches', matches, regexp, regexpForText);

        if (cmd === 'sourceSearch') {
          return {
            vars: _defineProperty({}, value, matches.length)
          };
        }

        if (cmd === 'sourceExtract') {
          var guard = function guard(str) {
            return str !== undefined ? str : '#nomatchfound';
          };

          return {
            vars: _defineProperty({}, value, guard((matches[matchIndex] || [])[captureIndex]))
          };
        }

        throw new Error('Impossible to reach here');
      }

    case 'visionLimitSearchArea':
    case 'storeImage':
      {
        var _run = function _run(locator, fileName) {
          return __getElementByLocator(locator).then(function (el) {
            if (!fileName || !fileName.length) {
              throw new Error('storeImage: \'value\' is required as image name');
            }

            var clientRect = el.getBoundingClientRect();
            var pSourceOffset = function () {
              if (window.top === window) {
                return Promise.resolve({ x: 0, y: 0 });
              }

              // Note: it's too complicated to take screenshot of element deep in iframe stack
              // if you have to scroll each level of iframe to get the full image of it.
              el.scrollIntoView();

              return Object(_ipc_cs_postmessage__WEBPACK_IMPORTED_MODULE_3__["postMessage"])(window.parent, window, {
                action: 'SOURCE_PAGE_OFFSET',
                data: {}
              });
            }();

            return pSourceOffset.then(function (sourceOffset) {
              var rect = {
                x: sourceOffset.x + clientRect.x + Object(_dom_utils__WEBPACK_IMPORTED_MODULE_2__["scrollLeft"])(document),
                y: sourceOffset.y + clientRect.y + Object(_dom_utils__WEBPACK_IMPORTED_MODULE_2__["scrollTop"])(document),
                width: clientRect.width,
                height: clientRect.height
              };

              return csIpc.ask('CS_STORE_SCREENSHOT_IN_SELECTION', {
                rect: rect,
                fileName: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["ensureExtName"])('.png', fileName),
                devicePixelRatio: window.devicePixelRatio
              }).then(function () {
                return {
                  vars: {
                    '!storedImageRect': rect
                  }
                };
              });
            });
          });
        };

        var _locator3 = void 0,
            fileName = void 0;

        if (cmd === 'storeImage') {
          _locator3 = target;
          fileName = value;
        } else if (cmd === 'visionLimitSearchArea') {
          _locator3 = target.trim().replace(/^element:/i, '').trim();
          fileName = _constant__WEBPACK_IMPORTED_MODULE_9__["LAST_SCREENSHOT_FILE_NAME"];
        }

        return _run(_locator3, fileName);
      }

    case 'captureScreenshot':
      {
        if (!target || !target.length) {
          throw new Error('captureScreenshot: \'target\' is required as file name');
        }

        return csIpc.ask('CS_CAPTURE_SCREENSHOT', { fileName: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["ensureExtName"])('.png', target) }).then(function (_ref6) {
          var fileName = _ref6.fileName,
              url = _ref6.url;
          return {
            screenshot: {
              url: url,
              name: fileName
            }
          };
        });
      }

    case 'captureEntirePageScreenshot':
      {
        if (!target || !target.length) {
          throw new Error('captureEntirePageScreenshot: \'target\' is required as file name');
        }

        return csIpc.ask('CS_CAPTURE_FULL_SCREENSHOT', { fileName: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["ensureExtName"])('.png', target) }).then(function (_ref7) {
          var fileName = _ref7.fileName,
              url = _ref7.url;
          return {
            screenshot: {
              url: url,
              name: fileName
            }
          };
        });
      }

    case 'onDownload':
      {
        return csIpc.ask('CS_ON_DOWNLOAD', {
          fileName: target,
          wait: (value || '').trim() === 'true',
          timeout: extra.timeoutDownload * 1000,
          timeoutForStart: Math.max(10, extra.timeoutElement) * 1000
        });
      }

    case 'deleteAllCookies':
      {
        return csIpc.ask('CS_DELETE_ALL_COOKIES', {
          url: window.location.origin
        }).then(function () {
          return true;
        });
      }

    case 'if':
    case 'while':
    case 'gotoIf':
      {
        try {
          return {
            // eslint-disable-next-line no-eval
            condition: window.eval(target)
          };
        } catch (e) {
          throw new Error('Error in runEval condition of ' + cmd + ': ' + e.message);
        }
      }

    default:
      throw new Error('Command ' + cmd + ' not supported yet');
  }
};

/***/ }),

/***/ "./src/common/convert_suite_utils.js":
/*!*******************************************!*\
  !*** ./src/common/convert_suite_utils.js ***!
  \*******************************************/
/*! exports provided: stringifyTestSuite, parseTestSuite, validateTestSuiteText, toBookmarkData, toHtml */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringifyTestSuite", function() { return stringifyTestSuite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseTestSuite", function() { return parseTestSuite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateTestSuiteText", function() { return validateTestSuiteText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toBookmarkData", function() { return toBookmarkData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toHtml", function() { return toHtml; });
/* harmony import */ var parse_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! parse-json */ "./node_modules/parse-json/index.js");
/* harmony import */ var parse_json__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(parse_json__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/common/utils.js");



var stringifyTestSuite = function stringifyTestSuite(testSuite, testCases) {
  var obj = {
    creationDate: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["formatDate"])(new Date()),
    name: testSuite.name,
    macros: testSuite.cases.map(function (item) {
      var loops = parseInt(item.loops, 10);
      var tcId = item.testCaseId;
      var tc = testCases.find(function (tc) {
        return tc.id === tcId;
      });
      var tcName = tc.name || '(Macro not found)';

      return {
        macro: tcName,
        loops: loops
      };
    })
  };

  return JSON.stringify(obj, null, 2);
};

var parseTestSuite = function parseTestSuite(text, testCases) {
  var obj = parse_json__WEBPACK_IMPORTED_MODULE_0___default()(text);

  if (typeof obj.name !== 'string' || obj.name.length === 0) {
    throw new Error('name must be a string');
  }

  if (!Array.isArray(obj.macros)) {
    throw new Error('macros must be an array');
  }

  var cases = obj.macros.map(function (item) {
    var tc = testCases.find(function (tc) {
      return tc.name === item.macro;
    });

    if (!tc) {
      throw new Error('No macro found with name \'' + item.macro + '\'');
    }

    if (typeof item.loops !== 'number' || item.loops < 1) {
      item.loops = 1;
    }

    return {
      testCaseId: tc.id,
      loops: item.loops
    };
  });

  var ts = {
    name: obj.name,
    fold: obj.fold,
    cases: cases
  };

  return ts;
};

var validateTestSuiteText = parseTestSuite;

var toBookmarkData = function toBookmarkData(obj) {
  var name = obj.name,
      bookmarkTitle = obj.bookmarkTitle;


  if (!name) throw new Error('name is required to generate bookmark for test suite');
  if (!bookmarkTitle) throw new Error('bookmarkTitle is required to generate bookmark for test suite');

  return {
    title: bookmarkTitle,
    url: ('javascript:\n      (function() {\n        try {\n          var evt = new CustomEvent(\'kantuRunTestSuite\', { detail: { name: \'' + name + '\', from: \'bookmark\' } });\n          window.dispatchEvent(evt);\n        } catch (e) {\n          alert(\'Kantu Bookmarklet error: \' + e.toString());\n        }\n      })();\n    ').replace(/\n\s*/g, '')
  };
};

var toHtml = function toHtml(_ref) {
  var name = _ref.name;

  return '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />\n<title>' + name + '</title>\n</head>\n<body>\n<h1>' + name + '</h1>\n<script>\n(function() {\n  try {\n    var evt = new CustomEvent(\'kantuRunTestSuite\', { detail: { name: \'' + name + '\', from: \'html\' } })  \n    window.dispatchEvent(evt);\n\n    if (window.location.protocol === \'file:\') {\n      var onInvokeSuccess = function () {\n        clearTimeout(timer)\n        window.removeEventListener(\'kantuInvokeSuccess\', onInvokeSuccess)\n      }\n      var timer = setTimeout(function () {\n        alert("Error: It seems you need to enable File Access for Kantu in the extension settings.")\n      }, 2000)\n\n      window.addEventListener(\'kantuInvokeSuccess\', onInvokeSuccess)\n    }\n  } catch (e) {\n    alert(\'Kantu Bookmarklet error: \' + e.toString());\n  }\n})();\n</script>\n</body>\n</html>\n  ';
};

/***/ }),

/***/ "./src/common/convert_utils.js":
/*!*************************************!*\
  !*** ./src/common/convert_utils.js ***!
  \*************************************/
/*! exports provided: toHtml, toHtmlDataUri, fromHtml, fromJSONString, toJSONString, toJSONDataUri, toBookmarkData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toHtml", function() { return toHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toHtmlDataUri", function() { return toHtmlDataUri; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromHtml", function() { return fromHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromJSONString", function() { return fromJSONString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toJSONString", function() { return toJSONString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toJSONDataUri", function() { return toJSONDataUri; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toBookmarkData", function() { return toBookmarkData; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var parse_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! parse-json */ "./node_modules/parse-json/index.js");
/* harmony import */ var parse_json__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(parse_json__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var url_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url-parse */ "./node_modules/url-parse/index.js");
/* harmony import */ var url_parse__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(url_parse__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "./src/common/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };






var joinUrl = function joinUrl(base, url) {
  var urlObj = new url_parse__WEBPACK_IMPORTED_MODULE_2___default.a(url, base);
  return urlObj.toString();
};

// HTML template from test case
function genHtml(_ref) {
  var name = _ref.name,
      baseUrl = _ref.baseUrl,
      commandTrs = _ref.commandTrs;

  return '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">\n<head profile="http://selenium-ide.openqa.org/profiles/test-case">\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />\n<link rel="selenium.base" href="' + baseUrl + '" />\n<title>' + name + '</title>\n</head>\n<body>\n<table cellpadding="1" cellspacing="1" border="1">\n<thead>\n<tr><td rowspan="1" colspan="3">' + name + '</td></tr>\n</thead><tbody>\n' + commandTrs.join('\n') + '\n</tbody></table>\n<script>\n(function() {\n  try {\n    var evt = new CustomEvent(\'kantuSaveAndRunMacro\', { detail: { html: document.documentElement.outerHTML } })  \n    window.dispatchEvent(evt);\n    \n    if (window.location.protocol === \'file:\') {\n      var onInvokeSuccess = function () {\n        clearTimeout(timer)\n        window.removeEventListener(\'kantuInvokeSuccess\', onInvokeSuccess)\n      }\n      var timer = setTimeout(function () {\n        alert("Error: It seems you need to enable File Access for Kantu in the extension settings.")\n      }, 2000)\n\n      window.addEventListener(\'kantuInvokeSuccess\', onInvokeSuccess)\n    }\n  } catch (e) {\n    alert(\'Kantu Bookmarklet error: \' + e.toString());\n  }\n})();\n</script>\n</body>\n</html>\n  ';
}

// generate data uri from html
function htmlDataUri(html) {
  return 'data:text/html;base64,' + window.btoa(unescape(encodeURIComponent(html)));
}

// generate data uri from json
function jsonDataUri(str) {
  return 'data:text/json;base64,' + window.btoa(unescape(encodeURIComponent(str)));
}

// generate html from a test case
function toHtml(_ref2) {
  var name = _ref2.name,
      commands = _ref2.commands;

  var copyCommands = commands.map(function (c) {
    return _extends({}, c);
  });
  var openTc = copyCommands.find(function (tc) {
    return tc.cmd === 'open';
  });

  // Note: Aug 10, 2018, no baseUrl when exported to html
  // so that `${variable}` could be used in open command, and won't be prefixed with baseUrl
  var origin = null;
  var replacePath = function replacePath(path) {
    return path;
  };
  // const url         = openTc && new URL(openTc.target)
  // const origin      = url && url.origin
  // const replacePath = (path) => {
  //   if (path.indexOf(origin) !== 0) return path
  //   const result = path.replace(origin, '')
  //   return result.length === 0 ? '/' : result
  // }

  if (openTc) {
    openTc.target = replacePath(openTc.target);
  }

  var commandTrs = copyCommands.map(function (c) {
    if (c.cmd === 'open') {
      // Note: remove origin if it's the same as the first open command
      c.target = replacePath(c.target);
    }

    return '\n      <tr>\n        <td>' + (c.cmd || '') + '</td>\n        <td>' + (c.target || '') + '</td>\n        <td>' + (c.value || '') + '</td>\n      </tr>\n    ';
  });

  return genHtml({
    name: name,
    commandTrs: commandTrs,
    baseUrl: origin || ''
  });
}

// generate data uri of html from a test case
function toHtmlDataUri(obj) {
  return htmlDataUri(toHtml(obj));
}

// parse html to test case
function fromHtml(html) {
  var $root = jquery__WEBPACK_IMPORTED_MODULE_0___default()('<div>' + html + '</div>');
  var $base = $root.find('link');
  var $title = $root.find('title');
  var $trs = $root.find('tbody > tr');

  var baseUrl = $base && $base.attr('href');
  var name = $title.text();

  if (!name || !name.length) {
    throw new Error('fromHtml: missing title');
  }

  var commands = [].slice.call($trs).map(function (tr) {
    var $el = jquery__WEBPACK_IMPORTED_MODULE_0___default()(tr);
    var trHtml = $el[0].outerHtml;

    // Note: remove any datalist option in katalon-like html file
    $el.find('datalist').remove();

    var $children = $el.children();
    var $cmd = $children.eq(0);
    var $tgt = $children.eq(1);
    var $val = $children.eq(2);
    var cmd = $cmd && $cmd.text();
    var value = $val && $val.text();
    var target = $tgt && $tgt.text();

    if (!cmd || !cmd.length) {
      throw new Error('missing cmd in ' + trHtml);
    }

    if (cmd === 'open') {
      // Note: with or without baseUrl
      target = baseUrl && baseUrl.length && !/:\/\//.test(target) ? joinUrl(baseUrl, target) : target;
    }

    return { cmd: cmd, target: target, value: value };
  });

  return { name: name, data: { commands: commands } };
}

// parse json to test case
// the current json structure doesn't provide fileName,
// so must provide a file name as the second parameter
function fromJSONString(str, fileName) {
  if (!fileName || !fileName.length) {
    throw new Error('fromJSONString: must provide fileName');
  }

  var name = fileName.split('.')[0];
  var obj = parse_json__WEBPACK_IMPORTED_MODULE_1___default()(str);

  if (obj.macros) {
    throw new Error('This is a test suite, not a macro');
  }

  if (!Array.isArray(obj.Commands)) {
    throw new Error('\'Commands\' field must be an array');
  }

  var commands = obj.Commands.map(function (c) {
    return {
      cmd: c.Command,
      target: c.Target,
      value: c.Value
    };
  });

  return { name: name, data: { commands: commands } };
}

// generate json from a test case
function toJSONString(obj) {
  var getToday = function getToday() {
    var d = new Date();
    return [d.getFullYear(), d.getMonth() + 1, d.getDate()].join('-');
  };
  var data = {
    CreationDate: getToday(),
    Commands: obj.commands.map(function (c) {
      return {
        Command: c.cmd,
        Target: c.target || '',
        Value: c.value || ''
      };
    })
  };

  return JSON.stringify(data, null, 2);
}

// generate data uri of json from a test case
function toJSONDataUri(obj) {
  return jsonDataUri(toJSONString(obj));
}

function toBookmarkData(obj) {
  var name = obj.name,
      bookmarkTitle = obj.bookmarkTitle;


  if (!name) throw new Error('name is required to generate bookmark for macro');
  if (!bookmarkTitle) throw new Error('bookmarkTitle is required to generate bookmark for macro');

  return {
    title: bookmarkTitle,
    url: ('javascript:\n      (function() {\n        try {\n          var evt = new CustomEvent(\'kantuRunMacro\', { detail: { name: \'' + name + '\', from: \'bookmark\' } });\n          window.dispatchEvent(evt);\n        } catch (e) {\n          alert(\'Kantu Bookmarklet error: \' + e.toString());\n        }\n      })();\n    ').replace(/\n\s*/g, '')
  };
}

/***/ }),

/***/ "./src/common/csv.js":
/*!***************************!*\
  !*** ./src/common/csv.js ***!
  \***************************/
/*! exports provided: parseFromCSV, stringifyToCSV, toCsvDataURI */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseFromCSV", function() { return parseFromCSV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringifyToCSV", function() { return stringifyToCSV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toCsvDataURI", function() { return toCsvDataURI; });
/* harmony import */ var csv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! csv */ "./node_modules/csv/lib/index.js");
/* harmony import */ var csv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(csv__WEBPACK_IMPORTED_MODULE_0__);


var csvDataURI = function csvDataURI(csvStr) {
  return 'data:text/csv;base64,' + window.btoa(unescape(encodeURIComponent(csvStr)));
};

function parseFromCSV(text) {
  return new Promise(function (resolve, reject) {
    csv__WEBPACK_IMPORTED_MODULE_0___default.a.parse(text, function (err, data) {
      if (err) return reject(err);
      return resolve(data);
    });
  });
}

function stringifyToCSV(list) {
  return new Promise(function (resolve, reject) {
    csv__WEBPACK_IMPORTED_MODULE_0___default.a.stringify(list, function (err, data) {
      if (err) return reject(err);
      return resolve(data);
    });
  });
}

function toCsvDataURI(list) {
  return stringifyToCSV(list).then(csvDataURI);
}

/***/ }),

/***/ "./src/common/csv_man.js":
/*!*******************************!*\
  !*** ./src/common/csv_man.js ***!
  \*******************************/
/*! exports provided: CSVMan, getCSVMan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSVMan", function() { return CSVMan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCSVMan", function() { return getCSVMan; });
/* harmony import */ var _filesystem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filesystem */ "./src/common/filesystem.js");
/* harmony import */ var _file_man__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./file_man */ "./src/common/file_man.js");
/* harmony import */ var _web_extension__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./web_extension */ "./src/common/web_extension.js");
/* harmony import */ var _web_extension__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_web_extension__WEBPACK_IMPORTED_MODULE_2__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var CSVMan = function (_FileMan) {
  _inherits(CSVMan, _FileMan);

  function CSVMan() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CSVMan);

    return _possibleConstructorReturn(this, (CSVMan.__proto__ || Object.getPrototypeOf(CSVMan)).call(this, _extends({}, opts, { baseDir: 'spreadsheets' })));
  }

  _createClass(CSVMan, [{
    key: 'getLink',
    value: function getLink(fileName) {
      if (!_web_extension__WEBPACK_IMPORTED_MODULE_2___default.a.isFirefox()) return Promise.resolve(_get(CSVMan.prototype.__proto__ || Object.getPrototypeOf(CSVMan.prototype), 'getLink', this).call(this, fileName) + '?' + new Date().getTime());

      // Note: Except for Chrome, the filesystem API we use is a polyfill from idb.filesystem.js
      // idb.filesystem.js works great but the only problem is that you can't use 'filesystem:' schema to retrieve that file
      // so here, we have to convert the file to data url
      return _filesystem__WEBPACK_IMPORTED_MODULE_0__["default"].readFile(this.__filePath(fileName), 'DataURL');
    }
  }]);

  return CSVMan;
}(_file_man__WEBPACK_IMPORTED_MODULE_1__["default"]);

var man = void 0;

function getCSVMan() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (opts) {
    man = new CSVMan(opts);
  }

  if (!man) {
    throw new Error('csv manager not initialized');
  }

  return man;
}

/***/ }),

/***/ "./src/common/dom_utils.js":
/*!*********************************!*\
  !*** ./src/common/dom_utils.js ***!
  \*********************************/
/*! exports provided: getStyle, setStyle, pixel, bindDrag, bindContentEditableChange, scrollLeft, scrollTop, domText, isVisible, cssSelector, isPositionFixed */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStyle", function() { return getStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setStyle", function() { return setStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pixel", function() { return pixel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindDrag", function() { return bindDrag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindContentEditableChange", function() { return bindContentEditableChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollLeft", function() { return scrollLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollTop", function() { return scrollTop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "domText", function() { return domText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isVisible", function() { return isVisible; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssSelector", function() { return cssSelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPositionFixed", function() { return isPositionFixed; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./src/common/utils.js");
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }



var getStyle = function getStyle(dom) {
  if (!dom) throw new Error('getStyle: dom does not exist');
  return getComputedStyle(dom);
};

var setStyle = function setStyle(dom, style) {
  if (!dom) throw new Error('setStyle: dom does not exist');

  for (var i = 0, keys = Object.keys(style), len = keys.length; i < len; i++) {
    dom.style[keys[i]] = style[keys[i]];
  }

  return dom;
};

var pixel = function pixel(num) {
  if ((num + '').indexOf('px') !== -1) return num;
  return (num || 0) + 'px';
};

var bindDrag = function bindDrag(_ref) {
  var onDragStart = _ref.onDragStart,
      onDragEnd = _ref.onDragEnd,
      onDrag = _ref.onDrag,
      $el = _ref.$el,
      _ref$doc = _ref.doc,
      doc = _ref$doc === undefined ? document : _ref$doc;

  var isDragging = false;
  var startPos = { x: 0, y: 0 };

  var onMouseDown = function onMouseDown(e) {
    isDragging = true;
    startPos = { x: e.screenX, y: e.screenY };
    onDragStart(e);
  };
  var onMouseUp = function onMouseUp(e) {
    if (!isDragging) return;
    isDragging = false;
    var dx = e.screenX - startPos.x;
    var dy = e.screenY - startPos.y;
    onDragEnd(e, { dx: dx, dy: dy });
  };
  var onMouseMove = function onMouseMove(e) {
    if (!isDragging) return;

    var dx = e.screenX - startPos.x;
    var dy = e.screenY - startPos.y;
    onDrag(e, { dx: dx, dy: dy });

    e.preventDefault();
    e.stopPropagation();
  };
  var onClick = function onClick(e) {
    e.preventDefault();
    e.stopPropagation();
  };

  doc.addEventListener('click', onClick, true);
  doc.addEventListener('mousemove', onMouseMove, true);
  doc.addEventListener('mouseup', onMouseUp, true);
  $el.addEventListener('mousedown', onMouseDown, true);

  return function () {
    doc.removeEventListener('click', onClick, true);
    doc.removeEventListener('mousemove', onMouseMove, true);
    doc.removeEventListener('mouseup', onMouseUp, true);
    $el.removeEventListener('mousedown', onMouseDown, true);
  };
};

var bindContentEditableChange = function bindContentEditableChange(_ref2) {
  var onChange = _ref2.onChange,
      _ref2$doc = _ref2.doc,
      doc = _ref2$doc === undefined ? document : _ref2$doc;

  var currentCE = null;
  var oldContent = null;

  var onFocus = function onFocus(e) {
    if (e.target.contentEditable !== 'true') return;
    currentCE = e.target;
    oldContent = currentCE.innerHTML;
  };
  var onBlur = function onBlur(e) {
    if (e.target !== currentCE) {
      // Do nothing
    } else if (currentCE.innerHTML !== oldContent) {
      onChange(e);
    }

    currentCE = null;
    oldContent = null;
  };

  doc.addEventListener('focus', onFocus, true);
  doc.addEventListener('blur', onBlur, true);

  return function () {
    doc.removeEventListener('focus', onFocus, true);
    doc.removeEventListener('blur', onBlur, true);
  };
};

var scrollLeft = function scrollLeft(document) {
  return document.documentElement.scrollLeft;
};

var scrollTop = function scrollTop(document) {
  return document.documentElement.scrollTop;
};

var domText = function domText($dom) {
  var it = $dom.innerText && $dom.innerText.trim();
  var tc = $dom.textContent;
  var pos = tc.toUpperCase().indexOf(it.toUpperCase());

  return tc.substr(pos, it.length);
};

var isVisible = function isVisible(el) {
  if (el === window.document) return true;
  if (!el) return true;

  var style = window.getComputedStyle(el);
  if (style.display === 'none' || style.opacity === '0' || style.visibility === 'hidden') return false;

  return isVisible(el.parentNode);
};

var cssSelector = function cssSelector(dom) {
  if (dom.nodeType !== 1) return '';
  if (dom.tagName === 'BODY') return 'body';
  if (dom.id) return '#' + dom.id;

  var classes = dom.className.split(/\s+/g).filter(function (item) {
    return item && item.length;
  });

  var children = Array.from(dom.parentNode.childNodes).filter(function ($el) {
    return $el.nodeType === 1;
  });

  var sameTag = children.filter(function ($el) {
    return $el.tagName === dom.tagName;
  });

  var sameClass = children.filter(function ($el) {
    var cs = $el.className.split(/\s+/g);

    return _utils__WEBPACK_IMPORTED_MODULE_0__["and"].apply(undefined, _toConsumableArray(classes.map(function (c) {
      return cs.indexOf(c) !== -1;
    })));
  });

  var extra = '';

  if (sameTag.length === 1) {
    extra = '';
  } else if (classes.length && sameClass.length === 1) {
    extra = '.' + classes.join('.');
  } else {
    extra = ':nth-child(' + (1 + children.findIndex(function (item) {
      return item === dom;
    })) + ')';
  }

  var me = dom.tagName.toLowerCase() + extra;

  // Note: browser will add an extra 'tbody' when tr directly in table, which will cause an wrong selector,
  // so the hack is to remove all tbody here
  var ret = cssSelector(dom.parentNode) + ' > ' + me;
  return ret;
  // return ret.replace(/\s*>\s*tbody\s*>?/g, ' ')
};

var isPositionFixed = function isPositionFixed($dom) {
  if (!$dom || $dom === document.documentElement || $dom === document.body) return false;
  return getComputedStyle($dom)['position'] === 'fixed' || isPositionFixed($dom.parentNode);
};

/***/ }),

/***/ "./src/common/drag_mock/DataTransfer.js":
/*!**********************************************!*\
  !*** ./src/common/drag_mock/DataTransfer.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


function removeFromArray(array, item) {
  var index = array.indexOf(item);

  if (index >= 0) {
    array.splice(index, 1);
  }
}

var DataTransfer = function DataTransfer() {
  this.dataByFormat = {};

  this.dropEffect = 'none';
  this.effectAllowed = 'all';
  this.files = [];
  this.types = [];
};

DataTransfer.prototype.clearData = function (dataFormat) {
  if (dataFormat) {
    delete this.dataByFormat[dataFormat];
    removeFromArray(this.types, dataFormat);
  } else {
    this.dataByFormat = {};
    this.types = [];
  }
};

DataTransfer.prototype.getData = function (dataFormat) {
  return this.dataByFormat[dataFormat];
};

DataTransfer.prototype.setData = function (dataFormat, data) {
  this.dataByFormat[dataFormat] = data;

  if (this.types.indexOf(dataFormat) < 0) {
    this.types.push(dataFormat);
  }

  return true;
};

DataTransfer.prototype.setDragImage = function () {
  // don't do anything (the stub just makes sure there is no error thrown if someone tries to call the method)
};

module.exports = function () {
  // Note: in Firefox, window.DataTransfer exists, but it can't be used as constructor
  // In Firefox, `new window.DataTransfer()` throws errors like 'TypeError: Illegal constructor'
  if (window.DataTransfer) {
    try {
      var tmp = new window.DataTransfer();
      return window.DataTransfer;
    } catch (e) {}
  }

  return DataTransfer;
}();

/***/ }),

/***/ "./src/common/drag_mock/DragDropAction.js":
/*!************************************************!*\
  !*** ./src/common/drag_mock/DragDropAction.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var eventFactory = __webpack_require__(/*! ./eventFactory */ "./src/common/drag_mock/eventFactory.js"),
    DataTransfer = __webpack_require__(/*! ./DataTransfer */ "./src/common/drag_mock/DataTransfer.js");

function _noop() {}

function parseParams(targetElement, eventProperties, configCallback) {
  if (typeof eventProperties === 'function') {
    configCallback = eventProperties;
    eventProperties = null;
  }

  if (!targetElement || (typeof targetElement === 'undefined' ? 'undefined' : _typeof(targetElement)) !== 'object') {
    throw new Error('Expected first parameter to be a targetElement. Instead got: ' + targetElement);
  }

  return {
    targetElement: targetElement,
    eventProperties: eventProperties || {},
    configCallback: configCallback || _noop
  };
}

function customizeEvent(event, configCallback, isPrimaryEvent) {
  if (configCallback) {
    // call configCallback only for the primary event if the callback takes less than two arguments
    if (configCallback.length < 2) {
      if (isPrimaryEvent) {
        configCallback(event);
      }
    }
    // call configCallback for each event if the callback takes two arguments
    else {
        configCallback(event, event.type);
      }
  }
}

function createAndDispatchEvents(targetElement, eventNames, primaryEventName, dataTransfer, eventProperties, configCallback) {
  eventNames.forEach(function (eventName) {
    var event = eventFactory.createEvent(eventName, eventProperties, dataTransfer);
    var isPrimaryEvent = eventName === primaryEventName;

    customizeEvent(event, configCallback, isPrimaryEvent);

    targetElement.dispatchEvent(event);
  });
}

var DragDropAction = function DragDropAction() {
  this.lastDragSource = null;
  this.lastDataTransfer = null;
  this.pendingActionsQueue = [];
};

DragDropAction.prototype._queue = function (fn) {
  this.pendingActionsQueue.push(fn);

  if (this.pendingActionsQueue.length === 1) {
    this._queueExecuteNext();
  }
};

DragDropAction.prototype._queueExecuteNext = function () {
  if (this.pendingActionsQueue.length === 0) {
    return;
  }

  var self = this;
  var firstPendingAction = this.pendingActionsQueue[0];

  var doneCallback = function doneCallback() {
    self.pendingActionsQueue.shift();
    self._queueExecuteNext();
  };

  if (firstPendingAction.length === 0) {
    firstPendingAction.call(this);
    doneCallback();
  } else {
    firstPendingAction.call(this, doneCallback);
  }
};

DragDropAction.prototype.dragStart = function (targetElement, eventProperties, configCallback) {
  var params = parseParams(targetElement, eventProperties, configCallback),
      events = ['mousedown', 'dragstart', 'drag'],
      dataTransfer = new DataTransfer();

  this._queue(function () {
    createAndDispatchEvents(params.targetElement, events, 'drag', dataTransfer, params.eventProperties, params.configCallback);

    this.lastDragSource = targetElement;
    this.lastDataTransfer = dataTransfer;
  });

  return this;
};

DragDropAction.prototype.dragEnter = function (overElement, eventProperties, configCallback) {
  var params = parseParams(overElement, eventProperties, configCallback),
      events = ['mousemove', 'mouseover', 'dragenter'];

  this._queue(function () {
    createAndDispatchEvents(params.targetElement, events, 'dragenter', this.lastDataTransfer, params.eventProperties, params.configCallback);
  });

  return this;
};

DragDropAction.prototype.dragOver = function (overElement, eventProperties, configCallback) {
  var params = parseParams(overElement, eventProperties, configCallback),
      events = ['mousemove', 'mouseover', 'dragover'];

  this._queue(function () {
    createAndDispatchEvents(params.targetElement, events, 'drag', this.lastDataTransfer, params.eventProperties, params.configCallback);
  });

  return this;
};

DragDropAction.prototype.dragLeave = function (overElement, eventProperties, configCallback) {
  var params = parseParams(overElement, eventProperties, configCallback),
      events = ['mousemove', 'mouseover', 'dragleave'];

  this._queue(function () {
    createAndDispatchEvents(params.targetElement, events, 'dragleave', this.lastDataTransfer, params.eventProperties, params.configCallback);
  });

  return this;
};

DragDropAction.prototype.drop = function (targetElement, eventProperties, configCallback) {
  var params = parseParams(targetElement, eventProperties, configCallback);
  var eventsOnDropTarget = ['mousemove', 'mouseup', 'drop'];
  var eventsOnDragSource = ['dragend'];

  this._queue(function () {
    createAndDispatchEvents(params.targetElement, eventsOnDropTarget, 'drop', this.lastDataTransfer, params.eventProperties, params.configCallback);

    if (this.lastDragSource) {
      // trigger dragend event on last drag source element
      createAndDispatchEvents(this.lastDragSource, eventsOnDragSource, 'drop', this.lastDataTransfer, params.eventProperties, params.configCallback);
    }
  });

  return this;
};

DragDropAction.prototype.then = function (callback) {
  this._queue(function () {
    callback.call(this);
  }); // make sure _queue() is given a callback with no arguments

  return this;
};

DragDropAction.prototype.delay = function (waitingTimeMs) {
  this._queue(function (done) {
    window.setTimeout(done, waitingTimeMs);
  });

  return this;
};

module.exports = DragDropAction;

/***/ }),

/***/ "./src/common/drag_mock/eventFactory.js":
/*!**********************************************!*\
  !*** ./src/common/drag_mock/eventFactory.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var DataTransfer = __webpack_require__(/*! ./DataTransfer */ "./src/common/drag_mock/DataTransfer.js");

var dataTransferEvents = ['drag', 'dragstart', 'dragenter', 'dragover', 'dragend', 'drop', 'dragleave'];

function mergeInto(destObj, srcObj) {
  for (var key in srcObj) {
    if (!srcObj.hasOwnProperty(key)) {
      continue;
    } // ignore inherited properties

    destObj[key] = srcObj[key];
  }

  return destObj;
}

function isFirefox() {
  return (/Firefox/.test(window.navigator.userAgent)
  );
}

function createModernEvent(eventName, eventType, eventProperties) {
  // if (eventType === 'DragEvent') { eventType = 'CustomEvent'; }     // Firefox fix (since FF does not allow us to override dataTransfer)

  var constructor = window[eventType];
  var options = { view: window, bubbles: true, cancelable: true };

  mergeInto(options, eventProperties);

  var event = new constructor(eventName, options);

  mergeInto(event, eventProperties);

  return event;
}

function createLegacyEvent(eventName, eventType, eventProperties) {
  var event;

  switch (eventType) {
    case 'MouseEvent':
      event = document.createEvent('MouseEvent');
      event.initEvent(eventName, true, true);
      break;

    default:
      event = document.createEvent('CustomEvent');
      event.initCustomEvent(eventName, true, true, 0);
  }

  // copy eventProperties into event
  if (eventProperties) {
    mergeInto(event, eventProperties);
  }

  return event;
}

function _createEvent(eventName, eventType, eventProperties) {
  if (isFirefox()) {
    return createLegacyEvent(eventName, eventType, eventProperties);
  }

  try {
    return createModernEvent(eventName, eventType, eventProperties);
  } catch (error) {
    return createLegacyEvent(eventName, eventType, eventProperties);
  }
}

var EventFactory = {
  createEvent: function createEvent(eventName, eventProperties, dataTransfer) {
    var eventType = 'CustomEvent';

    if (eventName.match(/^mouse/)) {
      eventType = 'MouseEvent';
    } else if (eventName.match(/^(drag|drop)/)) {
      eventType = 'DragEvent';
    }

    if (dataTransferEvents.indexOf(eventName) > -1) {
      eventProperties.dataTransfer = dataTransfer || new DataTransfer();
    }

    var event = _createEvent(eventName, eventType, eventProperties);

    return event;
  }
};

module.exports = EventFactory;

/***/ }),

/***/ "./src/common/drag_mock/index.js":
/*!***************************************!*\
  !*** ./src/common/drag_mock/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var DragDropAction = __webpack_require__(/*! ./DragDropAction */ "./src/common/drag_mock/DragDropAction.js");

function call(instance, methodName, args) {
    return instance[methodName].apply(instance, args);
}

function triggerDragEvent(element, target) {
    var getXpathOfElement = function getXpathOfElement(element) {
        if (element == null) {
            return 'null';
        }
        if (element.parentElement == null) {
            return '/' + element.tagName;
        }

        var siblingElement = element.parentElement.children;
        var tagCount = 0;
        var totalTagCount = 0;
        var isFound = false;

        for (var i = 0; i < siblingElement.length; i++) {
            if (siblingElement[i].tagName == element.tagName && !isFound) {
                tagCount++;
                totalTagCount++;
            } else if (siblingElement[i].tagName == element.tagName) {
                totalTagCount++;
            }
            if (siblingElement[i] == element) {
                isFound = true;
            }
        }

        if (totalTagCount > 1) {
            return getXpathOfElement(element.parentElement) + "/" + element.tagName + "[" + tagCount + "]";
        }

        return getXpathOfElement(element.parentElement) + "/" + element.tagName;
    };
    var script = "                                              \
      function simulateDragDrop(sourceNode, destinationNode){\
      function createCustomEvent(type) {                     \
          var event = new CustomEvent('CustomEvent');        \
          event.initCustomEvent(type, true, true, null);     \
          event.dataTransfer = {                             \
              data: {                                        \
              },                                             \
              setData: function(type, val) {                 \
                  this.data[type] = val;                     \
              },                                             \
              getData: function(type) {                      \
                  return this.data[type];                    \
              }                                              \
          };                                                 \
          return event;                                      \
      }                                                      \
      function dispatchEvent(node, type, event) {            \
          if (node.dispatchEvent) {                          \
              return node.dispatchEvent(event);              \
          }                                                  \
          if (node.fireEvent) {                              \
              return node.fireEvent('on' + type, event);     \
          }                                                  \
      }                                                      \
      var event = createCustomEvent('dragstart');            \
      dispatchEvent(sourceNode, 'dragstart', event);         \
                                                             \
      var dropEvent = createCustomEvent('drop');             \
      dropEvent.dataTransfer = event.dataTransfer;           \
      dispatchEvent(destinationNode, 'drop', dropEvent);     \
                                                             \
      var dragEndEvent = createCustomEvent('dragend');       \
      dragEndEvent.dataTransfer = event.dataTransfer;        \
      dispatchEvent(sourceNode, 'dragend', dragEndEvent);    \
  }                                                          \
  simulateDragDrop(document.evaluate('" + getXpathOfElement(element) + "', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue, document.evaluate('" + getXpathOfElement(target) + "', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue);\
  ";
    var win = window;
    var doc = win.document;
    var scriptTag = doc.createElement("script");
    scriptTag.type = "text/javascript";
    scriptTag.text = script;
    doc.body.appendChild(scriptTag);
}

var dragMock = {
    dragStart: function dragStart(targetElement, eventProperties, configCallback) {
        return call(new DragDropAction(), 'dragStart', arguments);
    },
    dragEnter: function dragEnter(targetElement, eventProperties, configCallback) {
        return call(new DragDropAction(), 'dragEnter', arguments);
    },
    dragOver: function dragOver(targetElement, eventProperties, configCallback) {
        return call(new DragDropAction(), 'dragOver', arguments);
    },
    dragLeave: function dragLeave(targetElement, eventProperties, configCallback) {
        return call(new DragDropAction(), 'dragLeave', arguments);
    },
    drop: function drop(targetElement, eventProperties, configCallback) {
        return call(new DragDropAction(), 'drop', arguments);
    },
    delay: function delay(targetElement, eventProperties, configCallback) {
        return call(new DragDropAction(), 'delay', arguments);
    },

    triggerDragEvent: triggerDragEvent,

    // Just for unit testing:
    DataTransfer: __webpack_require__(/*! ./DataTransfer */ "./src/common/drag_mock/DataTransfer.js"),
    DragDropAction: __webpack_require__(/*! ./DragDropAction */ "./src/common/drag_mock/DragDropAction.js"),
    eventFactory: __webpack_require__(/*! ./eventFactory */ "./src/common/drag_mock/eventFactory.js")
};

module.exports = dragMock;

/***/ }),

/***/ "./src/common/encrypt.js":
/*!*******************************!*\
  !*** ./src/common/encrypt.js ***!
  \*******************************/
/*! exports provided: aesEncrypt, aesDecrypt, encrypt, decrypt, encryptIfNeeded, decryptIfNeeded */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "aesEncrypt", function() { return aesEncrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "aesDecrypt", function() { return aesDecrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encrypt", function() { return encrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decrypt", function() { return decrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encryptIfNeeded", function() { return encryptIfNeeded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decryptIfNeeded", function() { return decryptIfNeeded; });
/* harmony import */ var pbkdf2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pbkdf2 */ "./node_modules/pbkdf2/browser.js");
/* harmony import */ var pbkdf2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pbkdf2__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aes-js */ "./node_modules/aes-js/index.js");
/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(aes_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _web_extension__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./web_extension */ "./src/common/web_extension.js");
/* harmony import */ var _web_extension__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_web_extension__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./storage */ "./src/common/storage/index.js");





var RAW_PREFIX = '@_KANTU_@';
var CIPHER_PREFIX = '__KANTU_ENCRYPTED__';
var RAW_PREFIX_REG = new RegExp('^' + RAW_PREFIX);
var CIPHER_PREFIX_REG = new RegExp('^' + CIPHER_PREFIX);

var getEncryptConfig = function getEncryptConfig() {
  return _storage__WEBPACK_IMPORTED_MODULE_3__["default"].get('config').then(function (config) {
    return {
      shouldEncrypt: config.shouldEncryptPassword === 'master_password',
      masterPassword: config.masterPassword
    };
  });
};

var aesEncrypt = function aesEncrypt(text, password) {
  var key = pbkdf2__WEBPACK_IMPORTED_MODULE_0___default.a.pbkdf2Sync(password, 'salt', 1, 256 / 8, 'sha512');
  var engine = new aes_js__WEBPACK_IMPORTED_MODULE_1___default.a.ModeOfOperation.ctr(key);

  return aes_js__WEBPACK_IMPORTED_MODULE_1___default.a.utils.hex.fromBytes(engine.encrypt(aes_js__WEBPACK_IMPORTED_MODULE_1___default.a.utils.utf8.toBytes(text)));
};

var aesDecrypt = function aesDecrypt(text, password) {
  var key = pbkdf2__WEBPACK_IMPORTED_MODULE_0___default.a.pbkdf2Sync(password, 'salt', 1, 256 / 8, 'sha512');
  var engine = new aes_js__WEBPACK_IMPORTED_MODULE_1___default.a.ModeOfOperation.ctr(key);

  return aes_js__WEBPACK_IMPORTED_MODULE_1___default.a.utils.utf8.fromBytes(engine.decrypt(aes_js__WEBPACK_IMPORTED_MODULE_1___default.a.utils.hex.toBytes(text)));
};

var encrypt = function encrypt(text) {
  return getEncryptConfig().then(function (_ref) {
    var shouldEncrypt = _ref.shouldEncrypt,
        masterPassword = _ref.masterPassword;

    if (!shouldEncrypt) return text;
    return '' + CIPHER_PREFIX + aesEncrypt(RAW_PREFIX + text, masterPassword);
  });
};

var decrypt = function decrypt(text) {
  return getEncryptConfig().then(function (_ref2) {
    var shouldEncrypt = _ref2.shouldEncrypt,
        masterPassword = _ref2.masterPassword;

    if (!shouldEncrypt) return text;
    var raw = aesDecrypt(text.replace(CIPHER_PREFIX_REG, ''), masterPassword);
    if (raw.indexOf(RAW_PREFIX) !== 0) throw new Error('Wrong master password');
    return raw.replace(RAW_PREFIX_REG, '');
  }).catch(function (e) {
    throw new Error('password string invalid');
  });
};

var encryptIfNeeded = function encryptIfNeeded(text, dom) {
  if (dom && dom.tagName.toUpperCase() === 'INPUT' && dom.type === 'password') {
    return encrypt(text);
  }

  return Promise.resolve(text);
};

var decryptIfNeeded = function decryptIfNeeded(text, dom) {
  if (CIPHER_PREFIX_REG.test(text) && dom && dom.tagName.toUpperCase() === 'INPUT' && dom.type === 'password') {
    return decrypt(text);
  }

  return Promise.resolve(text);
};

/***/ }),

/***/ "./src/common/inspector.js":
/*!*********************************!*\
  !*** ./src/common/inspector.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log */ "./src/common/log.js");
/* harmony import */ var _command_runner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./command_runner */ "./src/common/command_runner.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };




/*
 * Basic tool function
 */

var extend = function extend() {
  var args = Array.from(arguments);
  var len = args.length;

  if (len <= 0) return {};
  if (len === 1) return args[0];

  var head = args[0];
  var rest = args.slice(1);

  return rest.reduce(function (prev, cur) {
    for (var i = 0, keys = Object.keys(cur), len = keys.length; i < len; i++) {
      prev[keys[i]] = cur[keys[i]];
    }

    return prev;
  }, head);
};

var isArray = Array.isArray;

var id = function id(x) {
  return x;
};

var trim = function trim(str) {
  return str.replace(/^\s*|\s*$/g, '');
};

var flatten = function flatten(list) {
  return [].concat.apply([], list);
};

var sum = function sum() {
  var list = Array.from(arguments);
  return list.reduce(function (prev, cur) {
    return prev + cur;
  }, 0);
};

var last = function last(list) {
  return list[list.length - 1];
};

var or = function or(list) {
  return (list || []).reduce(function (prev, cur) {
    return prev || cur;
  }, false);
};

var and = function and(list) {
  return (list || []).reduce(function (prev, cur) {
    return prev && cur;
  }, true);
};

var zipWith = function zipWith(fn) {
  if (arguments.length < 3) return null;

  var list = Array.from(arguments).slice(1);
  var len = list.reduce(function (min, cur) {
    return cur.length < min ? cur.length : min;
  }, Infinity);
  var ret = [];

  for (var i = 0; i < len; i++) {
    ret.push(fn.apply(null, list.map(function (item) {
      return item[i];
    })));
  }

  return ret;
};

var intersect = function intersect() {
  var list = Array.from(arguments);
  var len = Math.max.apply(null, list.map(function (item) {
    return item.length;
  }));
  var result = [];

  for (var i = 0; i < len; i++) {
    var val = list[0][i];
    var no = list.filter(function (item) {
      return item[i] !== val;
    });

    if (no && no.length) break;

    result.push(val);
  }

  return result;
};

var deepEqual = function deepEqual(a, b) {
  if (isArray(a) && isArray(b)) {
    return a.length === b.length && and(zipWith(deepEqual, a, b));
  }

  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object') {
    // TODO
    return false;
  }

  return a === b;
};

/*
 * Dom helper function
 */

var pixel = function pixel(num) {
  if ((num + '').indexOf('px') !== -1) return num;
  return (num || 0) + 'px';
};

var getStyle = function getStyle(dom, styleName) {
  if (!dom) throw new Error('getStyle: dom does not exist');
  return getComputedStyle(dom)[styleName];
};

var setStyle = function setStyle(dom, style) {
  if (!dom) throw new Error('setStyle: dom does not exist');

  for (var i = 0, keys = Object.keys(style), len = keys.length; i < len; i++) {
    dom.style[keys[i]] = style[keys[i]];
  }

  return dom;
};

var cssSum = function cssSum(dom, list) {
  var isInline = getStyle(dom, 'display') === 'inline';

  return list.reduce(function (prev, cur) {
    var val = isInline && ['width', 'height'].indexOf(cur) !== -1 ? dom.getClientRects()[0][cur] : getStyle(dom, cur);

    return prev + parseInt(val || '0', 10);
  }, 0);
};

var offset = function offset(dom, noPx) {
  if (!dom) return { left: 0, top: 0 };

  var rect = dom.getBoundingClientRect();
  var fn = noPx ? id : pixel;

  return {
    left: fn(rect.left + window.scrollX),
    top: fn(rect.top + window.scrollY)
  };
};

var rect = function rect(dom, noPx) {
  var pos = offset(dom, noPx);
  var isInline = getStyle(dom, 'display') === 'inline';
  var w = isInline ? dom.getClientRects()[0]['width'] : getStyle(dom, 'width');
  var h = isInline ? dom.getClientRects()[0]['height'] : getStyle(dom, 'height');
  var fn = noPx ? id : pixel;

  return extend({ width: fn(w), height: fn(h) }, pos);
};

// Reference: http://ryanve.com/lab/dimensions/
var clientWidth = function clientWidth(document) {
  return document.documentElement.clientWidth;
};

var clientHeight = function clientHeight(document) {
  return document.documentElement.clientHeight;
};

var removeChildren = function removeChildren(dom, predicate) {
  var pred = predicate || function () {
    return true;
  };
  var children = dom.childNodes;

  for (var i = children.length - 1; i >= 0; i--) {
    if (pred(children[i])) {
      dom.removeChild(children[i]);
    }
  }
};

var inDom = function inDom($outer, $el) {
  if (!$el) return false;
  if ($outer === $el) return true;
  return inDom($outer, $el.parentNode);
};

var inDomList = function inDomList(list, $el) {
  return or(list.map(function ($outer) {
    return inDom($outer, $el);
  }));
};

var parentWithTag = function parentWithTag(tag, $el) {
  var lowerTag = tag.toLowerCase();
  var $dom = $el;

  while ($dom) {
    if ($dom.tagName.toLowerCase() === lowerTag) {
      return $dom;
    }

    $dom = $dom.parentNode;
  }

  return null;
};

var parentWithClass = function parentWithClass(className, $el) {
  var $dom = $el;

  while ($dom) {
    // Note: In Firefox, HTML Document object doesn't have `classList` property
    if ($dom.classList !== undefined && $dom.classList.contains(className)) {
      return $dom;
    }

    $dom = $dom.parentNode;
  }

  return null;
};

var selector = function selector(dom) {
  if (dom.nodeType !== 1) return '';
  if (dom.tagName === 'BODY') return 'body';
  if (dom.id) return '#' + dom.id;

  var classes = (dom.getAttribute('class') || '').split(/\s+/g).filter(function (item) {
    return item && item.length;
  });

  var children = Array.from(dom.parentNode.childNodes).filter(function ($el) {
    return $el.nodeType === 1;
  });

  var sameTag = children.filter(function ($el) {
    return $el.tagName === dom.tagName;
  });

  var sameClass = children.filter(function ($el) {
    var cs = ($el.getAttribute('class') || '').split(/\s+/g);

    return and(classes.map(function (c) {
      return cs.indexOf(c) !== -1;
    }));
  });

  var extra = '';

  if (sameTag.length === 1) {
    extra = '';
  } else if (classes.length && sameClass.length === 1) {
    extra = '.' + classes.join('.');
  } else {
    extra = ':nth-child(' + (1 + children.findIndex(function (item) {
      return item === dom;
    })) + ')';
  }

  var me = dom.tagName.toLowerCase() + extra;

  // Note: browser will add an extra 'tbody' when tr directly in table, which will cause an wrong selector,
  // so the hack is to remove all tbody here
  var ret = selector(dom.parentNode) + ' > ' + me;
  return ret;
  // return ret.replace(/\s*>\s*tbody\s*>?/g, ' ')
};

var xpath = function xpath(dom, cur, list) {
  var getTagIndex = function getTagIndex(dom) {
    return Array.from(dom.parentNode.childNodes).filter(function (item) {
      return item.nodeType === dom.nodeType && item.tagName === dom.tagName;
    }).reduce(function (prev, node, i) {
      if (prev !== null) return prev;
      return node === dom ? i + 1 : prev;
    }, null);
  };

  var name = function name(dom) {
    if (!dom) return null;
    if (dom.nodeType === 3) return '@text';

    var index = getTagIndex(dom);
    var count = Array.from(dom.parentNode.childNodes).filter(function (item) {
      return item.nodeType === dom.nodeType && item.tagName === dom.tagName;
    }).length;
    var tag = dom.tagName.toLowerCase();

    return count > 1 ? tag + '[' + index + ']' : tag;
  };

  var helper = function helper(dom, cur, list) {
    if (!dom) return null;

    if (!cur) {
      if (dom.nodeType === 3) {
        return helper(dom.parentNode);
      } else {
        return helper(dom, dom, []);
      }
    }

    if (!cur.parentNode) {
      return ['html'].concat(list);
    }

    if (cur.tagName === 'BODY') {
      return ['html', 'body'].concat(list);
    }

    if (cur.id) {
      return ['*[@id="' + cur.id + '"]'].concat(list);
    }

    return helper(dom, cur.parentNode, [name(cur)].concat(list));
  };

  var parts = helper(dom, cur, list);
  var prefix = parts[0] === 'html' ? '/' : '//';
  var ret = prefix + parts.join('/');

  return ret;
};

var atXPath = function atXPath(xpath, document) {
  var lower = function lower(str) {
    return str && str.toLowerCase();
  };
  var reg = /^([a-zA-Z0-9]+)(\[(\d+)\])?$/;

  return xpath.reduce(function (prev, cur) {
    if (!prev) return prev;
    if (!prev.childNodes || !prev.childNodes.length) return null;

    var match = cur.match(reg);
    var tag = match[1];
    var index = match[3] ? parseInt(match[3], 10) : 1;
    var list = Array.from(prev.childNodes).filter(function (item) {
      return item.nodeType === 1 && lower(item.tagName) === lower(tag);
    });

    return list[index - 1];
  }, document);
};

var domText = function domText($dom) {
  var it = $dom.innerText && $dom.innerText.trim();
  var tc = $dom.textContent;
  var pos = tc.toUpperCase().indexOf(it.toUpperCase());

  return tc.substr(pos, it.length);
};

var getFirstWorkingLocator = function getFirstWorkingLocator(locators, $el) {
  for (var i = 0, len = locators.length; i < len; i++) {
    if ($el === Object(_command_runner__WEBPACK_IMPORTED_MODULE_1__["getElementByLocator"])(locators[i])) {
      return locators[i];
    }
  }

  return null;
};

// Note: get the locator of a DOM
var getLocator = function getLocator($dom, withAllOptions) {
  var id = $dom.getAttribute('id');
  var name = $dom.getAttribute('name');
  var isLink = $dom.tagName.toLowerCase() === 'a';
  var text = domText($dom);
  var classes = Array.from($dom.classList);
  var candidates = [];

  // link
  if (isLink && text && text.length) {
    var links = [].slice.call(document.getElementsByTagName('a'));
    var matches = links.filter(function ($el) {
      return domText($el) === text;
    });
    var index = matches.findIndex(function ($el) {
      return $el === $dom;
    });

    if (index !== -1) {
      candidates.push(index === 0 ? 'link=' + text : 'link=' + text + '@POS=' + (index + 1));
    }
  }

  // id
  if (id && id.length) {
    candidates.push('id=' + id);
  }

  // name
  if (name && name.length) {
    candidates.push('name=' + name);
  }

  // xpath
  candidates.push(xpath($dom));

  // css
  // Try with simple css selector first. If not unqiue, use full css selector
  /**
   * Below is the old logic with a shorter css selector
   *
    let sel = null
    if (classes.length > 0) {
    sel = $dom.tagName.toLowerCase() + classes.map(c => '.' + c).join('')
      if ($dom !== document.querySelectorAll(sel)[0]) {
      sel = null
    }
  }
    if (!sel) {
    sel = selector($dom)
  }
  */
  candidates.push('css=' + selector($dom));

  // Get the first one working
  var chosen = getFirstWorkingLocator(candidates, $dom);

  if (withAllOptions) {
    return {
      target: chosen,
      targetOptions: candidates
    };
  }

  return chosen;
};

var checkIframe = function checkIframe(iframeWin) {
  var key = new Date() * 1 + '' + Math.random();

  try {
    iframeWin[key] = 'asd';
    return iframeWin[key] === 'asd';
  } catch (e) {
    return false;
  }
};

// Note: get the locator for frame
var getFrameLocator = function getFrameLocator(frameWin, win) {
  if (checkIframe(frameWin)) {
    var frameDom = frameWin.frameElement;
    var locator = getLocator(frameDom);

    if (/^id=/.test(locator) || /^name=/.test(locator)) {
      return locator;
    }
  }

  for (var i = 0, len = win.frames.length; i < len; i++) {
    if (win.frames[i] === frameWin) {
      return 'index=' + i;
    }
  }

  throw new Error('Frame locator not found');
};

/*
 * Mask related
 */

var maskFactory = function maskFactory() {
  var cache = [];
  var prefix = '__mask__' + new Date() * 1 + Math.round(Math.random() * 1000) + '__';
  var uid = 1;
  var defaultStyle = {
    position: 'absolute',
    zIndex: '999',
    display: 'none',
    boxSizing: 'border-box',
    backgroundColor: 'red',
    opacity: 0.5,
    pointerEvents: 'none'
  };

  var genMask = function genMask(style, dom) {
    var mask = document.createElement('div');

    if (dom) {
      style = extend({}, defaultStyle, style || {}, rect(dom));
    } else {
      style = extend({}, defaultStyle, style || {});
    }

    setStyle(mask, style);
    mask.id = prefix + uid++;
    cache.push(mask);

    return mask;
  };

  var clear = function clear() {
    for (var i = 0, len = cache.length; i < len; i++) {
      var mask = cache[i];

      if (mask && mask.parentNode) {
        mask.parentNode.removeChild(mask);
      }
    }
  };

  return {
    gen: genMask,
    clear: clear
  };
};

var showMaskOver = function showMaskOver(mask, el) {
  var pos = offset(el);
  var w = cssSum(el, ['width', 'paddingLeft', 'paddingRight', 'borderLeftWidth', 'borderRightWidth']);
  var h = cssSum(el, ['height', 'paddingTop', 'paddingBottom', 'borderTopWidth', ' borderBottomWidth']);

  setStyle(mask, extend(pos, {
    width: pixel(w),
    height: pixel(h),
    display: 'block'
  }));
};

var isVisible = function isVisible(el) {
  if (el === window.document) return true;
  if (!el) return true;

  var style = window.getComputedStyle(el);
  if (style.display === 'none' || style.opacity === '0' || style.visibility === 'hidden') return false;

  return isVisible(el.parentNode);
};

/* harmony default export */ __webpack_exports__["default"] = ({
  offset: offset,
  setStyle: setStyle,
  selector: selector,
  xpath: xpath,
  atXPath: atXPath,
  domText: domText,
  getLocator: getLocator,
  getFrameLocator: getFrameLocator,
  maskFactory: maskFactory,
  showMaskOver: showMaskOver,
  inDom: inDom,
  isVisible: isVisible,
  parentWithTag: parentWithTag,
  parentWithClass: parentWithClass
});

/***/ }),

/***/ "./src/common/interpreter.js":
/*!***********************************!*\
  !*** ./src/common/interpreter.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Interpreter = function () {
  function Interpreter() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Interpreter);

    this.state = {
      labels: {},
      tags: [],
      commands: []
    };

    if (opts.pre) {
      this.__customPre = opts.pre;
    }

    if (opts.run) {
      this.__customRun = opts.run;
    }

    if (opts.post) {
      this.__customPost = opts.post;
    }
  }

  _createClass(Interpreter, [{
    key: 'reset',
    value: function reset() {
      this.__setState({
        labels: {},
        tags: [],
        commands: []
      });
    }
  }, {
    key: 'preprocess',
    value: function preprocess(commands) {
      var _this = this;

      var nextState = { commands: commands, tags: [] };
      var halfTags = [];
      var errorAtIndex = function errorAtIndex(i, msg) {
        var e = new Error(msg);
        e.errorIndex = i;
        return e;
      };

      commands.forEach(function (c, i) {
        if (_this.__customPre && _this.__customPre(c, i)) return;

        var topHalfTag = halfTags[halfTags.length - 1];

        switch (c.cmd) {
          // Commands for WHILE statements
          case 'while':
            {
              if (halfTags.find(function (tag) {
                return tag.type === 'while';
              })) {
                throw errorAtIndex(i, 'No nested while allowed (at command #' + (i + 1) + ')');
              }

              halfTags.push({
                type: 'while',
                start: { index: i, command: c }
              });

              break;
            }

          case 'endWhile':
            {
              if (!topHalfTag || topHalfTag.type !== 'while') {
                throw errorAtIndex(i, 'No matching while for this endWhile (at command #' + (i + 1) + ')');
              }

              nextState.tags.push(_extends({}, topHalfTag, {
                end: { index: i, command: c }
              }));

              halfTags.pop();
              break;
            }
          // -----------------------------

          // Commands for IF statements
          case 'if':
            {
              if (halfTags.find(function (tag) {
                return tag.type === 'if';
              })) {
                throw errorAtIndex(i, 'No nested if allowed (at command #' + (i + 1) + ')');
              }

              halfTags.push({
                type: 'if',
                start: { index: i, command: c }
              });

              break;
            }

          case 'else':
            {
              if (!topHalfTag || topHalfTag.type !== 'if') {
                throw errorAtIndex(i, 'No matching if for this else (at command #' + (i + 1) + ')');
              }

              _extends(topHalfTag, {
                fork: { index: i, command: c }
              });

              break;
            }

          case 'endif':
            {
              if (!topHalfTag || topHalfTag.type !== 'if') {
                throw errorAtIndex(i, 'No matching if for this endif (at command #' + (i + 1) + ')');
              }

              nextState.tags.push(_extends({}, topHalfTag, {
                end: { index: i, command: c }
              }));

              halfTags.pop();
              break;
            }
          // -----------------------------

          case 'label':
            {
              if (!c.target || !c.target.length) {
                throw new Error('invalid target for label commmand');
              }

              _this.__setState({
                labels: _extends({}, _this.state.labels, _defineProperty({}, c.target, { index: i }))
              });

              break;
            }
        }
      });

      if (halfTags.length > 0) {
        var topHalfTag = halfTags[halfTags.length - 1];
        throw errorAtIndex(topHalfTag.start.index, 'Unclosed \'' + topHalfTag.type + '\' (at command #' + (topHalfTag.start.index + 1) + ')');
      }

      this.__setState(nextState);
    }
  }, {
    key: 'run',
    value: function run(command, index) {
      var cmd = command.cmd,
          target = command.target,
          value = command.value;


      if (this.__customRun) {
        var p = this.__customRun(command, index);
        if (p) return Promise.resolve(p);
      }

      // label
      switch (cmd) {
        case 'onError':
          {
            var _value = command.value && command.value.trim();
            var _target = command.target && command.target.trim();
            var isValidTarget = _target && (/^#restart$/i.test(_target) || /^#goto$/i.test(_target));

            if (!isValidTarget) {
              throw new Error('invalid target for onError command');
            }

            if (/^#goto$/i.test(_target)) {
              if (!this.state.labels[_value]) {
                throw new Error('label ' + _value + ' doesn\'t exist');
              }
            }

            return Promise.resolve({ isFlowLogic: true });
          }

        case 'gotoLabel':
          {
            if (!target || !target.length) {
              throw new Error('invalid target for gotoLabel commmand');
            }

            if (!this.state.labels[target]) {
              throw new Error('label ' + target + ' doesn\'t exist');
            }

            return Promise.resolve({
              isFlowLogic: true,
              nextIndex: this.state.labels[target].index
            });
          }

        case 'else':
          {
            // Note: 'else' command itself will be skipped if condition is false,
            // But it will be run as the ending command of 'if-else' when condition is true
            var tag = this.state.tags.find(function (tag) {
              return tag.type === 'if' && tag.fork.index === index;
            });

            if (!tag) {
              throw new Error('tag not found for this else (at command #' + (index + 1) + ')');
            }

            return Promise.resolve({
              isFlowLogic: true,
              nextIndex: tag.end.index + 1
            });
          }

        case 'endif':
          {
            return Promise.resolve({ isFlowLogic: true });
          }

        case 'endWhile':
          {
            var _tag = this.state.tags.find(function (tag) {
              return tag.type === 'while' && tag.end.index === index;
            });

            if (!_tag) {
              throw new Error('tag not found for this endWhile (at command #' + (index + 1) + ')');
            }

            return Promise.resolve({
              isFlowLogic: true,
              nextIndex: _tag.start.index
            });
          }

        case 'comment':
          return Promise.resolve({ isFlowLogic: true });

        // As of 'label', it doesn't do anything, so we just kind of skip it
        case 'label':
          return Promise.resolve({ isFlowLogic: true });

        // Note: gotoIf, if and while need to run eval, which is not allowed in extension scope,
        // so we have to run eval in content script
        case 'gotoIf':
        case 'if':
        case 'while':
        default:
          return Promise.resolve({ isFlowLogic: false });
      }
    }
  }, {
    key: 'postRun',
    value: function postRun(command, index, result) {
      var cmd = command.cmd,
          target = command.target,
          value = command.value;


      if (this.__customPost) {
        var p = this.__customPost(command, index, result);
        if (p) return Promise.resolve(p);
      }

      switch (cmd) {
        case 'gotoIf':
          {
            // short-circuit the check on value
            if (!result.condition) return Promise.resolve();

            if (!value || !value.length) {
              throw new Error('invalid value for value commmand');
            }

            if (!this.state.labels[value]) {
              throw new Error('label ' + value + ' doesn\'t exist');
            }

            return Promise.resolve({
              nextIndex: this.state.labels[value].index
            });
          }

        case 'if':
          {
            var cond = result.condition;
            var tag = this.state.tags.find(function (tag) {
              return tag.type === 'if' && tag.start.index === index;
            });

            if (!tag) {
              throw new Error('tag not found for this if (at command #' + (index + 1) + ')');
            }

            var forkIndex = tag.fork && tag.fork.index + 1;
            var endIndex = tag.end && tag.end.index + 1;

            return Promise.resolve({
              nextIndex: cond ? index + 1 : forkIndex || endIndex
            });
          }

        case 'while':
          {
            var _cond = result.condition;
            var _tag2 = this.state.tags.find(function (tag) {
              return tag.type === 'while' && tag.start.index === index;
            });

            if (!_tag2) {
              throw new Error('tag not found for this while (at command #' + (index + 1) + ')');
            }

            if (!_tag2.end || _tag2.end.index === undefined || _tag2.end.index === null) {
              throw new Error('tag doesn\'t have a valid end index');
            }

            return Promise.resolve(_cond ? {} : { nextIndex: _tag2.end.index + 1 });
          }

        default:
          return Promise.resolve();
      }
    }
  }, {
    key: 'commandIndexByLabel',
    value: function commandIndexByLabel(labelName) {
      var label = this.state.labels[labelName];

      if (!label) {
        throw new Error('label \'' + labelName + '\' doesn\'t exist');
      }

      return label.index;
    }
  }, {
    key: '__setState',
    value: function __setState(st) {
      this.state = _extends({}, this.state, st);
    }
  }]);

  return Interpreter;
}();

/* harmony default export */ __webpack_exports__["default"] = (Interpreter);

/***/ }),

/***/ "./src/common/ipc/cs_postmessage.js":
/*!******************************************!*\
  !*** ./src/common/ipc/cs_postmessage.js ***!
  \******************************************/
/*! exports provided: postMessage, onMessage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "postMessage", function() { return postMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onMessage", function() { return onMessage; });
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var TYPE = 'SELENIUM_IDE_CS_MSG';

var postMessage = function postMessage(targetWin, myWin, payload) {
  var target = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '*';
  var timeout = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 60000;

  return new Promise(function (resolve, reject) {
    if (!targetWin || !targetWin.postMessage) {
      throw new Error('csPostMessage: targetWin is not a window', targetWin);
    }

    if (!myWin || !myWin.addEventListener || !myWin.removeEventListener) {
      throw new Error('csPostMessage: myWin is not a window', myWin);
    }

    var secret = Math.random();
    var type = TYPE;

    // Note: create a listener with a corresponding secret every time
    var onMsg = function onMsg(e) {
      if (e.data && e.data.type === TYPE && !e.data.isRequest && e.data.secret === secret) {
        myWin.removeEventListener('message', onMsg);
        var _e$data = e.data,
            _payload = _e$data.payload,
            error = _e$data.error;


        if (error) return reject(new Error(error));
        if (_payload !== undefined) return resolve(_payload);

        reject(new Error('csPostMessage: No payload nor error found'));
      }
    };

    myWin.addEventListener('message', onMsg);

    // Note:
    // * `type` to make sure we check our own msg only
    // * `secret` is for 1 to 1 relationship between a msg and a listener
    // * `payload` is the real data you want to send
    // * `isRequest` is to mark that it's not an answer to some previous request
    targetWin.postMessage({
      type: type,
      secret: secret,
      payload: payload,
      isRequest: true
    }, target);

    setTimeout(function () {
      reject(new Error('csPostMessage: timeout ' + timeout + ' ms'));
    }, timeout);
  });
};

var onMessage = function onMessage(win, fn) {
  if (!win || !win.addEventListener || !win.removeEventListener) {
    throw new Error('csOnMessage: not a window', win);
  }

  var onMsg = function onMsg(e) {
    // Note: only respond to msg with `isRequest` as true
    if (e && e.data && e.data.type === TYPE && e.data.isRequest && e.data.secret) {
      var tpl = {
        type: TYPE,
        secret: e.data.secret

        // Note: wrapped with a new Promise to catch any exception during the execution of fn
      };new Promise(function (resolve, reject) {
        var ret = void 0;

        try {
          ret = fn(e.data.payload, {
            source: e.source
          });
        } catch (err) {
          reject(err);
        }

        // Note: only resolve if returned value is not undefined. With this, we can have multiple
        // listeners added to onMessage, and each one takes care of what it really cares
        if (ret !== undefined) {
          resolve(ret);
        }
      }).then(function (res) {
        e.source.postMessage(_extends({}, tpl, {
          payload: res
        }), '*');
      }, function (err) {
        e.source.postMessage(_extends({}, tpl, {
          error: err.message
        }), '*');
      });
    }
  };

  win.addEventListener('message', onMsg);
  return function () {
    return win.removeEventListener('message', onMsg);
  };
};

/***/ }),

/***/ "./src/common/ipc/ipc_cs.js":
/*!**********************************!*\
  !*** ./src/common/ipc/ipc_cs.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ipc_bg_cs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ipc_bg_cs */ "./src/common/ipc/ipc_bg_cs.js");


var throwNotTop = function throwNotTop() {
  throw new Error('You are not a top window, not allowed to initialize/use csIpc');
};

// Note: csIpc is only available to top window
var ipc = window.top === window ? Object(_ipc_bg_cs__WEBPACK_IMPORTED_MODULE_0__["csInit"])() : {
  ask: throwNotTop,
  send: throwNotTop,
  onAsk: throwNotTop,
  destroy: throwNotTop

  // Note: one ipc singleton per content script
};/* harmony default export */ __webpack_exports__["default"] = (ipc);

/***/ }),

/***/ "./src/common/lib/file_saver.js":
/*!**************************************!*\
  !*** ./src/common/lib/file_saver.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.3.2
 * 2016-06-16 18:25:19
 *
 * By Eli Grey, http://eligrey.com
 * License: MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs || function (view) {
	"use strict";
	// IE <10 is explicitly unsupported

	if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
		return;
	}
	var doc = view.document
	// only get URL when necessary in case Blob.js hasn't overridden it yet
	,
	    get_URL = function get_URL() {
		return view.URL || view.webkitURL || view;
	},
	    is_firefox_extension = window.location.protocol === 'moz-extension:',
	    create_link_for_ff_ext = function create_link_for_ff_ext() {
		// Temporary fix for firefox extension on Mac / Linux
		// reference: https://bugzilla.mozilla.org/show_bug.cgi?format=default&id=1420419
		var iframeId = 'downloadFrame';
		var $iframe = doc.createElementNS("http://www.w3.org/1999/xhtml", "iframe");

		$iframe.id = iframeId;
		$iframe.style.visibility = 'hidden';
		$iframe.style.position = 'absolute';
		$iframe.style.left = '-999px';
		doc.body.appendChild($iframe);

		var link = $iframe.contentDocument.createElement('a');

		// wait for next tick when iframe is already in document,
		// otherwise link won't be add to body of iframe
		setTimeout(function () {
			$iframe.contentDocument.body.appendChild(link);
		});

		return link;
	},
	    save_link = is_firefox_extension ? create_link_for_ff_ext() : doc.createElementNS("http://www.w3.org/1999/xhtml", "a"),
	    can_use_save_link = "download" in save_link,
	    click = function click(node) {
		var event = new MouseEvent("click");
		node.dispatchEvent(event);
	},
	    is_safari = /constructor/i.test(view.HTMLElement) || view.safari,
	    is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent),
	    throw_outside = function throw_outside(ex) {
		(view.setImmediate || view.setTimeout)(function () {
			throw ex;
		}, 0);
	},
	    force_saveable_type = "application/octet-stream"
	// the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
	,
	    arbitrary_revoke_timeout = 1000 * 40 // in ms
	,
	    revoke = function revoke(file) {
		var revoker = function revoker() {
			if (typeof file === "string") {
				// file is an object URL
				get_URL().revokeObjectURL(file);
			} else {
				// file is a File
				file.remove();
			}
		};
		setTimeout(revoker, arbitrary_revoke_timeout);
	},
	    dispatch = function dispatch(filesaver, event_types, event) {
		event_types = [].concat(event_types);
		var i = event_types.length;
		while (i--) {
			var listener = filesaver["on" + event_types[i]];
			if (typeof listener === "function") {
				try {
					listener.call(filesaver, event || filesaver);
				} catch (ex) {
					throw_outside(ex);
				}
			}
		}
	},
	    auto_bom = function auto_bom(blob) {
		// prepend BOM for UTF-8 XML and text/* types (including HTML)
		// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
		if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
			return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type });
		}
		return blob;
	},
	    FileSaver = function FileSaver(blob, name, no_auto_bom) {
		if (!no_auto_bom) {
			blob = auto_bom(blob);
		}
		// First try a.download, then web filesystem, then object URLs
		var filesaver = this,
		    type = blob.type,
		    force = type === force_saveable_type,
		    object_url,
		    dispatch_all = function dispatch_all() {
			dispatch(filesaver, "writestart progress write writeend".split(" "));
		}
		// on any filesys errors revert to saving with object URLs
		,
		    fs_error = function fs_error() {
			if ((is_chrome_ios || force && is_safari) && view.FileReader) {
				// Safari doesn't allow downloading of blob urls
				var reader = new FileReader();
				reader.onloadend = function () {
					var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
					var popup = view.open(url, '_blank');
					if (!popup) view.location.href = url;
					url = undefined; // release reference before dispatching
					filesaver.readyState = filesaver.DONE;
					dispatch_all();
				};
				reader.readAsDataURL(blob);
				filesaver.readyState = filesaver.INIT;
				return;
			}
			// don't create more object URLs than needed
			if (!object_url) {
				object_url = get_URL().createObjectURL(blob);
			}
			if (force) {
				view.location.href = object_url;
			} else {
				var opened = view.open(object_url, "_blank");
				if (!opened) {
					// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
					view.location.href = object_url;
				}
			}
			filesaver.readyState = filesaver.DONE;
			dispatch_all();
			revoke(object_url);
		};
		filesaver.readyState = filesaver.INIT;

		if (can_use_save_link) {
			object_url = get_URL().createObjectURL(blob);
			setTimeout(function () {
				save_link.href = object_url;
				save_link.download = name;
				click(save_link);
				dispatch_all();
				revoke(object_url);
				filesaver.readyState = filesaver.DONE;
			});
			return;
		}

		fs_error();
	},
	    FS_proto = FileSaver.prototype,
	    saveAs = function saveAs(blob, name, no_auto_bom) {
		return new FileSaver(blob, name || blob.name || "download", no_auto_bom);
	};
	// IE 10+ (native saveAs)
	if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
		return function (blob, name, no_auto_bom) {
			name = name || blob.name || "download";

			if (!no_auto_bom) {
				blob = auto_bom(blob);
			}
			return navigator.msSaveOrOpenBlob(blob, name);
		};
	}

	FS_proto.abort = function () {};
	FS_proto.readyState = FS_proto.INIT = 0;
	FS_proto.WRITING = 1;
	FS_proto.DONE = 2;

	FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;

	return saveAs;
}(typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content);
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if ( true && module.exports) {
	module.exports.saveAs = saveAs;
} else if ( true && __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") !== null && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js") !== null) {
	!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
		return saveAs;
	}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}

/***/ }),

/***/ "./src/common/lib/keysim.js":
/*!**********************************!*\
  !*** ./src/common/lib/keysim.js ***!
  \**********************************/
/*! exports provided: KeyEvents, Keystroke, Keyboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyEvents", function() { return KeyEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Keystroke", function() { return Keystroke; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Keyboard", function() { return Keyboard; });
/* harmony import */ var dom_element_is_natively_editable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dom-element-is-natively-editable */ "./node_modules/dom-element-is-natively-editable/index.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var CTRL = 1 << 0;
var META = 1 << 1;
var ALT = 1 << 2;
var SHIFT = 1 << 3;

// Key Events
var KeyEvents = {
  DOWN: 1 << 0,
  PRESS: 1 << 1,
  UP: 1 << 2,
  INPUT: 1 << 3
};
KeyEvents.ALL = KeyEvents.DOWN | KeyEvents.PRESS | KeyEvents.UP | KeyEvents.INPUT;

/**
 * Represents a keystroke, or a single key code with a set of active modifiers.
 *
 * @class Keystroke
 */
var Keystroke =
/**
 * @param {number} modifiers A bitmask formed by CTRL, META, ALT, and SHIFT.
 * @param {number} keyCode
 */
function Keystroke(modifiers, keyCode) {
  _classCallCheck(this, Keystroke);

  this.modifiers = modifiers;
  this.ctrlKey = !!(modifiers & CTRL);
  this.metaKey = !!(modifiers & META);
  this.altKey = !!(modifiers & ALT);
  this.shiftKey = !!(modifiers & SHIFT);
  this.keyCode = keyCode;
}

/**
 * Gets the bitmask value for the "control" modifier.
 *
 * @type {number}
 */


/**
 * Gets the bitmask value for the "meta" modifier.
 *
 * @return {number}
 */


/**
 * Gets the bitmask value for the "alt" modifier.
 *
 * @return {number}
 */


/**
 * Gets the bitmask value for the "shift" modifier.
 *
 * @return {number}
 */
;

/**
 * Simulates a keyboard with a particular key-to-character and key-to-action
 * mapping. Use `US_ENGLISH` to get a pre-configured keyboard.
 */
Keystroke.CTRL = CTRL;
Keystroke.META = META;
Keystroke.ALT = ALT;
Keystroke.SHIFT = SHIFT;
var Keyboard = function () {
  /**
   * @param {Object.<number, Keystroke>} charCodeKeyCodeMap
   * @param {Object.<string, number>} actionKeyCodeMap
   */
  function Keyboard(charCodeKeyCodeMap, actionKeyCodeMap) {
    _classCallCheck(this, Keyboard);

    this._charCodeKeyCodeMap = charCodeKeyCodeMap;
    this._actionKeyCodeMap = actionKeyCodeMap;
  }

  /**
   * Determines the character code generated by pressing the given keystroke.
   *
   * @param {Keystroke} keystroke
   * @return {?number}
   */


  _createClass(Keyboard, [{
    key: 'charCodeForKeystroke',
    value: function charCodeForKeystroke(keystroke) {
      var map = this._charCodeKeyCodeMap;
      for (var charCode in map) {
        if (Object.prototype.hasOwnProperty.call(map, charCode)) {
          var keystrokeForCharCode = map[charCode];
          if (keystroke.keyCode === keystrokeForCharCode.keyCode && keystroke.modifiers === keystrokeForCharCode.modifiers) {
            return parseInt(charCode, 10);
          }
        }
      }
      return null;
    }

    /**
     * Creates an event ready for dispatching onto the given target.
     *
     * @param {string} type One of "keydown", "keypress", "keyup", "textInput" or "input".
     * @param {Keystroke} keystroke
     * @param {HTMLElement} target
     * @return {Event}
     */

  }, {
    key: 'createEventFromKeystroke',
    value: function createEventFromKeystroke(type, keystroke, target) {
      var document = target.ownerDocument;
      var window = document.defaultView;
      var Event = window.Event;

      var event = void 0;

      try {
        event = new Event(type);
      } catch (e) {
        event = document.createEvent('UIEvents');
      }

      event.initEvent(type, true, true);

      switch (type) {
        case 'textInput':
          event.data = String.fromCharCode(this.charCodeForKeystroke(keystroke));
          break;

        case 'keydown':
        case 'keypress':
        case 'keyup':
          event.shiftKey = keystroke.shiftKey;
          event.altKey = keystroke.altKey;
          event.metaKey = keystroke.metaKey;
          event.ctrlKey = keystroke.ctrlKey;
          event.keyCode = type === 'keypress' ? this.charCodeForKeystroke(keystroke) : keystroke.keyCode;
          event.charCode = type === 'keypress' ? event.keyCode : 0;
          event.which = event.keyCode;
          break;
      }

      return event;
    }

    /**
     * Fires the correct sequence of events on the given target as if the given
     * action was undertaken by a human.
     *
     * @param {string} action e.g. "alt+shift+left" or "backspace"
     * @param {HTMLElement} target
     */

  }, {
    key: 'dispatchEventsForAction',
    value: function dispatchEventsForAction(action, target) {
      var keystroke = this.keystrokeForAction(action);
      this.dispatchEventsForKeystroke(keystroke, target);
    }

    /**
     * Fires the correct sequence of events on the given target as if the given
     * input had been typed by a human.
     *
     * @param {string} input
     * @param {HTMLElement} target
     */

  }, {
    key: 'dispatchEventsForInput',
    value: function dispatchEventsForInput(input, target) {
      var currentModifierState = 0;
      for (var i = 0, length = input.length; i < length; i++) {
        var keystroke = this.keystrokeForCharCode(input.charCodeAt(i));
        if (!keystroke) continue;

        this.dispatchModifierStateTransition(target, currentModifierState, keystroke.modifiers);
        this.dispatchEventsForKeystroke(keystroke, target, false);
        currentModifierState = keystroke.modifiers;
      }
      this.dispatchModifierStateTransition(target, currentModifierState, 0);
    }

    /**
     * Fires the correct sequence of events on the given target as if the given
     * keystroke was performed by a human. When simulating, for example, typing
     * the letter "A" (assuming a U.S. English keyboard) then the sequence will
     * look like this:
     *
     *   keydown   keyCode=16 (SHIFT) charCode=0      shiftKey=true
     *   keydown   keyCode=65 (A)     charCode=0      shiftKey=true
     *   keypress  keyCode=65 (A)     charCode=65 (A) shiftKey=true
     *   textInput data=A
     *   input
     *   keyup     keyCode=65 (A)     charCode=0      shiftKey=true
     *   keyup     keyCode=16 (SHIFT) charCode=0      shiftKey=false
     *
     * If the keystroke would not cause a character to be input, such as when
     * pressing alt+shift+left, the sequence looks like this:
     *
     *   keydown   keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=true
     *   keydown   keyCode=18 (ALT)   charCode=0 altKey=true  shiftKey=true
     *   keydown   keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true
     *   keyup     keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true
     *   keyup     keyCode=18 (ALT)   charCode=0 altKey=false shiftKey=true
     *   keyup     keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=false
     *
     * To disable handling of modifier keys, call with `transitionModifers` set
     * to false. Doing so will omit the keydown and keyup events associated with
     * shift, ctrl, alt, and meta keys surrounding the actual keystroke.
     *
     * @param {Keystroke} keystroke
     * @param {HTMLElement} target
     * @param {boolean=} transitionModifiers
     * @param {number} events
     */

  }, {
    key: 'dispatchEventsForKeystroke',
    value: function dispatchEventsForKeystroke(keystroke, target) {
      var transitionModifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var events = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : KeyEvents.ALL;

      if (!keystroke) return;

      if (transitionModifiers) {
        this.dispatchModifierStateTransition(target, 0, keystroke.modifiers, events);
      }

      var keydownEvent = void 0;
      if (events & KeyEvents.DOWN) {
        keydownEvent = this.createEventFromKeystroke('keydown', keystroke, target);
      }

      if (keydownEvent && target.dispatchEvent(keydownEvent) && this.targetCanReceiveTextInput(target)) {
        var keypressEvent = void 0;
        if (events & KeyEvents.PRESS) {
          keypressEvent = this.createEventFromKeystroke('keypress', keystroke, target);
        }
        if (keypressEvent && keypressEvent.charCode && target.dispatchEvent(keypressEvent)) {
          if (events & KeyEvents.INPUT) {
            var textinputEvent = this.createEventFromKeystroke('textInput', keystroke, target);
            target.dispatchEvent(textinputEvent);

            var inputEvent = this.createEventFromKeystroke('input', keystroke, target);
            target.dispatchEvent(inputEvent);
          }
        }
      }

      if (events & KeyEvents.UP) {
        var keyupEvent = this.createEventFromKeystroke('keyup', keystroke, target);
        target.dispatchEvent(keyupEvent);
      }

      if (transitionModifiers) {
        this.dispatchModifierStateTransition(target, keystroke.modifiers, 0);
      }
    }

    /**
     * Transitions from one modifier state to another by dispatching key events.
     *
     * @param {EventTarget} target
     * @param {number} fromModifierState
     * @param {number} toModifierState
     * @param {number} events
     * @private
     */

  }, {
    key: 'dispatchModifierStateTransition',
    value: function dispatchModifierStateTransition(target, fromModifierState, toModifierState) {
      var events = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : KeyEvents.ALL;

      var currentModifierState = fromModifierState;
      var didHaveMeta = (fromModifierState & META) === META;
      var willHaveMeta = (toModifierState & META) === META;
      var didHaveCtrl = (fromModifierState & CTRL) === CTRL;
      var willHaveCtrl = (toModifierState & CTRL) === CTRL;
      var didHaveShift = (fromModifierState & SHIFT) === SHIFT;
      var willHaveShift = (toModifierState & SHIFT) === SHIFT;
      var didHaveAlt = (fromModifierState & ALT) === ALT;
      var willHaveAlt = (toModifierState & ALT) === ALT;

      var includeKeyUp = events & KeyEvents.UP;
      var includeKeyDown = events & KeyEvents.DOWN;

      if (includeKeyUp && didHaveMeta === true && willHaveMeta === false) {
        // Release the meta key.
        currentModifierState &= ~META;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.META), target));
      }

      if (includeKeyUp && didHaveCtrl === true && willHaveCtrl === false) {
        // Release the ctrl key.
        currentModifierState &= ~CTRL;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL), target));
      }

      if (includeKeyUp && didHaveShift === true && willHaveShift === false) {
        // Release the shift key.
        currentModifierState &= ~SHIFT;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT), target));
      }

      if (includeKeyUp && didHaveAlt === true && willHaveAlt === false) {
        // Release the alt key.
        currentModifierState &= ~ALT;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT), target));
      }

      if (includeKeyDown && didHaveMeta === false && willHaveMeta === true) {
        // Press the meta key.
        currentModifierState |= META;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.META), target));
      }

      if (includeKeyDown && didHaveCtrl === false && willHaveCtrl === true) {
        // Press the ctrl key.
        currentModifierState |= CTRL;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL), target));
      }

      if (includeKeyDown && didHaveShift === false && willHaveShift === true) {
        // Press the shift key.
        currentModifierState |= SHIFT;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT), target));
      }

      if (includeKeyDown && didHaveAlt === false && willHaveAlt === true) {
        // Press the alt key.
        currentModifierState |= ALT;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT), target));
      }

      if (currentModifierState !== toModifierState) {
        throw new Error('internal error, expected modifier state: ' + toModifierState + (', got: ' + currentModifierState));
      }
    }

    /**
     * Returns the keystroke associated with the given action.
     *
     * @param {string} action
     * @return {?Keystroke}
     */

  }, {
    key: 'keystrokeForAction',
    value: function keystrokeForAction(action) {
      var keyCode = null;
      var modifiers = 0;

      // Note: when it comes to a single character as '+',
      // should not take it as a key combiniation (no action.split)
      var parts = action.length === 1 ? [action] : action.split('+');
      var lastPart = parts.pop();

      parts.forEach(function (part) {
        switch (part.toUpperCase()) {
          case 'CTRL':
            modifiers |= CTRL;
            break;
          case 'META':
            modifiers |= META;
            break;
          case 'ALT':
            modifiers |= ALT;
            break;
          case 'SHIFT':
            modifiers |= SHIFT;
            break;
          default:
            console.error('parts', parts);
            throw new Error('in "' + action + '", invalid modifier: ' + part);
        }
      });

      if (lastPart.toUpperCase() in this._actionKeyCodeMap) {
        keyCode = this._actionKeyCodeMap[lastPart.toUpperCase()];
      } else if (lastPart.length === 1) {
        var lastPartKeystroke = this.keystrokeForCharCode(lastPart.charCodeAt(0));
        if (!lastPartKeystroke) return null;

        modifiers |= lastPartKeystroke.modifiers;
        keyCode = lastPartKeystroke.keyCode;
      } else {
        throw new Error('in "' + action + '", invalid action: ' + lastPart);
      }

      return new Keystroke(modifiers, keyCode);
    }

    /**
     * Gets the keystroke used to generate the given character code.
     *
     * @param {number} charCode
     * @return {?Keystroke}
     */

  }, {
    key: 'keystrokeForCharCode',
    value: function keystrokeForCharCode(charCode) {
      return this._charCodeKeyCodeMap[charCode] || null;
    }

    /**
     * @param {EventTarget} target
     * @private
     */

  }, {
    key: 'targetCanReceiveTextInput',
    value: function targetCanReceiveTextInput(target) {
      if (!target) {
        return false;
      }

      return Object(dom_element_is_natively_editable__WEBPACK_IMPORTED_MODULE_0__["default"])(target);
    }
  }]);

  return Keyboard;
}();

var US_ENGLISH_CHARCODE_KEYCODE_MAP = {
  32: new Keystroke(0, 32), // <space>
  33: new Keystroke(SHIFT, 49), // !
  34: new Keystroke(SHIFT, 222), // "
  35: new Keystroke(SHIFT, 51), // #
  36: new Keystroke(SHIFT, 52), // $
  37: new Keystroke(SHIFT, 53), // %
  38: new Keystroke(SHIFT, 55), // &
  39: new Keystroke(0, 222), // '
  40: new Keystroke(SHIFT, 57), // (
  41: new Keystroke(SHIFT, 48), // )
  42: new Keystroke(SHIFT, 56), // *
  43: new Keystroke(SHIFT, 187), // +
  44: new Keystroke(0, 188), // ,
  45: new Keystroke(0, 189), // -
  46: new Keystroke(0, 190), // .
  47: new Keystroke(0, 191), // /
  48: new Keystroke(0, 48), // 0
  49: new Keystroke(0, 49), // 1
  50: new Keystroke(0, 50), // 2
  51: new Keystroke(0, 51), // 3
  52: new Keystroke(0, 52), // 4
  53: new Keystroke(0, 53), // 5
  54: new Keystroke(0, 54), // 6
  55: new Keystroke(0, 55), // 7
  56: new Keystroke(0, 56), // 8
  57: new Keystroke(0, 57), // 9
  58: new Keystroke(SHIFT, 186), // :
  59: new Keystroke(0, 186), // ;
  60: new Keystroke(SHIFT, 188), // <
  61: new Keystroke(0, 187), // =
  62: new Keystroke(SHIFT, 190), // >
  63: new Keystroke(SHIFT, 191), // ?
  64: new Keystroke(SHIFT, 50), // @
  65: new Keystroke(SHIFT, 65), // A
  66: new Keystroke(SHIFT, 66), // B
  67: new Keystroke(SHIFT, 67), // C
  68: new Keystroke(SHIFT, 68), // D
  69: new Keystroke(SHIFT, 69), // E
  70: new Keystroke(SHIFT, 70), // F
  71: new Keystroke(SHIFT, 71), // G
  72: new Keystroke(SHIFT, 72), // H
  73: new Keystroke(SHIFT, 73), // I
  74: new Keystroke(SHIFT, 74), // J
  75: new Keystroke(SHIFT, 75), // K
  76: new Keystroke(SHIFT, 76), // L
  77: new Keystroke(SHIFT, 77), // M
  78: new Keystroke(SHIFT, 78), // N
  79: new Keystroke(SHIFT, 79), // O
  80: new Keystroke(SHIFT, 80), // P
  81: new Keystroke(SHIFT, 81), // Q
  82: new Keystroke(SHIFT, 82), // R
  83: new Keystroke(SHIFT, 83), // S
  84: new Keystroke(SHIFT, 84), // T
  85: new Keystroke(SHIFT, 85), // U
  86: new Keystroke(SHIFT, 86), // V
  87: new Keystroke(SHIFT, 87), // W
  88: new Keystroke(SHIFT, 88), // X
  89: new Keystroke(SHIFT, 89), // Y
  90: new Keystroke(SHIFT, 90), // Z
  91: new Keystroke(0, 219), // [
  92: new Keystroke(0, 220), // \
  93: new Keystroke(0, 221), // ]
  94: new Keystroke(SHIFT, 54), // ^
  95: new Keystroke(SHIFT, 189), // _
  96: new Keystroke(0, 192), // `
  97: new Keystroke(0, 65), // a
  98: new Keystroke(0, 66), // b
  99: new Keystroke(0, 67), // c
  100: new Keystroke(0, 68), // d
  101: new Keystroke(0, 69), // e
  102: new Keystroke(0, 70), // f
  103: new Keystroke(0, 71), // g
  104: new Keystroke(0, 72), // h
  105: new Keystroke(0, 73), // i
  106: new Keystroke(0, 74), // j
  107: new Keystroke(0, 75), // k
  108: new Keystroke(0, 76), // l
  109: new Keystroke(0, 77), // m
  110: new Keystroke(0, 78), // n
  111: new Keystroke(0, 79), // o
  112: new Keystroke(0, 80), // p
  113: new Keystroke(0, 81), // q
  114: new Keystroke(0, 82), // r
  115: new Keystroke(0, 83), // s
  116: new Keystroke(0, 84), // t
  117: new Keystroke(0, 85), // u
  118: new Keystroke(0, 86), // v
  119: new Keystroke(0, 87), // w
  120: new Keystroke(0, 88), // x
  121: new Keystroke(0, 89), // y
  122: new Keystroke(0, 90), // z
  123: new Keystroke(SHIFT, 219), // {
  124: new Keystroke(SHIFT, 220), // |
  125: new Keystroke(SHIFT, 221), // }
  126: new Keystroke(SHIFT, 192) // ~
};

var US_ENGLISH_ACTION_KEYCODE_MAP = {
  BACKSPACE: 8,
  TAB: 9,
  ENTER: 13,
  SHIFT: 16,
  CTRL: 17,
  ALT: 18,
  PAUSE: 19,
  CAPSLOCK: 20,
  ESCAPE: 27,
  PAGEUP: 33,
  PAGEDOWN: 34,
  END: 35,
  HOME: 36,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  INSERT: 45,
  DELETE: 46,
  META: 91,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123
};

/**
 * Gets a keyboard instance configured as a U.S. English keyboard would be.
 *
 * @return {Keyboard}
 */
Keyboard.US_ENGLISH = new Keyboard(US_ENGLISH_CHARCODE_KEYCODE_MAP, US_ENGLISH_ACTION_KEYCODE_MAP);

/***/ }),

/***/ "./src/common/macro_log.js":
/*!*********************************!*\
  !*** ./src/common/macro_log.js ***!
  \*********************************/
/*! exports provided: renderLogType, renderLog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderLogType", function() { return renderLogType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderLog", function() { return renderLog; });

var renderLogType = function renderLogType(log) {
  switch (log.type) {
    case 'reflect':
      return '[info]';

    case 'error':
      return log.options && log.options.ignored ? '[error][ignored]' : '[error]';

    default:
      return '[' + log.type + ']';
  }
};

var renderLog = function renderLog(log) {
  return renderLogType(log) + ' ' + log.text;
};

/***/ }),

/***/ "./src/common/player.js":
/*!******************************!*\
  !*** ./src/common/player.js ***!
  \******************************/
/*! exports provided: Player, getPlayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Player", function() { return Player; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPlayer", function() { return getPlayer; });
/* harmony import */ var event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! event-emitter */ "./node_modules/event-emitter/index.js");
/* harmony import */ var event_emitter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(event_emitter__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/common/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var MODE = {
  STRAIGHT: 'STRAIGHT',
  SINGLE: 'SINGLE',
  LOOP: 'LOOP'
};

var STATUS = {
  PLAYING: 'PLAYING',
  PAUSED: 'PAUSED',
  STOPPED: 'STOPPED',
  ERROR: 'ERROR'
};

var END_REASON = {
  COMPLETE: 'COMPLETE',
  ERROR: 'ERROR',
  MANUAL: 'MANUAL'
};

var isEmpty = function isEmpty(x) {
  return x === undefined || x === null;
};

var initialState = {
  startUrl: null,

  startIndex: null,
  endIndex: null,
  nextIndex: null,
  errorIndex: null,
  doneIndices: [],

  mode: MODE.STRAIGHT,
  resources: [],

  // preDelay: 0,
  // postDelay: 0,

  status: STATUS.STOPPED

  // Note: A generic player for consuming some kind of resources
  // It supports 3 modes: single, straight, loop.
  // Also for straight and loop, it can start or end at any valid index you want
  //
  // The main API of a player is
  // 1. constructor({ run: Function,  prepare: Function })
  // 2. play(config)
  // 3. pause()
  // 4. resume()
  // 5. stop()
  //
  // Events it emits
  // 1. START
  // 2. TO_PLAY
  // 3. PLAYED_LIST
  // 4. PAUSED
  // 5. RESUMED
  // 6. END
  // 7. ERROR

};var Player = function () {
  function Player(opts, state) {
    _classCallCheck(this, Player);

    this.state = _extends({}, initialState);

    if (!opts) {
      throw new Error('Player - constructor: must provide opts as 1st argument');
    }

    if (typeof opts.run !== 'function') {
      throw new Error('Player - constructor: must provide a run function');
    }

    if (typeof opts.prepare !== 'function') {
      throw new Error('Player - constructor: must provide a prepare function');
    }

    if (typeof opts.handleResult !== 'function') {
      throw new Error('Player - constructor: must provide a handleResult function');
    }

    this.__run = opts.run;
    this.__prepare = opts.prepare;
    this.__handle = opts.handleResult;

    this.__setState(state || {});
  }

  _createClass(Player, [{
    key: 'play',
    value: function play(config) {
      var _this = this;

      if (!config) {
        throw new Error('Player - play: config should not be empty');
      }

      if (!config.mode || Object.keys(MODE).indexOf(config.mode) === -1) {
        throw new Error('Player - play: must provide a valid mode, now it is ' + config.mode);
      }

      if (config.mode === MODE.LOOP && (!config.loopsStart || config.loopsStart < 0 || Math.floor(config.loopsStart) !== config.loopsStart || !config.loopsEnd || config.loopsEnd < config.loopsStart || Math.floor(config.loopsEnd) !== config.loopsEnd)) {
        throw new Error('Player - play: must provide a valid tuple of "loopsStart" and "loopsEnd" in loop mode, now it is ' + config.loopsStart + ', ' + config.loopsEnd);
      }

      if (!config.resources || !config.resources.length) {
        throw new Error('Player - play: resources should not be empty');
      }

      if (isEmpty(config.startIndex) || config.startIndex < 0 || config.startIndex >= config.resources.length) {
        throw new Error('Player - play: startIndex out of range, now it is ' + config.startIndex + ', len: ' + config.resources.length);
      }

      // Note: endIndex could be omitted
      if (!isEmpty(config.endIndex) && (config.endIndex < 0 || config.endIndex >= config.resources.length)) {
        throw new Error('Player - play: endIndex out of range, now it is ' + config.endIndex + ', len: ' + config.resources.length);
      }

      var startIndex = config.startIndex,
          startUrl = config.startUrl,
          resources = config.resources,
          title = config.title,
          extra = config.extra;

      var endIndex = config.endIndex || resources.length - 1;
      var basicState = {
        title: title,
        extra: extra,
        startUrl: startUrl,
        startIndex: startIndex,
        endIndex: endIndex,
        nextIndex: startIndex,
        errorIndex: null,
        doneIndices: [],
        mode: config.mode,
        loopsCursor: 1,
        loopsStart: 1,
        loopsEnd: 1,
        resources: config.resources,
        breakpoints: config.breakpoints || [],
        status: STATUS.PLAYING,
        public: config.public || {},
        callback: config.callback || function () {},
        lastPlayConfig: config
      };['preDelay', 'postDelay'].forEach(function (key) {
        if (isEmpty(config[key])) return;
        basicState[key] = config[key];
      });

      switch (config.mode) {
        case MODE.STRAIGHT:
          this.__setState(_extends({}, basicState));
          break;

        case MODE.SINGLE:
          this.__setState(_extends({}, basicState, {
            endIndex: startIndex
          }));
          break;

        case MODE.LOOP:
          this.__setState(_extends({}, basicState, {
            loopsCursor: config.loopsStart,
            loopsStart: config.loopsStart,
            loopsEnd: config.loopsEnd
          }));
          break;

        default:
          break;
      }

      this.emit('START', {
        title: title,
        loopsCursor: this.state.loopsCursor,
        extra: this.state.extra
      });

      return Promise.resolve().then(function () {
        return _this.__prepare(_this.state);
      }).then(function () {
        return _this.__go(null, config.isStep);
      }, function (e) {
        return _this.__errLog(e, e.errorIndex);
      });
    }
  }, {
    key: 'pause',
    value: function pause() {
      this.__setState({
        status: STATUS.PAUSED
      });

      this.emit('PAUSED', { extra: this.state.extra });
    }
  }, {
    key: 'resume',
    value: function resume(isStep) {
      this.__setState({
        status: STATUS.PLAYING
      });

      this.emit('RESUMED', { extra: this.state.extra });
      this.__go(null, isStep);
    }
  }, {
    key: 'stop',
    value: function stop(opts) {
      this.__end(END_REASON.MANUAL, opts);
    }
  }, {
    key: 'stopWithError',
    value: function stopWithError(error) {
      this.__errLog(error);
    }
  }, {
    key: 'jumpTo',
    value: function jumpTo(nextIndex) {
      var resources = this.state.resources;

      // Note: validate nextIndex by resources.length instead of startIndex and endIndex,
      // to make it possible for 'run from here' to jump to commands ahead of the start point

      if (nextIndex < 0 || nextIndex >= resources.length) {
        throw new Error('jumpTo: nextIndex out of range');
      }

      this.__setState({
        nextIndex: nextIndex
      });
    }
  }, {
    key: 'setPostDelay',
    value: function setPostDelay(n) {
      this.__setState({
        postDelay: n
      });
    }
  }, {
    key: 'getStatus',
    value: function getStatus() {
      return this.state.status;
    }
  }, {
    key: 'replayLastConfig',
    value: function replayLastConfig() {
      var config = this.state.lastPlayConfig;
      if (!config) throw new Error('No last play config available');
      return this.play(config);
    }
  }, {
    key: '__go',
    value: function __go(token, isStep) {
      var _this2 = this;

      // Note: in case it is returned from previous call

      if (token === undefined || token === null) {
        this.token = token = Math.random();
      } else if (token !== this.token) {
        return;
      }

      var guardToken = function guardToken(fn) {
        return function () {
          if (token !== _this2.token) throw new Error('token expired');
          return fn.apply(undefined, arguments);
        };
      };

      var _state = this.state,
          resources = _state.resources,
          nextIndex = _state.nextIndex,
          preDelay = _state.preDelay;

      var pre = preDelay > 0 ? this.__delay(function () {
        return undefined;
      }, preDelay) : Promise.resolve();

      // Note: the flow of this process:
      // 1. delay if `preDelay` set
      // 2. check `__shouldContinue`
      // 3. stop if the player is stopped or paused
      // 4. otherwise call `__run` to actually consume the current resource
      // 5. set the state to next by calling `__setNext`
      // 6. delay if `postDelay` set
      return pre.then(function () {
        return _this2.__shouldContinue();
      }).then(function (_ref) {
        var paused = _ref.paused,
            stopped = _ref.stopped;

        if (stopped) return _this2.__end(END_REASON.COMPLETE);else if (paused) return;

        var _state2 = _this2.state,
            resources = _state2.resources,
            nextIndex = _state2.nextIndex,
            startIndex = _state2.startIndex,
            loopsCursor = _state2.loopsCursor,
            loopsStart = _state2.loopsStart,
            loopsEnd = _state2.loopsEnd;

        // Note: when we're running loops

        if (nextIndex === startIndex) {
          var obj = {
            loopsCursor: loopsCursor,
            index: nextIndex,
            currentLoop: loopsCursor - loopsStart + 1,
            loops: loopsEnd - loopsStart + 1,
            resource: resources[nextIndex],
            extra: _this2.state.extra
          };

          _this2.emit('LOOP_START', obj);

          if (loopsCursor !== loopsStart) {
            _this2.emit('LOOP_RESTART', obj);
          }
        }

        _this2.emit('TO_PLAY', {
          index: nextIndex,
          currentLoop: loopsCursor - loopsStart + 1,
          loops: loopsEnd - loopsStart + 1,
          resource: resources[nextIndex],
          extra: _this2.state.extra
        });

        // Note: there will never be two breakpoints in straight. Use `lastBreakpoint` to tell whether we just hit a breakpoint
        // Also note that, 'TO_PLAY' events need to be fired before we pause.
        if (_this2.state.lastBreakpoint === undefined && _this2.state.breakpoints.indexOf(nextIndex) !== -1) {
          _this2.__setState({ lastBreakpoint: nextIndex });
          _this2.emit('BREAKPOINT', {
            index: nextIndex,
            currentLoop: loopsCursor - loopsStart + 1,
            loops: loopsEnd - loopsStart + 1,
            resource: resources[nextIndex],
            extra: _this2.state.extra
          });
          return _this2.pause();
        } else {
          _this2.__setState({ lastBreakpoint: undefined });
        }

        // Note: Check whether token expired or not after each async operations
        // Also also in the final catch to prevent unnecessary invoke of __errLog
        return _this2.__run(resources[nextIndex], _this2.state).then(guardToken(function (res) {
          // Note: allow users to handle the result
          return _this2.__handle(res, resources[nextIndex], _this2.state).then(guardToken(function (nextIndex) {
            // Note: __handle has the chance to return a `nextIndex`, mostly when it's
            // from a flow logic. But still, it could be undefined for normal commands
            var oldLoopsCursor = _this2.state.loopsCursor;

            _this2.__setNext(nextIndex);
            _this2.emit('PLAYED_LIST', {
              indices: _this2.state.doneIndices,
              extra: _this2.state.extra
            });

            return oldLoopsCursor !== _this2.state.loopsCursor;
          })).then(function (isLoopsCursorChanged) {
            // __handle may change postDelay
            var postDelay = _this2.state.postDelay;

            var delay = Math.max(postDelay, isLoopsCursorChanged ? 10 : 0);
            return delay > 0 ? _this2.__delay(function () {
              return undefined;
            }, delay) : Promise.resolve();
          }).then(function () {
            if (isStep) return _this2.pause();
            return _this2.__go(token);
          });
        })).catch(guardToken(function (err) {
          return _this2.__errLog(err);
        }));
      });
    }
  }, {
    key: '__shouldContinue',
    value: function __shouldContinue() {
      var _state3 = this.state,
          status = _state3.status,
          mode = _state3.mode,
          nextIndex = _state3.nextIndex,
          startIndex = _state3.startIndex,
          endIndex = _state3.endIndex;

      var ret = void 0;

      if (status === STATUS.PLAYING && nextIndex >= startIndex && nextIndex <= endIndex) {
        ret = { paused: false, stopped: false };
      } else if (status === STATUS.PAUSED) {
        ret = { paused: true };
      } else {
        ret = { stopped: true };
      }

      // Note: make this function return promise, just in case
      // an async check is needed in future
      return Promise.resolve(ret);
    }
  }, {
    key: '__end',
    value: function __end(reason, opts) {
      // Note: CANNOT end the player twice
      if (this.state.status === STATUS.STOPPED) return;

      if (Object.keys(END_REASON).indexOf(reason) === -1) {
        throw new Error('Player - __end: invalid reason, ' + reason);
      }

      if (!opts || !opts.silent) {
        this.emit('END', { opts: opts, reason: reason, extra: this.state.extra });

        if (reason !== END_REASON.ERROR) {
          this.state.callback(null, reason);
        }
      }

      this.__setState(initialState);
    }
  }, {
    key: '__errLog',
    value: function __errLog(err, errorIndex) {
      // Note: CANNOT log error if player is already stopped
      if (this.state.status === STATUS.STOPPED) return;

      this.emit('ERROR', {
        errorIndex: errorIndex !== undefined ? errorIndex : this.state.nextIndex,
        msg: err && err.message,
        extra: this.state.extra,
        restart: !!err.restart
      });
      this.state.callback(err, null);
      this.__end(END_REASON.ERROR);
    }
  }, {
    key: '__setNext',
    value: function __setNext(nextIndexPassed) {
      if (nextIndexPassed !== undefined && (nextIndexPassed < 0 || nextIndexPassed > this.state.resources.length)) {
        // Note: nextIndexPassed is allowed to be equal to resources.length
        // That means we run out of commands
        throw new Error('invalid nextIndexPassed ' + nextIndexPassed);
      }

      var _state4 = this.state,
          mode = _state4.mode,
          doneIndices = _state4.doneIndices,
          nextIndex = _state4.nextIndex,
          endIndex = _state4.endIndex,
          startIndex = _state4.startIndex,
          loopsCursor = _state4.loopsCursor,
          loopsEnd = _state4.loopsEnd;


      var nextIndexToSet = nextIndexPassed !== undefined ? nextIndexPassed : nextIndex + 1;

      var done = doneIndices.indexOf(nextIndex) === -1 ? [].concat(_toConsumableArray(doneIndices), [nextIndex]) : doneIndices;
      var lcur = loopsCursor;
      var next = null;

      if (mode === MODE.LOOP) {
        if (nextIndexToSet <= endIndex) {
          next = nextIndexToSet;
        } else if (loopsCursor >= loopsEnd) {
          next = nextIndexToSet;
        } else {
          lcur += 1;
          next = startIndex;
          done = [];
        }
      } else {
        next = nextIndexToSet;
      }

      this.__setState({
        loopsCursor: lcur,
        nextIndex: next,
        doneIndices: done
      });
    }
  }, {
    key: '__setState',
    value: function __setState(obj) {
      this.state = _extends({}, this.state, obj);
    }
  }, {
    key: '__delay',
    value: function __delay(fn, timeout) {
      var _this3 = this;

      var past = 0;
      var timer = setInterval(function () {
        past += 1000;
        _this3.emit('DELAY', {
          extra: _this3.state.extra,
          total: timeout,
          past: past
        });
      }, 1000);

      return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["delay"])(fn, timeout).then(function (res) {
        if (timer) clearInterval(timer);
        return res;
      });
    }
  }]);

  return Player;
}();

event_emitter__WEBPACK_IMPORTED_MODULE_0___default()(Player.prototype);

Player.C = Player.prototype.C = {
  MODE: MODE,
  STATUS: STATUS,
  END_REASON: END_REASON
};

var playerPool = {};

// factory function to return a player singleton
var getPlayer = function getPlayer() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var state = arguments[1];

  var name = opts.name || 'testCase';
  delete opts.name;

  if (Object.keys(opts).length > 0) {
    playerPool[name] = new Player(opts, state);
  }

  if (!playerPool[name]) {
    throw new Error('player not initialized');
  }

  return playerPool[name];
};

/***/ }),

/***/ "./src/common/registry.js":
/*!********************************!*\
  !*** ./src/common/registry.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Registry = function () {
  function Registry(_ref) {
    var process = _ref.process,
        onZero = _ref.onZero,
        onOne = _ref.onOne;

    _classCallCheck(this, Registry);

    this.cache = {};
    this.__process = process;
    this.__onZero = onZero || function () {};
    this.__onOne = onOne || function () {};
  }

  _createClass(Registry, [{
    key: 'add',
    value: function add(id, obj) {
      this.cache[id] = this.cache[id] || [];
      this.cache[id].push(obj);

      if (this.cache[id].length === 1) {
        try {
          this.__onOne(id);
        } catch (e) {
          console.error('in onOne, ' + e.message);
        }
      }

      return true;
    }
  }, {
    key: 'remove',
    value: function remove(id, obj) {
      if (!this.cache[id]) return false;
      this.cache[id] = this.cache[id].filter(function (item) {
        return item !== obj;
      });

      if (this.cache[id].length === 0) {
        try {
          this.__onZero(id);
        } catch (e) {
          console.error('in onZero, ' + e.message);
        }
      }

      return true;
    }
  }, {
    key: 'fire',
    value: function fire(id, data) {
      var _this = this;

      if (!this.cache[id]) return false;
      this.cache[id].forEach(function (item) {
        try {
          _this.__process(item, data, id);
        } catch (e) {
          console.error('in process, ' + e.message);
        }
      });
      return true;
    }
  }, {
    key: 'has',
    value: function has(id) {
      return this.cache[id] && this.cache[id].length > 0;
    }
  }, {
    key: 'keys',
    value: function keys() {
      var _this2 = this;

      return Object.keys(this.cache).filter(function (key) {
        return _this2.cache[key] && _this2.cache[key].length > 0;
      });
    }
  }, {
    key: 'destory',
    value: function destory() {
      this.cache = {};
    }
  }]);

  return Registry;
}();

/* harmony default export */ __webpack_exports__["default"] = (Registry);

/***/ }),

/***/ "./src/common/send_keys.js":
/*!*********************************!*\
  !*** ./src/common/send_keys.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return sendKeys; });
/* harmony import */ var _lib_keysim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/keysim */ "./src/common/lib/keysim.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/common/utils.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./log */ "./src/common/log.js");




var keyboard = _lib_keysim__WEBPACK_IMPORTED_MODULE_0__["Keyboard"].US_ENGLISH;

var findParentByTag = function findParentByTag(el, tag) {
  var p = el;

  // eslint-disable-next-line no-cond-assign
  while (p = p.parentNode) {
    if (p.tagName === tag.toUpperCase()) {
      return p;
    }
  }

  return null;
};

var splitStringToChars = function splitStringToChars(str) {
  var specialKeys = ['KEY_LEFT', 'KEY_UP', 'KEY_RIGHT', 'KEY_DOWN', 'KEY_PGUP', 'KEY_PAGE_UP', 'KEY_PGDN', 'KEY_PAGE_DOWN', 'KEY_BKSP', 'KEY_BACKSPACE', 'KEY_DEL', 'KEY_DELETE', 'KEY_ENTER', 'KEY_TAB'];
  var reg = new RegExp('\\$\\{(' + specialKeys.join('|') + ')\\}');
  var parts = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["splitKeep"])(reg, str);

  return parts.reduce(function (prev, cur) {
    if (reg.test(cur)) {
      prev.push(cur);
    } else {
      prev = prev.concat(cur.split(''));
    }

    return prev;
  }, []);
};

var getKeyStrokeAction = function getKeyStrokeAction(str) {
  var reg = /^\$\{([^}]+)\}$/;
  var match = void 0;

  // eslint-disable-next-line no-cond-assign
  if (match = str.match(reg)) {
    switch (match[1]) {
      case 'KEY_LEFT':
        return 'LEFT';

      case 'KEY_UP':
        return 'UP';

      case 'KEY_RIGHT':
        return 'RIGHT';

      case 'KEY_DOWN':
        return 'DOWN';

      case 'KEY_PGUP':
      case 'KEY_PAGE_UP':
        return 'PAGEUP';

      case 'KEY_PGDN':
      case 'KEY_PAGE_DOWN':
        return 'PAGEDOWN';

      case 'KEY_BKSP':
      case 'KEY_BACKSPACE':
        return 'BACKSPACE';

      case 'KEY_DEL':
      case 'KEY_DELETE':
        return 'DELETE';

      case 'KEY_ENTER':
        return 'ENTER';

      case 'KEY_TAB':
        return 'TAB';
    }
  }

  return str;
};

var isEditable = function isEditable(el) {
  if (el.getAttribute('readonly') !== null) return false;
  var tag = el.tagName.toUpperCase();
  var type = (el.type || '').toLowerCase();
  var editableTypes = ['text', 'search', 'tel', 'url', 'email', 'password', 'number'];

  if (tag === 'TEXTAREA') return true;
  if (tag === 'INPUT' && editableTypes.indexOf(type) !== -1) return true;

  return false;
};

var maybeEditText = function maybeEditText(target, c) {
  if (!isEditable(target)) return;
  if (c.length === 1) {
    if (!isNil(target.selectionStart)) {
      var lastStart = target.selectionStart;
      target.value = target.value.substring(0, target.selectionStart) + c + target.value.substring(target.selectionEnd);

      setSelection(target, lastStart + 1);
    } else {
      target.value = target.value + c;
    }
  } else {
    switch (c) {
      case 'ENTER':
        target.value = target.value + '\n';
        setSelection(target, target.value.length);
        break;
      case 'TAB':
        target.value = target.value + '\t';
        setSelection(target, target.value.length);
        break;
      case 'LEFT':
        setSelection(target, target.selectionStart - 1);
        break;
      case 'RIGHT':
        setSelection(target, target.selectionEnd + 1);
        break;
      case 'BACKSPACE':
        {
          var pos = target.selectionStart;
          target.value = target.value.substring(0, target.selectionStart - 1) + target.value.substring(target.selectionEnd);
          setSelection(target, pos - 1);
          break;
        }
      case 'DELETE':
        {
          var _pos = target.selectionEnd;
          target.value = target.value.substring(0, target.selectionStart) + target.value.substring(target.selectionEnd + 1);
          setSelection(target, _pos);
          break;
        }
    }
  }
};

var maybeSubmitForm = function maybeSubmitForm(target, key) {
  if (key !== 'ENTER') return;
  if (!isEditable(target)) return;

  var form = findParentByTag(target, 'FORM');
  if (!form) return;

  form.submit();
};

var isNil = function isNil(val) {
  return val === null || val === undefined;
};

var setSelection = function setSelection($el, start, end) {
  // Note: Inputs like number and email, doesn't support selectionEnd
  // for safety, make sure those values are not null or undefined (infers that it's available)
  if (!isNil($el.selectionStart)) {
    $el.selectionStart = start;
  }

  if (!isNil($el.selectionEnd)) {
    $el.selectionEnd = end !== undefined ? end : start;
  }
};

var replaceActionKey = function () {
  var mapping = {
    0: null, // the NULL character
    8: 'BACKSPACE',
    9: 'TAB',
    10: 'ENTER', // \n  new line
    11: null, // \v  vertical tab
    12: null, // \f  form feed
    13: null // \r  carriage return
  };

  return function (c) {
    // Note: it means it's already key stroke action
    if (c.length > 1) return c;
    return mapping[c.charCodeAt(0)] || c;
  };
}();

function sendKeys(target, str, noSpecialKeys) {
  var rawChars = noSpecialKeys ? str.split('') : splitStringToChars(str);
  var chars = rawChars.map(replaceActionKey).filter(function (x) {
    return x && x.length;
  });

  target.focus();
  if (target.value) {
    setSelection(target, target.value.length);
  }

  chars.forEach(function (c) {
    var action = getKeyStrokeAction(c);

    maybeEditText(target, action);
    // Note: This line will take care of KEYDOWN KEYPRESS KEYUP and TEXTINPUT
    keyboard.dispatchEventsForAction(action, target);

    if (!noSpecialKeys) {
      maybeSubmitForm(target, action);
    }
  });
}

/***/ }),

/***/ "./src/common/variables.js":
/*!*********************************!*\
  !*** ./src/common/variables.js ***!
  \*********************************/
/*! exports provided: default, getVarsInstance, createVarsFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return varsFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVarsInstance", function() { return getVarsInstance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createVarsFilter", function() { return createVarsFilter; });
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry */ "./src/common/registry.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/utils */ "./src/common/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };




var keyConstants = ['KEY_LEFT', 'KEY_UP', 'KEY_RIGHT', 'KEY_DOWN', 'KEY_PGUP', 'KEY_PAGE_UP', 'KEY_PGDN', 'KEY_PAGE_DOWN', 'KEY_BKSP', 'KEY_BACKSPACE', 'KEY_DEL', 'KEY_DELETE', 'KEY_ENTER', 'KEY_TAB'];

var DEFAULT_KEY = 'main';
var cache = {};

var validateVariableName = function validateVariableName(name) {
  if (name.charAt(0) === '!') {
    name = name.substr(1);
  }

  try {
    Object(_common_utils__WEBPACK_IMPORTED_MODULE_1__["validateStandardName"])(name);
  } catch (e) {
    throw new Error('Invalid variable name \'' + name + '\'. A variable name ' + e.message);
  }

  return true;
};

function varsFactory() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_KEY;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var opts = _extends({
    isInvalidInternalVar: function isInvalidInternalVar(key) {
      return key.indexOf('!') === 0 && key !== '!TIMEOUT_PAGELOAD' && key !== '!TIMEOUT_WAIT' && key !== '!TIMEOUT_MACRO' && key !== '!TIMEOUT_DOWNLOAD' && key !== '!REPLAYSPEED' && key !== '!LOOP' && key !== '!URL' && key !== '!MACRONAME' && key !== '!RUNTIME' && key !== '!CSVLINE' && key !== '!CSVLINE' && key !== '!LASTCOMMANDOK' && key !== '!ERRORIGNORE' && key !== '!CSVREADLINENUMBER' && key !== '!CSVREADSTATUS' && key !== '!CSVREADMAXROW' && key !== '!CLIPBOARD' && key !== '!STATUSOK' && key !== '!WAITFORVISIBLE' && key !== '!IMAGEX' && key !== '!IMAGEY' && key !== '!VISUALSEARCHAREA' && key !== '!STOREDIMAGERECT' && !/^!COL\d+$/i.test(key);
    },
    readonly: ['!LOOP', '!URL', '!MACRONAME', '!RUNTIME', '!LASTCOMMANDOK', '!CSVREADSTATUS', '!CSVREADMAXROW', '!VISUALSEARCHAREA'].concat(keyConstants),
    typeCheck: {
      '!REPLAYSPEED': function REPLAYSPEED(val) {
        return ['SLOW', 'MEDIUM', 'FAST'].indexOf((val || '').toUpperCase()) !== -1;
      },
      '!TIMEOUT_PAGELOAD': function TIMEOUT_PAGELOAD(val) {
        return parseInt(val, 10) >= 0;
      },
      '!TIMEOUT_WAIT': function TIMEOUT_WAIT(val) {
        return parseInt(val, 10) >= 0;
      },
      '!TIMEOUT_MACRO': function TIMEOUT_MACRO(val) {
        return parseInt(val, 10) >= 0;
      },
      '!TIMEOUT_DOWNLOAD': function TIMEOUT_DOWNLOAD(val) {
        return parseInt(val, 10) >= 0;
      },
      '!CSVREADLINENUMBER': function CSVREADLINENUMBER(val) {
        return parseInt(val, 10) >= 0;
      }
    },
    normalize: function normalize(key, val) {
      var upperKey = key.toUpperCase();
      var acceptStringTrueFalse = function acceptStringTrueFalse(val) {
        if (val === 'true') return true;
        if (val === 'false') return false;
        return val;
      };
      var num = function num(s) {
        return parseFloat(s);
      };

      switch (upperKey) {
        case '!ERRORIGNORE':
        case '!WAITFORVISIBLE':
          return acceptStringTrueFalse(val);

        case '!TIMEOUT_PAGELOAD':
        case '!TIMEOUT_WAIT':
        case '!TIMEOUT_MACRO':
        case '!TIMEOUT_DOWNLOAD':
          return num(val);

        default:
          return val;
      }
    }
  }, options);
  var vars = initial;

  var listeners = new _registry__WEBPACK_IMPORTED_MODULE_0__["default"]({ process: function process(fn, data, eventName) {
      return fn(data);
    } });
  var fireOnChange = function fireOnChange() {
    return listeners.fire('change', { vars: _extends({}, vars) });
  };
  var self = {
    reset: function reset() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (options.keepGlobal) {
        var globals = Object.keys(vars).reduce(function (prev, key) {
          if (/^global/i.test(key)) prev[key] = vars[key];
          return prev;
        }, {});

        vars = globals;
      } else {
        vars = {};
      }

      fireOnChange();
    },
    render: function render(str, options) {
      var getVar = function getVar(key) {
        var upperKey = (key || '').toUpperCase();

        if (upperKey in vars) {
          return vars[upperKey];
        } else {
          if (/^!/.test(upperKey)) throw new Error('Internal variable "' + upperKey + '" not supported');else throw new Error('variable "' + upperKey + '" is not defined');
        }
      };
      var replaceAllVars = function replaceAllVars(str, reg) {
        var getKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (args) {
          return args[1];
        };
        var decorate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (x) {
          return x;
        };

        return str.replace(reg, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var variable = (getKey(args) || '').toUpperCase();
          // Note: keep as it is if it's a KEY_XXX variable, which should be handled by command runner
          if (keyConstants.indexOf(variable) !== -1) return args[0];
          return decorate(getVar(variable));
        });
      };
      var regDollar = new RegExp('\\$\\{(!?\\w+)\\}', 'gi');
      var regStoredVars = new RegExp('storedVars\\[(\'|")(!?\\w+)\\1\\]', 'gi');

      var result = replaceAllVars(str, regDollar);

      if (options && options.withHashNotation) {
        result = replaceAllVars(result, regStoredVars, function (args) {
          return args[2];
        }, function (x) {
          return JSON.stringify(x);
        });
      }

      return result;
    },
    get: function get(field) {
      return vars[field.toUpperCase()];
    },
    set: function set(obj, isAdmin) {
      Object.keys(obj).forEach(function (key) {
        var trimmedKey = key.trim();
        if (trimmedKey.length === 0) return;

        validateVariableName(trimmedKey);

        var targetKey = trimmedKey.toUpperCase();

        // Note: prevent variable with empty name
        if (targetKey.length === 0) return;

        // Note: special treatment for !CSVLINE
        if (/^!CSVLINE$/i.test(targetKey)) {
          var csvLine = self.get('!CSVLINE');

          if (csvLine === undefined) {
            csvLine = [];
          } else if (!Array.isArray(csvLine)) {
            csvLine = [csvLine];
          }

          csvLine.push(obj[key]);
          vars['!CSVLINE'] = csvLine;

          return;
        }

        if (!isAdmin && opts.readonly.indexOf(targetKey) !== -1) {
          throw new Error('Cannot write to readony variable \'' + key + '\'');
        }

        if (opts.isInvalidInternalVar(targetKey)) {
          throw new Error('Not allowed to write to \'' + key + '\'');
        }

        if (opts.typeCheck[targetKey] && !opts.typeCheck[targetKey](obj[key])) {
          throw new Error('Value \'' + obj[key] + '\' not supported for variable "' + targetKey + '"');
        }

        vars[targetKey] = opts.normalize(key, obj[key]);
      });

      fireOnChange();
    },
    clear: function clear(reg) {
      Object.keys(vars).forEach(function (key) {
        if (reg.test(key)) {
          delete vars[key];
        }
      });

      fireOnChange();
    },
    isReadOnly: function isReadOnly(variable) {
      var str = variable && variable.toUpperCase ? variable.toUpperCase() : '';
      return opts.readonly.indexOf(str) !== -1;
    },
    dump: function dump() {
      return _extends({}, vars);
    },
    onChange: function onChange(fn) {
      listeners.add('change', fn);
      return function () {
        return listeners.remove('change', fn);
      };
    }
  };

  cache[name] = self;
  return self;
}

var getVarsInstance = function getVarsInstance() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_KEY;

  return cache[name];
};

var createVarsFilter = function createVarsFilter(_ref) {
  var _ref$withUserDefined = _ref.withUserDefined,
      withUserDefined = _ref$withUserDefined === undefined ? true : _ref$withUserDefined,
      withCommonInternal = _ref.withCommonInternal,
      withAdvancedInternal = _ref.withAdvancedInternal;

  var checkUserDefined = function checkUserDefined(name) {
    return !/^!/.test(name);
  };
  var checkCommonInternal = function checkCommonInternal(name) {
    var list = ['!url', '!clipboard', '!runtime', '!statusok', '!errorignore'].map(function (x) {
      return x.toUpperCase();
    });
    return list.indexOf(name.toUpperCase()) !== -1;
  };
  var checkAdvancedInternal = function checkAdvancedInternal(name) {
    return (/^!/.test(name) && !checkCommonInternal(name)
    );
  };
  var orCheck = function orCheck(fns) {
    return function () {
      for (var i = 0, len = fns.length; i < len; i++) {
        if (fns[i].apply(fns, arguments)) return true;
      }
      return false;
    };
  };
  var list = [withUserDefined ? checkUserDefined : null, withCommonInternal ? checkCommonInternal : null, withAdvancedInternal ? checkAdvancedInternal : null].filter(function (x) {
    return !!x;
  });

  return orCheck(list);
};

/***/ }),

/***/ "./src/common/vision_man.js":
/*!**********************************!*\
  !*** ./src/common/vision_man.js ***!
  \**********************************/
/*! exports provided: VisionMan, getVisionMan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VisionMan", function() { return VisionMan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVisionMan", function() { return getVisionMan; });
/* harmony import */ var _filesystem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filesystem */ "./src/common/filesystem.js");
/* harmony import */ var _file_man__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./file_man */ "./src/common/file_man.js");
/* harmony import */ var _web_extension__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./web_extension */ "./src/common/web_extension.js");
/* harmony import */ var _web_extension__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_web_extension__WEBPACK_IMPORTED_MODULE_2__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var VisionMan = function (_FileMan) {
  _inherits(VisionMan, _FileMan);

  function VisionMan() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, VisionMan);

    return _possibleConstructorReturn(this, (VisionMan.__proto__ || Object.getPrototypeOf(VisionMan)).call(this, _extends({}, opts, { baseDir: 'visions' })));
  }

  _createClass(VisionMan, [{
    key: 'write',
    value: function write(fileName, blob) {
      return _filesystem__WEBPACK_IMPORTED_MODULE_0__["default"].writeFile(this.__filePath(fileName, true), blob);
    }
  }, {
    key: 'read',
    value: function read(fileName) {
      return _filesystem__WEBPACK_IMPORTED_MODULE_0__["default"].readFile(this.__filePath(fileName), 'ArrayBuffer');
    }
  }, {
    key: 'readAsDataURL',
    value: function readAsDataURL(fileName) {
      return _filesystem__WEBPACK_IMPORTED_MODULE_0__["default"].readFile(this.__filePath(fileName), 'DataURL');
    }
  }, {
    key: 'getLink',
    value: function getLink(fileName) {
      if (!_web_extension__WEBPACK_IMPORTED_MODULE_2___default.a.isFirefox()) return Promise.resolve(_get(VisionMan.prototype.__proto__ || Object.getPrototypeOf(VisionMan.prototype), 'getLink', this).call(this, fileName));

      // Note: Except for Chrome, the filesystem API we use is a polyfill from idb.filesystem.js
      // idb.filesystem.js works great but the only problem is that you can't use 'filesystem:' schema to retrieve that file
      // so here, we have to convert the file to data url
      return _filesystem__WEBPACK_IMPORTED_MODULE_0__["default"].readFile(this.__filePath(fileName), 'DataURL');
    }
  }]);

  return VisionMan;
}(_file_man__WEBPACK_IMPORTED_MODULE_1__["default"]);

var man = void 0;

function getVisionMan() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (opts) {
    man = new VisionMan(opts);
  }

  if (!man) {
    throw new Error('vision manager not initialized');
  }

  return man;
}

/***/ }),

/***/ "./src/components/edit_in_place.js":
/*!*****************************************!*\
  !*** ./src/components/edit_in_place.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/icon */ "./node_modules/antd/lib/icon/index.js");
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_icon__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);



var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var EditInPlace = function (_React$Component) {
  _inherits(EditInPlace, _React$Component);

  function EditInPlace() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, EditInPlace);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = EditInPlace.__proto__ || Object.getPrototypeOf(EditInPlace)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isEditing: false,
      value: ''
    }, _this.edit = function () {
      _this.setState({ isEditing: true });
      setTimeout(function () {
        var $input = _this.$input && _this.$input.refs && _this.$input.refs.input;

        if ($input) {
          $input.focus();

          var selection = _this.props.getSelection(_this.state.value, $input);
          $input.selectionStart = selection ? selection.start : 0;
          $input.selectionEnd = selection ? selection.end : $input.value.length;
        }
      }, 100);
    }, _this.submit = function () {
      _this.props.checkValue(_this.state.value).then(function (pass) {
        if (pass) {
          _this.setState({ isEditing: false });
          _this.props.onChange(_this.state.value);
        }
      });
    }, _this.reset = function () {
      _this.setState({
        isEditing: false,
        value: _this.props.value
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(EditInPlace, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({
        value: this.props.value
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value !== this.props.value) {
        this.setState({ value: nextProps.value });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (!this.state.isEditing) {
        return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(
          'span',
          null,
          this.props.value,
          react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_1___default.a, {
            type: 'edit',
            style: { marginLeft: '10px', cursor: 'pointer' },
            onClick: this.edit
          })
        );
      } else {
        return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_0___default.a, {
          ref: function ref(_ref2) {
            _this2.$input = _ref2;
          },
          value: this.state.value,
          onChange: function onChange(e) {
            return _this2.setState({ value: e.target.value });
          },
          onBlur: this.reset,
          onKeyDown: function onKeyDown(e) {
            if (e.keyCode === 13) return _this2.submit();
            if (e.keyCode === 27) return _this2.reset();
          }
        });
      }
    }
  }]);

  return EditInPlace;
}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);

EditInPlace.propTypes = {
  value: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string.isRequired,
  onChange: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func.isRequired,
  checkValue: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func.isRequired,
  getSelection: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func
};
EditInPlace.defaultProps = {
  getSelection: function getSelection() {
    return null;
  }
};
/* harmony default export */ __webpack_exports__["default"] = (EditInPlace);

/***/ }),

/***/ "./src/components/edit_test_suite.js":
/*!*******************************************!*\
  !*** ./src/components/edit_test_suite.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react_codemirror2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-codemirror2 */ "./node_modules/react-codemirror2/index.js");
/* harmony import */ var react_codemirror2__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_codemirror2__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! codemirror/lib/codemirror */ "./node_modules/codemirror/lib/codemirror.js");
/* harmony import */ var codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! codemirror/mode/javascript/javascript */ "./node_modules/codemirror/mode/javascript/javascript.js");
/* harmony import */ var codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var codemirror_addon_edit_matchbrackets__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! codemirror/addon/edit/matchbrackets */ "./node_modules/codemirror/addon/edit/matchbrackets.js");
/* harmony import */ var codemirror_addon_edit_matchbrackets__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_edit_matchbrackets__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var codemirror_addon_edit_closebrackets__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! codemirror/addon/edit/closebrackets */ "./node_modules/codemirror/addon/edit/closebrackets.js");
/* harmony import */ var codemirror_addon_edit_closebrackets__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_edit_closebrackets__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var codemirror_lib_codemirror_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! codemirror/lib/codemirror.css */ "./node_modules/codemirror/lib/codemirror.css");
/* harmony import */ var codemirror_lib_codemirror_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(codemirror_lib_codemirror_css__WEBPACK_IMPORTED_MODULE_8__);


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }











var EditTestSuite = function (_React$Component) {
  _inherits(EditTestSuite, _React$Component);

  function EditTestSuite() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, EditTestSuite);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = EditTestSuite.__proto__ || Object.getPrototypeOf(EditTestSuite)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: '',
      valueModified: null,
      errMsg: null
    }, _this.onSave = function () {
      var errMsg = null;

      try {
        _this.props.validate(_this.state.valueModified);
        _this.props.onChange(_this.state.valueModified);
      } catch (e) {
        errMsg = e.message;
      } finally {
        _this.setState({ errMsg: errMsg });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(EditTestSuite, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({
        value: this.props.value,
        valueModified: this.props.value
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value !== this.props.value) {
        this.setState({
          value: nextProps.value,
          valueModified: nextProps.value
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
        antd_lib_modal__WEBPACK_IMPORTED_MODULE_0___default.a,
        {
          visible: this.props.visible,
          okText: 'Save',
          onOk: this.onSave,
          onCancel: this.props.onClose,
          width: '80%'
        },
        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
          'pre',
          { style: { color: 'red', lineHeight: '18px', marginBottom: '10px' } },
          this.state.errMsg
        ),
        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react_codemirror2__WEBPACK_IMPORTED_MODULE_3__["UnControlled"], {
          className: this.state.sourceErrMsg ? 'has-error' : 'no-error',
          value: this.state.value,
          onChange: function onChange(editor, data, text) {
            return _this2.setState({ valueModified: text });
          },
          options: {
            mode: { name: 'javascript', json: true },
            lineNumbers: true,
            matchBrackets: true,
            autoCloseBrackets: true
          }
        })
      );
    }
  }]);

  return EditTestSuite;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

EditTestSuite.propTypes = {
  value: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string.isRequired,
  onClose: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func.isRequired,
  visible: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  validate: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onChange: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func
};
EditTestSuite.defaultProps = {
  visible: false,
  validate: function validate() {
    return true;
  },
  onChange: function onChange() {}
};
/* harmony default export */ __webpack_exports__["default"] = (EditTestSuite);

/***/ }),

/***/ "./src/components/editable_text.js":
/*!*****************************************!*\
  !*** ./src/components/editable_text.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/icon */ "./node_modules/antd/lib/icon/index.js");
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_icon__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);



var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var EditableText = function (_React$Component) {
  _inherits(EditableText, _React$Component);

  function EditableText() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, EditableText);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = EditableText.__proto__ || Object.getPrototypeOf(EditableText)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isEditing: false
    }, _this.onChange = function (e) {
      _this.setState({
        value: e.target.value
      });
    }, _this.onKeyDown = function (e) {
      if (e.keyCode === 13) {
        _this.submit();
      } else if (e.keyCode === 27) {
        _this.setState({
          value: _this.props.value
        }, _this.submit);
      }
    }, _this.onBlur = function (e) {
      _this.submit();
    }, _this.onClickText = function () {
      if (_this.props.clickToEdit) {
        _this.setState({ isEditing: true });
      }
    }, _this.submit = function () {
      _this.setState({
        isEditing: false
      });

      if (_this.props.onChange) {
        _this.props.onChange(_this.state.value);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(EditableText, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({
        isEditing: this.props.isEditing,
        value: this.props.value
      });

      if (this.props.isEditing) {
        this.focusOnInput();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var nextState = {};

      if (this.props.isEditing !== nextProps.isEditing) {
        nextState.isEditing = nextProps.isEditing;

        if (nextState.isEditing) {
          this.focusOnInput();
        }
      }

      if (this.props.value !== nextProps.value) {
        nextState.value = nextProps.value;
      }

      this.setState(nextState);
    }
  }, {
    key: 'focusOnInput',
    value: function focusOnInput() {
      var _this2 = this;

      setTimeout(function () {
        var $input = _this2.input.refs.input;

        if ($input) {
          $input.focus();
          $input.selectionStart = 0;
          $input.selectionEnd = $input.value.length;
        }
      }, 200);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _state = this.state,
          isEditing = _state.isEditing,
          value = _state.value;


      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(
        'div',
        { className: this.props.className },
        isEditing ? react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_1___default.a, _extends({
          value: value,
          onChange: this.onChange,
          onBlur: this.onBlur,
          onKeyDown: this.onKeyDown,
          ref: function ref(_ref2) {
            _this3.input = _ref2;
          }
        }, this.props.inputProps || {})) : react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(
          'span',
          { onClick: this.onClickText },
          react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(
            'span',
            null,
            value
          ),
          this.props.clickToEdit ? react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_0___default.a, { type: 'edit', style: { marginLeft: '10px' } }) : null
        )
      );
    }
  }]);

  return EditableText;
}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);

EditableText.propTypes = {
  value: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  isEditing: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
  onChange: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func,
  inputProps: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object,
  textProps: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object,
  className: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.any,
  clickToEdit: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool
};
/* harmony default export */ __webpack_exports__["default"] = (EditableText);

/***/ }),

/***/ "./src/components/header.js":
/*!**********************************!*\
  !*** ./src/components/header.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/icon */ "./node_modules/antd/lib/icon/index.js");
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_icon__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/dropdown */ "./node_modules/antd/lib/dropdown/index.js");
/* harmony import */ var antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/menu */ "./node_modules/antd/lib/menu/index.js");
/* harmony import */ var antd_lib_menu__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_menu__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_tabs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/tabs */ "./node_modules/antd/lib/tabs/index.js");
/* harmony import */ var antd_lib_tabs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_tabs__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var antd_lib_radio__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! antd/lib/radio */ "./node_modules/antd/lib/radio/index.js");
/* harmony import */ var antd_lib_radio__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(antd_lib_radio__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! antd/lib/checkbox */ "./node_modules/antd/lib/checkbox/index.js");
/* harmony import */ var antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var antd_lib_form__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! antd/lib/form */ "./node_modules/antd/lib/form/index.js");
/* harmony import */ var antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(antd_lib_form__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! antd/lib/select */ "./node_modules/antd/lib/select/index.js");
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(antd_lib_select__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var antd_lib_row__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! antd/lib/row */ "./node_modules/antd/lib/row/index.js");
/* harmony import */ var antd_lib_row__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(antd_lib_row__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var antd_lib_col__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! antd/lib/col */ "./node_modules/antd/lib/col/index.js");
/* harmony import */ var antd_lib_col__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(antd_lib_col__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/es/index.js");
/* harmony import */ var _header_scss__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./header.scss */ "./src/components/header.scss");
/* harmony import */ var _header_scss__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_header_scss__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var _common_player__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../common/player */ "./src/common/player.js");
/* harmony import */ var _recomputed__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../recomputed */ "./src/recomputed/index.js");
/* harmony import */ var _save_test_case__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./save_test_case */ "./src/components/save_test_case.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../actions */ "./src/actions/index.js");
/* harmony import */ var _common_constant__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../common/constant */ "./src/common/constant.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../common/utils */ "./src/common/utils.js");



















































































var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }















var Header = function (_React$Component) {
  _inherits(Header, _React$Component);

  function Header() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Header);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Header.__proto__ || Object.getPrototypeOf(Header)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      showPlayLoops: false,
      loopsStart: 1,
      loopsEnd: 3,

      showReplaySettings: false
    }, _this.getPlayer = function (name) {
      if (name) return Object(_common_player__WEBPACK_IMPORTED_MODULE_19__["getPlayer"])({ name: name });

      switch (_this.props.player.mode) {
        case _common_constant__WEBPACK_IMPORTED_MODULE_23__["PLAYER_MODE"].TEST_CASE:
          return Object(_common_player__WEBPACK_IMPORTED_MODULE_19__["getPlayer"])({ name: 'testCase' });

        case _common_constant__WEBPACK_IMPORTED_MODULE_23__["PLAYER_MODE"].TEST_SUITE:
          return Object(_common_player__WEBPACK_IMPORTED_MODULE_19__["getPlayer"])({ name: 'testSuite' });
      }
    }, _this.getTestCaseName = function () {
      var src = _this.props.editing.meta.src;

      return src && src.name && src.name.length ? src.name : 'Untitled';
    }, _this.togglePlayLoopsModal = function (toShow) {
      _this.setState({
        showPlayLoops: toShow
      });
    }, _this.onToggleRecord = function () {
      if (_this.props.status === _common_constant__WEBPACK_IMPORTED_MODULE_23__["APP_STATUS"].RECORDER) {
        _this.props.stopRecording();
        // Note: remove targetOptions from all commands
        _this.props.normalizeCommands();
      } else {
        _this.props.startRecording();
      }

      _this.setState({ lastOperation: 'record' });
    }, _this.onClickPlayLoops = function () {
      var _this$state = _this.state,
          loopsStart = _this$state.loopsStart,
          loopsEnd = _this$state.loopsEnd;


      if (loopsStart < 0) {
        return antd_lib_message__WEBPACK_IMPORTED_MODULE_13___default.a.error('Start value must be no less than zero', 1.5);
      }

      if (loopsEnd < loopsStart) {
        return antd_lib_message__WEBPACK_IMPORTED_MODULE_13___default.a.error('Max value must be greater than start value', 1.5);
      }

      var player = _this.getPlayer();
      var commands = _this.props.editing.commands;
      var src = _this.props.editing.meta.src;

      var openTc = commands.find(function (tc) {
        return tc.cmd.toLowerCase() === 'open';
      });

      _this.props.playerPlay({
        loopsEnd: loopsEnd,
        loopsStart: loopsStart,
        title: _this.getTestCaseName(),
        extra: {
          id: src && src.id
        },
        mode: player.C.MODE.LOOP,
        startIndex: 0,
        startUrl: openTc ? openTc.target : null,
        resources: _this.props.editing.commands,
        postDelay: _this.props.config.playCommandInterval * 1000
      });

      _this.setState({ lastOperation: 'play' });
      _this.togglePlayLoopsModal(false);
    }, _this.onCancelPlayLoops = function () {
      _this.togglePlayLoopsModal(false);
      _this.setState({
        loopsToPlay: 2
      });
    }, _this.onChangePlayLoops = function (field, value) {
      _this.setState(_defineProperty({}, field, parseInt(value, 10)));
    }, _this.onClickSave = function () {
      return Object(_save_test_case__WEBPACK_IMPORTED_MODULE_21__["default"])().save();
    }, _this.playCurrentMacro = function (isStep) {
      var commands = _this.props.editing.commands;
      var src = _this.props.editing.meta.src;

      var openTc = commands.find(function (tc) {
        return tc.cmd.toLowerCase() === 'open';
      });

      _this.setState({ lastOperation: 'play' });

      _this.props.playerPlay({
        title: _this.getTestCaseName(),
        extra: {
          id: src && src.id
        },
        mode: Object(_common_player__WEBPACK_IMPORTED_MODULE_19__["getPlayer"])().C.MODE.STRAIGHT,
        startIndex: 0,
        startUrl: openTc ? openTc.target : null,
        resources: commands,
        postDelay: _this.props.config.playCommandInterval * 1000,
        isStep: isStep
      });
    }, _this.playCurrentLine = function () {
      var commands = _this.props.editing.commands;
      var _this$props$editing$m = _this.props.editing.meta,
          src = _this$props$editing$m.src,
          selectedIndex = _this$props$editing$m.selectedIndex;

      var commandIndex = selectedIndex === -1 ? 0 : selectedIndex || 0;

      return _this.props.playerPlay({
        title: _this.getTestCaseName(),
        extra: {
          id: src && src.id
        },
        mode: _common_player__WEBPACK_IMPORTED_MODULE_19__["Player"].C.MODE.SINGLE,
        startIndex: commandIndex,
        startUrl: null,
        resources: commands,
        postDelay: _this.props.config.playCommandInterval * 1000,
        callback: function callback(err, res) {
          if (err) return;

          // Note: auto select next command
          if (commandIndex + 1 < commands.length) {
            _this.props.selectCommand(commandIndex + 1, true);
          }
        }
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  // Play loops relative


  _createClass(Header, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var history = this.props.history;


      this.props.setRoute(history.location.pathname);
      this.props.history.listen(function (location, action) {
        _this2.props.setRoute(history.location.pathname);
      });
    }
  }, {
    key: 'renderPlayLoopModal',
    value: function renderPlayLoopModal() {
      var _this3 = this;

      return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
        antd_lib_modal__WEBPACK_IMPORTED_MODULE_4___default.a,
        {
          title: 'How many loops to play?',
          okText: 'Play',
          cancelText: 'Cancel',
          className: 'play-loop-modal',
          visible: this.state.showPlayLoops,
          onOk: this.onClickPlayLoops,
          onCancel: this.onCancelPlayLoops
        },
        react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
          antd_lib_row__WEBPACK_IMPORTED_MODULE_11___default.a,
          null,
          react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
            antd_lib_col__WEBPACK_IMPORTED_MODULE_12___default.a,
            { span: 10 },
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
              { label: 'Start value' },
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_6___default.a, {
                type: 'number',
                min: '0',
                value: this.state.loopsStart,
                onKeyDown: function onKeyDown(e) {
                  if (e.keyCode === 13) _this3.onClickPlayLoops();
                },
                onChange: function onChange(e) {
                  return _this3.onChangePlayLoops('loopsStart', e.target.value);
                }
              })
            )
          ),
          react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
            antd_lib_col__WEBPACK_IMPORTED_MODULE_12___default.a,
            { span: 10, offset: 2 },
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
              { label: 'Max' },
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_6___default.a, {
                type: 'number',
                min: '0',
                value: this.state.loopsEnd,
                onKeyDown: function onKeyDown(e) {
                  if (e.keyCode === 13) _this3.onClickPlayLoops();
                },
                onChange: function onChange(e) {
                  return _this3.onChangePlayLoops('loopsEnd', e.target.value);
                }
              })
            )
          )
        ),
        react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
          'p',
          null,
          'The value of the loop counter is available in $',
          '{',
          '!LOOP',
          '}',
          ' variable'
        )
      );
    }
  }, {
    key: 'renderSettingModal',
    value: function renderSettingModal() {
      var _this4 = this;

      var onConfigChange = function onConfigChange(key, val) {
        _this4.props.updateConfig(_defineProperty({}, key, val));
      };

      var displayConfig = {
        labelCol: { span: 8 },
        wrapperCol: { span: 16 }
      };

      return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
        antd_lib_modal__WEBPACK_IMPORTED_MODULE_4___default.a,
        {
          title: 'Settings',
          className: 'settings-modal',
          width: 650,
          footer: null,
          visible: this.state.showReplaySettings,
          onCancel: function onCancel() {
            return _this4.setState({ showReplaySettings: false });
          }
        },
        react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
          antd_lib_tabs__WEBPACK_IMPORTED_MODULE_5___default.a,
          null,
          react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_5___default.a.TabPane,
            { tab: 'Replay', key: 'replay' },
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a,
              null,
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
                _extends({ label: 'Replay Helper' }, displayConfig),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a,
                  {
                    onChange: function onChange(e) {
                      return onConfigChange('playScrollElementsIntoView', e.target.checked);
                    },
                    checked: this.props.config.playScrollElementsIntoView
                  },
                  'Scroll elements into view during replay'
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a,
                  {
                    onChange: function onChange(e) {
                      return onConfigChange('playHighlightElements', e.target.checked);
                    },
                    checked: this.props.config.playHighlightElements
                  },
                  'Highlight elements during replay'
                )
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
                _extends({
                  label: react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'a',
                    { target: '_blank', href: 'https://a9t9.com/x/idehelp?help=command_interval' },
                    'Command Interval'
                  )
                }, displayConfig),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_select__WEBPACK_IMPORTED_MODULE_10___default.a,
                  {
                    style: { width: '200px' },
                    placeholder: 'interval',
                    value: '' + this.props.config.playCommandInterval,
                    onChange: function onChange(val) {
                      return onConfigChange('playCommandInterval', val);
                    }
                  },
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    antd_lib_select__WEBPACK_IMPORTED_MODULE_10___default.a.Option,
                    { value: '0' },
                    'Fast (no delay)'
                  ),
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    antd_lib_select__WEBPACK_IMPORTED_MODULE_10___default.a.Option,
                    { value: '0.3' },
                    'Medium (0.3s delay)'
                  ),
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    antd_lib_select__WEBPACK_IMPORTED_MODULE_10___default.a.Option,
                    { value: '2' },
                    'Slow (2s delay)'
                  )
                )
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
                _extends({
                  label: react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'a',
                    { target: '_blank', href: 'https://a9t9.com/x/idehelp?help=timeout_pageload' },
                    '!TIMEOUT_PAGELOAD'
                  )
                }, displayConfig),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_6___default.a, {
                  type: 'number',
                  min: '0',
                  style: { width: '70px' },
                  value: this.props.config.timeoutPageLoad,
                  onChange: function onChange(e) {
                    return onConfigChange('timeoutPageLoad', e.target.value);
                  },
                  placeholder: 'in seconds'
                }),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  'span',
                  { className: 'tip' },
                  'Max. time for new page load'
                )
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
                _extends({
                  label: react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'a',
                    { target: '_blank', href: 'https://a9t9.com/x/idehelp?help=timeout_wait' },
                    '!TIMEOUT_WAIT'
                  )
                }, displayConfig),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_6___default.a, {
                  type: 'number',
                  min: '0',
                  style: { width: '70px' },
                  value: this.props.config.timeoutElement,
                  onChange: function onChange(e) {
                    return onConfigChange('timeoutElement', e.target.value);
                  },
                  placeholder: 'in seconds'
                }),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  'span',
                  { className: 'tip' },
                  'Max. time per step'
                )
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
                _extends({
                  label: react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'a',
                    { target: '_blank', href: 'https://a9t9.com/x/idehelp?help=timeout_macro' },
                    '!TIMEOUT_MACRO'
                  )
                }, displayConfig),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_6___default.a, {
                  type: 'number',
                  min: '0',
                  style: { width: '70px' },
                  value: this.props.config.timeoutMacro,
                  onChange: function onChange(e) {
                    return onConfigChange('timeoutMacro', e.target.value);
                  },
                  placeholder: 'in seconds'
                }),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  'span',
                  { className: 'tip' },
                  'Max. overall macro runtime'
                )
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
                _extends({
                  label: react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'a',
                    { target: '_blank', href: 'https://a9t9.com/x/idehelp?help=timeout_download' },
                    '!TIMEOUT_DOWNLOAD'
                  )
                }, displayConfig),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_6___default.a, {
                  type: 'number',
                  min: '0',
                  style: { width: '70px' },
                  value: this.props.config.timeoutDownload,
                  onChange: function onChange(e) {
                    return onConfigChange('timeoutDownload', e.target.value);
                  },
                  placeholder: 'in seconds'
                }),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  'span',
                  { className: 'tip' },
                  'Max. allowed time for file'
                )
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
                _extends({ label: 'If error happens in loop' }, displayConfig),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_radio__WEBPACK_IMPORTED_MODULE_7___default.a.Group,
                  {
                    onChange: function onChange(e) {
                      return onConfigChange('onErrorInLoop', e.target.value);
                    },
                    value: this.props.config.onErrorInLoop
                  },
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    antd_lib_radio__WEBPACK_IMPORTED_MODULE_7___default.a,
                    { value: 'continue_next_loop' },
                    'Continue next loop'
                  ),
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    antd_lib_radio__WEBPACK_IMPORTED_MODULE_7___default.a,
                    { value: 'stop' },
                    'Stop'
                  )
                )
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
                _extends({ label: 'Default Vision Search Confidence' }, displayConfig),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_select__WEBPACK_IMPORTED_MODULE_10___default.a,
                  {
                    style: { width: '200px' },
                    placeholder: 'interval',
                    value: '' + this.props.config.defaultVisionSearchConfidence,
                    onChange: function onChange(val) {
                      return onConfigChange('defaultVisionSearchConfidence', parseFloat(val));
                    }
                  },
                  Object(_common_utils__WEBPACK_IMPORTED_MODULE_24__["range"])(1, 11, 1).map(function (n) {
                    return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                      antd_lib_select__WEBPACK_IMPORTED_MODULE_10___default.a.Option,
                      { key: n, value: '' + (0.1 * n).toFixed(1) },
                      (0.1 * n).toFixed(1)
                    );
                  })
                )
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
                _extends({ label: react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'a',
                    { target: '_blank', href: 'https://a9t9.com/x/idehelp?help=cmdline' },
                    'Allow Command Line'
                  ) }, displayConfig),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a,
                  {
                    onChange: function onChange(e) {
                      return onConfigChange('allowRunFromBookmark', e.target.checked);
                    },
                    checked: this.props.config.allowRunFromBookmark
                  },
                  'Run macro and test suite shortcuts from Javascript Bookmarklets'
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a,
                  {
                    onChange: function onChange(e) {
                      return onConfigChange('allowRunFromFileSchema', e.target.checked);
                    },
                    checked: this.props.config.allowRunFromFileSchema
                  },
                  'Run embedded macros from local files'
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a,
                  {
                    onChange: function onChange(e) {
                      return onConfigChange('allowRunFromHttpSchema', e.target.checked);
                    },
                    checked: this.props.config.allowRunFromHttpSchema
                  },
                  'Run embedded macros from public websites'
                )
              )
            )
          ),
          react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_5___default.a.TabPane,
            { tab: 'Record', key: 'record', className: 'record-pane' },
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a,
              null,
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
                _extends({ label: 'Notification' }, displayConfig),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a,
                  {
                    onChange: function onChange(e) {
                      return onConfigChange('recordNotification', e.target.checked);
                    },
                    checked: this.props.config.recordNotification
                  },
                  'Show notifications when recording'
                )
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_9___default.a.Item,
                _extends({ label: 'click / clickAt' }, displayConfig),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_radio__WEBPACK_IMPORTED_MODULE_7___default.a.Group,
                  {
                    onChange: function onChange(e) {
                      return onConfigChange('recordClickType', e.target.value);
                    },
                    value: this.props.config.recordClickType
                  },
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    antd_lib_radio__WEBPACK_IMPORTED_MODULE_7___default.a,
                    { value: 'click' },
                    'Record click'
                  ),
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    antd_lib_radio__WEBPACK_IMPORTED_MODULE_7___default.a,
                    { value: 'clickAt' },
                    'Record clickAt'
                  )
                )
              )
            )
          ),
          react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_5___default.a.TabPane,
            { tab: 'Backup', key: 'backup', className: 'backup-pane' },
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              'h4',
              null,
              'Automatic Backup'
            ),
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              'div',
              { className: 'row' },
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a, {
                onChange: function onChange(e) {
                  return onConfigChange('enableAutoBackup', e.target.checked);
                },
                checked: this.props.config.enableAutoBackup
              }),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                'span',
                null,
                'Show backup reminder every'
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_6___default.a, {
                type: 'number',
                min: 1,
                disabled: !this.props.config.enableAutoBackup,
                value: this.props.config.autoBackupInterval,
                onChange: function onChange(e) {
                  return onConfigChange('autoBackupInterval', e.target.value);
                },
                style: { width: '40px' }
              }),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                'span',
                null,
                ' days'
              )
            ),
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              'div',
              { className: 'row' },
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                'p',
                null,
                'Backup includes'
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                'ul',
                null,
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  'li',
                  null,
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a, {
                    onChange: function onChange(e) {
                      return onConfigChange('autoBackupTestCases', e.target.checked);
                    },
                    checked: this.props.config.autoBackupTestCases
                  }),
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'span',
                    null,
                    'Macros'
                  )
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  'li',
                  null,
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a, {
                    onChange: function onChange(e) {
                      return onConfigChange('autoBackupTestSuites', e.target.checked);
                    },
                    checked: this.props.config.autoBackupTestSuites
                  }),
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'span',
                    null,
                    'Test suites'
                  )
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  'li',
                  null,
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a, {
                    onChange: function onChange(e) {
                      return onConfigChange('autoBackupScreenshots', e.target.checked);
                    },
                    checked: this.props.config.autoBackupScreenshots
                  }),
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'span',
                    null,
                    'Screenshots'
                  )
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  'li',
                  null,
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a, {
                    onChange: function onChange(e) {
                      return onConfigChange('autoBackupCSVFiles', e.target.checked);
                    },
                    checked: this.props.config.autoBackupCSVFiles
                  }),
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'span',
                    null,
                    'CSV files'
                  )
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  'li',
                  null,
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a, {
                    onChange: function onChange(e) {
                      return onConfigChange('autoBackupVisionImages', e.target.checked);
                    },
                    checked: this.props.config.autoBackupVisionImages
                  }),
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'span',
                    null,
                    'Visual UI Test images'
                  )
                )
              )
            ),
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              'div',
              { className: 'row' },
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                'span',
                null,
                'And you can also '
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                {
                  type: 'primary',
                  onClick: function onClick() {
                    return _this4.props.runBackup();
                  }
                },
                'Run backup now'
              )
            )
          ),
          react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_5___default.a.TabPane,
            { tab: 'Security', key: 'security', className: 'security-pane' },
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              'h4',
              null,
              'Master password for Password Encryption'
            ),
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              'p',
              null,
              'A master password is used to encrypt and decrypt all stored website passwords. The websites passwords are encrypted using strong encryption.\xA0\xA0',
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                'a',
                { target: '_blank', href: 'https://a9t9.com/x/idehelp?help=encryption' },
                'More info >>'
              )
            ),
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              'div',
              null,
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_radio__WEBPACK_IMPORTED_MODULE_7___default.a.Group,
                {
                  onChange: function onChange(e) {
                    return onConfigChange('shouldEncryptPassword', e.target.value);
                  },
                  value: this.props.config.shouldEncryptPassword
                },
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_radio__WEBPACK_IMPORTED_MODULE_7___default.a,
                  { value: 'no' },
                  'Do not encrypt passwords'
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_radio__WEBPACK_IMPORTED_MODULE_7___default.a,
                  { value: 'master_password' },
                  'Enter master password here to store it'
                )
              ),
              this.props.config.shouldEncryptPassword === 'master_password' ? react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                'div',
                null,
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  'label',
                  null,
                  'Master password:'
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_6___default.a, {
                  type: 'password',
                  style: { width: '200px' },
                  value: this.props.config.masterPassword,
                  onChange: function onChange(e) {
                    return onConfigChange('masterPassword', e.target.value);
                  }
                })
              ) : null
            )
          )
        )
      );
    }
  }, {
    key: 'renderMainMenu',
    value: function renderMainMenu() {
      var _this5 = this;

      var _state = this.state,
          htmlUri = _state.htmlUri,
          jsonUri = _state.jsonUri;
      var _props = this.props,
          status = _props.status,
          editing = _props.editing;
      var commands = editing.commands,
          meta = editing.meta;
      var src = meta.src;

      var canPlay = this.props.player.status === _common_constant__WEBPACK_IMPORTED_MODULE_23__["PLAYER_STATUS"].STOPPED;
      var downloadNamePrefix = src ? src.name : 'Untitled';

      var onClickMenuItem = function onClickMenuItem(_ref2) {
        var key = _ref2.key;

        switch (key) {
          case 'play_settings':
            {
              _this5.setState({ showReplaySettings: true });
              break;
            }
        }
      };

      return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
        antd_lib_menu__WEBPACK_IMPORTED_MODULE_3___default.a,
        { onClick: onClickMenuItem, selectable: false },
        react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
          antd_lib_menu__WEBPACK_IMPORTED_MODULE_3___default.a.Item,
          { key: 'play_settings', disabled: !canPlay },
          'Replay settings..'
        )
      );
    }
  }, {
    key: 'renderStatus',
    value: function renderStatus() {
      var _props2 = this.props,
          status = _props2.status,
          player = _props2.player;

      var renderInner = function renderInner() {
        switch (status) {
          case _common_constant__WEBPACK_IMPORTED_MODULE_23__["APP_STATUS"].RECORDER:
            return 'Recording';

          case _common_constant__WEBPACK_IMPORTED_MODULE_23__["APP_STATUS"].PLAYER:
            {
              switch (player.status) {
                case _common_constant__WEBPACK_IMPORTED_MODULE_23__["PLAYER_STATUS"].PLAYING:
                  {
                    var nextCommandIndex = player.nextCommandIndex,
                        loops = player.loops,
                        currentLoop = player.currentLoop,
                        timeoutStatus = player.timeoutStatus;


                    if (nextCommandIndex === null || loops === null || currentLoop === 0) {
                      return '';
                    }

                    var parts = ['Line ' + (nextCommandIndex + 1), 'Round ' + currentLoop + '/' + loops];

                    if (timeoutStatus && timeoutStatus.type && timeoutStatus.total) {
                      var type = timeoutStatus.type,
                          total = timeoutStatus.total,
                          past = timeoutStatus.past;

                      parts.unshift(type + ' ' + past / 1000 + 's (' + total / 1000 + ')');
                    }

                    return parts.join(' | ');
                  }

                case _common_constant__WEBPACK_IMPORTED_MODULE_23__["PLAYER_STATUS"].PAUSED:
                  return 'Player paused';

                default:
                  return '';
              }
            }

          default:
            return '';
        }
      };

      return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
        'div',
        { className: 'status' },
        renderInner()
      );
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      var _this6 = this;

      var _props3 = this.props,
          testCases = _props3.testCases,
          editing = _props3.editing,
          player = _props3.player,
          status = _props3.status;


      var onClickMenuItem = function onClickMenuItem(_ref3) {
        var key = _ref3.key;

        switch (key) {
          case 'play_loop':
            {
              _this6.togglePlayLoopsModal(true);
              break;
            }
        }
      };

      var playMenu = react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
        antd_lib_menu__WEBPACK_IMPORTED_MODULE_3___default.a,
        { onClick: onClickMenuItem, selectable: false },
        react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
          antd_lib_menu__WEBPACK_IMPORTED_MODULE_3___default.a.Item,
          { key: 'play_loop', disabled: false },
          'Play loop..'
        )
      );

      if (status === _common_constant__WEBPACK_IMPORTED_MODULE_23__["APP_STATUS"].RECORDER) {
        return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
          'div',
          { className: 'actions' },
          react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
            antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
            {
              onClick: this.onToggleRecord,
              style: { color: '#ff0000' }
            },
            react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              'span',
              null,
              'Stop Record'
            )
          )
        );
      }

      switch (player.status) {
        case _common_constant__WEBPACK_IMPORTED_MODULE_23__["PLAYER_STATUS"].PLAYING:
          {
            return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              'div',
              { className: 'actions' },
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a.Group,
                null,
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                  { onClick: function onClick() {
                      return _this6.getPlayer().stop();
                    } },
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'span',
                    null,
                    'Stop'
                  )
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                  { onClick: function onClick() {
                      return _this6.getPlayer('testCase').pause();
                    } },
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'span',
                    null,
                    'Pause'
                  )
                )
              )
            );
          }

        case _common_constant__WEBPACK_IMPORTED_MODULE_23__["PLAYER_STATUS"].PAUSED:
          {
            return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              'div',
              { className: 'actions' },
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a.Group,
                null,
                this.props.player.mode === _common_constant__WEBPACK_IMPORTED_MODULE_23__["PLAYER_MODE"].TEST_CASE ? react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                  { onClick: function onClick() {
                      return _this6.getPlayer('testCase').resume(true);
                    } },
                  'Step'
                ) : null,
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                  { onClick: function onClick() {
                      return _this6.getPlayer().stop();
                    } },
                  'Stop'
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                  { onClick: function onClick() {
                      return _this6.getPlayer('testCase').resume();
                    } },
                  'Resume'
                )
              )
            );
          }

        case _common_constant__WEBPACK_IMPORTED_MODULE_23__["PLAYER_STATUS"].STOPPED:
          {
            return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
              'div',
              { className: 'actions' },
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                {
                  onClick: this.onToggleRecord
                },
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  'span',
                  null,
                  'Record'
                )
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a.Group,
                { className: 'play-actions' },
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                  { onClick: function onClick() {
                      return _this6.playCurrentMacro(true);
                    } },
                  'Step'
                ),
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                  antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_2___default.a.Button,
                  { onClick: function onClick() {
                      return _this6.playCurrentMacro(false);
                    }, overlay: playMenu },
                  react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                    'span',
                    null,
                    'Play Macro'
                  )
                )
              ),
              react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
                antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                { shape: 'circle', onClick: function onClick() {
                    return _this6.setState({ showReplaySettings: true });
                  } },
                react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_1___default.a, { type: 'setting' })
              )
            );
          }
      }
    }
  }, {
    key: 'renderMacro',
    value: function renderMacro() {
      var _props4 = this.props,
          testCases = _props4.testCases,
          editing = _props4.editing,
          player = _props4.player,
          hasUnsaved = _props4.hasUnsaved;
      var src = editing.meta.src;

      var isPlayerStopped = player.status === _common_constant__WEBPACK_IMPORTED_MODULE_23__["PLAYER_STATUS"].STOPPED;
      var klass = hasUnsaved ? 'unsaved' : '';

      var saveBtnState = {
        text: src ? 'Save' : 'Save..',
        disabled: !hasUnsaved
      };

      return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
        'div',
        { className: 'select-case' },
        react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
          'span',
          { className: 'test-case-name ' + klass },
          src ? src.name : 'Untitled'
        ),
        !isPlayerStopped ? null : react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
          antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
          { disabled: saveBtnState.disabled, onClick: this.onClickSave },
          react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
            'span',
            null,
            saveBtnState.text
          )
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props5 = this.props,
          testCases = _props5.testCases,
          player = _props5.player;

      var isPlayerStopped = player.status === _common_constant__WEBPACK_IMPORTED_MODULE_23__["PLAYER_STATUS"].STOPPED;

      testCases.sort(function (a, b) {
        var nameA = a.name.toLowerCase();
        var nameB = b.name.toLowerCase();

        if (nameA < nameB) return -1;
        if (nameA === nameB) return 0;
        return 1;
      });

      return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(
        'div',
        { className: 'header ' + this.props.status.toLowerCase() },
        this.renderMacro(),
        this.renderStatus(),
        this.renderActions(),
        this.renderPlayLoopModal(),
        this.renderSettingModal()
      );
    }
  }]);

  return Header;
}(react__WEBPACK_IMPORTED_MODULE_14___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_15__["connect"])(function (state) {
  return {
    hasUnsaved: Object(_recomputed__WEBPACK_IMPORTED_MODULE_20__["hasUnsavedMacro"])(state),
    route: state.route,
    testCases: [].concat(_toConsumableArray(state.editor.testCases)),
    editing: state.editor.editing,
    player: state.player,
    status: state.status,
    config: state.config
  };
}, function (dispatch) {
  return Object(redux__WEBPACK_IMPORTED_MODULE_16__["bindActionCreators"])(_extends({}, _actions__WEBPACK_IMPORTED_MODULE_22__), dispatch);
})(Object(react_router_dom__WEBPACK_IMPORTED_MODULE_17__["withRouter"])(Header)));

/***/ }),

/***/ "./src/components/header.scss":
/*!************************************!*\
  !*** ./src/components/header.scss ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(/*! !../../node_modules/css-loader!../../node_modules/postcss-loader/lib!../../node_modules/sass-loader/lib/loader.js!./header.scss */ "./node_modules/css-loader/index.js!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/components/header.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {}

/***/ }),

/***/ "./src/components/save_test_case.js":
/*!******************************************!*\
  !*** ./src/components/save_test_case.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getSaveTestCase; });
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _actions_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../actions/index */ "./src/actions/index.js");
/* harmony import */ var _recomputed__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../recomputed */ "./src/recomputed/index.js");






var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var SaveAsModal = function (_React$Component) {
  _inherits(SaveAsModal, _React$Component);

  function SaveAsModal() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SaveAsModal);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SaveAsModal.__proto__ || Object.getPrototypeOf(SaveAsModal)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      name: null
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SaveAsModal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.name) {
        this.setState({ name: this.props.name });
      }

      setTimeout(function () {
        var input = _this2.inputSaveTestCase.refs.input;
        input.focus();
        input.selectionStart = input.selectionEnd = input.value.length;
      }, 100);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(
        antd_lib_modal__WEBPACK_IMPORTED_MODULE_0___default.a,
        {
          title: 'Save macro as..',
          okText: 'Save',
          cancelText: 'Cancel',
          visible: true,
          onOk: function onOk() {
            return _this3.props.onOk(_this3.state.name);
          },
          onCancel: this.props.onCancel,
          className: 'save-modal'
        },
        react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_2___default.a, {
          style: { width: '100%' },
          onKeyDown: function onKeyDown(e) {
            if (e.keyCode === 13) _this3.props.onOk(_this3.state.name);
          },
          onChange: function onChange(e) {
            return _this3.setState({ name: e.target.value });
          },
          value: this.state.name || '',
          placeholder: 'macro name',
          ref: function ref(el) {
            _this3.inputSaveTestCase = el;
          }
        })
      );
    }
  }]);

  return SaveAsModal;
}(react__WEBPACK_IMPORTED_MODULE_3___default.a.Component);

var getContainer = function getContainer() {
  var id = 'save_test_case_container';
  var $el = document.getElementById(id);

  if ($el) return $el;

  var $new = document.createElement('div');
  $new.id = id;
  document.body.appendChild($new);
  return $new;
};

var getTestCaseName = function getTestCaseName(state) {
  var src = state.editor.editing.meta.src;

  return src && src.name && src.name.length ? src.name : 'Untitled';
};

var tryToSave = function tryToSave(store, testCaseName) {
  var $container = getContainer();
  var state = store.getState();
  var existed = !!state.editor.editing.meta.src;

  if (existed) {
    return store.dispatch(Object(_actions_index__WEBPACK_IMPORTED_MODULE_5__["saveEditingAsExisted"])());
  }

  return new Promise(function (resolve, reject) {
    var onSave = function onSave(name) {
      return store.dispatch(Object(_actions_index__WEBPACK_IMPORTED_MODULE_5__["saveEditingAsNew"])(name)).then(function () {
        return antd_lib_message__WEBPACK_IMPORTED_MODULE_1___default.a.success('successfully saved!', 1.5);
      }, function (e) {
        return antd_lib_message__WEBPACK_IMPORTED_MODULE_1___default.a.error(e.message, 1.5);
      }).then(resolve, reject);
    };

    react_dom__WEBPACK_IMPORTED_MODULE_4___default.a.render(react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(SaveAsModal, {
      name: testCaseName,
      onOk: onSave,
      onCancel: resolve
    }), $container);
    // TODO
  }).then(function () {
    react_dom__WEBPACK_IMPORTED_MODULE_4___default.a.unmountComponentAtNode($container);
  }).catch(function (e) {
    console.error(e.message);
  });
};

var factory = function factory(store) {
  return {
    saveOrNot: function saveOrNot() {
      var state = store.getState();
      var hasUnsaved = Object(_recomputed__WEBPACK_IMPORTED_MODULE_6__["hasUnsavedMacro"])(state);

      if (!hasUnsaved) return Promise.resolve();

      return new Promise(function (resolve, reject) {
        antd_lib_modal__WEBPACK_IMPORTED_MODULE_0___default.a.confirm({
          title: 'Unsaved changes in macro "' + getTestCaseName(state) + '"',
          content: 'Do you want to discard or save these changes?',
          okText: 'Save',
          cancelText: 'Discard',
          onOk: function onOk() {
            tryToSave(store).then(resolve);
            return Promise.resolve(true);
          },
          onCancel: function onCancel() {
            resolve();
            return Promise.resolve(true);
          }
        });
      });
    },
    save: function save(defaultName) {
      var state = store.getState();
      var hasUnsaved = Object(_recomputed__WEBPACK_IMPORTED_MODULE_6__["hasUnsavedMacro"])(state);

      if (!hasUnsaved) return;
      return tryToSave(store, defaultName);
    }
  };
};

var api = void 0;

function getSaveTestCase(store) {
  if (api) return api;
  if (!store) throw new Error('must provide store');

  api = factory(store);
  return api;
}

/***/ }),

/***/ "./src/components/search_box.js":
/*!**************************************!*\
  !*** ./src/components/search_box.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/icon */ "./node_modules/antd/lib/icon/index.js");
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_icon__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);




var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var SearchBox = function (_Input) {
  _inherits(SearchBox, _Input);

  function SearchBox() {
    _classCallCheck(this, SearchBox);

    return _possibleConstructorReturn(this, (SearchBox.__proto__ || Object.getPrototypeOf(SearchBox)).apply(this, arguments));
  }

  _createClass(SearchBox, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _ref = this.props.inputProps || {},
          value = _ref.value;

      var canClear = value !== undefined && value.length > 0;

      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(
        'span',
        {
          className: this.props.className,
          style: _extends({}, this.props.style || {}, {
            position: 'relative'
          })
        },
        react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_1___default.a, this.props.inputProps || {}),
        react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_0___default.a, {
          type: canClear ? 'close' : 'search',
          onClick: function onClick(e) {
            if (!canClear) return;
            if (!_this2.props.inputProps || !_this2.props.inputProps.onChange) return;
            _this2.props.inputProps.onChange({ target: { value: '' } });
          },
          style: {
            position: 'absolute',
            right: '10px',
            top: '50%',
            transform: 'translateY(-50%)',
            cursor: canClear ? 'pointer' : 'auto'
          }
        })
      );
    }
  }]);

  return SearchBox;
}(antd_lib_input__WEBPACK_IMPORTED_MODULE_1___default.a);

/* harmony default export */ __webpack_exports__["default"] = (SearchBox);

/***/ }),

/***/ "./src/config/preinstall_macros.js":
/*!*****************************************!*\
  !*** ./src/config/preinstall_macros.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  DemoAutofill: {
    "CreationDate": "2018-02-18",
    "Commands": [{
      "Command": "store",
      "Target": "fast",
      "Value": "!replayspeed"
    }, {
      "Command": "store",
      "Target": "15",
      "Value": "!TIMEOUT_WAIT"
    }, {
      "Command": "store",
      "Target": "60",
      "Value": "!TIMEOUT_PAGELOAD"
    }, {
      "Command": "open",
      "Target": "https://docs.google.com/forms/d/e/1FAIpQLScPXRMtYI_KYL8J6fivHUV0hQKB7j1RtqTrBBUtEr8VMmyCqw/viewform",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "css=span.docssharedWizToggleLabeledLabelText.exportLabel.freebirdFormviewerViewItemsRadioLabel",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "css=div.quantumWizTogglePaperradioEl.docssharedWizToggleLabeledControl.freebirdThemedRadio.freebirdThemedRadioDarkerDisabled.freebirdFormviewerViewItemsRadioControl",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "css=div.quantumWizTogglePapercheckboxInnerBox.exportInnerBox",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"mG61Hd\"]/div/div[2]/div[2]/div[2]/div[2]/div[2]/div/label/div/div[1]/div[2]",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"mG61Hd\"]/div/div[2]/div[2]/div[2]/div[2]/div[3]/div/label/div/div[1]/div[2]",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "css=content.quantumWizMenuPaperselectContent.exportContent",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"mG61Hd\"]/div/div[2]/div[2]/div[3]/div[2]/div[2]/div[4]/content",
      "Value": ""
    }, {
      "Command": "captureScreenshot",
      "Target": "AutoFill1stPage${!LOOP}",
      "Value": ""
    }, {
      "Command": "clickAndWait",
      "Target": "css=span.quantumWizButtonPaperbuttonLabel.exportLabel",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "name=entry.1572386418",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "name=entry.1572386418",
      "Value": "This is a single line test..."
    }, {
      "Command": "click",
      "Target": "name=entry.1569542411",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "name=entry.1569542411",
      "Value": "...and this a multiline test:\nLine2\nLine3"
    }, {
      "Command": "captureScreenshot",
      "Target": "AutoFill2ndPage${!LOOP}",
      "Value": ""
    }, {
      "Command": "pause",
      "Target": "1000",
      "Value": ""
    }, {
      "Command": "clickAndWait",
      "Target": "//*[@id=\"mG61Hd\"]/div/div[2]/div[3]/div[1]/div[1]/div[2]/div[2]",
      "Value": ""
    }, {
      "Command": "captureScreenshot",
      "Target": "AutoFill3rdPage${!LOOP}",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "DemoAutofill macro completed (shown as notifcation because of #shownotification in the 3rd column)",
      "Value": "#shownotification"
    }]
  },
  DemoCanvas: {
    "CreationDate": "2018-6-26",
    "Commands": [{
      "Command": "store",
      "Target": "fast",
      "Value": "!replayspeed"
    }, {
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/canvas",
      "Value": ""
    }, {
      "Command": "clickAndWait",
      "Target": "link=LiterallyCanvas",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "First a simple clickAt demo (3 dots)",
      "Value": ""
    }, {
      "Command": "clickAt",
      "Target": "//*[@id=\"literally-canvas\"]/div[1]/div[1]/canvas[2]",
      "Value": "28,28"
    }, {
      "Command": "clickAt",
      "Target": "//*[@id=\"literally-canvas\"]/div[1]/div[1]/canvas[2]",
      "Value": "58,28"
    }, {
      "Command": "clickAt",
      "Target": "//*[@id=\"literally-canvas\"]/div[1]/div[1]/canvas[2]",
      "Value": "88,28"
    }, {
      "Command": "comment",
      "Target": "Just image search the canvas!",
      "Value": "88,28"
    }, {
      "Command": "visionLimitSearchArea",
      "Target": "element://*[@id=\"literally-canvas\"]/div[1]/div[1]/canvas[2]",
      "Value": ""
    }, {
      "Command": "visualVerify",
      "Target": "canvas_3dots_verify_dpi_96.png",
      "Value": ""
    }, {
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/canvas",
      "Value": ""
    }, {
      "Command": "clickAndWait",
      "Target": "link=Mapbox",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Test: Embedded map (Mapbox)",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "id=demo",
      "Value": ""
    }, {
      "Command": "visionLimitSearchArea",
      "Target": "viewport",
      "Value": ""
    }, {
      "Command": "visualAssert",
      "Target": "canvas_wyoming_dpi_96.png@0.60",
      "Value": ""
    }, {
      "Command": "clickAt",
      "Target": "#efp",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Now verify that the click (= the map) works as expected",
      "Value": ""
    }, {
      "Command": "visualVerify",
      "Target": "canvas_wyoming_verify_dpi_96.png@0.5",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Test Google Maps: Find & click Hyde park, and check that its info bubble shows.",
      "Value": ""
    }, {
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/canvas#maps",
      "Value": ""
    }, {
      "Command": "visionLimitSearchArea",
      "Target": "viewport",
      "Value": ""
    }, {
      "Command": "visualAssert",
      "Target": "canvas_hydepark_dpi_96.png@0.70",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "index=0",
      "Value": ""
    }, {
      "Command": "clickAt",
      "Target": "#efp",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Now verify that the click (= the map) works as expected",
      "Value": ""
    }, {
      "Command": "visualVerify",
      "Target": "canvas_hydepark_verify_dpi_96.png@0.70",
      "Value": ""
    }]
  },
  DemoComputerVision: {
    "CreationDate": "2018-5-31",
    "Commands": [{
      "Command": "open",
      "Target": "https://ocr.space/",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "OCR.space is our own OCR API service, this demo is a test that our QA uses internally, too :-)",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Verify the 3rd party \"Share\" banner shows",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "true",
      "Value": "!errorignore"
    }, {
      "Command": "visualSearch",
      "Target": "democv_share.png@0.50",
      "Value": "matches"
    }, {
      "Command": "if",
      "Target": "${matches} == 0",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Browser width too small for \"share\" banner to show",
      "Value": "blue"
    }, {
      "Command": "endif",
      "Target": "",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "false",
      "Value": "!errorignore"
    }, {
      "Command": "type",
      "Target": "id=imageUrl",
      "Value": "https://a9t9.com/Content/Images/kantu-chrome-loop.png"
    }, {
      "Command": "select",
      "Target": "id=ocrLanguage",
      "Value": "label=English"
    }, {
      "Command": "comment",
      "Target": "viewport is default, but we add it here for test. Try \"full\" to see the differenc",
      "Value": "label=English"
    }, {
      "Command": "visionLimitSearchArea",
      "Target": "viewport",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "we could use \"click link=Start OCR!\" but we use the image of the button instead",
      "Value": ""
    }, {
      "Command": "visualAssert",
      "Target": "democv_startocr.png@0.60",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "#efp is short for \"#ElementFromPoint (${imageX},(${imageY})",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "#efp",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Wait for OCR to be completed",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "30",
      "Value": "!timeout_wait"
    }, {
      "Command": "visualAssert",
      "Target": "democv_ocrdone.png",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "10",
      "Value": "!timeout_wait"
    }, {
      "Command": "click",
      "Target": "link=Show Overlay",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Visually verify that the overlay is correct",
      "Value": ""
    }, {
      "Command": "visualAssert",
      "Target": "democv_checkoverlay.png@0.60",
      "Value": ""
    }]
  },
  DemoDialogboxes: {
    "CreationDate": "2018-02-15",
    "Commands": [{
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/storeeval",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "id=sometext",
      "Value": "Start..."
    }, {
      "Command": "click",
      "Target": "//*[@id=\"content\"]/div[2]/div/p[3]/button[1]",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Kantu IDE closes dialog boxes automatially. You need assertAlert (etc) only to verify expected texts.",
      "Value": ""
    }, {
      "Command": "assertAlert",
      "Target": "Hello\\nHow are you?",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"content\"]/div[2]/div/p[3]/button[2]",
      "Value": ""
    }, {
      "Command": "assertConfirmation",
      "Target": "Press a button!",
      "Value": ""
    }, {
      "Command": "answerOnNextPrompt",
      "Target": "I am Kantu for Chrome...",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"content\"]/div[2]/div/p[3]/button[3]",
      "Value": ""
    }, {
      "Command": "assertPrompt",
      "Target": "Please enter your name",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "id=sometext",
      "Value": "Done!"
    }]
  },
  DemoDragDrop: {
    "CreationDate": "2017-10-18",
    "Commands": [{
      "Command": "open",
      "Target": "https://a9t9.com/demo/webtest/dragdrop/",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Reduce replay speed so we can better see what is going on...",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "medium",
      "Value": "!replayspeed"
    }, {
      "Command": "dragAndDropToObject",
      "Target": "id=one",
      "Value": "id=bin"
    }, {
      "Command": "dragAndDropToObject",
      "Target": "id=two",
      "Value": "id=bin"
    }, {
      "Command": "dragAndDropToObject",
      "Target": "id=three",
      "Value": "id=bin"
    }, {
      "Command": "dragAndDropToObject",
      "Target": "id=four",
      "Value": "id=bin"
    }, {
      "Command": "dragAndDropToObject",
      "Target": "id=five",
      "Value": "id=bin"
    }]
  },
  DemoDownload: {
    "CreationDate": "2018-2-25",
    "Commands": [{
      "Command": "store",
      "Target": "200",
      "Value": "!timeout_download"
    }, {
      "Command": "store",
      "Target": "10",
      "Value": "!timeout_wait"
    }, {
      "Command": "storeEval",
      "Target": "var d=new Date(); d.getFullYear() + '-' +((d.getMonth()+1))+'-' +d.getDate();",
      "Value": "todaydate"
    }, {
      "Command": "echo",
      "Target": "Today is ${todaydate}",
      "Value": ""
    }, {
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/filedownload",
      "Value": ""
    }, {
      "Command": "onDownload",
      "Target": "KantuTest1_${todaydate}.exe",
      "Value": "true"
    }, {
      "Command": "store",
      "Target": "${!runtime}",
      "Value": "starttime"
    }, {
      "Command": "click",
      "Target": "link=USA (East coast)*",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "parseFloat(\"${!runtime}\")-parseFloat(\"${starttime}\")",
      "Value": "downloadtime"
    }, {
      "Command": "echo",
      "Target": "Download1 (USA) took ${downloadtime} seconds",
      "Value": "blue"
    }, {
      "Command": "onDownload",
      "Target": "KantuTest2_${todaydate}.exe",
      "Value": "true"
    }, {
      "Command": "store",
      "Target": "${!runtime}",
      "Value": "starttime"
    }, {
      "Command": "click",
      "Target": "link=*Asia*",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "parseFloat(\"${!runtime}\")-parseFloat(\"${starttime}\")",
      "Value": "downloadtime"
    }, {
      "Command": "echo",
      "Target": "Download2 (Asia) took ${downloadtime} seconds",
      "Value": "green"
    }, {
      "Command": "echo",
      "Target": "All done...",
      "Value": ""
    }, {
      "Command": "clickAndWait",
      "Target": "link=OnDownload command",
      "Value": ""
    }]
  },
  DemoExtract: {
    "CreationDate": "2018-05-28",
    "Commands": [{
      "Command": "store",
      "Target": "fast",
      "Value": "!replayspeed"
    }, {
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/storeeval",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Current page URL = ${!URL}",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Current loop value = ${!LOOP}",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "This macro shows various methods to extract and save data from a website",
      "Value": ""
    }, {
      "Command": "storeAttribute",
      "Target": "css=img.responsive-img@src",
      "Value": "mylink"
    }, {
      "Command": "echo",
      "Target": "href=${mylink}",
      "Value": ""
    }, {
      "Command": "storeAttribute",
      "Target": "css=img.responsive-img@alt",
      "Value": "myalttext"
    }, {
      "Command": "echo",
      "Target": "alt text = ${myalttext}",
      "Value": ""
    }, {
      "Command": "storeAttribute",
      "Target": "//input[@id='sometext']@size",
      "Value": "boxsize"
    }, {
      "Command": "echo",
      "Target": "input box size =${boxsize}",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "id=sometext",
      "Value": "This box is ${boxsize} chars wide"
    }, {
      "Command": "storeEval",
      "Target": "document.title = ${boxsize};",
      "Value": ""
    }, {
      "Command": "assertTitle",
      "Target": "70",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"content\"]/div[2]/div/h2[3]",
      "Value": ""
    }, {
      "Command": "storeText",
      "Target": "//*[@id=\"content\"]/div[2]/div/h2[3]",
      "Value": "myheader"
    }, {
      "Command": "echo",
      "Target": "header = ${myheader}",
      "Value": ""
    }, {
      "Command": "storeTitle",
      "Target": "",
      "Value": "mytitle"
    }, {
      "Command": "echo",
      "Target": "page title = ${mytitle}",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "page title = ${mytitle}",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "page title = ${mytitle}",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "page title = ${mytitle}",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Now test some extraction with storeValue",
      "Value": ""
    }, {
      "Command": "storeValue",
      "Target": "id=sometext",
      "Value": "mytext"
    }, {
      "Command": "select",
      "Target": "id=tesla",
      "Value": "label=Model Y"
    }, {
      "Command": "storeValue",
      "Target": "id=tesla",
      "Value": "mytesla"
    }, {
      "Command": "echo",
      "Target": "The text box contains [${mytext}] and the select box has the value [${mytesla}] selected",
      "Value": ""
    }, {
      "Command": "verifyValue",
      "Target": "id=tesla",
      "Value": "y"
    }, {
      "Command": "storeChecked",
      "Target": "name=vehicle",
      "Value": "hasbike"
    }, {
      "Command": "storeChecked",
      "Target": "xpath=(//input[@name='vehicle'])[2]",
      "Value": "hascar"
    }, {
      "Command": "storeChecked",
      "Target": "xpath=(//input[@name='vehicle'])[3]",
      "Value": "hasboat"
    }, {
      "Command": "echo",
      "Target": "User has bike:${hasbike}, car:${hascar}, boat:${hasboat}",
      "Value": "green"
    }, {
      "Command": "comment",
      "Target": "Search and extract directly from the page SOURCE",
      "Value": "y"
    }, {
      "Command": "sourceExtract",
      "Target": "regex=[\\$\\£\\€](\\d+(?:\\.\\d{1,2})?)",
      "Value": "match1"
    }, {
      "Command": "sourceExtract",
      "Target": "regex=[\\$\\£\\€](\\d+(?:\\.\\d{1,2})?)@2",
      "Value": "match2"
    }, {
      "Command": "comment",
      "Target": "You can also extract without regex with the * symbol",
      "Value": "match2b"
    }, {
      "Command": "sourceExtract",
      "Target": "$*<",
      "Value": "match2b"
    }, {
      "Command": "echo",
      "Target": "Coffee costs ${match1} and tea ${match2}",
      "Value": "blue"
    }, {
      "Command": "sourceExtract",
      "Target": "regex=_width: (\\d+)",
      "Value": "match1"
    }, {
      "Command": "sourceExtract",
      "Target": "regex=_width: (\\d+)@1,1",
      "Value": "match1group1"
    }, {
      "Command": "sourceExtract",
      "Target": "regex=_width: (\\d+)@2",
      "Value": "match2"
    }, {
      "Command": "sourceExtract",
      "Target": "regex=_width: (\\d+)@2,1",
      "Value": "match2group1"
    }, {
      "Command": "echo",
      "Target": "match1 = [${MATCH1}] (group1 = [${match1group1}]) match2 =  [${MATCH2}]  (group1 = [${MATCH2GROUP1}])",
      "Value": "blue"
    }, {
      "Command": "comment",
      "Target": "Extract Google Analytics ID",
      "Value": ""
    }, {
      "Command": "sourceExtract",
      "Target": "UA-*,",
      "Value": "ga_option1"
    }, {
      "Command": "sourceExtract",
      "Target": "regex=UA-[0-9]+-[0-9]+",
      "Value": "ga_option2"
    }, {
      "Command": "echo",
      "Target": "Google Analytics ID = ${ga_option2}",
      "Value": "pink"
    }, {
      "Command": "comment",
      "Target": "Some assertion test for QA",
      "Value": ""
    }, {
      "Command": "if",
      "Target": "${match2group1} != 22",
      "Value": ""
    }, {
      "Command": "throwError",
      "Target": "Regex Extraction failed for Match2(1):  ${match2group1}",
      "Value": ""
    }, {
      "Command": "endif",
      "Target": "",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Last but not least, taking a screenshot is another way to extract data",
      "Value": ""
    }, {
      "Command": "captureScreenshot",
      "Target": "myscreenshot_${mytitle}",
      "Value": ""
    }, {
      "Command": "storeImage",
      "Target": "//*[@id=\"page-header\"]/div/div/h1",
      "Value": "pagetitle.png"
    }, {
      "Command": "comment",
      "Target": "Export images to download folder",
      "Value": ""
    }, {
      "Command": "localStorageExport",
      "Target": "myscreenshot_${mytitle}.png",
      "Value": ""
    }, {
      "Command": "localStorageExport",
      "Target": "pagetitle.png",
      "Value": ""
    }]
  },
  DemoFrames: {
    "CreationDate": "2017-10-16",
    "Commands": [{
      "Command": "open",
      "Target": "https://a9t9.com/demo/webtest/frames/",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Reduce replay speed so we can better see what is going on...",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "medium",
      "Value": "!replayspeed"
    }, {
      "Command": "selectFrame",
      "Target": "index=0",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "name=mytext1",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "name=mytext1",
      "Value": "Frame1 (index=0)"
    }, {
      "Command": "selectFrame",
      "Target": "relative=top",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "index=1",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "name=mytext2",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "name=mytext2",
      "Value": "Frame2 (index=1)"
    }, {
      "Command": "selectFrame",
      "Target": "relative=top",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "index=2",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "name=mytext3",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "name=mytext3",
      "Value": "Frame3 (index=2)"
    }, {
      "Command": "selectFrame",
      "Target": "relative=top",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "index=3",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "name=mytext4",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "name=mytext4",
      "Value": "Frame4 (index=3)"
    }, {
      "Command": "selectFrame",
      "Target": "relative=top",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "index=4",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "name=mytext5",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "name=mytext5",
      "Value": "Frame5 (index=4)"
    }, {
      "Command": "selectFrame",
      "Target": "relative=top",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "index=2",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "name=mytext3",
      "Value": "now testing iframe inside this frame"
    }, {
      "Command": "selectFrame",
      "Target": "index=0",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"mG61Hd\"]/div/div[2]/div[2]/div[1]/div[2]/div/content/div/div/label/div/div[1]/div[3]/div",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "css=input.quantumWizTextinputSimpleinputInput.exportInput",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "css=input.quantumWizTextinputSimpleinputInput.exportInput",
      "Value": "iframe in frame: works!"
    }, {
      "Command": "selectFrame",
      "Target": "relative=top",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "index=2",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "name=mytext3",
      "Value": "Test completed!"
    }]
  },

  DemoTakeScreenshots: {
    "CreationDate": "2018-1-25",
    "Commands": [{
      "Command": "open",
      "Target": "https://a9t9.com/blog/",
      "Value": ""
    }, {
      "Command": "captureEntirePageScreenshot",
      "Target": "a9t9blog",
      "Value": ""
    }, {
      "Command": "clickAndWait",
      "Target": "link=read more@POS=1",
      "Value": ""
    }, {
      "Command": "captureEntirePageScreenshot",
      "Target": "article1",
      "Value": ""
    }, {
      "Command": "open",
      "Target": "https://a9t9.com/blog/",
      "Value": ""
    }, {
      "Command": "clickAndWait",
      "Target": "link=read more@POS=2",
      "Value": ""
    }, {
      "Command": "captureEntirePageScreenshot",
      "Target": "article2",
      "Value": ""
    }, {
      "Command": "captureScreenshot",
      "Target": "article2_just_viewport",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "take screenshot of an _element_ with storeImage",
      "Value": ""
    }, {
      "Command": "storeImage",
      "Target": "link=The Autonomous Technology (A9T9) Blog",
      "Value": "blogtitle"
    }]
  },
  DemoIfElse: {
    "CreationDate": "2018-4-28",
    "Commands": [{
      "Command": "store",
      "Target": "fast",
      "Value": "!replayspeed"
    }, {
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/storeeval",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "How to use gotoIf and label(s) for flow control. For a while/endWhile demo, see the DemoSaveCSV macro.",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "(new Date().getHours())",
      "Value": "mytime"
    }, {
      "Command": "echo",
      "Target": "mytime = ${mytime}",
      "Value": ""
    }, {
      "Command": "if",
      "Target": "${mytime}  > 16",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Good afternoon!",
      "Value": ""
    }, {
      "Command": "else",
      "Target": "",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Good morning!",
      "Value": ""
    }, {
      "Command": "endif",
      "Target": "",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "true",
      "Value": "!errorignore"
    }, {
      "Command": "storeAttribute",
      "Target": "//input[@id='sometext-WRONG-ID-TEST']@size",
      "Value": "boxsize"
    }, {
      "Command": "if",
      "Target": "${!LastCommandOK}",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Boxsize is ${boxsize}",
      "Value": ""
    }, {
      "Command": "else",
      "Target": "",
      "Value": ""
    }, {
      "Command": "storeAttribute",
      "Target": "//input[@id='sometext']@size",
      "Value": "boxsize"
    }, {
      "Command": "echo",
      "Target": "Old ID not found, with new ID we have: Boxsize = ${boxsize}",
      "Value": ""
    }, {
      "Command": "endif",
      "Target": "",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "false",
      "Value": "!errorignore"
    }, {
      "Command": "echo",
      "Target": "input box size =${boxsize}",
      "Value": ""
    }, {
      "Command": "gotoIf",
      "Target": "${boxsize} > 70",
      "Value": "BOX-TOO-BIG"
    }, {
      "Command": "type",
      "Target": "id=sometext",
      "Value": "This box is ${boxsize} chars wide"
    }, {
      "Command": "storeEval",
      "Target": "document.title = ${boxsize};",
      "Value": ""
    }, {
      "Command": "gotoLabel",
      "Target": "END",
      "Value": ""
    }, {
      "Command": "label",
      "Target": "BOX-TOO-BIG",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Input box too big. This is just a test of gotoIf",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "document.title = \"Just a gotoIf test. This line should not be reached unless you edit the macro\"",
      "Value": ""
    }, {
      "Command": "label",
      "Target": "END",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "test case completed",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "",
      "Value": ""
    }, {
      "Command": "onError",
      "Target": "#goto",
      "Value": "fixerror"
    }, {
      "Command": "type",
      "Target": "id=sometext",
      "Value": "this line works"
    }, {
      "Command": "type",
      "Target": "id=sometextXXXXX",
      "Value": "this line has the wrong ID..."
    }, {
      "Command": "echo",
      "Target": "this line is never reached, because of the error above",
      "Value": "blue"
    }, {
      "Command": "gotoLabel",
      "Target": "end-part2",
      "Value": ""
    }, {
      "Command": "label",
      "Target": "fixerror",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "here we can have code that handles the error..",
      "Value": "green"
    }, {
      "Command": "type",
      "Target": "id=sometext",
      "Value": "Fix Error Section: This command works."
    }, {
      "Command": "label",
      "Target": "end-part2",
      "Value": ""
    }]
  },
  DemoIframe: {
    "CreationDate": "2018-4-28",
    "Commands": [{
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/iframes",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"content\"]/div[2]/div/p[1]",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"content\"]/div[2]/div/h2[1]",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "First iframe: Embedded Google Doc",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "index=0",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"mG61Hd\"]/div/div[2]/div[2]/div[1]/div[2]/div/content/div/div/label/div/div[1]/div[3]/div",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "css=input.quantumWizTextinputSimpleinputInput.exportInput",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "css=input.quantumWizTextinputSimpleinputInput.exportInput",
      "Value": "hello iframe"
    }, {
      "Command": "click",
      "Target": "css=div.quantumWizTogglePapercheckboxInnerBox.exportInnerBox",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"mG61Hd\"]/div/div[2]/div[2]/div[2]/div[2]/div[2]/div/label/div/div[1]/div[2]",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "//*[@id=\"mG61Hd\"]/div/div[2]/div[2]/div[2]/div[2]/div[3]/div/label/div/div[1]/div[2]",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "relative=top",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Second iframe: Embedded Youtube Video",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "index=1",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "css=button.ytp-large-play-button.ytp-button",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "relative=top",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Third iframe: Embedded Twitter + click links that open new tabs, then switch to them",
      "Value": ""
    }, {
      "Command": "selectFrame",
      "Target": "id=twitter-widget-0",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "link=@A9T9_com",
      "Value": ""
    }, {
      "Command": "pause",
      "Target": "2000",
      "Value": ""
    }, {
      "Command": "selectWindow",
      "Target": "tab=1",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "link=a9t9.com",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Wait for tab to open",
      "Value": ""
    }, {
      "Command": "pause",
      "Target": "2000",
      "Value": ""
    }, {
      "Command": "selectWindow",
      "Target": "tab=2",
      "Value": ""
    }, {
      "Command": "clickAndWait",
      "Target": "link=Kantu Sel. IDE - Docs",
      "Value": ""
    }]
  },
  DemoImplicitWaiting: {
    "CreationDate": "2018-4-28",
    "Commands": [{
      "Command": "comment",
      "Target": "WaitForVisible is not part of implicit waiting",
      "Value": ""
    }, {
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/waitforvisible",
      "Value": ""
    }, {
      "Command": "waitForVisible",
      "Target": "css=#div1 > h1",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "css=#div1 > h1",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "20",
      "Value": "!timeout_wait"
    }, {
      "Command": "waitForVisible",
      "Target": "css=#div2 > h1",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "css=#div2 > h1",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Implicit waiting: Wait for elements to be loaded  or <timeout_wait> is reached",
      "Value": ""
    }, {
      "Command": "open",
      "Target": "https://a9t9.com/demo/webtest/implicitwaiting/",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "15",
      "Value": "!TIMEOUT_WAIT"
    }, {
      "Command": "assertText",
      "Target": "/html/body/header/center/p[2]",
      "Value": "Use the select box to start the timer..."
    }, {
      "Command": "select",
      "Target": "id=minutesSelect",
      "Value": "label=5 Seconds"
    }, {
      "Command": "echo",
      "Target": "The next element (target) is not available yet... Kantu waits for it up to ${!TIMEOUT_WAIT} seconds to appear.",
      "Value": "blue"
    }, {
      "Command": "click",
      "Target": "/html/body/header/center/img",
      "Value": ""
    }]
  },
  DemoCsvReadWithLoop: {
    "CreationDate": "2017-11-23",
    "Commands": [{
      "Command": "store",
      "Target": "fast",
      "Value": "!replayspeed"
    }, {
      "Command": "comment",
      "Target": "The file ReadCSVTestData.csv is pre-installed with Kantu.",
      "Value": ""
    }, {
      "Command": "csvRead",
      "Target": "ReadCSVTestData.csv",
      "Value": ""
    }, {
      "Command": "open",
      "Target": "https://docs.google.com/forms/d/e/1FAIpQLScGWVjexH2FNzJqPACzuzBLlTWMJHgLUHjxehtU-2cJxtu6VQ/viewform",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "name=entry.933434489",
      "Value": "${!COL1}"
    }, {
      "Command": "type",
      "Target": "name=entry.2004105717",
      "Value": "${!COL2}"
    }, {
      "Command": "type",
      "Target": "name=entry.1382578664",
      "Value": "${!COL3}"
    }, {
      "Command": "clickAndWait",
      "Target": "//*[@id=\"mG61Hd\"]/div/div[2]/div[3]/div[1]/div/div/content/span",
      "Value": ""
    }]
  },
  DemoCsvReadWithWhile: {
    "CreationDate": "2018-1-25",
    "Commands": [{
      "Command": "store",
      "Target": "180",
      "Value": "!timeout_macro"
    }, {
      "Command": "store",
      "Target": "fast",
      "Value": "!replayspeed"
    }, {
      "Command": "comment",
      "Target": "The file ReadCSVTestData.csv is pre-installed with Kantu.",
      "Value": ""
    }, {
      "Command": "csvRead",
      "Target": "ReadCSVTestData.csv",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Status = ${!csvReadStatus}, line = ${!csvReadLineNumber}",
      "Value": ""
    }, {
      "Command": "while",
      "Target": "\"${!csvReadStatus}\" == \"OK\"",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "status = ${!csvReadStatus}, line = ${!csvReadLineNumber}",
      "Value": ""
    }, {
      "Command": "open",
      "Target": "https://docs.google.com/forms/d/e/1FAIpQLScGWVjexH2FNzJqPACzuzBLlTWMJHgLUHjxehtU-2cJxtu6VQ/viewform",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "name=entry.933434489",
      "Value": "${!COL1}_${!csvReadLineNumber}"
    }, {
      "Command": "type",
      "Target": "name=entry.2004105717",
      "Value": "${!COL2}"
    }, {
      "Command": "type",
      "Target": "name=entry.1382578664",
      "Value": "${!COL3}"
    }, {
      "Command": "clickAndWait",
      "Target": "//*[@id=\"mG61Hd\"]/div/div[2]/div[3]/div[1]/div/div/content/span",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "${!csvReadLineNumber}+1",
      "Value": "!csvReadLineNumber"
    }, {
      "Command": "store",
      "Target": "true",
      "Value": "!errorIgnore"
    }, {
      "Command": "echo",
      "Target": "Reading CSV line No.  ${!csvReadLineNumber} ",
      "Value": "!errorIgnore"
    }, {
      "Command": "csvRead",
      "Target": "ReadCSVTestData.csv",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "false",
      "Value": "!errorIgnore"
    }, {
      "Command": "endWhile",
      "Target": "",
      "Value": ""
    }]
  },
  DemoCsvSave: {
    "CreationDate": "2018-06-01",
    "Commands": [{
      "Command": "store",
      "Target": "fast",
      "Value": "!replayspeed"
    }, {
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/csvsave",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "new Date().getFullYear()+\"-\"+(new Date().getMonth()+1)+\"-\"+new Date().getDate()+\" \"+ new Date().getHours()+\":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()",
      "Value": "timestamp"
    }, {
      "Command": "store",
      "Target": "${timestamp}",
      "Value": "!csvLine"
    }, {
      "Command": "echo",
      "Target": "First column in the CSV is time (${timestamp})",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Set i = 1 as we start the extraction with the 2nd table cell.",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "1",
      "Value": "i"
    }, {
      "Command": "while",
      "Target": "(${i} < 8)",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "${i}+1",
      "Value": "i"
    }, {
      "Command": "echo",
      "Target": "Current value of i = ${i}",
      "Value": "i"
    }, {
      "Command": "storeText",
      "Target": "//*[@id=\"gcw_mainFNGP5XSu6\"]/div[2]/table/tbody/tr[2]/td[${i}]/a",
      "Value": "c2"
    }, {
      "Command": "store",
      "Target": "${c2}",
      "Value": "!csvLine"
    }, {
      "Command": "echo",
      "Target": "Extracted Value for i=${i} is exchange rate = ${c2}",
      "Value": ""
    }, {
      "Command": "endWhile",
      "Target": "",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "${!csvLine}",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Append content of !csvLine to CSV file (or create file if none exists)",
      "Value": ""
    }, {
      "Command": "csvSave",
      "Target": "CurrencyConverterData",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "If needed, you can download (save) the CSV data from the CSV tab to the the download folder",
      "Value": ""
    }, {
      "Command": "localStorageExport",
      "Target": "currencyconverterdata.csv",
      "Value": ""
    }]
  },
  DemoStoreEval: {
    "CreationDate": "2018-4-28",
    "Commands": [{
      "Command": "store",
      "Target": "fast",
      "Value": "!replayspeed"
    }, {
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/storeeval",
      "Value": ""
    }, {
      "Command": "assertText",
      "Target": "//*[@id=\"content\"]/div[2]/div/h2[1]",
      "Value": "Input box to display some results"
    }, {
      "Command": "verifyText",
      "Target": "//*[@id=\"content\"]/div[2]/div/h2[1]",
      "Value": "Input box to display some results"
    }, {
      "Command": "verifyTitle",
      "Target": "Selenium IDE store, storeEval, Demo Page",
      "Value": ""
    }, {
      "Command": "assertTitle",
      "Target": "Selenium IDE store, storeEval, Demo Page",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "storeEVAL can run Javascript... and store the result in a variable (optional)",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "document.title = \"123\";",
      "Value": ""
    }, {
      "Command": "assertTitle",
      "Target": "123",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Use sourceSearch to assert we have the right Google Analytics Code",
      "Value": ""
    }, {
      "Command": "sourceSearch",
      "Target": "UA-86195842-1",
      "Value": "matches"
    }, {
      "Command": "if",
      "Target": "${matches} == 0",
      "Value": ""
    }, {
      "Command": "throwError",
      "Target": "Google Analytics ID is wrong!",
      "Value": ""
    }, {
      "Command": "endif",
      "Target": "",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "First some basic calculations with STORE",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "15",
      "Value": "AAA"
    }, {
      "Command": "store",
      "Target": "10",
      "Value": "BBB"
    }, {
      "Command": "storeEval",
      "Target": "storedVars['AAA']-storedVars['BBB']",
      "Value": "CCC"
    }, {
      "Command": "echo",
      "Target": "${CCC}",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "document.title = \"${CCC}\";",
      "Value": ""
    }, {
      "Command": "assertTitle",
      "Target": "5",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "storedVars gives access to VARIABLE, ${...} to VALUE",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "SELenium IDe",
      "Value": "AAA"
    }, {
      "Command": "storeEval",
      "Target": "storedVars['AAA'].toUpperCase()",
      "Value": "CCC"
    }, {
      "Command": "echo",
      "Target": "${CCC}",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "id=sometext",
      "Value": "${CCC}"
    }, {
      "Command": "echo",
      "Target": "Generate TODAYs date in in YYYY-MM-DD format ",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "var d= new Date(); var m=((d.getMonth()+1)<10)?'0'+(d.getMonth()+1):(d.getMonth()+1); d.getFullYear()+\"-\"+m+\"-\"+d.getDate();",
      "Value": "mydate"
    }, {
      "Command": "echo",
      "Target": "Today is ${mydate}",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Pick a random item from a list, useful for data-driven testing",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "new Array ('cat','dog','fish','dog','??','frog','?','dog','??','horse','??elephant')",
      "Value": "names"
    }, {
      "Command": "storeEval",
      "Target": "storedVars['names'].length",
      "Value": "length"
    }, {
      "Command": "echo",
      "Target": "array length = ${length}",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "Math.floor(Math.random()*storedVars['length'])",
      "Value": "num"
    }, {
      "Command": "echo",
      "Target": "num=${num}",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "The next command picks the random item",
      "Value": ""
    }, {
      "Command": "storeEval",
      "Target": "storedVars['names'][${num}]",
      "Value": "myrandomname"
    }, {
      "Command": "store",
      "Target": "Today is ${mydate}, and we draw a ${myrandomname}",
      "Value": "output"
    }, {
      "Command": "echo",
      "Target": "To is ${mydate}, and we draw a ${myrandomname}",
      "Value": "${output}"
    }, {
      "Command": "type",
      "Target": "id=sometext",
      "Value": "${output}"
    }, {
      "Command": "if",
      "Target": "parseFloat(\"${!runtime}\") > 15",
      "Value": ""
    }, {
      "Command": "throwError",
      "Target": "Runtime too slow, test failed",
      "Value": ""
    }, {
      "Command": "else",
      "Target": "",
      "Value": ""
    }, {
      "Command": "echo",
      "Target": "Runtime Ok, test passed!",
      "Value": "green"
    }, {
      "Command": "endif",
      "Target": "",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "With @POS you click on the (in this case) 3rd link with the same name. Great for looping over a list of links with the same name.",
      "Value": "green"
    }, {
      "Command": "clickAndWait",
      "Target": "link=This link@POS=3",
      "Value": ""
    }]
  },
  DemoTabs: {
    "CreationDate": "2017-10-15",
    "Commands": [{
      "Command": "open",
      "Target": "https://a9t9.com/kantu/demo/tabs",
      "Value": ""
    }, {
      "Command": "click",
      "Target": "link=Open new web page in new browser tab",
      "Value": ""
    }, {
      "Command": "selectWindow",
      "Target": "tab=1",
      "Value": ""
    }, {
      "Command": "assertTitle",
      "Target": "*1* TAB1",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "id=sometext1",
      "Value": "this is tab 1"
    }, {
      "Command": "click",
      "Target": "link=Open yet another web page in a new browser tab",
      "Value": ""
    }, {
      "Command": "selectWindow",
      "Target": "tab=2",
      "Value": ""
    }, {
      "Command": "assertTitle",
      "Target": "*2* TAB2",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "id=sometext2",
      "Value": "And this is tab 2!"
    }, {
      "Command": "selectWindow",
      "Target": "tab=1",
      "Value": ""
    }, {
      "Command": "assertTitle",
      "Target": "*1* TAB1",
      "Value": ""
    }, {
      "Command": "type",
      "Target": "id=sometext1",
      "Value": "Now back in tab 1 - test done!"
    }, {
      "Command": "comment",
      "Target": "We can also open new tabs",
      "Value": ""
    }, {
      "Command": "selectWindow",
      "Target": "tab=open",
      "Value": "https://a9t9.com"
    }, {
      "Command": "selectWindow",
      "Target": "tab=open",
      "Value": "https://ocr.space"
    }, {
      "Command": "type",
      "Target": "id=imageUrl",
      "Value": "Kantu Tab Test done"
    }]
  },
  DemoVisualUITest: {
    "CreationDate": "2018-6-26",
    "Commands": [{
      "Command": "open",
      "Target": "https://a9t9.com/",
      "Value": ""
    }, {
      "Command": "resize",
      "Target": "1024@768",
      "Value": ""
    }, {
      "Command": "visualVerify",
      "Target": "uitest_logo_wide_dpi_96.png@0.70",
      "Value": ""
    }, {
      "Command": "visualAssert",
      "Target": "uitest_download_dpi_96.png@0.70",
      "Value": ""
    }, {
      "Command": "visualVerify",
      "Target": "uitest_share_dpi_96.png@0.70",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Resize to iPhone6 screen size",
      "Value": ""
    }, {
      "Command": "resize",
      "Target": "375@768",
      "Value": ""
    }, {
      "Command": "visualVerify",
      "Target": "uitest_logo_mobile_dpi_96.png",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Missing menu is critical, so we use ASSERT (instead of just VERIFY)",
      "Value": ""
    }, {
      "Command": "visualAssert",
      "Target": "uitest_hamburger_dpi_96.png",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Check that Share buttons do not show",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "At this point, page is surely loaded => reduce wait for (normally missing) image",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "2",
      "Value": "!timeout_wait"
    }, {
      "Command": "visualSearch",
      "Target": "uitest_share_dpi_96.png@0.70",
      "Value": "count"
    }, {
      "Command": "if",
      "Target": "${count} > 0",
      "Value": ""
    }, {
      "Command": "throwError",
      "Target": "Share buttons should NOT show on mobile phones",
      "Value": ""
    }, {
      "Command": "endif",
      "Target": "",
      "Value": ""
    }, {
      "Command": "comment",
      "Target": "Restore default wait (not really needed here, since macro stops now anyway)",
      "Value": ""
    }, {
      "Command": "store",
      "Target": "10",
      "Value": "!timeout_wait"
    }, {
      "Command": "comment",
      "Target": "Done, enlarge browser again",
      "Value": ""
    }, {
      "Command": "resize",
      "Target": "1024@768",
      "Value": ""
    }]
  }
});

/***/ }),

/***/ "./src/config/preinstall_suites.js":
/*!*****************************************!*\
  !*** ./src/config/preinstall_suites.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ([{
  "creationDate": "2018-05-12",
  "name": "DemoLoopsInsideTestSuite",
  "fold": true,
  "macros": [{
    "macro": "DemoDragDrop",
    "loops": 3
  }, {
    "macro": "DemoIfElse",
    "loops": 3
  }, {
    "macro": "DemoStoreEval",
    "loops": 3
  }]
}, {
  "creationDate": "2018-05-31",
  "name": "DemoTestSuite",
  "fold": true,
  "macros": [{
    "macro": "DemoAutofill",
    "loops": 1
  }, {
    "macro": "DemoCanvas",
    "loops": 1
  }, {
    "macro": "DemoComputerVision",
    "loops": 1
  }, {
    "macro": "DemoCsvReadWithLoop",
    "loops": 3
  }, {
    "macro": "DemoCsvReadWithWhile",
    "loops": 1
  }, {
    "macro": "DemoCsvSave",
    "loops": 1
  }, {
    "macro": "DemoDialogboxes",
    "loops": 1
  }, {
    "macro": "DemoDownload",
    "loops": 1
  }, {
    "macro": "DemoDragDrop",
    "loops": 1
  }, {
    "macro": "DemoExtract",
    "loops": 1
  }, {
    "macro": "DemoFrames",
    "loops": 1
  }, {
    "macro": "DemoTakeScreenshots",
    "loops": 1
  }, {
    "macro": "DemoIfElse",
    "loops": 1
  }, {
    "macro": "DemoIframe",
    "loops": 1
  }, {
    "macro": "DemoImplicitWaiting",
    "loops": 1
  }, {
    "macro": "DemoStoreEval",
    "loops": 1
  }, {
    "macro": "DemoTabs",
    "loops": 1
  }, {
    "macro": "DemoVisualUITest",
    "loops": 1
  }]
}]);

/***/ }),

/***/ "./src/containers/dashboard/bottom.js":
/*!********************************************!*\
  !*** ./src/containers/dashboard/bottom.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/select */ "./node_modules/antd/lib/select/index.js");
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_select__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/tabs */ "./node_modules/antd/lib/tabs/index.js");
/* harmony import */ var antd_lib_tabs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_tabs__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/checkbox */ "./node_modules/antd/lib/checkbox/index.js");
/* harmony import */ var antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/table */ "./node_modules/antd/lib/table/index.js");
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_table__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/popconfirm */ "./node_modules/antd/lib/popconfirm/index.js");
/* harmony import */ var antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd/lib/icon */ "./node_modules/antd/lib/icon/index.js");
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/index.js");
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! jszip */ "./node_modules/jszip/lib/index.js");
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _common_web_extension__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../common/web_extension */ "./src/common/web_extension.js");
/* harmony import */ var _common_web_extension__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_common_web_extension__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../common/log */ "./src/common/log.js");
/* harmony import */ var _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../common/lib/file_saver */ "./src/common/lib/file_saver.js");
/* harmony import */ var _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_common_lib_file_saver__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _common_variables__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../common/variables */ "./src/common/variables.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../common/utils */ "./src/common/utils.js");
/* harmony import */ var _common_csv_man__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../common/csv_man */ "./src/common/csv_man.js");
/* harmony import */ var _common_vision_man__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../common/vision_man */ "./src/common/vision_man.js");
/* harmony import */ var _common_macro_log__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../common/macro_log */ "./src/common/macro_log.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../actions */ "./src/actions/index.js");
/* harmony import */ var _common_constant__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../common/constant */ "./src/common/constant.js");
/* harmony import */ var _components_edit_in_place__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../components/edit_in_place */ "./src/components/edit_in_place.js");
/* harmony import */ var _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../common/ipc/ipc_cs */ "./src/common/ipc/ipc_cs.js");
/* harmony import */ var _recomputed__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../recomputed */ "./src/recomputed/index.js");















































var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





















var DashboardBottom = function (_React$Component) {
  _inherits(DashboardBottom, _React$Component);

  function DashboardBottom() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DashboardBottom);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DashboardBottom.__proto__ || Object.getPrototypeOf(DashboardBottom)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      activeTabForLogScreenshot: 'Logs',

      showCSVModal: false,
      csvText: '',
      csvFile: '',

      drag: {
        isDragging: false,
        // Check out the note on `screenX` in `onResizeDragEnd` event
        startY: 0,
        lastHeight: 220,
        currentMinHeight: 220
      }
    }, _this.getBottomMinHeight = function () {
      var _this$state$drag = _this.state.drag,
          isDragging = _this$state$drag.isDragging,
          lastHeight = _this$state$drag.lastHeight,
          currentMinHeight = _this$state$drag.currentMinHeight;

      return (isDragging ? currentMinHeight : lastHeight) + 'px';
    }, _this.onResizeDragStart = function (e) {
      // Note: Firefox requires us to set something to DataTransfer, otherwise drag and dragEnd won't be triggered
      // refer to https://stackoverflow.com/questions/33434275/firefox-on-drag-end-is-not-called-in-a-react-component
      e.dataTransfer.setData('text', '');

      var style = window.getComputedStyle(_this.$dom);
      var height = parseInt(style.height);

      _this.setState(Object(_common_utils__WEBPACK_IMPORTED_MODULE_18__["setIn"])(['drag'], {
        isDragging: true,
        startY: e.screenY,
        lastHeight: height,
        currentHeight: height
      }, _this.state));
    }, _this.onResizeDragEnd = function (e) {
      // Note: use `screenY` instead of `clientY`, because `clientY` of dragEnd events in Firefox
      // is always set to 0, while `screenY` is luckily still available. And since we only make use of
      // difference of X coordinate. `screenY` and `clientY` both work for us.
      //
      // reference:
      // https://bugzilla.mozilla.org/show_bug.cgi?id=505521
      // https://developer.mozilla.org/en-US/docs/Web/Events/dragend
      var diff = e.screenY - _this.state.drag.startY;
      var height = _this.state.drag.lastHeight - diff;

      _this.setState(Object(_common_utils__WEBPACK_IMPORTED_MODULE_18__["setIn"])(['drag'], {
        isDragging: false,
        startY: 0,
        lastHeight: height,
        currentMinHeight: height
      }));
    }, _this.onFileChange = function (e) {
      var csvMan = Object(_common_csv_man__WEBPACK_IMPORTED_MODULE_19__["getCSVMan"])();
      var files = [].slice.call(e.target.files);
      if (!files || !files.length) return;

      var read = function read(file) {
        return new Promise(function (resolve, reject) {
          var reader = new FileReader();

          reader.onload = function (readerEvent) {
            var text = readerEvent.target.result;
            resolve({
              text: text,
              fileName: file.name
            });
          };

          reader.readAsText(file);
        });
      };

      Promise.all(files.map(read)).then(function (list) {
        var names = list.map(function (item) {
          return item.fileName;
        });
        var ps = list.map(function (fileItem) {
          return csvMan.write(Object(_common_utils__WEBPACK_IMPORTED_MODULE_18__["sanitizeFileName"])(fileItem.fileName), fileItem.text);
        });

        return Promise.all(ps).then(function () {
          return _this.props.listCSV();
        }).then(function () {
          antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.info(list.length + ' csv files imported');
          _this.props.addLog('info', list.length + ' csv files imported: ' + names.join(', '));
        });
      }).catch(function (e) {
        _this.props.addLog('error', e.message);
      });
    }, _this.removeCSV = function (csv) {
      var csvMan = Object(_common_csv_man__WEBPACK_IMPORTED_MODULE_19__["getCSVMan"])();

      csvMan.remove(csv.name).then(function () {
        return _this.props.listCSV();
      }).then(function () {
        antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.success('successfully deleted');
        _this.props.addLog('info', csv.name + ' deleted');
      });
    }, _this.viewCSV = function (csv) {
      window.open('./csv_editor.html?csv=' + csv.name, '', 'width=600,height=500,scrollbars=true');
    }, _this.onImageFileChange = function (e) {
      var files = [].slice.call(e.target.files);
      if (!files || !files.length) return;

      var read = function read(file) {
        return new Promise(function (resolve, reject) {
          var reader = new FileReader();

          reader.onload = function (readerEvent) {
            try {
              var dataUrl = readerEvent.target.result;
              var obj = storeImage({ dataUrl: dataUrl, name: file.name });
              resolve(obj);
            } catch (e) {
              resolve({ err: e, fileName: file.name });
            }
          };

          reader.readAsDataURL(file);
        });
      };

      var storeImage = function storeImage(_ref2) {
        var dataUrl = _ref2.dataUrl,
            name = _ref2.name;

        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_18__["uniqueName"])(name, {
          check: function check(name) {
            return Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_20__["getVisionMan"])().exists(name).then(function (result) {
              return !result;
            });
          }
        }).then(function (fileName) {
          return Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_20__["getVisionMan"])().write(Object(_common_utils__WEBPACK_IMPORTED_MODULE_18__["sanitizeFileName"])(fileName), Object(_common_utils__WEBPACK_IMPORTED_MODULE_18__["dataURItoBlob"])(dataUrl)).then(function () {
            return fileName;
          });
        }).catch(function (e) {
          _common_log__WEBPACK_IMPORTED_MODULE_15__["default"].error(e.stack);
        });
      };

      Promise.all(files.map(read)).then(function (fileNames) {
        antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.success(fileNames.length + ' image files imported into Vision tab');
        _this.props.addLog('info', fileNames.length + ' image files imported: ' + fileNames.join(', '));
        _this.props.listVisions();
      }).catch(function (e) {
        _common_log__WEBPACK_IMPORTED_MODULE_15__["default"].error(e.stack);
        _this.props.addLog('error', e.message);
      });
    }, _this.takeScreenshot = function () {
      _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_25__["default"].ask('PANEL_SELECT_AREA_ON_CURRENT_PAGE').catch(function (e) {
        antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.error(e.message);
      });
    }, _this.viewVision = function (fileName) {
      window.open('./vision_editor.html?vision=' + fileName, '', 'width=600,height=500,scrollbars=true');
    }, _this.addVisionNameToTargetBox = function (fileName) {
      var selectedCommand = _this.props.selectedCommand;


      if (!selectedCommand || ['visionFind', 'visualSearch'].indexOf(selectedCommand.cmd) === -1) {
        return antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.error('Image names can only be added to the target box if a \'visualSearch\' command is selected');
      }

      _this.props.updateSelectedCommand({ target: fileName });
    }, _this.exportAllVisions = function () {
      var zip = new jszip__WEBPACK_IMPORTED_MODULE_13___default.a();
      var man = Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_20__["getVisionMan"])();

      man.list().then(function (visions) {
        if (visions.length === 0) {
          return antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.error('No vision to export');
        }

        var ps = visions.map(function (ss) {
          return man.read(ss.fileName).then(function (buffer) {
            zip.file(ss.fileName, buffer, { binary: true });
          });
        });

        return Promise.all(ps).then(function () {
          zip.generateAsync({ type: 'blob' }).then(function (blob) {
            _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_16___default.a.saveAs(blob, 'vision-images-export.zip');
          });
        });
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DashboardBottom, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (nextProps.logs.length !== this.props.logs.length) {
        var $logContent = document.querySelector('.logs-screenshots .ant-tabs-content');
        var itemHeight = 50;

        if (!$logContent) return;

        // Note: set scroll top to a number large enough so that it will scroll to bottom
        // setTimeout 100ms to ensure content has been rendered before scroll
        setTimeout(function () {
          $logContent.scrollTop = itemHeight * nextProps.logs.length * 2;
        }, 100);
      }

      if (nextProps.visions.length > this.props.visions.length) {
        var diff = nextProps.visions.filter(function (item) {
          return !_this2.props.visions.find(function (v) {
            return v.name === item.name;
          });
        });

        if (diff.length > 1) {
          diff.sort(function (a, b) {
            return a.createTime > b.createTime;
          });
        }

        var toFocus = diff[0];

        setTimeout(function () {
          var $dom = document.getElementById(toFocus.name);
          if (!$dom) return;
          $dom.scrollIntoView({ block: 'center', behavior: 'smooth' });
        }, 100);
      }
    }
  }, {
    key: 'logStyle',
    value: function logStyle(log) {
      if (log.options && log.options.color) {
        return { color: log.options.color };
      }

      if (log.options && log.options.ignored) {
        return { color: 'orange' };
      }
    }
  }, {
    key: 'renderCSVModal',
    value: function renderCSVModal() {
      var _this3 = this;

      return react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
        antd_lib_modal__WEBPACK_IMPORTED_MODULE_8___default.a,
        {
          title: 'Preview - ' + this.state.csvFile,
          visible: this.state.showCSVModal,
          onCancel: function onCancel() {
            return _this3.setState({ showCSVModal: false, csvText: '', csvFile: '' });
          },
          className: 'csv-preview-modal',
          footer: null
        },
        react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_9___default.a.TextArea, {
          style: { width: '100%' },
          value: this.state.csvText,
          readOnly: true,
          rows: 10
        })
      );
    }
  }, {
    key: 'renderCSVTable',
    value: function renderCSVTable() {
      var _this4 = this;

      var csvMan = Object(_common_csv_man__WEBPACK_IMPORTED_MODULE_19__["getCSVMan"])();
      var columns = [{ title: 'Name', dataIndex: 'name', key: 'name' }, { title: 'Size', dataIndex: 'size', key: 'size' }, {
        title: 'Last Modified',
        dataIndex: 'createTime',
        key: 'createTime',
        render: function render(d) {
          var pad = function pad(n) {
            return n >= 10 ? '' + n : '0' + n;
          };
          return d.getFullYear() + '/' + pad(d.getMonth() + 1) + '/' + pad(d.getDate()) + ' ' + pad(d.getHours()) + ':' + pad(d.getMinutes()) + ':' + pad(d.getSeconds());
        }
      }, {
        title: 'Action',
        key: 'ops',
        width: 100,
        render: function render(text, csv, index) {
          return react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
            'div',
            null,
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
              {
                size: 'small',
                type: 'default',
                shape: 'circle',
                onClick: function onClick(e) {
                  _this4.viewCSV(csv);
                }
              },
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default.a, { type: 'eye-o' })
            ),
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              'a',
              { href: csv.url, download: csv.name },
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                {
                  size: 'small',
                  type: 'primary',
                  shape: 'circle',
                  onClick: function onClick(e) {
                    e.stopPropagation();
                  }
                },
                react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default.a, { type: 'download' })
              )
            ),
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_5___default.a,
              {
                title: 'Sure to delete?',
                okText: 'Delete',
                onConfirm: function onConfirm() {
                  _this4.removeCSV(csv);
                }
              },
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                {
                  size: 'small',
                  type: 'danger',
                  shape: 'circle'
                },
                react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default.a, { type: 'close' })
              )
            )
          );
        }
      }];

      var tableConfig = {
        columns: columns,
        dataSource: this.props.csvs,
        pagination: false,
        bordered: true,
        size: 'middle',
        rowKey: 'fileName',
        onRowClick: function onRowClick(record, index, e) {
          // Do nothing
        },
        rowClassName: function rowClassName(record, index) {
          return '';
        }
      };

      return react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(antd_lib_table__WEBPACK_IMPORTED_MODULE_4___default.a, tableConfig);
    }
  }, {
    key: 'renderVisionTable',
    value: function renderVisionTable() {
      var _this5 = this;

      var columns = [{
        title: 'Image',
        dataIndex: 'url',
        key: 'url',
        width: 116,
        render: function render(url) {
          return react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement('div', {
            className: 'vision-image',
            style: {
              backgroundImage: 'url(' + url + ')',
              backgroundSize: 'contain',
              backgroundRepeat: 'no-repeat',
              backgroundPosition: 'center'
            }
          });
        }
      }, {
        title: 'Name',
        dataIndex: 'name',
        key: 'name',
        render: function render(name, vision) {
          return react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
            'div',
            { className: 'vision-name-1', id: name },
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(_components_edit_in_place__WEBPACK_IMPORTED_MODULE_24__["default"], {
              value: vision.name,
              onChange: function onChange(name) {
                Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_20__["getVisionMan"])().rename(vision.name, Object(_common_utils__WEBPACK_IMPORTED_MODULE_18__["ensureExtName"])('.png', name)).then(function () {
                  antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.success('Successfully renamed');
                  _this5.props.listVisions();
                }).catch(function (e) {
                  _common_log__WEBPACK_IMPORTED_MODULE_15__["default"].error(e.stack);
                });
              },
              checkValue: function checkValue(name) {
                return Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_20__["getVisionMan"])().exists(name).then(function (result) {
                  if (result) {
                    antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.error('\'' + name + '\' alreadsy exists');
                  }
                  return !result;
                });
              },
              getSelection: function getSelection(name, $input) {
                var reg = /(?:_dpi_\d+)?\.png$/i;
                var result = reg.exec(name);
                var endIndex = result.index;

                return {
                  start: 0,
                  end: endIndex
                };
              }
            })
          );
        }
      }, {
        title: 'Action',
        key: 'ops',
        width: 100,
        render: function render(text, vision, index) {
          var _React$createElement;

          return react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
            'div',
            { className: 'vision-actions' },
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
              {
                size: 'small',
                type: 'default',
                shape: 'circle',
                title: 'Add name to target box',
                onClick: function onClick() {
                  return _this5.addVisionNameToTargetBox(vision.name);
                }
              },
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default.a, { type: 'plus' })
            ),
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
              {
                size: 'small',
                type: 'default',
                shape: 'circle',
                title: 'View image',
                onClick: function onClick() {
                  return _this5.viewVision(vision.name);
                }
              },
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default.a, { type: 'eye-o' })
            ),
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_5___default.a,
              (_React$createElement = {
                title: 'Sure to delete?',
                okText: 'Delete'
              }, _defineProperty(_React$createElement, 'title', 'Delete image'), _defineProperty(_React$createElement, 'onConfirm', function onConfirm() {
                Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_20__["getVisionMan"])().remove(vision.name).then(function () {
                  antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.success('Successfully deleted');
                  _this5.props.listVisions();
                }).catch(function (e) {
                  _common_log__WEBPACK_IMPORTED_MODULE_15__["default"].error(e.stack);
                });
              }), _React$createElement),
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                {
                  size: 'small',
                  type: 'danger',
                  shape: 'circle'
                },
                react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default.a, { type: 'close' })
              )
            )
          );
        }
      }];

      var tableConfig = {
        columns: columns,
        dataSource: this.props.visions,
        pagination: false,
        bordered: true,
        size: 'middle',
        rowKey: 'fileName',
        onRowClick: function onRowClick(record, index, e) {
          // Do nothing
        },
        rowClassName: function rowClassName(record, index) {
          return '';
        }
      };

      return react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(antd_lib_table__WEBPACK_IMPORTED_MODULE_4___default.a, tableConfig);
    }
  }, {
    key: 'renderVariableTable',
    value: function renderVariableTable() {
      var columns = [{ title: 'Name', dataIndex: 'key', key: 'key', width: '40%' }, { title: 'Value', dataIndex: 'value', key: 'value', render: function render(val) {
          return JSON.stringify(val) || 'undefined';
        } }];
      var _props$config = this.props.config,
          showCommonInternalVariables = _props$config.showCommonInternalVariables,
          showAdvancedInternalVariables = _props$config.showAdvancedInternalVariables;

      var filter = Object(_common_variables__WEBPACK_IMPORTED_MODULE_17__["createVarsFilter"])({
        withCommonInternal: showCommonInternalVariables,
        withAdvancedInternal: showAdvancedInternalVariables
      });
      var variables = this.props.variables.filter(function (variable) {
        return filter(variable.key);
      });

      var tableConfig = {
        columns: columns,
        dataSource: variables,
        pagination: false,
        bordered: true,
        size: 'middle',
        rowKey: 'key',
        onRowClick: function onRowClick(record, index, e) {
          // Do nothing
        },
        rowClassName: function rowClassName(record, index) {
          var vars = Object(_common_variables__WEBPACK_IMPORTED_MODULE_17__["getVarsInstance"])();
          if (!vars) return '';
          return vars.isReadOnly(record.key) ? 'read-only' : '';
        }
      };

      return react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(antd_lib_table__WEBPACK_IMPORTED_MODULE_4___default.a, tableConfig);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this6 = this;

      var activeTabForLogScreenshot = this.state.activeTabForLogScreenshot;

      var filters = {
        'All': function All() {
          return true;
        },
        'Echo': function Echo(item) {
          return item.type === 'echo' || item.type === 'error' || item.type === 'warning' || item.type === 'status';
        },
        // 'Info':   (item) => item.type === 'info' || item.type === 'echo' || item.type === 'reflect' || item.type === 'status',
        'Error': function Error(item) {
          return item.type === 'error';
        },
        'None': function None() {
          return false;
        }
      };
      var logFilter = this.props.config.logFilter || 'All';
      var logs = this.props.logs.filter(filters[logFilter]);

      return react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
        'div',
        {
          className: 'logs-screenshots',
          ref: function ref(el) {
            _this6.$dom = el;
          },
          style: { height: this.getBottomMinHeight() }
        },
        this.renderCSVModal(),
        react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement('div', {
          className: Object(_common_utils__WEBPACK_IMPORTED_MODULE_18__["cn"])('resize-handler', { focused: this.state.drag.isDragging }),
          draggable: 'true',
          onDragStart: this.onResizeDragStart,
          onDragEnd: this.onResizeDragEnd,
          onMouseDown: function onMouseDown() {
            return _this6.setState(Object(_common_utils__WEBPACK_IMPORTED_MODULE_18__["setIn"])(['drag', 'isDragging'], true, _this6.state));
          }
        }),
        react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
          antd_lib_tabs__WEBPACK_IMPORTED_MODULE_2___default.a,
          {
            type: 'card',
            onChange: function onChange(key) {
              _this6.setState({ activeTabForLogScreenshot: key });

              if (key === 'Screenshots') {
                _this6.props.listScreenshots();
              }
            }
          },
          react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_2___default.a.TabPane,
            { tab: 'Logs', key: 'Logs' },
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              'ul',
              { className: 'log-content' },
              logs.map(function (log, i) {
                return react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                  'li',
                  { className: log.type, key: log.id, style: _this6.logStyle(log) },
                  react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                    'span',
                    { className: 'log-type' },
                    Object(_common_macro_log__WEBPACK_IMPORTED_MODULE_21__["renderLogType"])(log)
                  ),
                  react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                    'pre',
                    { className: 'log-detail' },
                    log.text
                  )
                );
              })
            )
          ),
          react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_2___default.a.TabPane,
            { tab: 'Variables', key: 'Variables' },
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              'div',
              { className: 'variable-content' },
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                'div',
                { className: 'variable-options' },
                react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                  antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_3___default.a,
                  {
                    onChange: function onChange(e) {
                      return _this6.props.updateConfig({ showCommonInternalVariables: e.target.checked });
                    },
                    checked: this.props.config.showCommonInternalVariables
                  },
                  'Show most common ',
                  react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                    'a',
                    { href: 'https://a9t9.com/x/idehelp?help=internalvars', target: '_blank' },
                    'internal variables'
                  )
                ),
                react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                  antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_3___default.a,
                  {
                    onChange: function onChange(e) {
                      return _this6.props.updateConfig({ showAdvancedInternalVariables: e.target.checked });
                    },
                    checked: this.props.config.showAdvancedInternalVariables
                  },
                  'Show advanced ',
                  react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                    'a',
                    { href: 'https://a9t9.com/x/idehelp?help=internalvars', target: '_blank' },
                    'internal variables'
                  )
                )
              ),
              this.renderVariableTable()
            )
          ),
          react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_2___default.a.TabPane,
            { tab: 'Screenshots', key: 'Screenshots' },
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              'ul',
              { className: 'screenshot-content' },
              this.props.screenshots.map(function (ss, i) {
                return react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                  'li',
                  { key: i },
                  react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                    'span',
                    { className: 'timestamp' },
                    ss.createTime && ss.createTime.toLocaleString(),
                    ' - ',
                    react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                      'span',
                      { className: 'filename' },
                      decodeURIComponent(ss.name)
                    )
                  ),
                  react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                    'a',
                    {
                      download: decodeURIComponent(ss.name),
                      href: _common_web_extension__WEBPACK_IMPORTED_MODULE_14___default.a.isFirefox() ? '#' : ss.url,
                      onClick: function onClick(e) {
                        if (!_common_web_extension__WEBPACK_IMPORTED_MODULE_14___default.a.isFirefox()) return;
                        e.preventDefault();

                        // Note: for Firefox, `ss.url` is a data url instead of a `filesystem:` url (as in Chrome)
                        _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_16___default.a.saveAs(Object(_common_utils__WEBPACK_IMPORTED_MODULE_18__["dataURItoBlob"])(ss.url), ss.name);
                      }
                    },
                    react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement('img', { src: ss.url })
                  )
                );
              })
            )
          ),
          react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_2___default.a.TabPane,
            { tab: 'CSV', key: 'CSV' },
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              'div',
              { className: 'csv-content' },
              this.renderCSVTable()
            )
          ),
          react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_2___default.a.TabPane,
            { tab: '\uD83D\uDC41 Visual', key: 'Vision' },
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              'div',
              { className: 'vision-content' },
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                'div',
                { className: 'vision-top-actions' },
                react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                  'div',
                  { className: 'main-actions' },
                  react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                    antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                    {
                      type: 'primary',
                      onClick: this.takeScreenshot
                    },
                    'Take Screenshot'
                  ),
                  react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                    'span',
                    {
                      className: 'load-image-button ant-btn ant-btn-primary'
                    },
                    react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                      'label',
                      { htmlFor: 'select_image_files' },
                      'Load Image'
                    ),
                    react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement('input', {
                      multiple: true,
                      type: 'file',
                      accept: 'image/*',
                      id: 'select_image_files',
                      onChange: this.onImageFileChange,
                      ref: function ref(_ref3) {
                        _this6.imageFileInput = _ref3;
                      },
                      style: { display: 'none' }
                    })
                  ),
                  react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                    antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                    {
                      onClick: this.exportAllVisions
                    },
                    'Export All'
                  )
                ),
                react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                  'a',
                  { className: 'more-info', target: '_blank', href: 'https://a9t9.com/x/idehelp?help=visual' },
                  'More Info'
                )
              ),
              this.renderVisionTable()
            )
          )
        ),
        react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
          'div',
          { className: 'ls-toolbox' },
          activeTabForLogScreenshot === 'Logs' ? react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
            'div',
            null,
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              antd_lib_select__WEBPACK_IMPORTED_MODULE_1___default.a,
              {
                value: this.props.config.logFilter,
                onChange: function onChange(value) {
                  _this6.props.updateConfig({ logFilter: value });
                },
                style: { width: '70px', marginRight: '10px' },
                size: 'small'
              },
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                antd_lib_select__WEBPACK_IMPORTED_MODULE_1___default.a.Option,
                { value: 'All' },
                'All'
              ),
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                antd_lib_select__WEBPACK_IMPORTED_MODULE_1___default.a.Option,
                { value: 'Echo' },
                'Echo'
              ),
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                antd_lib_select__WEBPACK_IMPORTED_MODULE_1___default.a.Option,
                { value: 'Error' },
                'Error'
              ),
              react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
                antd_lib_select__WEBPACK_IMPORTED_MODULE_1___default.a.Option,
                { value: 'None' },
                'No log'
              )
            ),
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
              {
                size: 'small',
                onClick: this.props.clearLogs
              },
              'Clear'
            )
          ) : null,
          activeTabForLogScreenshot === 'Screenshots' ? react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
            antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
            {
              size: 'small',
              onClick: this.props.clearScreenshots
            },
            'Clear'
          ) : null,
          activeTabForLogScreenshot === 'CSV' ? react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(
            antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
            {
              size: 'small',
              onClick: function onClick() {
                return _this6.fileInput.click();
              }
            },
            'Import CSV',
            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement('input', {
              multiple: true,
              type: 'file',
              accept: '.csv',
              onChange: this.onFileChange,
              style: { display: 'none' },
              ref: function ref(_ref4) {
                _this6.fileInput = _ref4;
              }
            })
          ) : null
        )
      );
    }
  }]);

  return DashboardBottom;
}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_11__["connect"])(function (state) {
  return {
    hasSelectedCommand: state.editor.editing && state.editor.editing.meta && state.editor.editing.meta.selectedIndex !== -1,
    selectedCommand: Object(_recomputed__WEBPACK_IMPORTED_MODULE_26__["editorSelectedCommand"])(state),
    status: state.status,
    logs: state.logs,
    screenshots: state.screenshots,
    variables: state.variables,
    csvs: state.csvs,
    visions: state.visions,
    config: state.config
  };
}, function (dispatch) {
  return Object(redux__WEBPACK_IMPORTED_MODULE_12__["bindActionCreators"])(_extends({}, _actions__WEBPACK_IMPORTED_MODULE_22__), dispatch);
})(DashboardBottom));

/***/ }),

/***/ "./src/containers/dashboard/dashboard.scss":
/*!*************************************************!*\
  !*** ./src/containers/dashboard/dashboard.scss ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(/*! !../../../node_modules/css-loader!../../../node_modules/postcss-loader/lib!../../../node_modules/sass-loader/lib/loader.js!./dashboard.scss */ "./node_modules/css-loader/index.js!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/containers/dashboard/dashboard.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {}

/***/ }),

/***/ "./src/containers/dashboard/editor.js":
/*!********************************************!*\
  !*** ./src/containers/dashboard/editor.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/tabs */ "./node_modules/antd/lib/tabs/index.js");
/* harmony import */ var antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/form */ "./node_modules/antd/lib/form/index.js");
/* harmony import */ var antd_lib_form__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_form__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/select */ "./node_modules/antd/lib/select/index.js");
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_select__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/table */ "./node_modules/antd/lib/table/index.js");
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_table__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd/lib/icon */ "./node_modules/antd/lib/icon/index.js");
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var antd_lib_menu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! antd/lib/menu */ "./node_modules/antd/lib/menu/index.js");
/* harmony import */ var antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(antd_lib_menu__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/index.js");
/* harmony import */ var react_virtual_list__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-virtual-list */ "./node_modules/react-virtual-list/lib/VirtualList.js");
/* harmony import */ var react_virtual_list__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react_virtual_list__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var react_codemirror2__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react-codemirror2 */ "./node_modules/react-codemirror2/index.js");
/* harmony import */ var react_codemirror2__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(react_codemirror2__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! codemirror/lib/codemirror */ "./node_modules/codemirror/lib/codemirror.js");
/* harmony import */ var codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! codemirror/mode/javascript/javascript */ "./node_modules/codemirror/mode/javascript/javascript.js");
/* harmony import */ var codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var codemirror_addon_edit_matchbrackets__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! codemirror/addon/edit/matchbrackets */ "./node_modules/codemirror/addon/edit/matchbrackets.js");
/* harmony import */ var codemirror_addon_edit_matchbrackets__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_edit_matchbrackets__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var codemirror_addon_edit_closebrackets__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! codemirror/addon/edit/closebrackets */ "./node_modules/codemirror/addon/edit/closebrackets.js");
/* harmony import */ var codemirror_addon_edit_closebrackets__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_edit_closebrackets__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var codemirror_lib_codemirror_css__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! codemirror/lib/codemirror.css */ "./node_modules/codemirror/lib/codemirror.css");
/* harmony import */ var codemirror_lib_codemirror_css__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(codemirror_lib_codemirror_css__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../common/utils */ "./src/common/utils.js");
/* harmony import */ var _common_convert_utils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../common/convert_utils */ "./src/common/convert_utils.js");
/* harmony import */ var _common_vision_man__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../common/vision_man */ "./src/common/vision_man.js");
/* harmony import */ var _common_inspector__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../common/inspector */ "./src/common/inspector.js");
/* harmony import */ var _common_player__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../common/player */ "./src/common/player.js");
/* harmony import */ var _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../common/ipc/ipc_cs */ "./src/common/ipc/ipc_cs.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../actions */ "./src/actions/index.js");
/* harmony import */ var _common_constant__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../common/constant */ "./src/common/constant.js");
/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../common/log */ "./src/common/log.js");
/* harmony import */ var _recomputed__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../recomputed */ "./src/recomputed/index.js");








































var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
























var availableCommands = ['open', 'click', 'clickAndWait', 'select', 'selectAndWait', 'type', 'pause', 'waitForPageToLoad', 'selectFrame', 'assertAlert', 'assertConfirmation', 'assertPrompt', 'answerOnNextPrompt', 'store', 'storeText', 'storeTitle', 'storeAttribute', 'assertText', 'assertTitle', 'clickAt', 'echo', 'mouseOver', 'storeEval', 'verifyText', 'verifyTitle', 'sendKeys', 'dragAndDropToObject', 'selectWindow', 'captureScreenshot', 'refresh', 'verifyElementPresent', 'assertElementPresent', 'deleteAllCookies', 'label', 'gotoLabel', 'gotoIf', 'while', 'endWhile', 'csvRead', 'csvSave', 'if', 'else', 'endif', 'storeValue', 'assertValue', 'verifyValue', 'storeChecked', 'assertChecked', 'verifyChecked', 'captureEntirePageScreenshot', 'onDownload',
// 'assertError',
// 'verifyError',
'throwError', 'comment', 'waitForVisible', 'onError', 'sourceSearch', 'sourceExtract', 'storeImage', 'localStorageExport',
// 'visionFind',
'visionLimitSearchArea', 'visualSearch', 'visualVerify', 'visualAssert', 'editContent', 'bringBrowserToForeground', 'resize'];

availableCommands.sort();

var newCommand = {
  cmd: '',
  target: '',
  value: ''
};

var defaultDataSource = [newCommand];

var DashboardEditor = function (_React$Component) {
  _inherits(DashboardEditor, _React$Component);

  function DashboardEditor() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DashboardEditor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DashboardEditor.__proto__ || Object.getPrototypeOf(DashboardEditor)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      cursor: null,

      contextMenu: {
        x: null,
        y: null,
        isShown: false
      },

      visionFindPreview: {
        visible: false,
        url: null,
        timer: null,
        left: -9999,
        top: -9999
      }
    }, _this.resetSourceCodeCursor = function (resetCursor) {
      return _extends({}, resetCursor ? { cursor: { line: 0, ch: 0 } } : {});
    }, _this.onDetailChange = function (key, value) {
      _this.props.updateSelectedCommand(_defineProperty({}, key, value));
    }, _this.onChangeCommandsView = function (type) {
      switch (type) {
        case 'table_view':
        case 'source_view':
          {
            var forceType = _this.props.sourceErrMsg ? 'source_view' : type;

            _this.props.setEditorActiveTab(forceType);

            if (type === 'source_view' && _this.codeMirror && _this.state.cursor) {
              // Note: must delay a while so that focus will take effect
              setTimeout(function () {
                _this.codeMirror.setCursor(_this.state.cursor, true, true);
              }, 200);
            }

            break;
          }
      }
    }, _this.onSourceBlur = function () {
      var _this$props = _this.props,
          sourceTextModified = _this$props.sourceTextModified,
          sourceText = _this$props.sourceText;

      _this.props.saveSourceCodeToEditing(sourceTextModified);
    }, _this.onChangeEditSource = function (editor, data, text) {
      _this.props.setSourceCurrent(text);
    }, _this.onClickFind = function () {
      var lastOperation = _this.state.lastOperation;
      var selectedCommand = _this.props.selectedCommand;


      var p = ['visionFind', 'visualSearch', 'visualAssert', 'visualVerify'].indexOf(selectedCommand.cmd) !== -1 ? function () {
        var selectedIndex = _this.props.editing.meta.selectedIndex;
        // Note: run visionFind/visualSearch as single line command, but without timeout waiting
        _this.playLine(selectedIndex, {
          overrideScope: { '!TIMEOUT_WAIT': 0 },
          commandExtra: { throwError: true }
        });
        return Promise.resolve(true);
      }() : _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_24__["default"].ask('PANEL_HIGHLIGHT_DOM', {
        lastOperation: lastOperation,
        locator: selectedCommand.target
      });

      p.catch(function (e) {
        antd_lib_message__WEBPACK_IMPORTED_MODULE_8___default.a.error(e.message, 1.5);
      });
    }, _this.onToggleInspect = function () {
      var selectedCommand = _this.props.selectedCommand;


      if (['visionFind', 'visualSearch', 'visualAssert', 'visualVerify'].indexOf(selectedCommand.cmd) !== -1) {
        return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_24__["default"].ask('PANEL_SELECT_AREA_ON_CURRENT_PAGE').then(function (res) {
          _this.props.updateSelectedCommand({ target: res.fileName });
          antd_lib_message__WEBPACK_IMPORTED_MODULE_8___default.a.success('Saved vision as ' + res.fileName);
        }).catch(function (e) {
          antd_lib_message__WEBPACK_IMPORTED_MODULE_8___default.a.error(e.message);
        });
      }

      if (_this.props.status === _common_constant__WEBPACK_IMPORTED_MODULE_26__["APP_STATUS"].INSPECTOR) {
        _this.props.stopInspecting();
      } else {
        _this.props.startInspecting();
      }
    }, _this.onDoubleClick = function () {
      var lastScreenX = void 0;
      var lastScreenY = void 0;
      var lastTime = void 0;

      return function (e) {
        var go = function go() {
          var $row = _common_inspector__WEBPACK_IMPORTED_MODULE_22__["default"].parentWithClass('real-command', e.target);
          if (!$row) return;

          var index = parseInt($row.getAttribute('data-index'));
          if (isNaN(index)) return;

          _this.playLine(index);
        };

        var now = new Date() * 1;

        if (lastScreenX === e.screenX && lastScreenY === e.screenY && now - lastTime < 300) {
          go();
        }

        lastScreenX = e.screenX;
        lastScreenY = e.screenY;
        lastTime = now;
      };
    }(), _this.scheduleHideVisionFindPreview = function () {
      Object(_common_log__WEBPACK_IMPORTED_MODULE_27__["default"])('scheduleHideVisionFindPreview');
      var timer = _this.state.visionFindPreview.timer;


      clearTimeout(timer);

      return setTimeout(function () {
        var visible = _this.state.visionFindPreview.visible;


        if (visible) {
          Object(_common_log__WEBPACK_IMPORTED_MODULE_27__["default"])('to hide preview');

          _this.setState({
            visionFindPreview: {
              visible: false
            }
          });
        }
      }, 3000);
    }, _this.onMouseEnterTarget = function (e, command) {
      Object(_common_log__WEBPACK_IMPORTED_MODULE_27__["default"])('onMouseOverTarget');
      if (['visionFind', 'visualSearch', 'visualAssert', 'visualVerify'].indexOf(command.cmd) === -1) return;
      if (_this.state.visionFindPreview.visible) return;

      clearTimeout(_this.state.visionFindPreview.timer);

      var man = Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_21__["getVisionMan"])();
      var rect = e.target.getBoundingClientRect();
      var file = command.target.trim().split('@')[0];
      var common = {
        visible: true,
        left: rect.left,
        top: rect.top + rect.height
      };

      man.exists(file).then(function (existed) {
        if (!existed) {
          return _this.setState({
            visionFindPreview: _extends({}, common, {
              url: './img/not_found.png',
              timer: _this.scheduleHideVisionFindPreview()
            })
          });
        }

        return man.getLink(file).then(function (link) {
          return _this.setState({
            visionFindPreview: _extends({}, common, {
              url: link,
              timer: _this.scheduleHideVisionFindPreview()
            })
          });
        });
      });
    }, _this.onMouseLeaveTarget = function (e, command) {
      Object(_common_log__WEBPACK_IMPORTED_MODULE_27__["default"])('onMouseOutTarget');
      if (['visionFind', 'visualSearch', 'visualAssert', 'visualVerify'].indexOf(command.cmd) === -1) return;
      if (!_this.state.visionFindPreview.visible) return;

      clearTimeout(_this.state.visionFindPreview.timer);

      _this.setState({
        visionFindPreview: {
          visible: false
        }
      });
    }, _this.jumpToSourceCode = function (commandIndex) {
      _this.props.setEditorActiveTab('source_view');
      setTimeout(function () {
        var instance = _this.state.cmEdtiorInstance;
        var line = 3 + commandIndex * 5;
        var endLine = line + 5;
        var ch = 0;

        var $tab = document.querySelector('.source-view');
        var tabHeight = parseInt(window.getComputedStyle($tab).height, 10);
        var margin = (tabHeight - 60) / 2;

        Object(_common_log__WEBPACK_IMPORTED_MODULE_27__["default"])('margin', margin, tabHeight);
        instance.scrollIntoView({ line: line, ch: ch }, margin);
        instance.setSelection({ ch: ch, line: line }, { ch: ch, line: endLine }, { scroll: false });
      }, 100);
    }, _this.commandClassName = function (record, index) {
      var _this$props2 = _this.props,
          editing = _this$props2.editing,
          player = _this$props2.player;
      var nextCommandIndex = player.nextCommandIndex,
          errorCommandIndices = player.errorCommandIndices,
          doneCommandIndices = player.doneCommandIndices,
          breakpointIndices = player.breakpointIndices;
      var commands = editing.commands;

      var classNames = [];

      if (breakpointIndices.indexOf(index) !== -1) {
        classNames.push('breakpoint-command');
      }

      if (record.cmd === 'comment') {
        classNames.push('comment-command');
      }

      if (index === editing.meta.selectedIndex) {
        classNames.push('selected-command');
      } else if (index === nextCommandIndex) {
        classNames.push('running-command');
      } else if (errorCommandIndices.indexOf(index) !== -1) {
        classNames.push('error-command');
      } else if (doneCommandIndices.indexOf(index) !== -1) {
        classNames.push('done-command');
      }

      return classNames.join(' ');
    }, _this.needVirtualList = function () {
      var _this$props$editing$c = _this.props.editing.commands,
          commands = _this$props$editing$c === undefined ? [] : _this$props$editing$c;

      var threshold = 0;

      return commands.length >= threshold;
    }, _this.virtualCommmandList = function (_ref2) {
      var virtual = _ref2.virtual,
          itemHeight = _ref2.itemHeight;
      var commands = _this.props.editing.commands;

      var editable = _this.isPlayerStopped();
      var renderItem = function renderItem(item) {
        if (item.header) {
          return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            'div',
            { className: 'command-row header-row', key: 'header' },
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              'div',
              { className: 'row-col command-col' },
              'Command'
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              'div',
              { className: 'row-col target-col' },
              'Target'
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              'div',
              { className: 'row-col value-col' },
              'Value'
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              'div',
              { className: 'row-col op-col' },
              'Ops'
            )
          );
        }

        if (item.footer) {
          return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            'div',
            { className: 'command-row footer-row', key: 'footer', onClick: function onClick() {
                return _this.props.insertCommand(newCommand, commands.length);
              } },
            'Add'
          );
        }

        return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
          'div',
          {
            key: item.key,
            style: { height: itemHeight + 'px' },
            className: 'command-row real-command ' + _this.commandClassName(item, item.realIndex),
            'data-index': '' + item.realIndex,
            onClick: function onClick() {
              return _this.props.selectCommand(item.realIndex);
            },
            onContextMenu: function onContextMenu(e) {
              return _this.onContextMenu(e, item.realIndex);
            }
          },
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            'div',
            { className: 'row-col command-col', title: item.cmd },
            item.cmd
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            'div',
            {
              className: 'row-col target-col',
              title: item.target,
              onMouseEnter: function onMouseEnter(e) {
                return _this.onMouseEnterTarget(e, item);
              },
              onMouseLeave: function onMouseLeave(e) {
                return _this.onMouseLeaveTarget(e, item);
              }
            },
            item.target
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            'div',
            { className: 'row-col value-col', title: item.value },
            item.value
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            'div',
            { className: 'row-col op-col' },
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default.a,
              {
                disabled: !editable,
                shape: 'circle',
                onClick: function onClick(e) {
                  _this.props.removeCommand(item.realIndex);e.stopPropagation();
                }
              },
              react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default.a, { type: 'minus' })
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default.a,
              {
                disabled: !editable,
                shape: 'circle',
                onClick: function onClick(e) {
                  _this.props.duplicateCommand(item.realIndex);e.stopPropagation();
                }
              },
              react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default.a, { type: 'plus' })
            )
          )
        );
      };

      return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
        'div',
        { style: virtual.style },
        virtual.items.map(renderItem)
      );
    }, _this.onContextMenu = function (e, index) {
      Object(_common_log__WEBPACK_IMPORTED_MODULE_27__["default"])('onContextMenu');

      _this.setState({
        contextMenu: {
          x: e.clientX,
          y: e.clientY,
          isShown: true,
          commandIndex: index
        }
      });

      _this.props.selectCommand(index, true);
      e.preventDefault();
      e.stopPropagation();
    }, _this.onHideMenu = function (e) {
      if (e.button !== 0) return;

      _this.setState({
        contextMenu: _extends({}, _this.state.contextMenu, {
          isShown: false
        })
      });
    }, _this.getTestCaseName = function () {
      var src = _this.props.editing.meta.src;

      return src && src.name && src.name.length ? src.name : 'Untitled';
    }, _this.playLine = function (commandIndex) {
      var extraOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var commands = _this.props.editing.commands;
      var src = _this.props.editing.meta.src;


      _this.setState({ lastOperation: 'play' });

      return _this.props.playerPlay(_extends({
        title: _this.getTestCaseName(),
        extra: {
          id: src && src.id
        },
        mode: _common_player__WEBPACK_IMPORTED_MODULE_23__["Player"].C.MODE.SINGLE,
        startIndex: commandIndex,
        startUrl: null,
        resources: commands,
        postDelay: _this.props.config.playCommandInterval * 1000
      }, extraOptions));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  // Note: virtual-list eats up double click events. so have to manually track click event instead


  _createClass(DashboardEditor, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      document.addEventListener('click', this.onHideMenu);
      document.addEventListener('click', this.onDoubleClick);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      // Note: update sourceText whenever editing changed
      if (nextProps.editing.meta.src !== this.props.editing.meta.src || nextProps.editing.commands !== this.props.editing.commands) {
        var resetCursor = nextProps.editing.meta.src !== this.props.editing.meta.src;

        this.setState(this.resetSourceCodeCursor(resetCursor));
      }

      if (nextProps.status === _common_constant__WEBPACK_IMPORTED_MODULE_26__["APP_STATUS"].PLAYER && nextProps.player.nextCommandIndex !== this.props.player.nextCommandIndex) {
        var $tableBody = document.querySelector('.table-wrapper');
        var itemHeight = 45;

        if (!$tableBody) return;

        $tableBody.scrollTop = itemHeight * nextProps.player.nextCommandIndex;
      }

      if (nextProps.status === _common_constant__WEBPACK_IMPORTED_MODULE_26__["APP_STATUS"].RECORDER && nextProps.editing.commands.length > this.props.editing.commands.length) {
        var _$tableBody = document.querySelector('.table-wrapper');
        var _itemHeight = 45;

        if (!_$tableBody) return;

        setTimeout(function () {
          _$tableBody.scrollTop = _itemHeight * nextProps.editing.commands.length * 2;
        }, 100);
      }
    }
  }, {
    key: 'isPlayerStopped',
    value: function isPlayerStopped() {
      return this.props.player.status === _common_constant__WEBPACK_IMPORTED_MODULE_26__["PLAYER_STATUS"].STOPPED;
    }
  }, {
    key: 'renderVisionFindPreview',
    value: function renderVisionFindPreview() {
      var _state$visionFindPrev = this.state.visionFindPreview,
          visible = _state$visionFindPrev.visible,
          url = _state$visionFindPrev.url,
          left = _state$visionFindPrev.left,
          top = _state$visionFindPrev.top;

      if (!visible) return null;

      return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement('div', { style: {
          position: 'absolute',
          width: '100px',
          height: '100px',
          border: '1px solid #ccc',
          left: left + 'px',
          top: top + 'px',
          backgroundColor: '#eee',
          backgroundImage: 'url(' + url + ')',
          backgroundSize: 'contain',
          backgroundRepeat: 'no-repeat',
          backgroundPosition: 'center'
        } });
    }
  }, {
    key: 'renderContextMenu',
    value: function renderContextMenu() {
      var _this2 = this;

      var clipboard = this.props.clipboard;
      var contextMenu = this.state.contextMenu;

      var dw = document.documentElement.clientWidth;
      var dh = document.documentElement.clientHeight;
      var mw = 240;
      var x = contextMenu.x + window.scrollX;
      var y = contextMenu.y + window.scrollY;

      if (x + mw > dw) x -= mw;

      var style = {
        position: 'absolute',
        top: y,
        left: x,
        display: contextMenu.isShown ? 'block' : 'none'
      };

      var menuStyle = {
        width: mw + 'px'
      };

      var commandIndex = contextMenu.commandIndex;
      var breakpointIndices = this.props.player.breakpointIndices;

      var isBreakpoint = breakpointIndices.indexOf(commandIndex);

      var handleClick = function handleClick(e) {
        switch (e.key) {
          case 'cut':
            return _this2.props.cutCommand(commandIndex);
          case 'copy':
            return _this2.props.copyCommand(commandIndex);
          case 'paste':
            return _this2.props.pasteCommand(commandIndex);
          case 'insert':
            return _this2.props.insertCommand(newCommand, commandIndex + 1);
          case 'run_line':
            {
              return _this2.playLine(commandIndex);
            }
          case 'run_from_here':
            {
              var commands = _this2.props.editing.commands;
              var src = _this2.props.editing.meta.src;


              _this2.setState({ lastOperation: 'play' });

              return _this2.props.playerPlay({
                title: _this2.getTestCaseName(),
                extra: {
                  id: src && src.id
                },
                mode: _common_player__WEBPACK_IMPORTED_MODULE_23__["Player"].C.MODE.STRAIGHT,
                startIndex: commandIndex,
                startUrl: null,
                resources: commands,
                postDelay: _this2.props.config.playCommandInterval * 1000
              });
            }
          case 'add_breakpoint':
            {
              return _this2.props.addBreakpoint(commandIndex);
            }
          case 'remove_breakpoint':
            {
              return _this2.props.removeBreakpoint(commandIndex);
            }
          case 'jump_to_source_code':
            {
              return _this2.jumpToSourceCode(commandIndex);
            }
        }
      };

      return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
        'div',
        { style: style, id: 'context_menu' },
        react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
          antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a,
          { onClick: handleClick, style: menuStyle, mode: 'vertical', selectable: false },
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a.Item,
            { key: 'cut' },
            'Cut'
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a.Item,
            { key: 'copy' },
            'Copy'
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a.Item,
            { key: 'paste', disabled: clipboard.commands.length === 0 },
            'Paste'
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a.Divider, null),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a.Item,
            { key: 'insert' },
            'Insert new line'
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a.Divider, null),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a.Item,
            { key: 'jump_to_source_code' },
            'Jump to source code'
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a.Item,
            { key: isBreakpoint ? 'add_breakpoint' : 'remove_breakpoint' },
            isBreakpoint ? 'Add breakpoint' : 'Remove breakpoint'
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a.Divider, null),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a.Item,
            { key: 'run_line' },
            'Execute this command'
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_menu__WEBPACK_IMPORTED_MODULE_7___default.a.Item,
            { key: 'run_from_here' },
            'Run from here'
          )
        )
      );
    }
  }, {
    key: 'renderTable',
    value: function renderTable() {
      var _props = this.props,
          editing = _props.editing,
          player = _props.player;
      var commands = editing.commands;

      var dataSource = (commands && commands.length ? commands : defaultDataSource).map(function (command, i) {
        return _extends({}, command, {
          key: Math.random(),
          realIndex: i
        });
      });

      return this.needVirtualList() ? this.renderVirtualTable(dataSource) : this.renderNormalTable(dataSource);
    }
  }, {
    key: 'renderVirtualTable',
    value: function renderVirtualTable(dataSource) {
      var CommandVirtualList = react_virtual_list__WEBPACK_IMPORTED_MODULE_12___default()({ container: this.listContainer })(this.virtualCommmandList);
      var paddedDataSource = [{ header: true }].concat(_toConsumableArray(dataSource), [{ footer: true }]);

      return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
        'div',
        { className: 't-body' },
        !this.listContainer ? null : react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(CommandVirtualList, { itemHeight: 45, items: paddedDataSource })
      );
    }
  }, {
    key: 'renderNormalTable',
    value: function renderNormalTable(dataSource) {
      var _this3 = this;

      var _props2 = this.props,
          editing = _props2.editing,
          player = _props2.player;
      var nextCommandIndex = player.nextCommandIndex,
          errorCommandIndices = player.errorCommandIndices,
          doneCommandIndices = player.doneCommandIndices;
      var commands = editing.commands;

      var editable = this.isPlayerStopped();

      var columns = [{ title: 'Command', dataIndex: 'cmd', key: 'cmd', width: 130 }, { title: 'Target', dataIndex: 'target', key: 'target', width: 190 }, { title: 'Value', dataIndex: 'value', key: 'value' }, {
        title: 'Ops',
        key: 'ops',
        width: 80,
        render: function render(text, record, index) {
          return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            'div',
            null,
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default.a,
              {
                disabled: !editable,
                shape: 'circle',
                onClick: function onClick(e) {
                  _this3.props.removeCommand(index);e.stopPropagation();
                }
              },
              react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default.a, { type: 'minus' })
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default.a,
              {
                disabled: !editable,
                shape: 'circle',
                onClick: function onClick(e) {
                  _this3.props.duplicateCommand(index);e.stopPropagation();
                }
              },
              react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_6___default.a, { type: 'plus' })
            )
          );
        }
      }];

      var tableConfig = {
        dataSource: dataSource,
        columns: columns,
        pagination: false,
        footer: function footer() {
          return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            'div',
            { className: 'table-footer', onClick: function onClick(e) {
                _this3.props.insertCommand(newCommand, commands.length);
              } },
            'Add'
          );
        },
        onRowClick: function onRowClick(record, index, e) {
          _this3.props.selectCommand(index);
        },
        rowClassName: this.commandClassName
      };

      return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_table__WEBPACK_IMPORTED_MODULE_5___default.a, tableConfig);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props3 = this.props,
          status = _props3.status,
          editing = _props3.editing;
      var commands = editing.commands,
          meta = editing.meta;
      var selectedIndex = meta.selectedIndex;


      var isPlayerStopped = this.isPlayerStopped();
      var dataSource = commands && commands.length ? commands : defaultDataSource;
      var selectedCmd = dataSource[selectedIndex];
      var isCmdEditable = isPlayerStopped && !!selectedCmd;
      var isInspecting = status === _common_constant__WEBPACK_IMPORTED_MODULE_26__["APP_STATUS"].INSPECTOR;

      var selectedCmdIsVisualSearch = selectedCmd && ['visionFind', 'visualSearch', 'visualAssert', 'visualVerify'].indexOf(selectedCmd.cmd) !== -1;

      return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
        'div',
        { className: 'editor-wrapper' },
        react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
          antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0___default.a,
          {
            type: 'card',
            className: 'commands-view',
            activeKey: this.props.editor.activeTab,
            onChange: this.onChangeCommandsView
          },
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0___default.a.TabPane,
            { tab: 'Table View', key: 'table_view' },
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              'div',
              { className: 'form-group table-wrapper', style: { marginBottom: 0 }, ref: function ref(_ref3) {
                  _this4.listContainer = _ref3;
                } },
              this.renderTable()
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              'div',
              { className: 'form-group fields-wrapper', style: { marginBottom: 0 } },
              react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                antd_lib_form__WEBPACK_IMPORTED_MODULE_1___default.a,
                null,
                react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                  antd_lib_form__WEBPACK_IMPORTED_MODULE_1___default.a.Item,
                  { label: 'Command', labelCol: { span: 4 }, wrapperCol: { span: 20 } },
                  react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                    'div',
                    { className: 'flex-row' },
                    react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                      antd_lib_select__WEBPACK_IMPORTED_MODULE_4___default.a,
                      {
                        showSearch: true,
                        optionFilterProp: 'children',
                        placeholder: 'command',
                        disabled: !isCmdEditable,
                        value: selectedCmd && selectedCmd.cmd,
                        onChange: function onChange(value) {
                          return _this4.onDetailChange('cmd', value);
                        },
                        filterOption: function filterOption(input, _ref4) {
                          var key = _ref4.key;
                          return key.toLowerCase().indexOf(input.toLowerCase()) === 0;
                        },
                        style: { flex: 1, maxWidth: '60%', marginRight: '10px' },
                        size: 'default'
                      },
                      availableCommands.map(function (cmd) {
                        return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                          antd_lib_select__WEBPACK_IMPORTED_MODULE_4___default.a.Option,
                          { value: cmd, key: cmd },
                          cmd
                        );
                      })
                    ),
                    selectedCmd && selectedCmd.cmd ? react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                      'a',
                      { href: 'https://a9t9.com/x/idehelp?cmd=' + selectedCmd.cmd.toLowerCase(), target: '_blank' },
                      'Info for this command'
                    ) : null
                  )
                ),
                react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                  antd_lib_form__WEBPACK_IMPORTED_MODULE_1___default.a.Item,
                  { label: 'Target', labelCol: { span: 4 }, wrapperCol: { span: 20 } },
                  react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                    'div',
                    { className: 'flex-row' },
                    !selectedCmd || !selectedCmd.targetOptions || !selectedCmd.targetOptions.length ? react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_2___default.a, {
                      style: { flex: 1, maxWidth: '60%', marginRight: '10px' },
                      placeholder: 'target',
                      disabled: !isCmdEditable,
                      value: selectedCmd && selectedCmd.target,
                      onChange: function onChange(e) {
                        return _this4.onDetailChange('target', e.target.value);
                      },
                      size: 'default'
                    }) : react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                      antd_lib_select__WEBPACK_IMPORTED_MODULE_4___default.a,
                      {
                        style: { flex: 1, maxWidth: '60%', marginRight: '10px' },
                        placeholder: 'target',
                        disabled: !isCmdEditable,
                        value: selectedCmd.target,
                        onChange: function onChange(val) {
                          return _this4.onDetailChange('target', val);
                        },
                        size: 'default'
                      },
                      selectedCmd.targetOptions.map(function (option) {
                        return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                          antd_lib_select__WEBPACK_IMPORTED_MODULE_4___default.a.Option,
                          {
                            key: option,
                            value: option
                          },
                          option
                        );
                      })
                    ),
                    react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                      antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default.a,
                      {
                        style: { marginRight: '10px' },
                        disabled: !isCmdEditable,
                        onClick: this.onToggleInspect
                      },
                      isInspecting ? react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                        'span',
                        null,
                        (selectedCmdIsVisualSearch ? '👁' : '') + 'Cancel'
                      ) : react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                        'span',
                        null,
                        (selectedCmdIsVisualSearch ? '👁' : '') + 'Select'
                      )
                    ),
                    react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                      antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default.a,
                      {
                        disabled: !isCmdEditable,
                        onClick: this.onClickFind
                      },
                      (selectedCmdIsVisualSearch ? '👁' : '') + 'Find'
                    )
                  )
                ),
                react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                  antd_lib_form__WEBPACK_IMPORTED_MODULE_1___default.a.Item,
                  { label: 'Value', labelCol: { span: 4 }, wrapperCol: { span: 20 }, style: { marginBottom: 0 } },
                  react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_2___default.a, {
                    disabled: !isCmdEditable,
                    value: selectedCmd && selectedCmd.value,
                    onChange: function onChange(e) {
                      return _this4.onDetailChange('value', e.target.value);
                    },
                    style: { width: '100%' },
                    placeholder: 'value',
                    size: 'default'
                  })
                )
              )
            )
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0___default.a.TabPane,
            { tab: 'Source View (JSON)', key: 'source_view', className: 'source-view' },
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              'pre',
              { className: 'source-error' },
              this.props.sourceErrMsg
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(react_codemirror2__WEBPACK_IMPORTED_MODULE_13__["UnControlled"], {
              ref: function ref(el) {
                _this4.codeMirror = el;
              },
              className: this.props.sourceErrMsg ? 'has-error' : 'no-error',
              value: this.props.sourceText,
              onChange: this.onChangeEditSource,
              onBlur: this.onSourceBlur,
              onCursor: function onCursor(editor, data) {
                _this4.setState({ cmEdtiorInstance: editor });
                // Note: when value updated, code mirror will automatically emit onCursor with cursor at bottom
                // It can be tell with `sticky` as null
                if (data.sticky) {
                  _this4.setState({ cursor: { line: data.line, ch: data.ch } });
                }
              },
              options: {
                mode: { name: 'javascript', json: true },
                lineNumbers: true,
                matchBrackets: true,
                autoCloseBrackets: true
              }
            })
          )
        ),
        this.renderContextMenu(),
        this.renderVisionFindPreview()
      );
    }
  }]);

  return DashboardEditor;
}(react__WEBPACK_IMPORTED_MODULE_9___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_10__["connect"])(function (state) {
  return {
    status: state.status,
    editor: state.editor,
    editing: state.editor.editing,
    clipboard: state.editor.clipboard,
    player: state.player,
    config: state.config,
    sourceErrMsg: state.editor.editingSource.error,
    sourceText: state.editor.editingSource.pure,
    sourceTextModified: state.editor.editingSource.current,
    selectedCommand: Object(_recomputed__WEBPACK_IMPORTED_MODULE_28__["editorSelectedCommand"])(state)
  };
}, function (dispatch) {
  return Object(redux__WEBPACK_IMPORTED_MODULE_11__["bindActionCreators"])(_extends({}, _actions__WEBPACK_IMPORTED_MODULE_25__), dispatch);
})(DashboardEditor));

/***/ }),

/***/ "./src/containers/dashboard/index.js":
/*!*******************************************!*\
  !*** ./src/containers/dashboard/index.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/index.js");
/* harmony import */ var _dashboard_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dashboard.scss */ "./src/containers/dashboard/dashboard.scss");
/* harmony import */ var _dashboard_scss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_dashboard_scss__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../actions */ "./src/actions/index.js");
/* harmony import */ var _editor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./editor */ "./src/containers/dashboard/editor.js");
/* harmony import */ var _bottom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bottom */ "./src/containers/dashboard/bottom.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }











var Dashboard = function (_React$Component) {
  _inherits(Dashboard, _React$Component);

  function Dashboard() {
    _classCallCheck(this, Dashboard);

    return _possibleConstructorReturn(this, (Dashboard.__proto__ || Object.getPrototypeOf(Dashboard)).apply(this, arguments));
  }

  _createClass(Dashboard, [{
    key: 'render',
    value: function render() {
      var isWindows = /windows/i.test(window.navigator.userAgent);

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
        'div',
        { className: 'dashboard' },
        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_editor__WEBPACK_IMPORTED_MODULE_5__["default"], null),
        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_bottom__WEBPACK_IMPORTED_MODULE_6__["default"], null),
        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
          'div',
          { className: 'online-help' },
          react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
            'div',
            { style: { visibility: isWindows ? 'visible' : 'hidden' } },
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement('a', { href: 'https://a9t9.com/x/idehelp?help=visual', target: '_blank' })
          ),
          react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
            'div',
            null,
            'Kantu for Chrome/Firefox:',
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
              'a',
              { href: 'https://a9t9.com/x/idehelp?help=forum', target: '_blank' },
              ' User Forum'
            ),
            ' -',
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
              'a',
              { href: 'https://a9t9.com/x/idehelp?help=docs', target: '_blank' },
              ' Online Help'
            )
          )
        )
      );
    }
  }]);

  return Dashboard;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_1__["connect"])(function (state) {
  return {};
}, function (dispatch) {
  return Object(redux__WEBPACK_IMPORTED_MODULE_2__["bindActionCreators"])(_extends({}, _actions__WEBPACK_IMPORTED_MODULE_4__), dispatch);
})(Dashboard));

/***/ }),

/***/ "./src/containers/sidebar/index.js":
/*!*****************************************!*\
  !*** ./src/containers/sidebar/index.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/tabs */ "./node_modules/antd/lib/tabs/index.js");
/* harmony import */ var antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/index.js");
/* harmony import */ var react_click_outside__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-click-outside */ "./node_modules/react-click-outside/build/index.js");
/* harmony import */ var react_click_outside__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_click_outside__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _sidebar_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sidebar.scss */ "./src/containers/sidebar/sidebar.scss");
/* harmony import */ var _sidebar_scss__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_sidebar_scss__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../actions */ "./src/actions/index.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/utils */ "./src/common/utils.js");
/* harmony import */ var _test_suites__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./test_suites */ "./src/containers/sidebar/test_suites.js");
/* harmony import */ var _test_cases__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./test_cases */ "./src/containers/sidebar/test_cases.js");




var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }













var Sidebar = function (_React$Component) {
  _inherits(Sidebar, _React$Component);

  function Sidebar() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Sidebar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Sidebar.__proto__ || Object.getPrototypeOf(Sidebar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      drag: {
        isDragging: false,
        startX: 0,
        movingX: 0,
        lastWidth: 260,
        currentMinWidth: 260
      }
    }, _this.getSideBarMinWidth = function () {
      var _this$state$drag = _this.state.drag,
          isDragging = _this$state$drag.isDragging,
          lastWidth = _this$state$drag.lastWidth,
          currentMinWidth = _this$state$drag.currentMinWidth;

      return (isDragging ? currentMinWidth : lastWidth) + 'px';
    }, _this.onResizeDragStart = function (e) {
      // Note: Firefox requires us to set something to DataTransfer, otherwise drag and dragEnd won't be triggered
      // refer to https://stackoverflow.com/questions/33434275/firefox-on-drag-end-is-not-called-in-a-react-component
      e.dataTransfer.setData('text', '');

      var style = window.getComputedStyle(_this.$dom);
      var width = parseInt(style.width);

      _this.setState(Object(_common_utils__WEBPACK_IMPORTED_MODULE_7__["setIn"])(['drag'], {
        isDragging: true,
        // Check out the note on `screenX` in `onResizeDragEnd` event
        startX: e.screenX,
        lastWidth: width,
        currentWidth: width
      }, _this.state));
    }, _this.onResizeDragEnd = function (e) {
      // Note: use `screenX` instead of `clientX`, because `clientX` of dragEnd events in Firefox
      // is always set to 0, while `screenX` is luckily still available. And since we only make use of
      // difference of X coordinate. `screenX` and `clientX` both work for us.
      //
      // reference:
      // https://bugzilla.mozilla.org/show_bug.cgi?id=505521
      // https://developer.mozilla.org/en-US/docs/Web/Events/dragend
      var diff = e.screenX - _this.state.drag.startX;
      var width = diff + _this.state.drag.lastWidth;

      _this.setState(Object(_common_utils__WEBPACK_IMPORTED_MODULE_7__["setIn"])(['drag'], {
        isDragging: false,
        startX: 0,
        lastWidth: width,
        currentMinWidth: width
      }));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Sidebar, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
        'div',
        {
          className: 'sidebar',
          ref: function ref(el) {
            _this2.$dom = el;
          },
          style: { minWidth: this.getSideBarMinWidth() }
        },
        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
          'div',
          { className: 'sidebar-inner' },
          react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
            antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0___default.a,
            {
              defaultActiveKey: 'macros',
              activeKey: this.props.ui.sidebarTab || 'macros',
              onChange: function onChange(activeKey) {
                return _this2.props.updateUI({ sidebarTab: activeKey });
              }
            },
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
              antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0___default.a.TabPane,
              { tab: 'Macros', key: 'macros' },
              react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_test_cases__WEBPACK_IMPORTED_MODULE_9__["default"], null)
            ),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(
              antd_lib_tabs__WEBPACK_IMPORTED_MODULE_0___default.a.TabPane,
              { tab: 'Test Suites', key: 'test_suites' },
              react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_test_suites__WEBPACK_IMPORTED_MODULE_8__["default"], null)
            )
          )
        ),
        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement('div', {
          className: Object(_common_utils__WEBPACK_IMPORTED_MODULE_7__["cn"])('resize-handler', { focused: this.state.drag.isDragging }),
          draggable: 'true',
          onDragStart: this.onResizeDragStart,
          onDragEnd: this.onResizeDragEnd,
          onMouseDown: function onMouseDown() {
            return _this2.setState(Object(_common_utils__WEBPACK_IMPORTED_MODULE_7__["setIn"])(['drag', 'isDragging'], true, _this2.state));
          }
        })
      );
    }
  }]);

  return Sidebar;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_2__["connect"])(function (state) {
  return {
    status: state.status,
    testCases: state.editor.testCases,
    testSuites: state.editor.testSuites,
    editing: state.editor.editing,
    player: state.player,
    config: state.config,
    ui: state.ui
  };
}, function (dispatch) {
  return Object(redux__WEBPACK_IMPORTED_MODULE_3__["bindActionCreators"])(_extends({}, _actions__WEBPACK_IMPORTED_MODULE_6__), dispatch);
})(Sidebar));

/***/ }),

/***/ "./src/containers/sidebar/sidebar.scss":
/*!*********************************************!*\
  !*** ./src/containers/sidebar/sidebar.scss ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(/*! !../../../node_modules/css-loader!../../../node_modules/postcss-loader/lib!../../../node_modules/sass-loader/lib/loader.js!./sidebar.scss */ "./node_modules/css-loader/index.js!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/containers/sidebar/sidebar.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {}

/***/ }),

/***/ "./src/containers/sidebar/test_cases.js":
/*!**********************************************!*\
  !*** ./src/containers/sidebar/test_cases.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/dropdown */ "./node_modules/antd/lib/dropdown/index.js");
/* harmony import */ var antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/icon */ "./node_modules/antd/lib/icon/index.js");
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_icon__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_menu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/menu */ "./node_modules/antd/lib/menu/index.js");
/* harmony import */ var antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_menu__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/index.js");
/* harmony import */ var react_click_outside__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-click-outside */ "./node_modules/react-click-outside/build/index.js");
/* harmony import */ var react_click_outside__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(react_click_outside__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! jszip */ "./node_modules/jszip/lib/index.js");
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../common/lib/file_saver */ "./src/common/lib/file_saver.js");
/* harmony import */ var _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_common_lib_file_saver__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _components_search_box__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../components/search_box */ "./src/components/search_box.js");
/* harmony import */ var _components_save_test_case__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../components/save_test_case */ "./src/components/save_test_case.js");
/* harmony import */ var _common_player__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../common/player */ "./src/common/player.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../common/utils */ "./src/common/utils.js");
/* harmony import */ var _common_bookmark__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../common/bookmark */ "./src/common/bookmark.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../actions */ "./src/actions/index.js");
/* harmony import */ var _common_constant__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../common/constant */ "./src/common/constant.js");
/* harmony import */ var _common_convert_utils__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../common/convert_utils */ "./src/common/convert_utils.js");
































var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



















var downloadTestCaseAsJSON = function downloadTestCaseAsJSON(tc) {
  var str = Object(_common_convert_utils__WEBPACK_IMPORTED_MODULE_21__["toJSONString"])({ name: tc.name, commands: tc.data.commands });
  var blob = new Blob([str], { type: 'text/plain;charset=utf-8' });

  _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_13___default.a.saveAs(blob, tc.name + '.json');
};

var downloadTestCaseAsHTML = function downloadTestCaseAsHTML(tc) {
  var str = Object(_common_convert_utils__WEBPACK_IMPORTED_MODULE_21__["toHtml"])({ name: tc.name, commands: tc.data.commands });
  var blob = new Blob([str], { type: 'text/plain;charset=utf-8' });

  _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_13___default.a.saveAs(blob, tc.name + '.html');
};

var SidebarTestCases = function (_React$Component) {
  _inherits(SidebarTestCases, _React$Component);

  function SidebarTestCases() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SidebarTestCases);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SidebarTestCases.__proto__ || Object.getPrototypeOf(SidebarTestCases)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      searchText: '',

      showDuplicate: false,
      duplicateName: '',

      showRename: false,
      rename: '',

      tcContextMenu: {
        x: null,
        y: null,
        isShown: false
      }

      // Rename relative
    }, _this.onClickRename = function () {
      _this.props.renameTestCase(_this.state.rename, _this.state.renameTcId).then(function () {
        antd_lib_message__WEBPACK_IMPORTED_MODULE_6___default.a.success('successfully renamed!', 1.5);
        _this.toggleRenameModal(false);
      }).catch(function (e) {
        antd_lib_message__WEBPACK_IMPORTED_MODULE_6___default.a.error(e.message, 1.5);
      });
    }, _this.onCancelRename = function () {
      _this.toggleRenameModal(false);
      _this.setState({
        rename: null
      });
    }, _this.onChangeRename = function (e) {
      _this.setState({
        rename: e.target.value
      });
    }, _this.onClickDuplicate = function () {
      _this.props.duplicateTestCase(_this.state.duplicateName, _this.state.duplicateTcId).then(function () {
        antd_lib_message__WEBPACK_IMPORTED_MODULE_6___default.a.success('successfully duplicated!', 1.5);
      });
      _this.toggleDuplicateModal(false);
    }, _this.onCancelDuplicate = function () {
      _this.toggleDuplicateModal(false);
    }, _this.onChangeDuplicate = function (e) {
      _this.setState({
        duplicateName: e.target.value
      });
    }, _this.toggleDuplicateModal = function (toShow, tc) {
      var duplicateName = tc ? tc.name + '_new' : '';

      _this.setState({
        showDuplicate: toShow,
        duplicateTcId: tc && tc.id,
        duplicateName: duplicateName
      });

      if (toShow) {
        setTimeout(function () {
          var input = _this.inputDuplicateTestCase.refs.input;
          input.focus();
          input.selectionStart = input.selectionEnd = input.value.length;
        }, 100);
      }
    }, _this.toggleRenameModal = function (toShow, tc) {
      _this.setState({
        showRename: toShow,
        renameTcId: tc && tc.id
      });

      if (toShow) {
        setTimeout(function () {
          var input = _this.inputRenameTestCase.refs.input;
          input.focus();
          input.selectionStart = input.selectionEnd = input.value.length;
        }, 100);
      }
    }, _this.getItemKlass = function (tc) {
      var src = _this.props.editing.meta.src;
      var klasses = [];

      if (src && src.id === tc.id) klasses.push('selected');

      if (tc.status === _common_constant__WEBPACK_IMPORTED_MODULE_20__["TEST_CASE_STATUS"].SUCCESS) klasses.push('success');else if (tc.status === _common_constant__WEBPACK_IMPORTED_MODULE_20__["TEST_CASE_STATUS"].ERROR) klasses.push('error');else klasses.push('normal');

      if (_this.props.status !== _common_constant__WEBPACK_IMPORTED_MODULE_20__["APP_STATUS"].NORMAL) {
        klasses.push('disabled');
      }

      return klasses.join(' ');
    }, _this.changeTestCase = function (id) {
      return new Promise(function (resolve) {
        if (_this.props.status !== _common_constant__WEBPACK_IMPORTED_MODULE_20__["APP_STATUS"].NORMAL) return resolve(false);
        if (_this.props.editing.meta.src && _this.props.editing.meta.src.id === id) return resolve(true);

        var go = function go() {
          _this.props.editTestCase(id);
          resolve(true);
        };

        return Object(_components_save_test_case__WEBPACK_IMPORTED_MODULE_15__["default"])().saveOrNot().then(go);
      });
    }, _this.playTestCase = function (id) {
      if (_this.props.status !== _common_constant__WEBPACK_IMPORTED_MODULE_20__["APP_STATUS"].NORMAL) return;

      _this.changeTestCase(id).then(function (shouldPlay) {
        if (!shouldPlay) return;

        setTimeout(function () {
          var commands = _this.props.editing.commands;

          var openTc = commands.find(function (tc) {
            return tc.cmd.toLowerCase() === 'open';
          });
          var src = _this.props.editing.meta.src;

          var getTestCaseName = function getTestCaseName() {
            return src && src.name && src.name.length ? src.name : 'Untitled';
          };

          _this.props.playerPlay({
            title: getTestCaseName(),
            extra: {
              id: src && src.id
            },
            mode: Object(_common_player__WEBPACK_IMPORTED_MODULE_16__["getPlayer"])().C.MODE.STRAIGHT,
            startIndex: 0,
            startUrl: openTc ? openTc.target : null,
            resources: commands,
            postDelay: _this.props.player.playInterval * 1000
          });
        }, 500);
      });
    }, _this.onReadFile = function (process) {
      return function (e) {
        var files = [].slice.call(e.target.files);
        if (!files || !files.length) return;

        var read = function read(file) {
          return new Promise(function (resolve, reject) {
            var reader = new FileReader();

            reader.onload = function (readerEvent) {
              try {
                var text = readerEvent.target.result;
                var obj = process(text, file.name);
                resolve({ data: obj });
              } catch (e) {
                resolve({ err: e, fileName: file.name });
              }
            };

            reader.readAsText(file);
          });
        };

        Promise.all(files.map(read)).then(function (list) {
          var doneList = list.filter(function (x) {
            return x.data;
          });
          var failList = list.filter(function (x) {
            return x.err;
          });

          _this.props.addTestCases(doneList.map(function (x) {
            return x.data;
          })).then(function (_ref2) {
            var passCount = _ref2.passCount,
                failCount = _ref2.failCount,
                failTcs = _ref2.failTcs;

            antd_lib_message__WEBPACK_IMPORTED_MODULE_6___default.a.info([passCount + ' macro' + (passCount > 1 ? 's' : '') + ' imported!', failList.length + failCount + ' macro' + (failList.length + failCount > 1 ? 's' : '') + ' failed!'].join(', '), 3);

            failList.forEach(function (fail) {
              _this.props.addLog('error', 'in parsing ' + fail.fileName + ': ' + fail.err.message);
            });

            failTcs.forEach(function (fail) {
              _this.props.addLog('error', 'duplicated macro name: ' + fail.name);
            });
          });
        });
      };
    }, _this.onHTMLFileChange = function (e) {
      // Note: clear file input, so that we can fire onFileChange when users selects the same file next time
      setTimeout(function () {
        _this.htmlFileInput.value = null;
      }, 500);
      return _this.onReadFile(_common_convert_utils__WEBPACK_IMPORTED_MODULE_21__["fromHtml"])(e);
    }, _this.onJSONFileChange = function (e) {
      setTimeout(function () {
        _this.jsonFileInput.value = null;
      }, 500);
      return _this.onReadFile(_common_convert_utils__WEBPACK_IMPORTED_MODULE_21__["fromJSONString"])(e);
    }, _this.addTestCase = function () {
      var src = _this.props.editing.meta.src;

      var go = function go() {
        _this.props.editNewTestCase();
        return Promise.resolve();
      };

      return Object(_components_save_test_case__WEBPACK_IMPORTED_MODULE_15__["default"])().saveOrNot().then(go);
    }, _this.onClickTestCaseMore = function (e, tc, tcIndex) {
      e.stopPropagation();
      e.preventDefault();

      var updated = {
        tcContextMenu: {
          x: e.clientX,
          y: e.clientY,
          isShown: true,
          tc: tc,
          tcIndex: tcIndex
        }

        // Note: to make it work in Firefox, have to delay this new state a little bit
        // Because hideTcContextMenu could be executed at the same time via clickOutside
      };setTimeout(function () {
        return _this.setState(updated);
      }, 20);
    }, _this.hideTcContextMenu = function () {
      _this.setState({
        tcContextMenu: _extends({}, _this.state.tcContextMenu, {
          isShown: false
        })
      });
    }, _this.onTcMenuClick = function (_ref3, tc, tcIndex) {
      var key = _ref3.key;

      _this.hideTcContextMenu();

      switch (key) {
        case 'play':
          {
            return _this.playTestCase(tc.id);
          }

        case 'rename':
          {
            _this.setState({
              rename: tc.name
            });
            _this.toggleRenameModal(true, tc);
            break;
          }

        case 'delete':
          {
            var go = function go() {
              return _this.props.removeTestCase(tc.id).then(function () {
                antd_lib_message__WEBPACK_IMPORTED_MODULE_6___default.a.success('successfully deleted!', 1.5);
              }).catch(function (e) {
                antd_lib_modal__WEBPACK_IMPORTED_MODULE_3___default.a.warning({
                  title: 'Failed to delete',
                  content: e.message
                });
              });
            };

            return antd_lib_modal__WEBPACK_IMPORTED_MODULE_3___default.a.confirm({
              title: 'Sure to delete?',
              content: 'Do you really want to delete "' + tc.name + '"?',
              okText: 'Delete',
              cancelText: 'Cancel',
              onOk: go,
              onCancel: function onCancel() {}
            });
          }

        case 'duplicate':
          {
            return _this.toggleDuplicateModal(true, tc);
          }

        case 'export_html':
          {
            return downloadTestCaseAsHTML(tc);
          }

        case 'export_json':
          {
            return downloadTestCaseAsJSON(tc);
          }

        case 'create_bookmark':
          {
            var bookmarkTitle = prompt('Title for this bookmark', '#' + tc.name + '.kantu');
            if (bookmarkTitle === null) return;

            return Object(_common_bookmark__WEBPACK_IMPORTED_MODULE_18__["createBookmarkOnBar"])(Object(_common_convert_utils__WEBPACK_IMPORTED_MODULE_21__["toBookmarkData"])({
              bookmarkTitle: bookmarkTitle,
              name: tc.name
            })).then(function () {
              antd_lib_message__WEBPACK_IMPORTED_MODULE_6___default.a.success('successfully created bookmark!', 1.5);
            });
          }
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  // Duplicate relative


  _createClass(SidebarTestCases, [{
    key: 'renderTestCases',
    value: function renderTestCases() {
      var _this2 = this;

      var isEditingUntitled = !this.props.editing.meta.src;
      var testCases = this.props.testCases;
      var searchText = this.state.searchText;

      var trimSearchText = searchText.trim().toLowerCase();
      var matchText = trimSearchText.length === 0 ? function (x) {
        return x;
      } : function (x) {
        return x.name.toLowerCase().indexOf(trimSearchText) !== -1;
      };
      var candidates = testCases.filter(matchText);

      candidates.sort(function (a, b) {
        var nameA = a.name.toLowerCase();
        var nameB = b.name.toLowerCase();

        if (nameA < nameB) return -1;
        if (nameA === nameB) return 0;
        return 1;
      });

      return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
        'ul',
        { className: 'sidebar-test-cases' },
        isEditingUntitled ? react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
          'li',
          { className: 'selected' },
          'Untitled'
        ) : null,
        candidates.map(function (tc, tcIndex) {
          return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
            'li',
            {
              key: tc.id,
              className: _this2.getItemKlass(tc),
              onClick: function onClick() {
                return _this2.changeTestCase(tc.id);
              },
              onDoubleClick: function onDoubleClick() {
                return _this2.playTestCase(tc.id);
              },
              onContextMenu: function onContextMenu(e) {
                return _this2.onClickTestCaseMore(e, tc, tcIndex);
              }
            },
            react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
              'span',
              { className: 'test-case-name' },
              tc.name
            ),
            react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_2___default.a, {
              type: 'bars',
              className: 'more-button',
              onClick: function onClick(e) {
                return _this2.onClickTestCaseMore(e, tc, tcIndex);
              }
            })
          );
        })
      );
    }
  }, {
    key: 'getPortalContainer',
    value: function getPortalContainer() {
      var id = '__context_menu_container__';
      var $el = document.getElementById(id);
      if ($el) return $el;

      var $new = document.createElement('div');
      $new.id = id;
      document.body.appendChild($new);
      return $new;
    }
  }, {
    key: 'renderTestCaseContextMenu',
    value: function renderTestCaseContextMenu() {
      var _this3 = this;

      var contextMenu = this.state.tcContextMenu;
      var mw = 230;
      var x = contextMenu.x + window.scrollX;
      var y = contextMenu.y + window.scrollY;
      var $box = document.querySelector('.sidebar-inner');

      if ($box && y + 220 > $box.clientHeight) y -= 220;

      if (x - mw > 0) x -= mw;

      var style = {
        position: 'absolute',
        top: y,
        left: x,
        display: contextMenu.isShown ? 'block' : 'none'
      };

      var menuStyle = {
        width: mw + 'px'
      };

      var content = react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
        'div',
        { style: style, className: 'context-menu' },
        react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
          react_click_outside__WEBPACK_IMPORTED_MODULE_11___default.a,
          { onClickOutside: this.hideTcContextMenu },
          react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
            antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a,
            {
              onClick: function onClick(e) {
                return _this3.onTcMenuClick(e, contextMenu.tc, contextMenu.tcIndex);
              },
              style: menuStyle,
              mode: 'vertical',
              selectable: false
            },
            react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a.Item,
              { key: 'play' },
              'Play'
            ),
            react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a.Item,
              { key: 'rename' },
              'Rename..'
            ),
            react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a.Item,
              { key: 'duplicate' },
              'Duplicate..'
            ),
            react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a.Item,
              { key: 'export_json' },
              'Export as JSON'
            ),
            react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a.Item,
              { key: 'export_html' },
              'Export as HTML (plus autorun)'
            ),
            react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a.Item,
              { key: 'create_bookmark' },
              'Add shortcut to bookmarks bar'
            ),
            react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a.Divider, null),
            react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a.Item,
              { key: 'delete' },
              'Delete'
            )
          )
        )
      );

      return react_dom__WEBPACK_IMPORTED_MODULE_8___default.a.createPortal(content, this.getPortalContainer());
    }
  }, {
    key: 'renderTestCaseMenu',
    value: function renderTestCaseMenu() {
      var _this4 = this;

      var onClickMenuItem = function onClickMenuItem(_ref4) {
        var key = _ref4.key;

        switch (key) {
          case 'export_all_json':
            {
              var zip = new jszip__WEBPACK_IMPORTED_MODULE_12___default.a();

              if (_this4.props.testCases.length === 0) {
                return antd_lib_message__WEBPACK_IMPORTED_MODULE_6___default.a.error('No saved macros to export', 1.5);
              }

              _this4.props.testCases.forEach(function (tc) {
                zip.file(tc.name + '.json', Object(_common_convert_utils__WEBPACK_IMPORTED_MODULE_21__["toJSONString"])({
                  name: tc.name,
                  commands: tc.data.commands
                }));
              });

              zip.generateAsync({ type: 'blob' }).then(function (blob) {
                _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_13___default.a.saveAs(blob, 'all_test_cases.zip');
              });

              break;
            }

          case 'import':
            {
              break;
            }
        }
      };

      return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
        antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a,
        { onClick: onClickMenuItem, selectable: false },
        react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
          antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a.Item,
          { key: 'export_all_json' },
          'Export All (JSON)'
        ),
        react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
          antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a.Item,
          { key: 'import_json' },
          react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
            'label',
            { htmlFor: 'select_json_files_for_macros' },
            'Import JSON'
          ),
          react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement('input', {
            multiple: true,
            type: 'file',
            accept: '.json',
            id: 'select_json_files_for_macros',
            onChange: this.onJSONFileChange,
            ref: function ref(_ref5) {
              _this4.jsonFileInput = _ref5;
            },
            style: { display: 'none' }
          })
        ),
        react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
          antd_lib_menu__WEBPACK_IMPORTED_MODULE_5___default.a.Item,
          { key: 'import_html' },
          react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
            'label',
            { htmlFor: 'select_html_files' },
            'Import HTML'
          ),
          react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement('input', {
            multiple: true,
            type: 'file',
            accept: '.html,.htm',
            id: 'select_html_files',
            onChange: this.onHTMLFileChange,
            ref: function ref(_ref6) {
              _this4.htmlFileInput = _ref6;
            },
            style: { display: 'none' }
          })
        )
      );
    }
  }, {
    key: 'renderDuplicateModal',
    value: function renderDuplicateModal() {
      var _this5 = this;

      return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
        antd_lib_modal__WEBPACK_IMPORTED_MODULE_3___default.a,
        {
          title: 'Duplicate Macro..',
          okText: 'Save',
          cancelText: 'Cancel',
          visible: this.state.showDuplicate,
          onOk: this.onClickDuplicate,
          onCancel: this.onCancelDuplicate,
          className: 'duplicate-modal'
        },
        react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_4___default.a, {
          style: { width: '100%' },
          value: this.state.duplicateName,
          onKeyDown: function onKeyDown(e) {
            if (e.keyCode === 13) _this5.onClickDuplicate();
          },
          onChange: this.onChangeDuplicate,
          placeholder: 'macro name',
          ref: function ref(el) {
            _this5.inputDuplicateTestCase = el;
          }
        })
      );
    }
  }, {
    key: 'renderRenameModal',
    value: function renderRenameModal() {
      var _this6 = this;

      return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
        antd_lib_modal__WEBPACK_IMPORTED_MODULE_3___default.a,
        {
          title: 'Rename the macro as..',
          okText: 'Save',
          cancelText: 'Cancel',
          visible: this.state.showRename,
          onOk: this.onClickRename,
          onCancel: this.onCancelRename,
          className: 'rename-modal'
        },
        react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_4___default.a, {
          style: { width: '100%' },
          value: this.state.rename,
          onKeyDown: function onKeyDown(e) {
            if (e.keyCode === 13) _this6.onClickRename();
          },
          onChange: this.onChangeRename,
          placeholder: 'macro name',
          ref: function ref(el) {
            _this6.inputRenameTestCase = el;
          }
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this7 = this;

      return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
        'div',
        null,
        react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
          'div',
          { className: 'test-case-actions' },
          react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
            antd_lib_button__WEBPACK_IMPORTED_MODULE_1___default.a,
            { type: 'primary', onClick: this.addTestCase },
            '+ Macro'
          ),
          react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
            antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_0___default.a,
            { overlay: this.renderTestCaseMenu(), trigger: ['click'] },
            react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_1___default.a,
              { shape: 'circle' },
              react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_2___default.a, { type: 'setting' })
            )
          ),
          react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(_components_search_box__WEBPACK_IMPORTED_MODULE_14__["default"], {
            style: { flex: 1 },
            inputProps: {
              placeholder: 'search macro',
              value: this.state.searchText,
              onChange: function onChange(e) {
                return _this7.setState({ searchText: e.target.value });
              }
            }
          })
        ),
        this.renderTestCases(),
        this.renderTestCaseContextMenu(),
        this.renderDuplicateModal(),
        this.renderRenameModal()
      );
    }
  }]);

  return SidebarTestCases;
}(react__WEBPACK_IMPORTED_MODULE_7___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_9__["connect"])(function (state) {
  return {
    status: state.status,
    testCases: state.editor.testCases,
    testSuites: state.editor.testSuites,
    editing: state.editor.editing,
    player: state.player,
    config: state.config
  };
}, function (dispatch) {
  return Object(redux__WEBPACK_IMPORTED_MODULE_10__["bindActionCreators"])(_extends({}, _actions__WEBPACK_IMPORTED_MODULE_19__), dispatch);
})(SidebarTestCases));

/***/ }),

/***/ "./src/containers/sidebar/test_suites.js":
/*!***********************************************!*\
  !*** ./src/containers/sidebar/test_suites.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/icon */ "./node_modules/antd/lib/icon/index.js");
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_icon__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/select */ "./node_modules/antd/lib/select/index.js");
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_select__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_alert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/alert */ "./node_modules/antd/lib/alert/index.js");
/* harmony import */ var antd_lib_alert__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_alert__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/dropdown */ "./node_modules/antd/lib/dropdown/index.js");
/* harmony import */ var antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var antd_lib_menu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd/lib/menu */ "./node_modules/antd/lib/menu/index.js");
/* harmony import */ var antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(antd_lib_menu__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/index.js");
/* harmony import */ var react_click_outside__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react-click-outside */ "./node_modules/react-click-outside/build/index.js");
/* harmony import */ var react_click_outside__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(react_click_outside__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! jszip */ "./node_modules/jszip/lib/index.js");
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../common/lib/file_saver */ "./src/common/lib/file_saver.js");
/* harmony import */ var _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_common_lib_file_saver__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../actions */ "./src/actions/index.js");
/* harmony import */ var _common_constant__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../common/constant */ "./src/common/constant.js");
/* harmony import */ var _components_save_test_case__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../components/save_test_case */ "./src/components/save_test_case.js");
/* harmony import */ var _common_player__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../common/player */ "./src/common/player.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../common/utils */ "./src/common/utils.js");
/* harmony import */ var _common_convert_suite_utils__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../common/convert_suite_utils */ "./src/common/convert_suite_utils.js");
/* harmony import */ var _common_bookmark__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../common/bookmark */ "./src/common/bookmark.js");
/* harmony import */ var _components_edit_test_suite__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../components/edit_test_suite */ "./src/components/edit_test_suite.js");
/* harmony import */ var _components_editable_text__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../components/editable_text */ "./src/components/editable_text.js");

































var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




















var downloadTestSuite = function downloadTestSuite(ts, testCases) {
  var str = Object(_common_convert_suite_utils__WEBPACK_IMPORTED_MODULE_21__["stringifyTestSuite"])({
    name: ts.name,
    cases: ts.cases
  }, testCases);
  var blob = new Blob([str], { type: 'text/plain;charset=utf-8' });

  _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_15___default.a.saveAs(blob, 'suite_' + ts.name + '.json');
};

var downloadTestSuiteAsHTML = function downloadTestSuiteAsHTML(ts) {
  var str = Object(_common_convert_suite_utils__WEBPACK_IMPORTED_MODULE_21__["toHtml"])({ name: ts.name });
  var blob = new Blob([str], { type: 'text/plain;charset=utf-8' });

  _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_15___default.a.saveAs(blob, ts.name + '.html');
};

var SidebarTestSuites = function (_React$Component) {
  _inherits(SidebarTestSuites, _React$Component);

  function SidebarTestSuites() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SidebarTestSuites);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SidebarTestSuites.__proto__ || Object.getPrototypeOf(SidebarTestSuites)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      tsContextMenu: {
        x: null,
        y: null,
        isShown: false
      },

      tscContextMenu: {
        x: null,
        y: null,
        isShown: false
      },

      tsEditingNameIndex: -1,

      editTestSuiteSource: {
        ts: null,
        visible: false
      }
    }, _this.addTestSuite = function () {
      _this.props.addTestSuite({
        name: '__Untitled__',
        cases: []
      });
    }, _this.addTestCaseToTestSuite = function (ts) {
      _this.props.updateTestSuite(ts.id, {
        cases: ts.cases.concat({
          testCaseId: _this.props.testCases[0] && _this.props.testCases[0].id,
          loops: 1
        })
      });
    }, _this.removeTestCaseFromTestSuite = function (ts, index) {
      ts.cases.splice(index, 1);

      _this.props.updateTestSuite(ts.id, {
        cases: ts.cases,
        playStatus: function () {
          var _ts$playStatus = ts.playStatus,
              playStatus = _ts$playStatus === undefined ? {} : _ts$playStatus;
          var _playStatus$doneIndic = playStatus.doneIndices,
              doneIndices = _playStatus$doneIndic === undefined ? [] : _playStatus$doneIndic,
              _playStatus$errorIndi = playStatus.errorIndices,
              errorIndices = _playStatus$errorIndi === undefined ? [] : _playStatus$errorIndi;

          var updateIndex = function updateIndex(n) {
            if (n === undefined) return -1;
            if (n === index) return -1;
            if (n > index) return n - 1;
            return n;
          };

          return {
            errorIndices: errorIndices.map(updateIndex).filter(function (i) {
              return i !== -1;
            }),
            doneIndices: doneIndices.map(updateIndex).filter(function (i) {
              return i !== -1;
            })
          };
        }()
      });
    }, _this.toggleTestSuiteFold = function (ts) {
      _this.props.updateTestSuite(ts.id, {
        fold: !ts.fold
      });
    }, _this.foldAllTestSuites = function () {
      _this.props.testSuites.forEach(function (ts) {
        _this.props.updateTestSuite(ts.id, {
          fold: true
        });
      });
    }, _this.onClickTestSuiteMore = function (e, ts, tsIndex) {
      e.stopPropagation();
      e.preventDefault();

      var updated = {
        tsContextMenu: {
          x: e.clientX,
          y: e.clientY,
          isShown: true,
          ts: ts,
          tsIndex: tsIndex
        }

        // Note: to make it work in Firefox, have to delay this new state a little bit
        // Because hideTcContextMenu could be executed at the same time via clickOutside
      };setTimeout(function () {
        return _this.setState(updated);
      }, 20);
    }, _this.onClickTsTestCaseMore = function (e, tc, tcIndex, ts, tsIndex) {
      e.stopPropagation();
      e.preventDefault();

      var updated = {
        tscContextMenu: {
          x: e.clientX,
          y: e.clientY,
          isShown: true,
          tc: tc,
          ts: ts,
          tcIndex: tcIndex,
          tsIndex: tsIndex
        }

        // Note: to make it work in Firefox, have to delay this new state a little bit
        // Because hideTcContextMenu could be executed at the same time via clickOutside
      };setTimeout(function () {
        return _this.setState(updated);
      }, 20);
    }, _this.hideTsContextMenu = function () {
      _this.setState({
        tsContextMenu: _extends({}, _this.state.tsContextMenu, {
          isShown: false
        })
      });
    }, _this.hideTscContextMenu = function () {
      _this.setState({
        tscContextMenu: _extends({}, _this.state.tscContextMenu, {
          isShown: false
        })
      });
    }, _this.onTsMenuClick = function (_ref2, ts, tsIndex) {
      var key = _ref2.key;

      _this.hideTsContextMenu();

      switch (key) {
        case 'play':
          Object(_common_player__WEBPACK_IMPORTED_MODULE_19__["getPlayer"])({ name: 'testSuite' }).play({
            title: ts.name,
            extra: {
              id: ts.id,
              name: ts.name
            },
            mode: Object(_common_player__WEBPACK_IMPORTED_MODULE_19__["getPlayer"])().C.MODE.STRAIGHT,
            startIndex: 0,
            resources: ts.cases.map(function (item) {
              return {
                id: item.testCaseId,
                loops: item.loops
              };
            })
          });
          break;

        case 'edit_source':
          _this.setState({
            editTestSuiteSource: {
              ts: ts,
              visible: true
            }
          });
          break;

        case 'rename':
          _this.setState({
            tsEditingNameIndex: tsIndex
          });
          break;

        case 'export':
          downloadTestSuite(ts, _this.props.testCases);
          break;

        case 'create_bookmark':
          {
            var bookmarkTitle = prompt('Title for this bookmark', '#' + ts.name + '.kantu');
            if (bookmarkTitle === null) return;

            return Object(_common_bookmark__WEBPACK_IMPORTED_MODULE_22__["createBookmarkOnBar"])(Object(_common_convert_suite_utils__WEBPACK_IMPORTED_MODULE_21__["toBookmarkData"])({
              bookmarkTitle: bookmarkTitle,
              name: ts.name
            })).then(function () {
              antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.success('successfully created bookmark!', 1.5);
            });
          }

        case 'export_html':
          {
            return downloadTestSuiteAsHTML(ts);
          }

        case 'delete':
          antd_lib_modal__WEBPACK_IMPORTED_MODULE_8___default.a.confirm({
            title: 'Are your sure to delete this test suite?',
            okText: 'Confirm',
            onOk: function onOk() {
              return _this.props.removeTestSuite(ts.id);
            }
          });
          break;
      }
    }, _this.onTscMenuClick = function (_ref3, tc, tcIndex, ts, tsIndex) {
      var key = _ref3.key;

      _this.hideTscContextMenu();

      switch (key) {
        case 'play_from_here':
          Object(_common_player__WEBPACK_IMPORTED_MODULE_19__["getPlayer"])({ name: 'testSuite' }).play({
            title: ts.name,
            extra: {
              id: ts.id,
              name: ts.name
            },
            mode: Object(_common_player__WEBPACK_IMPORTED_MODULE_19__["getPlayer"])().C.MODE.STRAIGHT,
            startIndex: tcIndex,
            resources: ts.cases.map(function (item) {
              return {
                id: item.testCaseId,
                loops: item.loops
              };
            })
          });
          break;
      }
    }, _this.onChangeTsName = function (val, ts, tsIndex) {
      _this.setState({
        tsEditingNameIndex: -1
      });

      _this.props.updateTestSuite(ts.id, {
        name: val
      });
    }, _this.onChangeTsCase = function (key, val, tcIndex, ts, tsIndex) {
      _this.props.updateTestSuite(ts.id, {
        cases: Object(_common_utils__WEBPACK_IMPORTED_MODULE_20__["setIn"])([tcIndex, key], val, ts.cases)
      });
    }, _this.getTsTestCaseClass = function (tcIndex, tsPlayStatus) {
      if (!tsPlayStatus) return '';
      var _tsPlayStatus$doneInd = tsPlayStatus.doneIndices,
          doneIndices = _tsPlayStatus$doneInd === undefined ? [] : _tsPlayStatus$doneInd,
          _tsPlayStatus$errorIn = tsPlayStatus.errorIndices,
          errorIndices = _tsPlayStatus$errorIn === undefined ? [] : _tsPlayStatus$errorIn,
          currentIndex = tsPlayStatus.currentIndex;


      if (tcIndex === currentIndex) {
        return 'current-tc';
      } else if (errorIndices.indexOf(tcIndex) !== -1) {
        return 'error-tc';
      } else if (doneIndices.indexOf(tcIndex) !== -1) {
        return 'done-tc';
      } else {
        return '';
      }
    }, _this.onJSONFileChange = function (e) {
      setTimeout(function () {
        _this.jsonFileInput.value = null;
      }, 500);
      return _this.onReadFile(function (str) {
        return Object(_common_convert_suite_utils__WEBPACK_IMPORTED_MODULE_21__["parseTestSuite"])(str, _this.props.testCases);
      })(e);
    }, _this.onReadFile = function (process) {
      return function (e) {
        var files = [].slice.call(e.target.files);
        if (!files || !files.length) return;

        var read = function read(file) {
          return new Promise(function (resolve, reject) {
            var reader = new FileReader();

            reader.onload = function (readerEvent) {
              try {
                var text = readerEvent.target.result;
                var obj = process(text, file.name);
                resolve({ data: obj });
              } catch (e) {
                resolve({ err: e, fileName: file.name });
              }
            };

            reader.readAsText(file);
          });
        };

        Promise.all(files.map(read)).then(function (list) {
          var doneList = list.filter(function (x) {
            return x.data;
          });
          var failList = list.filter(function (x) {
            return x.err;
          });

          _this.props.addTestSuites(doneList.map(function (x) {
            return x.data;
          })).then(function (_ref4) {
            var passCount = _ref4.passCount,
                failCount = _ref4.failCount,
                failTcs = _ref4.failTcs;

            antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.info([passCount + ' test suite' + (passCount > 1 ? 's' : '') + ' imported!', failList.length + failCount + ' test suite' + (failList.length + failCount > 1 ? 's' : '') + ' failed!'].join(', '), 3);

            failList.forEach(function (fail) {
              _this.props.addLog('error', 'in parsing ' + fail.fileName + ': ' + fail.err.message);
            });

            failTcs.forEach(function (fail) {
              _this.props.addLog('error', 'duplicated test suite name: ' + fail.name);
            });
          });
        });
      };
    }, _this.onClosePlayTestSuiteTip = function () {
      _this.props.updateConfig({
        hidePlayTestSuiteTip: true
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SidebarTestSuites, [{
    key: 'getPortalContainer',
    value: function getPortalContainer() {
      var id = '__context_menu_container__';
      var $el = document.getElementById(id);
      if ($el) return $el;

      var $new = document.createElement('div');
      $new.id = id;
      document.body.appendChild($new);
      return $new;
    }
  }, {
    key: 'renderTestSuiteContextMenu',
    value: function renderTestSuiteContextMenu() {
      var _this2 = this;

      var contextMenu = this.state.tsContextMenu;
      var mw = 230;
      var x = contextMenu.x + window.scrollX;
      var y = contextMenu.y + window.scrollY;

      if (x - mw > 0) x -= mw;

      var style = {
        position: 'absolute',
        top: y,
        left: x,
        display: contextMenu.isShown ? 'block' : 'none'
      };

      var menuStyle = {
        width: mw + 'px'
      };

      var content = react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
        'div',
        { style: style, className: 'context-menu' },
        react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
          react_click_outside__WEBPACK_IMPORTED_MODULE_13___default.a,
          { onClickOutside: this.hideTsContextMenu },
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a,
            {
              onClick: function onClick(e) {
                return _this2.onTsMenuClick(e, contextMenu.ts, contextMenu.tsIndex);
              },
              style: menuStyle,
              mode: 'vertical',
              selectable: false
            },
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a.Item,
              { key: 'play' },
              'Play'
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a.Item,
              { key: 'edit_source' },
              'Edit source..'
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a.Item,
              { key: 'rename' },
              'Rename..'
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a.Item,
              { key: 'export' },
              'Export'
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a.Item,
              { key: 'export_html' },
              'Create HTML autorun page'
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a.Item,
              { key: 'create_bookmark' },
              'Add to Bookmarks'
            ),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a.Divider, null),
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a.Item,
              { key: 'delete' },
              'Delete'
            )
          )
        )
      );

      return react_dom__WEBPACK_IMPORTED_MODULE_10___default.a.createPortal(content, this.getPortalContainer());
    }
  }, {
    key: 'renderTestSuiteCaseContextMenu',
    value: function renderTestSuiteCaseContextMenu() {
      var _this3 = this;

      var contextMenu = this.state.tscContextMenu;
      var mw = 150;
      var x = contextMenu.x + window.scrollX;
      var y = contextMenu.y + window.scrollY;

      if (x - mw > 0) x -= mw;

      var style = {
        position: 'absolute',
        top: y,
        left: x,
        display: contextMenu.isShown ? 'block' : 'none'
      };

      var menuStyle = {
        width: mw + 'px'
      };

      var content = react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
        'div',
        { style: style, className: 'context-menu' },
        react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
          react_click_outside__WEBPACK_IMPORTED_MODULE_13___default.a,
          { onClickOutside: this.hideTscContextMenu },
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a,
            {
              onClick: function onClick(e) {
                return _this3.onTscMenuClick(e, contextMenu.tc, contextMenu.tcIndex, contextMenu.ts, contextMenu.tsIndex);
              },
              style: menuStyle,
              mode: 'vertical',
              selectable: false
            },
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a.Item,
              { key: 'play_from_here' },
              'Replay from here'
            )
          )
        )
      );

      return react_dom__WEBPACK_IMPORTED_MODULE_10___default.a.createPortal(content, this.getPortalContainer());
    }
  }, {
    key: 'renderTestSuiteMenu',
    value: function renderTestSuiteMenu() {
      var _this4 = this;

      var onClickMenuItem = function onClickMenuItem(_ref5) {
        var key = _ref5.key;

        switch (key) {
          case 'export_all':
            {
              var zip = new jszip__WEBPACK_IMPORTED_MODULE_14___default.a();

              if (_this4.props.testSuites.length === 0) {
                return antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.error('No saved test suites to export', 1.5);
              }

              var genName = Object(_common_utils__WEBPACK_IMPORTED_MODULE_20__["nameFactory"])();

              _this4.props.testSuites.forEach(function (ts) {
                var name = genName(ts.name);
                zip.file(name + '.json', Object(_common_convert_suite_utils__WEBPACK_IMPORTED_MODULE_21__["stringifyTestSuite"])(ts, _this4.props.testCases));
              });

              zip.generateAsync({ type: 'blob' }).then(function (blob) {
                _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_15___default.a.saveAs(blob, 'all_suites.zip');
              });

              break;
            }

          case 'import':
            {
              break;
            }
        }
      };

      return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
        antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a,
        { onClick: onClickMenuItem, selectable: false },
        react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
          antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a.Item,
          { key: 'export_all' },
          'Export all (JSON)'
        ),
        react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
          antd_lib_menu__WEBPACK_IMPORTED_MODULE_6___default.a.Item,
          { key: '4' },
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            'label',
            { htmlFor: 'select_json_files_for_ts' },
            'Import JSON'
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement('input', {
            multiple: true,
            type: 'file',
            accept: '.json',
            id: 'select_json_files_for_ts',
            onChange: this.onJSONFileChange,
            style: { display: 'none' },
            ref: function ref(el) {
              _this4.jsonFileInput = el;
            }
          })
        )
      );
    }
  }, {
    key: 'renderEditTestSuiteSource',
    value: function renderEditTestSuiteSource() {
      var _this5 = this;

      if (!this.state.editTestSuiteSource.visible) return null;
      var ts = this.state.editTestSuiteSource.ts;
      var source = Object(_common_convert_suite_utils__WEBPACK_IMPORTED_MODULE_21__["stringifyTestSuite"])(ts, this.props.testCases);
      var testCases = this.props.testCases;

      return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(_components_edit_test_suite__WEBPACK_IMPORTED_MODULE_23__["default"], {
        visible: true,
        value: source,
        validate: function validate(text) {
          return Object(_common_convert_suite_utils__WEBPACK_IMPORTED_MODULE_21__["validateTestSuiteText"])(text, testCases);
        },
        onClose: function onClose() {
          return _this5.setState({ editTestSuiteSource: { visible: false } });
        },
        onChange: function onChange(text) {
          var newTestSuite = Object(_common_convert_suite_utils__WEBPACK_IMPORTED_MODULE_21__["parseTestSuite"])(text, testCases);

          _this5.props.updateTestSuite(ts.id, newTestSuite);
          _this5.setState({ editTestSuiteSource: { visible: false } });
        }
      });
    }
  }, {
    key: 'renderTestSuites',
    value: function renderTestSuites() {
      var _this6 = this;

      return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
        'div',
        null,
        react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
          'div',
          { className: 'test-suite-actions' },
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
            { type: 'primary', onClick: this.addTestSuite },
            '+ Test Suite'
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
            { type: 'default', onClick: this.foldAllTestSuites },
            'Fold'
          ),
          react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
            antd_lib_dropdown__WEBPACK_IMPORTED_MODULE_5___default.a,
            { overlay: this.renderTestSuiteMenu(), trigger: ['click'] },
            react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
              { shape: 'circle' },
              react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_1___default.a, { type: 'setting' })
            )
          )
        ),
        !this.props.config.hidePlayTestSuiteTip && this.props.testSuites.length > 0 ? react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_alert__WEBPACK_IMPORTED_MODULE_4___default.a, {
          type: 'info',
          message: 'Right click to play test suite',
          onClose: this.onClosePlayTestSuiteTip,
          closable: true,
          showIcon: true,
          style: { margin: '10px', paddingRight: '30px' }
        }) : null,
        react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
          'ul',
          { className: 'sidebar-test-suites' },
          this.props.testSuites.map(function (ts, tsIndex) {
            return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
              'li',
              {
                key: ts.id,
                className: Object(_common_utils__WEBPACK_IMPORTED_MODULE_20__["cn"])('test-suite-item ', {
                  fold: ts.fold,
                  playing: ts.playStatus && ts.playStatus.isPlaying
                })
              },
              react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                'div',
                { className: 'test-suite-row',
                  onClick: function onClick() {
                    return _this6.toggleTestSuiteFold(ts);
                  },
                  onContextMenu: function onContextMenu(e) {
                    return _this6.onClickTestSuiteMore(e, ts, tsIndex);
                  }
                },
                react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_1___default.a, { type: ts.fold ? 'folder' : 'folder-open' }),
                react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(_components_editable_text__WEBPACK_IMPORTED_MODULE_24__["default"], {
                  className: 'test-suite-title',
                  value: ts.name,
                  onChange: function onChange(val) {
                    return _this6.onChangeTsName(val, ts, tsIndex);
                  },
                  isEditing: tsIndex === _this6.state.tsEditingNameIndex,
                  inputProps: {
                    onClick: function onClick(e) {
                      return e.stopPropagation();
                    },
                    onContextMenu: function onContextMenu(e) {
                      return e.stopPropagation();
                    }
                  }
                }),
                tsIndex === _this6.state.tsEditingNameIndex ? null : react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_1___default.a, {
                  type: 'bars',
                  className: 'more-button',
                  onClick: function onClick(e) {
                    return _this6.onClickTestSuiteMore(e, ts, tsIndex);
                  }
                })
              ),
              ts.cases.length > 0 ? react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                'ul',
                { className: 'test-suite-cases' },
                ts.cases.map(function (item, tcIndex) {
                  return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                    'li',
                    {
                      key: tcIndex,
                      className: _this6.getTsTestCaseClass(tcIndex, ts.playStatus),
                      onContextMenu: function onContextMenu(e) {
                        return _this6.onClickTsTestCaseMore(e, item, tcIndex, ts, tsIndex);
                      }
                    },
                    react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_1___default.a, {
                      type: 'file',
                      style: { marginRight: '10px', cursor: 'pointer' },
                      onClick: function onClick() {
                        var src = _this6.props.editing.meta.src;

                        var go = function go() {
                          _this6.props.editTestCase(item.testCaseId);
                          return Promise.resolve();
                        };

                        return Object(_components_save_test_case__WEBPACK_IMPORTED_MODULE_18__["default"])().saveOrNot().then(go);
                      }
                    }),
                    react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                      antd_lib_select__WEBPACK_IMPORTED_MODULE_3___default.a,
                      {
                        showSearch: true,
                        optionFilterProp: 'children',
                        value: item.testCaseId,
                        onChange: function onChange(val) {
                          return _this6.onChangeTsCase('testCaseId', val, tcIndex, ts, tsIndex);
                        },
                        filterOption: function filterOption(input, data) {
                          return data.props.children.toLowerCase().indexOf(input.toLowerCase()) !== -1;
                        },
                        style: { flex: 1, marginRight: '10px', maxWidth: '50%' }
                      },
                      _this6.props.testCases.map(function (tc) {
                        return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                          antd_lib_select__WEBPACK_IMPORTED_MODULE_3___default.a.Option,
                          { value: tc.id, key: tc.id },
                          tc.name
                        );
                      })
                    ),
                    react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_2___default.a, {
                      type: 'number',
                      min: 1,
                      value: item.loops,
                      onChange: function onChange(e) {
                        return _this6.onChangeTsCase('loops', e.target.value.trim().length === 0 ? '1' : e.target.value, tcIndex, ts, tsIndex);
                      },
                      style: { width: '45px', marginRight: '10px' }
                    }),
                    react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(antd_lib_icon__WEBPACK_IMPORTED_MODULE_1___default.a, {
                      type: 'close',
                      style: { cursor: 'pointer' },
                      onClick: function onClick() {
                        return _this6.removeTestCaseFromTestSuite(ts, tcIndex);
                      }
                    })
                  );
                })
              ) : null,
              react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                'div',
                { className: 'test-suite-more-actions' },
                react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
                  antd_lib_button__WEBPACK_IMPORTED_MODULE_0___default.a,
                  {
                    type: 'default',
                    onClick: function onClick() {
                      return _this6.addTestCaseToTestSuite(ts);
                    }
                  },
                  '+ Macro'
                )
              )
            );
          })
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(
        'div',
        null,
        this.renderTestSuites(),
        this.renderTestSuiteContextMenu(),
        this.renderTestSuiteCaseContextMenu(),
        this.renderEditTestSuiteSource()
      );
    }
  }]);

  return SidebarTestSuites;
}(react__WEBPACK_IMPORTED_MODULE_9___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_11__["connect"])(function (state) {
  return {
    status: state.status,
    testCases: state.editor.testCases,
    testSuites: state.editor.testSuites,
    editing: state.editor.editing,
    player: state.player,
    config: state.config
  };
}, function (dispatch) {
  return Object(redux__WEBPACK_IMPORTED_MODULE_12__["bindActionCreators"])(_extends({}, _actions__WEBPACK_IMPORTED_MODULE_16__), dispatch);
})(SidebarTestSuites));

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_locale_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/locale-provider */ "./node_modules/antd/lib/locale-provider/index.js");
/* harmony import */ var antd_lib_locale_provider__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_locale_provider__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/es/index.js");
/* harmony import */ var antd_lib_locale_provider_en_US__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/locale-provider/en_US */ "./node_modules/antd/lib/locale-provider/en_US.js");
/* harmony import */ var antd_lib_locale_provider_en_US__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_locale_provider_en_US__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./common/lib/file_saver */ "./src/common/lib/file_saver.js");
/* harmony import */ var _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_common_lib_file_saver__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./app */ "./src/app.js");
/* harmony import */ var _redux__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./redux */ "./src/redux/index.js");
/* harmony import */ var _init_player__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./init_player */ "./src/init_player.js");
/* harmony import */ var _common_web_extension__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./common/web_extension */ "./src/common/web_extension.js");
/* harmony import */ var _common_web_extension__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_common_web_extension__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./common/ipc/ipc_cs */ "./src/common/ipc/ipc_cs.js");
/* harmony import */ var _models_test_case_model__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./models/test_case_model */ "./src/models/test_case_model.js");
/* harmony import */ var _models_test_suite_model__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./models/test_suite_model */ "./src/models/test_suite_model.js");
/* harmony import */ var _common_storage__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./common/storage */ "./src/common/storage/index.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./common/utils */ "./src/common/utils.js");
/* harmony import */ var _common_convert_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./common/convert_utils */ "./src/common/convert_utils.js");
/* harmony import */ var _common_convert_suite_utils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./common/convert_suite_utils */ "./src/common/convert_suite_utils.js");
/* harmony import */ var _common_constant__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./common/constant */ "./src/common/constant.js");
/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./common/log */ "./src/common/log.js");
/* harmony import */ var _common_macro_log__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./common/macro_log */ "./src/common/macro_log.js");
/* harmony import */ var _common_csv_man__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./common/csv_man */ "./src/common/csv_man.js");
/* harmony import */ var _common_screenshot_man__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./common/screenshot_man */ "./src/common/screenshot_man.js");
/* harmony import */ var _common_vision_man__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./common/vision_man */ "./src/common/vision_man.js");
/* harmony import */ var _common_variables__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./common/variables */ "./src/common/variables.js");
/* harmony import */ var _common_player__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./common/player */ "./src/common/player.js");
/* harmony import */ var _components_save_test_case__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./components/save_test_case */ "./src/components/save_test_case.js");
/* harmony import */ var _config_preinstall_macros__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./config/preinstall_macros */ "./src/config/preinstall_macros.js");
/* harmony import */ var _config_preinstall_suites__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./config/preinstall_suites */ "./src/config/preinstall_suites.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./actions */ "./src/actions/index.js");







var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/* global PREINSTALL_CSV_LIST PREINSTALL_VISION_LIST */
































var store = Object(_redux__WEBPACK_IMPORTED_MODULE_8__["createStore"])(_redux__WEBPACK_IMPORTED_MODULE_8__["reducer"], window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());

var rootEl = document.getElementById('root');
var render = function render(Component) {
  return react_dom__WEBPACK_IMPORTED_MODULE_3___default.a.render(react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(
    antd_lib_locale_provider__WEBPACK_IMPORTED_MODULE_1___default.a,
    { locale: antd_lib_locale_provider_en_US__WEBPACK_IMPORTED_MODULE_5___default.a },
    react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(
      _redux__WEBPACK_IMPORTED_MODULE_8__["Provider"],
      { store: store },
      react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(
        react_router_dom__WEBPACK_IMPORTED_MODULE_4__["HashRouter"],
        null,
        react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(_app__WEBPACK_IMPORTED_MODULE_7__["default"], null)
      )
    )
  ), rootEl);
};

// Note: listen to any db changes and restore all data from db to redux store
// All test cases are stored in indexeddb (dexie)
var bindDB = function bindDB() {
  var restoreTestCases = function restoreTestCases() {
    return _models_test_case_model__WEBPACK_IMPORTED_MODULE_12__["default"].list().then(function (tcs) {
      store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["setTestCases"])(tcs.map(_models_test_case_model__WEBPACK_IMPORTED_MODULE_12__["eliminateBaseUrl"])));
    });
  };

  var restoreTestSuites = function restoreTestSuites() {
    return _models_test_suite_model__WEBPACK_IMPORTED_MODULE_13__["default"].list().then(function (tss) {
      tss.sort(function (a, b) {
        var aname = a.name.toLowerCase();
        var bname = b.name.toLowerCase();

        if (aname < bname) return -1;
        if (aname > bname) return 1;
        if (aname === bname) {
          return b.updateTime - a.updateTime;
        }
      });

      store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["setTestSuites"])(tss));
    });
  };['updating', 'creating', 'deleting'].forEach(function (eventName) {
    _models_test_case_model__WEBPACK_IMPORTED_MODULE_12__["default"].table.hook(eventName, function () {
      Object(_common_log__WEBPACK_IMPORTED_MODULE_19__["default"])('eventName', eventName);
      setTimeout(restoreTestCases, 50);
    });
  });['updating', 'creating', 'deleting'].forEach(function (eventName) {
    _models_test_suite_model__WEBPACK_IMPORTED_MODULE_13__["default"].table.hook(eventName, function () {
      Object(_common_log__WEBPACK_IMPORTED_MODULE_19__["default"])('eventName', eventName);
      setTimeout(restoreTestSuites, 50);
    });
  });

  restoreTestCases();
  restoreTestSuites();
};

// Note: editing is stored in localstorage
var restoreEditing = function restoreEditing() {
  return _common_storage__WEBPACK_IMPORTED_MODULE_14__["default"].get('editing').then(function (editing) {
    var finalEditing = editing;

    if (editing.baseUrl) {
      finalEditing = _extends({}, editing);
      finalEditing.commands = finalEditing.commands.map(Object(_models_test_case_model__WEBPACK_IMPORTED_MODULE_12__["commandWithoutBaseUrl"])(editing.baseUrl));
      delete finalEditing.baseUrl;
    }

    store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["setEditing"])(finalEditing));
  });
};

var restoreConfig = function restoreConfig() {
  return _common_storage__WEBPACK_IMPORTED_MODULE_14__["default"].get('config').then(function (config) {
    var cfg = _extends({
      showSidebar: true,
      playScrollElementsIntoView: true,
      playHighlightElements: true,
      playCommandInterval: 0.3,
      recordNotification: true,
      recordClickType: 'click',
      logFilter: 'All',
      onErrorInLoop: 'continue_next_loop',
      defaultVisionSearchConfidence: 0.8,
      // Run macros from outside
      allowRunFromBookmark: true,
      allowRunFromFileSchema: true,
      allowRunFromHttpSchema: false,
      // timeout in seconds
      timeoutPageLoad: 60,
      timeoutElement: 10,
      timeoutMacro: 900,
      timeoutDownload: 60,
      // backup relative
      lastBackupActionTime: new Date() * 1,
      enableAutoBackup: true,
      autoBackupInterval: 7,
      autoBackupTestCases: true,
      autoBackupTestSuites: true,
      autoBackupScreenshots: true,
      autoBackupCSVFiles: true,
      autoBackupVisionImages: true,
      // security relative
      shouldEncryptPassword: 'no',
      masterPassword: '',
      // variable relative
      showCommonInternalVariables: true,
      showAdvancedInternalVariables: false
    }, config);
    store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["updateConfig"])(cfg));
  });
};

var restoreCSV = function restoreCSV() {
  Object(_common_csv_man__WEBPACK_IMPORTED_MODULE_21__["getCSVMan"])({ baseDir: 'spreadsheets' });
  store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["listCSV"])());
};

var restoreScreenshots = function restoreScreenshots() {
  Object(_common_screenshot_man__WEBPACK_IMPORTED_MODULE_22__["getScreenshotMan"])({ baseDir: 'screenshots' });
  store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["listScreenshots"])());
};

var restoreVisions = function restoreVisions() {
  Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_23__["getVisionMan"])({ baseDir: 'visions' });
  store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["listVisions"])());
};

var downloadTextFile = function downloadTextFile(text, fileName) {
  var blob = new Blob([text], { type: 'text/plain;charset=utf-8' });
  _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_6___default.a.saveAs(blob, fileName);
};

var genPlayerPlayCallback = function genPlayerPlayCallback(_ref) {
  var options = _ref.options;
  return function (err, reason) {
    if (options.savelog) {
      var logs = store.getState().logs;
      var errorLog = logs.find(function (log) {
        return log.type === 'error' && !(log.options && log.options.ignored);
      });
      var error = err || errorLog && { message: errorLog.text };
      var logTitle = error ? 'Status=Error: ' + error.message : 'Status=OK';
      var logContent = logs.map(_common_macro_log__WEBPACK_IMPORTED_MODULE_20__["renderLog"]);
      var text = [logTitle, '###'].concat(_toConsumableArray(logContent)).join('\n');
      downloadTextFile(text, decodeURIComponent(options.savelog));
    }

    if (options.close) {
      // Close all tabs If close option is set
      setTimeout(function () {
        _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_11__["default"].ask('PANEL_CLOSE_ALL_WINDOWS', {});
      }, 1000);
    }

    if (!err && reason === _common_player__WEBPACK_IMPORTED_MODULE_25__["Player"].C.END_REASON.COMPLETE) {
      // Close kantu panel
      setTimeout(function () {
        window.close();
      }, 1000);
    }
  };
};

var bindIpcEvent = function bindIpcEvent() {
  _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_11__["default"].onAsk(function (cmd, args) {
    Object(_common_log__WEBPACK_IMPORTED_MODULE_19__["default"])(cmd, args);

    switch (cmd) {
      case 'INSPECT_RESULT':
        store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["doneInspecting"])());
        store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["updateSelectedCommand"])({
          target: args.locatorInfo.target,
          targetOptions: args.locatorInfo.targetOptions
        }));
        return true;

      case 'RECORD_ADD_COMMAND':
        Object(_common_log__WEBPACK_IMPORTED_MODULE_19__["default"])('got add command', cmd, args);
        store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["appendCommand"])(args, true));
        return true;

      case 'TIMEOUT_STATUS':
        if (store.getState().status !== _common_constant__WEBPACK_IMPORTED_MODULE_18__["APP_STATUS"].PLAYER) return false;

        store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["setTimeoutStatus"])(args));
        return true;

      case 'RUN_TEST_CASE':
        {
          var state = store.getState();
          if (state.status !== _common_constant__WEBPACK_IMPORTED_MODULE_18__["APP_STATUS"].NORMAL) {
            antd_lib_message__WEBPACK_IMPORTED_MODULE_0___default.a.error('can only run macros when it is not recording or playing');
            return false;
          }

          var testCase = args.testCase,
              options = args.options;

          var tc = state.editor.testCases.find(function (tc) {
            return tc.name === testCase.name;
          });
          if (!tc) {
            antd_lib_message__WEBPACK_IMPORTED_MODULE_0___default.a.error('no macro found with name \'' + testCase.name + '\'');
            return false;
          }

          var openTc = tc.data.commands.find(function (item) {
            return item.cmd.toLowerCase() === 'open';
          });

          store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["editTestCase"])(tc.id));
          store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["playerPlay"])({
            title: testCase.name,
            extra: {
              id: tc && tc.id
            },
            mode: _common_player__WEBPACK_IMPORTED_MODULE_25__["Player"].C.MODE.STRAIGHT,
            startIndex: 0,
            startUrl: openTc ? openTc.target : null,
            resources: tc.data.commands,
            postDelay: state.player.playInterval * 1000,
            callback: genPlayerPlayCallback({ options: options })
          }));

          store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["updateUI"])({ sidebarTab: 'macros' }));
          return true;
        }

      case 'RUN_TEST_SUITE':
        {
          var _state = store.getState();
          if (_state.status !== _common_constant__WEBPACK_IMPORTED_MODULE_18__["APP_STATUS"].NORMAL) {
            antd_lib_message__WEBPACK_IMPORTED_MODULE_0___default.a.error('can only run test suites when it is not recording or playing');
            return false;
          }

          var testSuite = args.testSuite,
              _options = args.options;

          var ts = _state.editor.testSuites.find(function (ts) {
            return ts.name === testSuite.name;
          });
          if (!ts) {
            antd_lib_message__WEBPACK_IMPORTED_MODULE_0___default.a.error('no macro found with name \'' + testSuite.name + '\'');
            return false;
          }

          Object(_common_player__WEBPACK_IMPORTED_MODULE_25__["getPlayer"])({ name: 'testSuite' }).play({
            title: ts.name,
            extra: {
              id: ts.id,
              name: ts.name
            },
            mode: Object(_common_player__WEBPACK_IMPORTED_MODULE_25__["getPlayer"])().C.MODE.STRAIGHT,
            startIndex: 0,
            resources: ts.cases.map(function (item) {
              return {
                id: item.testCaseId,
                loops: item.loops
              };
            }),
            callback: genPlayerPlayCallback({ options: _options })
          });

          store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["updateUI"])({ sidebarTab: 'test_suites' }));
          return true;
        }

      case 'IMPORT_HTML_AND_RUN':
        {
          var _options2 = args.options;

          var _testCase = void 0;

          try {
            _testCase = Object(_common_convert_utils__WEBPACK_IMPORTED_MODULE_16__["fromHtml"])(args.html);
          } catch (e) {
            antd_lib_message__WEBPACK_IMPORTED_MODULE_0___default.a.error('Failed to parse html', 1.5);
            return false;
          }

          store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["upsertTestCase"])(_testCase));

          return Object(_common_utils__WEBPACK_IMPORTED_MODULE_15__["delay"])(function () {
            var state = store.getState();
            var tc = state.editor.testCases.find(function (tc) {
              return tc.name === _testCase.name;
            });
            var openTc = tc.data.commands.find(function (item) {
              return item.cmd.toLowerCase() === 'open';
            });

            store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["editTestCase"])(tc.id));
            store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["playerPlay"])({
              title: tc.name,
              extra: {
                id: tc && tc.id
              },
              mode: _common_player__WEBPACK_IMPORTED_MODULE_25__["Player"].C.MODE.STRAIGHT,
              startIndex: 0,
              startUrl: openTc ? openTc.target : null,
              resources: tc.data.commands,
              postDelay: state.player.playInterval * 1000,
              callback: genPlayerPlayCallback({ options: _options2 })
            }));
            return true;
          }, 1000).catch(function (e) {
            _common_log__WEBPACK_IMPORTED_MODULE_19__["default"].error(e.stack);
            throw e;
          });
        }

      case 'ADD_VISION_IMAGE':
        {
          var dataUrl = args.dataUrl;

          var fileName = Object(_common_utils__WEBPACK_IMPORTED_MODULE_15__["randomName"])() + '_dpi_' + Object(_common_utils__WEBPACK_IMPORTED_MODULE_15__["getScreenDpi"])() + '.png';
          var man = Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_23__["getVisionMan"])();

          man.write(fileName, Object(_common_utils__WEBPACK_IMPORTED_MODULE_15__["dataURItoBlob"])(dataUrl)).then(restoreVisions).catch(function (e) {
            return _common_log__WEBPACK_IMPORTED_MODULE_19__["default"].error(e.stack);
          });

          return { fileName: fileName };
        }

      case 'RESTORE_SCREENSHOTS':
        {
          restoreScreenshots();
          return true;
        }

      case 'UPDATE_ACTIVE_TAB':
        {
          updatePageTitle(args);
          return true;
        }

      case 'ADD_LOG':
        {
          if (!args) return false;
          if (args.info) store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["addLog"])('info', args.info, args.options));
          if (args.warning) store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["addLog"])('warning', args.warning));
          if (args.error) store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["addLog"])('error', args.error));

          return true;
        }
    }
  });
};

var bindWindowEvents = function bindWindowEvents() {
  // reset status to normal when panel closed
  window.addEventListener('beforeunload', function () {
    _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_11__["default"].ask('PANEL_STOP_RECORDING', {});
    _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_11__["default"].ask('PANEL_STOP_PLAYING', {});
  });

  window.addEventListener('resize', function () {
    var size = {
      width: window.outerWidth,
      height: window.outerHeight
    };
    var state = store.getState();
    store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["updateConfig"])({
      size: _extends({}, state.config.size, _defineProperty({}, state.config.showSidebar ? 'with_sidebar' : 'standard', size))
    }));
  });
};

var bindVariableChange = function bindVariableChange() {
  // Note: bind to onChange in next tick, to make sure vars instance is already initialized
  // so that `bindVariableChange` could be executed before `initPlayer`
  setTimeout(function () {
    Object(_common_variables__WEBPACK_IMPORTED_MODULE_24__["getVarsInstance"])().onChange(function (_ref2) {
      var vars = _ref2.vars;

      var variables = Object.keys(vars).map(function (key) {
        return { key: key, value: vars[key] };
      });
      store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["setVariables"])(variables));
    });
  }, 0);
};

var initSaveTestCase = function initSaveTestCase() {
  Object(_components_save_test_case__WEBPACK_IMPORTED_MODULE_26__["default"])(store);
};

var updatePageTitle = function updatePageTitle(args) {
  // Note: Firefox includes page url in title, there could be not enough space for tab title
  if (_common_web_extension__WEBPACK_IMPORTED_MODULE_10___default.a.isFirefox()) return true;
  var origTitle = document.title.replace(/ - .*$/, '');
  document.title = origTitle + ' - (Tab: ' + args.title + ')';
};

var preinstall = function preinstall() {
  Object(_common_log__WEBPACK_IMPORTED_MODULE_19__["default"])('PREINSTALL_CSV_LIST', ["preinstall/csv/readcsvtestdata.csv"]);
  Object(_common_log__WEBPACK_IMPORTED_MODULE_19__["default"])('PREINSTALL_VISION_LIST', ["preinstall/vision/canvas_3dots_verify_dpi_96.png","preinstall/vision/canvas_hydepark_dpi_96.png","preinstall/vision/canvas_hydepark_verify_dpi_96.png","preinstall/vision/canvas_wyoming_dpi_96.png","preinstall/vision/canvas_wyoming_verify_dpi_96.png","preinstall/vision/democv_checkoverlay.png","preinstall/vision/democv_ocrdone.png","preinstall/vision/democv_share.png","preinstall/vision/democv_startocr.png","preinstall/vision/uitest_download_dpi_96.png","preinstall/vision/uitest_hamburger_dpi_96.png","preinstall/vision/uitest_logo_mobile_dpi_96.png","preinstall/vision/uitest_logo_wide_dpi_96.png","preinstall/vision/uitest_share_dpi_96.png"]);

  // Preinstall macros and test suites
  _common_storage__WEBPACK_IMPORTED_MODULE_14__["default"].get('preinstall').then(function (val) {
    if (val) return;
    if (!_config_preinstall_macros__WEBPACK_IMPORTED_MODULE_27__["default"] || !Object.keys(_config_preinstall_macros__WEBPACK_IMPORTED_MODULE_27__["default"]).length) return;

    var tcs = Object.keys(_config_preinstall_macros__WEBPACK_IMPORTED_MODULE_27__["default"]).map(function (key) {
      var str = JSON.stringify(_config_preinstall_macros__WEBPACK_IMPORTED_MODULE_27__["default"][key]);
      return Object(_common_convert_utils__WEBPACK_IMPORTED_MODULE_16__["fromJSONString"])(str, key);
    });
    store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["addTestCases"])(tcs));

    // Note: test cases need to be save to indexed db before it reflects in store
    // so it may take some time before we can preinstall test suites
    setTimeout(function () {
      var state = store.getState();

      var tss = _config_preinstall_suites__WEBPACK_IMPORTED_MODULE_28__["default"].map(function (ts) {
        return Object(_common_convert_suite_utils__WEBPACK_IMPORTED_MODULE_17__["parseTestSuite"])(JSON.stringify(ts), state.editor.testCases);
      });
      store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["addTestSuites"])(tss));

      return _common_storage__WEBPACK_IMPORTED_MODULE_14__["default"].set('preinstall', 'done');
    }, 1000);
  });

  // Preinstall csv
  _common_storage__WEBPACK_IMPORTED_MODULE_14__["default"].get('preinstall_csv').then(function (val) {
    if (val) return;

    var list = ["preinstall/csv/readcsvtestdata.csv"];
    if (list.length === 0) return;

    var man = Object(_common_csv_man__WEBPACK_IMPORTED_MODULE_21__["getCSVMan"])();
    var ps = list.map(function (url) {
      var parts = url.split('/');
      var fileName = parts[parts.length - 1];

      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_15__["loadCsv"])(url).then(function (text) {
        return man.write(fileName, text);
      });
    });

    return Promise.resolve(ps)
    // Note: delay needed for Firefox and slow Chrome
    .then(function () {
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_15__["delay"])(function () {}, 3000);
    }).then(function () {
      store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["listCSV"])());
    });
  }).then(function () {
    return _common_storage__WEBPACK_IMPORTED_MODULE_14__["default"].set('preinstall_csv', 'done');
  });

  // Preinstall vision images
  _common_storage__WEBPACK_IMPORTED_MODULE_14__["default"].get('preinstall_vision').then(function (val) {
    if (val) return;

    var list = ["preinstall/vision/canvas_3dots_verify_dpi_96.png","preinstall/vision/canvas_hydepark_dpi_96.png","preinstall/vision/canvas_hydepark_verify_dpi_96.png","preinstall/vision/canvas_wyoming_dpi_96.png","preinstall/vision/canvas_wyoming_verify_dpi_96.png","preinstall/vision/democv_checkoverlay.png","preinstall/vision/democv_ocrdone.png","preinstall/vision/democv_share.png","preinstall/vision/democv_startocr.png","preinstall/vision/uitest_download_dpi_96.png","preinstall/vision/uitest_hamburger_dpi_96.png","preinstall/vision/uitest_logo_mobile_dpi_96.png","preinstall/vision/uitest_logo_wide_dpi_96.png","preinstall/vision/uitest_share_dpi_96.png"];
    if (list.length === 0) return;

    var man = Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_23__["getVisionMan"])();
    var ps = list.map(function (url) {
      var parts = url.split('/');
      var fileName = parts[parts.length - 1];

      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_15__["loadImage"])(url).then(function (blob) {
        return man.write(fileName, blob);
      });
    });

    return Promise.resolve(ps)
    // Note: delay needed for Firefox and slow Chrome
    .then(function () {
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_15__["delay"])(function () {}, 3000);
    }).then(function () {
      store.dispatch(Object(_actions__WEBPACK_IMPORTED_MODULE_29__["listVisions"])());
    });
  }).then(function () {
    return _common_storage__WEBPACK_IMPORTED_MODULE_14__["default"].set('preinstall_vision', 'done');
  });
};

bindDB();
bindIpcEvent();
bindWindowEvents();
bindVariableChange();
Object(_init_player__WEBPACK_IMPORTED_MODULE_9__["initPlayer"])(store);
restoreEditing();
restoreConfig();
restoreCSV();
restoreScreenshots();
restoreVisions();
initSaveTestCase();
preinstall();

_common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_11__["default"].ask('I_AM_PANEL', {});

document.title = document.title + ' ' + _common_web_extension__WEBPACK_IMPORTED_MODULE_10___default.a.runtime.getManifest().version;

_common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_11__["default"].ask('PANEL_CURRENT_PLAY_TAB_INFO').then(updatePageTitle);

render(_app__WEBPACK_IMPORTED_MODULE_7__["default"]);

/***/ }),

/***/ "./src/init_player.js":
/*!****************************!*\
  !*** ./src/init_player.js ***!
  \****************************/
/*! exports provided: initPlayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initPlayer", function() { return initPlayer; });
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/variables */ "./src/common/variables.js");
/* harmony import */ var _common_interpreter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common/interpreter */ "./src/common/interpreter.js");
/* harmony import */ var _common_csv_man__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common/csv_man */ "./src/common/csv_man.js");
/* harmony import */ var _common_csv__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common/csv */ "./src/common/csv.js");
/* harmony import */ var _common_player__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common/player */ "./src/common/player.js");
/* harmony import */ var _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./common/ipc/ipc_cs */ "./src/common/ipc/ipc_cs.js");
/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./common/log */ "./src/common/log.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./common/utils */ "./src/common/utils.js");
/* harmony import */ var _common_constant__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./common/constant */ "./src/common/constant.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./actions */ "./src/actions/index.js");
/* harmony import */ var _common_screenshot_man__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./common/screenshot_man */ "./src/common/screenshot_man.js");
/* harmony import */ var _common_vision_man__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./common/vision_man */ "./src/common/vision_man.js");
/* harmony import */ var _common_web_extension__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./common/web_extension */ "./src/common/web_extension.js");
/* harmony import */ var _common_web_extension__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_common_web_extension__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./common/lib/file_saver */ "./src/common/lib/file_saver.js");
/* harmony import */ var _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_common_lib_file_saver__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _common_macro_log__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./common/macro_log */ "./src/common/macro_log.js");



var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

















var TimeTracker = function () {
  function TimeTracker() {
    _classCallCheck(this, TimeTracker);

    this.reset();
  }

  _createClass(TimeTracker, [{
    key: 'reset',
    value: function reset() {
      this.startTime = new Date();
    }
  }, {
    key: 'elapsed',
    value: function elapsed() {
      return new Date() - this.startTime;
    }
  }, {
    key: 'elapsedInSeconds',
    value: function elapsedInSeconds() {
      var diff = this.elapsed();
      return (diff / 1000).toFixed(2) + 's';
    }
  }]);

  return TimeTracker;
}();

var Timeout = function () {
  function Timeout(callback) {
    _classCallCheck(this, Timeout);

    this.callback = callback;
  }

  _createClass(Timeout, [{
    key: 'reset',
    value: function reset(callback) {
      this.cancel();

      if (callback) {
        this.callback = callback;
      }

      this.timer = null;
      this.timeout = null;
      this.startTime = null;
    }
  }, {
    key: 'restart',
    value: function restart(newTimeout) {
      if (!this.timeout) {
        this.timeout = newTimeout;
        this.startTime = new Date();
        this.timer = setTimeout(this.callback, this.timeout);
      } else {
        var past = new Date() * 1 - this.startTime * 1;
        var rest = newTimeout - past;

        clearTimeout(this.timer);

        if (rest < 0) return this.callback();

        this.timeout = newTimeout;
        this.timer = setTimeout(this.callback, rest);
      }
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      clearTimeout(this.timer);
    }
  }]);

  return Timeout;
}();

var replaceEscapedChar = function replaceEscapedChar(str, command, field) {
  if (['storeEval', 'gotoIf', 'if', 'while'].indexOf(command.cmd) !== -1 && field === 'target') {
    return str;
  }

  return [[/\\n/g, '\n'], [/\\t/g, '\t']].reduce(function (prev, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        reg = _ref2[0],
        c = _ref2[1];

    return prev.replace(reg, c);
  }, str);
};

var retryIfHeartBeatExpired = function retryIfHeartBeatExpired(mainFunc) {
  var runWithHeartBeat = function runWithHeartBeat() {
    var stop = false;

    var infiniteCheckHeartBeat = function () {
      var startTime = new Date().getTime();
      var stop = false;
      var lastSecret = null;

      var fn = function fn() {
        Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('start to send heart beat to background');
        if (stop) return Promise.resolve();

        return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_HEART_BEAT', {}, 300).then(function (secret) {
          // Note: secret === -1 means no heart beat available
          if (secret === -1) return new Promise(function () {});

          if (secret === lastSecret) {
            throw new Error('lost background heart beat when running command');
          } else {
            lastSecret = secret;
          }

          return Object(_common_utils__WEBPACK_IMPORTED_MODULE_8__["delay"])(function () {}, 3000).then(fn);
        }, function (e) {
          _common_log__WEBPACK_IMPORTED_MODULE_7__["default"].error('lost background heart beart!!', e.stack);
          throw new Error('lost background heart beat when running command');
        });
      };
      fn.stop = function () {
        Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('stopping background heart beat');
        stop = true;
      };

      return fn;
    }();

    return Promise.race([mainFunc().then(function (data) {
      infiniteCheckHeartBeat.stop();
      return data;
    }).catch(function (e) {
      infiniteCheckHeartBeat.stop();
      throw e;
    }), infiniteCheckHeartBeat()]);
  };

  var retryFn = Object(_common_utils__WEBPACK_IMPORTED_MODULE_8__["retry"])(runWithHeartBeat, {
    timeout: 999999,
    shouldRetry: function shouldRetry(e, retryCount) {
      return e && e.message && e.message.indexOf('lost background heart beat when running command') !== -1 && retryCount < 10;
    }
  });

  return retryFn();
};

var interpretSpecialCommands = function interpretSpecialCommands(_ref3) {
  var store = _ref3.store,
      vars = _ref3.vars;

  var commandRunners = [interpretCSVCommands({ store: store, vars: vars }), interpretCsFreeCommands({ store: store, vars: vars })];

  return function (command, index) {
    return commandRunners.reduce(function (prev, cur) {
      if (prev !== undefined) return prev;
      return cur(command, index);
    }, undefined);
  };
};

var interpretCsFreeCommands = function interpretCsFreeCommands(_ref4) {
  var store = _ref4.store,
      vars = _ref4.vars;
  return function (command, index) {
    var csvMan = Object(_common_csv_man__WEBPACK_IMPORTED_MODULE_3__["getCSVMan"])();
    var ssMan = Object(_common_screenshot_man__WEBPACK_IMPORTED_MODULE_11__["getScreenshotMan"])();
    var cmd = command.cmd,
        target = command.target,
        value = command.value,
        extra = command.extra;

    var result = {
      isFlowLogic: true
    };

    Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('interpretCsFreeCommands', command);

    switch (cmd) {
      case 'store':
        {
          return {
            byPass: true,
            vars: _defineProperty({}, value, target)
          };
        }

      case 'echo':
        {
          var _extra = function () {
            if (value === '#shownotification') return { options: { notification: true } };
            if (value) return { options: { color: value } };
            return {};
          }();

          return {
            byPass: true,
            log: _extends({
              info: target
            }, _extra)
          };
        }

      case 'throwError':
        {
          throw new Error(target);
        }

      case 'pause':
        {
          var n = parseInt(target);

          if (!target || !target.length || n === 0) {
            return {
              byPass: true,
              control: {
                type: 'pause'
              }
            };
          }

          if (isNaN(n) || n < 0) {
            throw new Error('target of pause command must be a positive integer');
          }

          return Object(_common_utils__WEBPACK_IMPORTED_MODULE_8__["withCountDown"])({
            timeout: n,
            interval: 1000,
            onTick: function onTick(_ref5) {
              var total = _ref5.total,
                  past = _ref5.past;

              store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["setTimeoutStatus"]({
                past: past,
                total: total,
                type: 'pause'
              }));
            }
          }).then(function () {
            return { byPass: true };
          });
        }

      case 'localStorageExport':
        {
          var deleteAfterExport = /\s*#DeleteAfterExport\s*/i.test(value);

          if (/^\s*log\s*$/i.test(target)) {
            var text = store.getState().logs.map(_common_macro_log__WEBPACK_IMPORTED_MODULE_15__["renderLog"]).join('\n');
            _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_14___default.a.saveAs(new Blob([text]), 'kantu_log.txt');

            if (deleteAfterExport) {
              store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["clearLogs"]());
            }

            return result;
          }

          if (/\.csv$/i.test(target)) {
            return csvMan.exists(target).then(function (existed) {
              if (!existed) throw new Error(target + ' doesn\'t exist');

              return csvMan.read(target).then(function (text) {
                _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_14___default.a.saveAs(new Blob([text]), target);

                if (deleteAfterExport) {
                  csvMan.remove(target).then(function () {
                    return store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["listCSV"]());
                  });
                }

                return result;
              });
            });
          }

          if (/\.png$/i.test(target)) {
            return ssMan.exists(target).then(function (existed) {
              if (!existed) throw new Error(target + ' doesn\'t exist');

              return ssMan.read(target).then(function (buffer) {
                _common_lib_file_saver__WEBPACK_IMPORTED_MODULE_14___default.a.saveAs(new Blob([new Uint8Array(buffer)]), target);

                if (deleteAfterExport) {
                  ssMan.remove(target).then(function () {
                    return store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["listScreenshots"]());
                  });
                }

                return result;
              });
            });
          }

          throw new Error(target + ' doesn\'t exist');
        }

      case 'visualVerify':
      case 'visualAssert':
      case 'visualSearch':
      case 'visionFind':
        {
          if (cmd === 'visualSearch') {
            if (!value || !value.length) {
              throw new Error(cmd + ': Must specify a variable to save the result');
            }
          }

          var verifyPatternImage = function verifyPatternImage(fileName, command) {
            return Object(_common_vision_man__WEBPACK_IMPORTED_MODULE_12__["getVisionMan"])().exists(fileName).then(function (existed) {
              if (!existed) throw new Error(command + ': No input image found for file name \'' + fileName + '\'');
            });
          };

          var isNotVerifyOrAssert = ['visualVerify', 'visualAssert'].indexOf(cmd) === -1;

          var _target$split = target.split('@'),
              _target$split2 = _slicedToArray(_target$split, 2),
              visionFileName = _target$split2[0],
              confidence = _target$split2[1];

          var minSimilarity = confidence ? parseFloat(confidence) : store.getState().config.defaultVisionSearchConfidence;
          var searchArea = vars.get('!visualSearchArea');
          var timeout = vars.get('!TIMEOUT_WAIT') * 1000;

          var run = function run() {
            return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_CLEAR_VISION_RECTS_ON_PLAYING_PAGE')
            // #324 .then(() => delay(() => {}, 500))
            .then(function () {
              return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_SEARCH_VISION_ON_PLAYING_PAGE', {
                visionFileName: visionFileName,
                minSimilarity: minSimilarity,
                searchArea: searchArea,
                storedImageRect: vars.get('!storedImageRect'),
                command: cmd
              });
            }).then(function (regions) {
              Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('regions', regions);

              if (regions.length === 0) {
                throw new Error('Image \'' + visionFileName + '\' (conf. = ' + minSimilarity + ') not found');
              }

              var best = regions[0];
              _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_HIGHLIGHT_RECTS', { scoredRects: regions });

              return Object(_common_utils__WEBPACK_IMPORTED_MODULE_8__["delay"])(function () {
                return {
                  byPass: true,
                  vars: _extends({
                    '!imageX': best.left + best.width / 2,
                    '!imageY': best.top + best.height / 2
                  }, isNotVerifyOrAssert && value && value.length ? _defineProperty({}, value, regions.length) : {})
                };
              }, 100);
            });
          };
          var runWithRetry = Object(_common_utils__WEBPACK_IMPORTED_MODULE_8__["retry"])(run, {
            timeout: timeout,
            shouldRetry: function shouldRetry(e) {
              return store.getState().status === _common_constant__WEBPACK_IMPORTED_MODULE_9__["APP_STATUS"].PLAYER && /Image.*\(conf\. =.*\) not found/.test(e.message);
            },
            retryInterval: function retryInterval(retryCount, lastRetryInterval) {
              return 0.5 + 0.25 * retryCount;
            },
            onFirstFail: function onFirstFail() {
              _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_TIMEOUT_STATUS', { timeout: timeout, type: 'Vision waiting' });
            },
            onFinal: function onFinal() {
              _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_CLEAR_TIMEOUT_STATUS');
            }
          });

          return verifyPatternImage(visionFileName, cmd).then(function () {
            return runWithRetry().catch(function (e) {
              // Note: extra.throwError === true, when "Find" button is used
              if (cmd === 'visualAssert' || extra && extra.throwError) {
                throw e;
              }

              return _extends({
                byPass: true
              }, isNotVerifyOrAssert && value && value.length ? {
                vars: _defineProperty({}, value, 0)
              } : {}, cmd === 'visualVerify' ? {
                log: {
                  error: e.message
                }
              } : {});
            });
          });
        }

      case 'visionLimitSearchArea':
        {
          var area = target.trim();
          var p = Promise.resolve({ byPass: true });

          if (/^viewport$/.test(area)) {
            area = 'viewport';
          } else if (/^full$/.test(area)) {
            area = 'full';
          } else if (/^element:/.test(area)) {
            // Note: let cs page to process this case, it acts almost the same as a `storeImage` command
            p = Promise.resolve({ byPass: false });
          } else {
            throw new Error('Target of visionLimitSearchArea could only be either \'viewport\', \'full\' or \'element:...\'');
          }

          vars.set({ '!visualSearchArea': area }, true);
          return p;
        }

      case 'bringBrowserToForeground':
        {
          return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_BRING_PLAYING_WINDOW_TO_FOREGROUND').then(function () {
            return { byPass: true };
          });
        }

      case 'resize':
        {
          if (!/\s*\d+@\d+\s*/.test(target)) {
            throw new Error('Syntax for target of resize command is x@y, e.g. 800@600');
          }

          var _target$split3 = target.split('@'),
              _target$split4 = _slicedToArray(_target$split3, 2),
              strWidth = _target$split4[0],
              strHeight = _target$split4[1];

          var width = parseInt(strWidth, 10);
          var height = parseInt(strHeight, 10);

          Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('resize', width, height);
          return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_RESIZE_PLAY_TAB', { width: width, height: height }).then(function (_ref7) {
            var actual = _ref7.actual,
                desired = _ref7.desired,
                diff = _ref7.diff;

            if (diff.length === 0) return { byPass: true };

            return {
              byPass: true,
              log: {
                warning: 'Only able to resize it to ' + actual.width + '@' + actual.height + ', given ' + desired.width + '@' + desired.height
              }
            };
          });
        }

      default:
        return undefined;
    }
  };
};

var interpretCSVCommands = function interpretCSVCommands(_ref8) {
  var store = _ref8.store,
      vars = _ref8.vars;
  return function (command, index) {
    var csvMan = Object(_common_csv_man__WEBPACK_IMPORTED_MODULE_3__["getCSVMan"])();
    var cmd = command.cmd,
        target = command.target,
        value = command.value;


    switch (cmd) {
      case 'csvRead':
        {
          return csvMan.exists(target).then(function (isExisted) {
            if (!isExisted) {
              vars.set({ '!CsvReadStatus': 'FILE_NOT_FOUND' }, true);
              throw new Error('csv file \'' + target + '\' does not exist');
            }

            return csvMan.read(target).then(_common_csv__WEBPACK_IMPORTED_MODULE_4__["parseFromCSV"]).then(function (rows) {
              // Note: !CsvReadLineNumber starts from 1
              var index = vars.get('!CsvReadLineNumber') - 1;
              var row = rows[index];

              if (index >= rows.length) {
                vars.set({ '!CsvReadStatus': 'END_OF_FILE' }, true);
                throw new Error('end of csv file reached');
              } else {
                vars.set({
                  '!CsvReadStatus': 'OK',
                  '!CsvReadMaxRow': rows.length
                }, true);
              }

              vars.clear(/^!COL\d+$/i);

              row.forEach(function (data, i) {
                vars.set(_defineProperty({}, '!COL' + (i + 1), data));
              });
            });
          }).then(function () {
            return {
              isFlowLogic: true
            };
          });
        }

      case 'csvSave':
        {
          var csvLine = vars.get('!CSVLINE');

          if (!csvLine || !csvLine.length) {
            throw new Error('No data to save to csv');
          }

          return Object(_common_csv__WEBPACK_IMPORTED_MODULE_4__["stringifyToCSV"])([csvLine]).then(function (newLineText) {
            var fileName = /\.csv$/i.test(target) ? target : target + '.csv';

            return csvMan.exists(fileName).then(function (isExisted) {
              if (!isExisted) {
                return csvMan.write(fileName, newLineText);
              }

              return csvMan.read(fileName).then(function (originalText) {
                var text = (originalText + '\n' + newLineText).replace(/\n+/g, '\n');
                return csvMan.write(fileName, text);
              });
            });
          }).then(function () {
            vars.clear(/^!CSVLINE$/);
            store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["listCSV"]());
          }).then(function () {
            return {
              isFlowLogic: true
            };
          });
        }

      default:
        return undefined;
    }
  };
};

// Note: initialize the player, and listen to all events it emits
var initPlayer = function initPlayer(store) {
  var vars = Object(_common_variables__WEBPACK_IMPORTED_MODULE_1__["default"])();
  var interpreter = new _common_interpreter__WEBPACK_IMPORTED_MODULE_2__["default"]({ run: interpretSpecialCommands({ vars: vars, store: store }) });
  var tcPlayer = initTestCasePlayer({ store: store, vars: vars, interpreter: interpreter });
  var tsPlayer = initTestSuitPlayer({ store: store, tcPlayer: tcPlayer });

  // Note: No need to return anything in this method.
  // Because both test case player and test suite player are cached in player.js
  // All later usage of player utilize `getPlayer` method
};

var initTestCasePlayer = function initTestCasePlayer(_ref9) {
  var store = _ref9.store,
      vars = _ref9.vars,
      interpreter = _ref9.interpreter;

  var mainTracker = new TimeTracker();
  var loopTracker = new TimeTracker();
  var macroTimer = new Timeout(function () {
    return player.stopWithError(new Error('macro timeout ' + vars.get('!TIMEOUT_MACRO') + 's (change the value in the settings if needed)'));
  });
  var nextCommand = function nextCommand(playerState) {
    var resources = playerState.resources,
        nextIndex = playerState.nextIndex;

    return resources[nextIndex + 1];
  };
  // Note: use this to track `onError` command
  // `onError` works like a global try catch, it takes effects on any commands coming after `onError`
  // Multilple `onError` are allowed, latter one overwrites previous one.
  // The scope of `onError` is current loop
  var onErrorCommand = null;
  var player = Object(_common_player__WEBPACK_IMPORTED_MODULE_5__["getPlayer"])({
    prepare: function prepare(state) {
      // Each 'replay' has an independent variable scope,
      // with global variables as initial scope
      vars.reset({ keepGlobal: true });
      vars.set(state.public.scope || {}, true);
      vars.set({
        '!StatusOK': true,
        '!WaitForVisible': false,
        '!IMAGEX': 0,
        '!IMAGEY': 0
      });

      mainTracker.reset();
      loopTracker.reset();

      interpreter.reset();
      interpreter.preprocess(state.resources);

      return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_START_PLAYING', {
        url: state.startUrl,
        shouldNotActivateTab: true
      });
    },
    run: function run(command, state) {
      var useClipboard = /!clipboard/i.test(command.target + ';' + command.value);
      var prepare = !useClipboard ? Promise.resolve({ useClipboard: false }) : _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('GET_CLIPBOARD').then(function (clipboard) {
        return { useClipboard: true, clipboard: clipboard };
      });

      if (_common_web_extension__WEBPACK_IMPORTED_MODULE_13___default.a.isFirefox()) {
        switch (command.cmd) {
          case 'onDownload':
            store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('warning', 'onDownload - changing file names not supported by Firefox extension api yet'));
            break;
        }
      }

      return prepare.then(function (_ref10) {
        var useClipboard = _ref10.useClipboard,
            _ref10$clipboard = _ref10.clipboard,
            clipboard = _ref10$clipboard === undefined ? '' : _ref10$clipboard;

        // Set clipboard variable if it is used
        if (useClipboard) {
          vars.set({ '!CLIPBOARD': clipboard });
        }

        // Set loop in every run
        vars.set({
          '!LOOP': state.loopsCursor,
          '!RUNTIME': loopTracker.elapsedInSeconds()
        }, true);

        if (command.cmd === 'open') {
          command = _extends({}, command, { href: state.startUrl });
        }

        // Note: translate shorthand '#efp'
        if (command.target && /^#efp$/i.test(command.target.trim())) {
          // eslint-disable-next-line no-template-curly-in-string
          command.target = '#elementfrompoint (${!imageX}, ${!imageY})';
        }

        if (command.cmd !== 'comment') {
          // Replace variables in 'target' and 'value' of commands
          ;['target', 'value'].forEach(function (field) {
            if (command[field] === undefined) return;

            var opts = command.cmd === 'storeEval' && field === 'target' || command.cmd === 'gotoIf' && field === 'target' || command.cmd === 'if' && field === 'target' || command.cmd === 'while' && field === 'target' ? { withHashNotation: true } : {};

            command = _extends({}, command, _defineProperty({}, field, vars.render(replaceEscapedChar(command.cmd === 'type' ? command[field] : command[field].trim(), command, field), opts)));
          });
        }

        // add timeout info to each command's extra
        // Please note that we must set the timeout info at runtime for each command,
        // so that timeout could be modified by some 'store' commands and affect
        // the rest of commands
        command = Object(_common_utils__WEBPACK_IMPORTED_MODULE_8__["updateIn"])(['extra'], function (extra) {
          return _extends({}, extra || {}, {
            timeoutPageLoad: vars.get('!TIMEOUT_PAGELOAD'),
            timeoutElement: vars.get('!TIMEOUT_WAIT'),
            timeoutDownload: vars.get('!TIMEOUT_DOWNLOAD'),
            lastCommandOk: vars.get('!LASTCOMMANDOK'),
            errorIgnore: !!vars.get('!ERRORIGNORE'),
            waitForVisible: !!vars.get('!WAITFORVISIBLE')
          });
        }, command);

        // Note: all commands need to be run by interpreter before it is sent to bg
        // so that interpreter could pick those flow logic commands and do its job
        return interpreter.run(command, state.nextIndex).then(function (result) {
          var byPass = result.byPass,
              isFlowLogic = result.isFlowLogic,
              nextIndex = result.nextIndex,
              resetVars = result.resetVars;

          // Record onError command

          if (command.cmd === 'onError') {
            onErrorCommand = command;
          }

          if (byPass) return Promise.resolve(result);
          if (isFlowLogic) return Promise.resolve({ nextIndex: nextIndex });

          // Note: -1 will disable ipc timeout for 'pause' command
          var timeout = command.cmd === 'pause' ? -1 : null;

          return retryIfHeartBeatExpired(function () {
            return _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_RUN_COMMAND', { command: command }, timeout);
          });
        }).catch(function (e) {
          // Note: it will just log errors instead of a stop of whole macro, in following situations
          // 1. variable !ERRORIGNORE is set to true
          // 2. There is an `onError` command ahead in current loop.
          // 3. it's in loop mode, and it's not the last loop, and onErrorInLoop is continue_next_loop,
          if (vars.get('!ERRORIGNORE')) {
            return {
              log: {
                error: e.message
              }
            };
          }

          if (onErrorCommand) {
            var value = onErrorCommand.value && onErrorCommand.value.trim();
            var target = onErrorCommand.target && onErrorCommand.target.trim();

            if (/^#restart$/i.test(target)) {
              store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('status', 'onError - about to restart'));

              e.restart = true;
              throw e;
            } else if (/^#goto$/i.test(target)) {
              store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('status', 'onError - about to goto label \'' + value + '\''));

              return Promise.resolve({
                log: {
                  error: e.message
                },
                nextIndex: interpreter.commandIndexByLabel(value)
              });
            }
          }

          var continueNextLoop = state.mode === _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.MODE.LOOP && state.loopsCursor < state.loopsEnd && store.getState().config.onErrorInLoop === 'continue_next_loop';

          if (continueNextLoop) {
            return {
              log: {
                error: e.message
              },
              // Note: simply set nextIndex to command count, it will enter next loop
              nextIndex: state.resources.length
            };
          }

          // Note: set these status values to false
          // status of those logs above will be taken care of by `handleResult`
          vars.set({
            '!LastCommandOK': false,
            '!StatusOK': false
          }, true);

          throw e;
        });
      });
    },
    handleResult: function handleResult(result, command, state) {
      var prepares = [];
      var getCurrentPlayer = function getCurrentPlayer() {
        var state = store.getState();

        switch (state.player.mode) {
          case _common_constant__WEBPACK_IMPORTED_MODULE_9__["PLAYER_MODE"].TEST_CASE:
            return Object(_common_player__WEBPACK_IMPORTED_MODULE_5__["getPlayer"])({ name: 'testCase' });

          case _common_constant__WEBPACK_IMPORTED_MODULE_9__["PLAYER_MODE"].TEST_SUITE:
            return Object(_common_player__WEBPACK_IMPORTED_MODULE_5__["getPlayer"])({ name: 'testSuite' });
        }
      };

      // Every command should return its window.url
      if (result && result.pageUrl) {
        vars.set({ '!URL': result.pageUrl }, true);
      }

      if (result && result.vars) {
        var newVars = Object(_common_utils__WEBPACK_IMPORTED_MODULE_8__["objMap"])(function (val) {
          if (val.__undefined__) return undefined;
          return val;
        }, result.vars);

        Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('set vars', newVars);

        try {
          vars.set(newVars);

          // Note: if set value to !Clipboard, there is an async job we must get done before handleResult could return
          var clipBoardKey = Object.keys(result.vars).find(function (key) {
            return (/!clipboard/i.test(key)
            );
          });
          if (clipBoardKey) {
            prepares.push(_common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('SET_CLIPBOARD', { value: result.vars[clipBoardKey] }));
          }

          // Note: if user sets !timeout_macro to some other value, re-calculate the time left
          var timeoutMacroKey = Object.keys(result.vars).find(function (key) {
            return (/!timeout_macro/i.test(key)
            );
          });
          if (timeoutMacroKey) {
            macroTimer.restart(result.vars[timeoutMacroKey] * 1000);
          }
        } catch (e) {
          return Promise.reject(e);
        }
      }

      var hasError = false;

      if (result && result.log) {
        if (result.log.info) {
          store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('echo', result.log.info, result.log.options));

          if (result.log.options && result.log.options.notification) {
            _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_NOTIFY_ECHO', { text: result.log.info });
          }
        }

        if (result.log.warning) {
          store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('warning', result.log.warning, result.log.options));
        }

        if (result.log.error) {
          store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addPlayerErrorCommandIndex"](state.nextIndex));
          store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('error', result.log.error, { ignored: true }));
          hasError = true;
        }
      }

      // From spec: !StatusOK, very similar to !LastCommandOK but it does not get reset by a “good” command.
      // If set to error, it remains like this. But a user can use store | true | !StatusOK to manually reset it.
      if (command.cmd !== 'echo') {
        vars.set({ '!LastCommandOK': !hasError }, true);
      }

      if (hasError) {
        vars.set({ '!StatusOK': false }, true);
      }

      if (result && result.screenshot) {
        store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('info', 'a new screenshot captured'));

        Object(_common_screenshot_man__WEBPACK_IMPORTED_MODULE_11__["getScreenshotMan"])().getLink(result.screenshot.name).then(function (link) {
          return _extends({}, result.screenshot, {
            url: link
          });
        }).then(function (ss) {
          store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["listScreenshots"]());
        }).catch(function (e) {
          _common_log__WEBPACK_IMPORTED_MODULE_7__["default"].error('screenshot obj error 1', e);
          _common_log__WEBPACK_IMPORTED_MODULE_7__["default"].error('screenshot obj error stack', e.stack);
        });
      }

      if (result && result.control) {
        switch (result.control.type) {
          case 'pause':
            // Important: should only pause test case player, not test suite player
            // Because once test suite player is paused, it is supposed to run the test case from start again
            Object(_common_player__WEBPACK_IMPORTED_MODULE_5__["getPlayer"])({ name: 'testCase' }).pause();
            _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_NOTIFY_AUTO_PAUSE', {});
            break;

          default:
            throw new Error('Control type \'' + result.control.type + '\' not supported yet');
        }
      }

      if (/^(fast|medium|slow)$/i.test(vars.get('!REPLAYSPEED'))) {
        var val = vars.get('!REPLAYSPEED').toUpperCase();
        player.setPostDelay({
          FAST: 0,
          MEDIUM: 300,
          SLOW: 2000
        }[val]);
      }

      // For those flow logic that set nextIndex directly in Interpreter.run method
      if (result && result.nextIndex !== undefined) {
        return Promise.all(prepares).then(function () {
          return result.nextIndex;
        });
      }

      // For those flow logic that has to get result from bg
      // and return nextIndex in Interpreter.postRun
      return Promise.all(prepares).then(function () {
        return interpreter.postRun(command, state.nextIndex, result);
      }).then(function () {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return data.nextIndex;
      });
    }
  }, {
    preDelay: 0
  });

  player.on('BREAKPOINT', function () {
    _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_NOTIFY_BREAKPOINT', {});
  });

  player.on('LOOP_START', function (_ref11) {
    var loopsCursor = _ref11.loopsCursor;

    // Note: set 'csv read line number' to loops whenever a new loop starts
    vars.set({
      '!CsvReadLineNumber': loopsCursor,
      '!visualSearchArea': 'viewport'
    }, true);

    loopTracker.reset();

    // Note: reset macro timeout on each loop
    macroTimer.reset();
    macroTimer.restart(vars.get('!TIMEOUT_MACRO') * 1000);

    // Note: reset onErrorCommand on each loop
    onErrorCommand = null;
  });

  player.on('LOOP_RESTART', function (_ref12) {
    var currentLoop = _ref12.currentLoop,
        loopsCursor = _ref12.loopsCursor;

    _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_STOP_PLAYING', {});
    _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_START_PLAYING', { shouldNotActivateTab: true });
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('status', 'Current loop: ' + currentLoop));
  });

  player.on('START', function (_ref13) {
    var title = _ref13.title,
        loopsCursor = _ref13.loopsCursor;

    Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('START');

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["startPlaying"]());

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["setPlayerState"]({
      status: _common_constant__WEBPACK_IMPORTED_MODULE_9__["PLAYER_STATUS"].PLAYING,
      nextCommandIndex: null,
      errorCommandIndices: [],
      doneCommandIndices: []
    }));

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('status', 'Playing macro ' + title));
  });

  player.on('PAUSED', function () {
    Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('PAUSED');
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["setPlayerState"]({
      status: _common_constant__WEBPACK_IMPORTED_MODULE_9__["PLAYER_STATUS"].PAUSED
    }));

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('status', 'Macro paused'));
  });

  player.on('RESUMED', function () {
    Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('RESUMED');
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["setPlayerState"]({
      status: _common_constant__WEBPACK_IMPORTED_MODULE_9__["PLAYER_STATUS"].PLAYING
    }));

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('status', 'Macro resumed'));
  });

  player.on('END', function (obj) {
    var _logMsg;

    Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('END', obj);

    macroTimer.cancel();

    _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_STOP_PLAYING', {});

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["stopPlaying"]());

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["setPlayerState"]({
      status: _common_constant__WEBPACK_IMPORTED_MODULE_9__["PLAYER_STATUS"].STOPPED,
      stopReason: obj.reason,
      nextCommandIndex: null,
      timeoutStatus: null
    }));

    var tcId = obj.extra && obj.extra.id;

    switch (obj.reason) {
      case player.C.END_REASON.COMPLETE:
        if (tcId) store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["updateTestCasePlayStatus"](tcId, _common_constant__WEBPACK_IMPORTED_MODULE_9__["TEST_CASE_STATUS"].SUCCESS));
        antd_lib_message__WEBPACK_IMPORTED_MODULE_0___default.a.success('Macro completed running', 1.5);
        break;

      case player.C.END_REASON.ERROR:
        if (tcId) store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["updateTestCasePlayStatus"](tcId, _common_constant__WEBPACK_IMPORTED_MODULE_9__["TEST_CASE_STATUS"].ERROR));
        antd_lib_message__WEBPACK_IMPORTED_MODULE_0___default.a.error('Macro encountered some error', 1.5);
        break;
    }

    var logMsg = (_logMsg = {}, _defineProperty(_logMsg, player.C.END_REASON.COMPLETE, 'Macro completed'), _defineProperty(_logMsg, player.C.END_REASON.ERROR, 'Macro failed'), _defineProperty(_logMsg, player.C.END_REASON.MANUAL, 'Macro was stopped manually'), _logMsg);

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('info', logMsg[obj.reason] + (' (Runtime ' + mainTracker.elapsedInSeconds() + ')')));

    // Note: show in badage the play result
    if (obj.reason === player.C.END_REASON.COMPLETE || obj.reason === player.C.END_REASON.ERROR) {
      _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_UPDATE_BADGE', _extends({
        type: 'play',
        blink: 5000,
        text: obj.reason === player.C.END_REASON.COMPLETE ? 'done' : 'err'
      }, obj.reason === player.C.END_REASON.COMPLETE ? {} : { color: 'orange' }));
    }
  });

  player.on('TO_PLAY', function (_ref14) {
    var index = _ref14.index,
        currentLoop = _ref14.currentLoop,
        loops = _ref14.loops,
        resource = _ref14.resource;

    Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('TO_PLAY', index, resource);
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["setPlayerState"]({
      timeoutStatus: null,
      nextCommandIndex: index,
      currentLoop: currentLoop,
      loops: loops
    }));

    var triple = [resource.cmd, resource.target, resource.value];
    var str = [''].concat(triple, ['']).join(' | ');
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('reflect', 'Executing: ' + str));

    // Note: show in badage the current command index (start from 1)
    _common_ipc_ipc_cs__WEBPACK_IMPORTED_MODULE_6__["default"].ask('PANEL_UPDATE_BADGE', {
      type: 'play',
      text: '' + (index + 1)
    });
  });

  player.on('PLAYED_LIST', function (_ref15) {
    var indices = _ref15.indices;

    Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('PLAYED_LIST', indices);
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["setPlayerState"]({
      doneCommandIndices: indices
    }));
  });

  player.on('ERROR', function (_ref16) {
    var errorIndex = _ref16.errorIndex,
        msg = _ref16.msg,
        restart = _ref16.restart;

    _common_log__WEBPACK_IMPORTED_MODULE_7__["default"].error('command index: ' + errorIndex + ', Error: ' + msg);
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addPlayerErrorCommandIndex"](errorIndex));
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('error', msg));

    // Note: restart this player if restart is set to true in error, and it's not in test suite mode
    // Delay the execution so that 'END' event is emitted, and player is in stopped state
    if (restart && store.getState().player.mode === _common_constant__WEBPACK_IMPORTED_MODULE_9__["PLAYER_MODE"].TEST_CASE) {
      setTimeout(function () {
        return player.replayLastConfig();
      }, 50);
    }
  });

  player.on('DELAY', function (_ref17) {
    var total = _ref17.total,
        past = _ref17.past;

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["setPlayerState"]({
      timeoutStatus: {
        type: 'delay',
        total: total,
        past: past
      }
    }));
  });

  return player;
};

var initTestSuitPlayer = function initTestSuitPlayer(_ref18) {
  var store = _ref18.store,
      tcPlayer = _ref18.tcPlayer;

  var tsTracker = new TimeTracker();
  var tcTracker = new TimeTracker();
  var state = {
    isPlaying: false,
    tsId: null,
    lastErrMsg: '',
    testCasePromiseHandlers: null,
    reports: [],
    stopReason: null

  };
  var setState = function setState(st) {
    state = _extends({}, state, st);
  };
  var addReport = function addReport(report) {
    setState({
      reports: state.reports.concat(report)
    });
  };
  var tsPlayer = Object(_common_player__WEBPACK_IMPORTED_MODULE_5__["getPlayer"])({
    name: 'testSuite',
    prepare: function prepare() {
      setState({
        isPlaying: true,
        reports: []
      });
    },
    run: function run(testCase, playerState) {
      var tcId = testCase.id;
      var tcLoops = testCase.loops > 1 ? parseInt(testCase.loops, 10) : 1;
      var state = store.getState();
      var tcs = state.editor.testCases;
      var tc = tcs.find(function (tc) {
        return tc.id === tcId;
      });
      var openTc = tc && tc.data.commands.find(function (c) {
        return c.cmd.toLowerCase() === 'open';
      });

      if (!tc) {
        throw new Error('macro does not exist');
      }

      // update editing && start to play tcPlayer
      store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["editTestCase"](tc.id));
      store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["playerPlay"]({
        title: tc.name,
        extra: {
          id: tc.id,
          name: tc.name,
          shouldNotActivateTab: true
        },
        mode: tcLoops === 1 ? _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.MODE.STRAIGHT : _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.MODE.LOOP,
        loopsStart: 1,
        loopsEnd: tcLoops,
        startIndex: 0,
        startUrl: openTc ? openTc.target : null,
        resources: tc.data.commands,
        postDelay: state.config.playCommandInterval * 1000
      }));

      return new Promise(function (resolve, reject) {
        setState({
          testCasePromiseHandlers: { resolve: resolve, reject: reject }
        });
      });
    },
    handleResult: function handleResult(result, testCase, state) {
      // return undefined, so that player will play the next one
      return Promise.resolve(undefined);
    }
  }, { preDelay: 0 });

  tsPlayer.on('START', function (_ref19) {
    var title = _ref19.title,
        extra = _ref19.extra;

    Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('START SUITE');
    tsTracker.reset();

    setState({
      tsId: extra.id,
      isPlaying: true,
      stopReason: null
    });

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('status', 'Playing test suite ' + title));
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["setPlayerMode"](_common_constant__WEBPACK_IMPORTED_MODULE_9__["PLAYER_MODE"].TEST_SUITE));
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["updateTestSuite"](extra.id, function (ts) {
      return _extends({}, ts, {
        playStatus: {
          isPlaying: true,
          currentIndex: -1,
          errorIndices: [],
          doneIndices: []
        }
      });
    }));
  });

  tsPlayer.on('PAUSED', function (_ref20) {
    var extra = _ref20.extra;

    Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('PAUSED SUITE');
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('status', 'Test suite paused'));
    tcPlayer.pause();
  });

  tsPlayer.on('RESUMED', function (_ref21) {
    var extra = _ref21.extra;

    Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('RESUMED SUIITE');
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('status', 'Test suite resumed'));
    tcPlayer.resume();
  });

  tsPlayer.on('TO_PLAY', function (_ref22) {
    var index = _ref22.index,
        extra = _ref22.extra;

    tcTracker.reset();

    setState({
      lastErrMsg: '',
      tcIndex: index
    });

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["updateTestSuite"](extra.id, function (ts) {
      return _extends({}, ts, {
        playStatus: _extends({}, ts.playStatus, {
          currentIndex: index
        })
      });
    }));
  });

  tsPlayer.on('PLAYED_LIST', function (_ref23) {
    var indices = _ref23.indices,
        extra = _ref23.extra;

    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["updateTestSuite"](extra.id, function (ts) {
      return _extends({}, ts, {
        playStatus: _extends({}, ts.playStatus, {
          doneIndices: indices
        })
      });
    }));
  });

  tsPlayer.on('END', function (_ref24) {
    var reason = _ref24.reason,
        extra = _ref24.extra,
        opts = _ref24.opts;

    if (!state.isPlaying) return;

    setState({
      isPlaying: false
    });

    // Note: reset player mode to 'test case', it will only be 'test suite'
    // during replays of test suites
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["setPlayerMode"](_common_constant__WEBPACK_IMPORTED_MODULE_9__["PLAYER_MODE"].TEST_CASE));
    store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["updateTestSuite"](extra.id, function (ts) {
      return _extends({}, ts, {
        playStatus: _extends({}, ts.playStatus, {
          isPlaying: false,
          currentIndex: -1
        })
      });
    }));

    if (reason === _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.END_REASON.MANUAL && (!opts || !opts.tcPlayerStopped)) {
      tcPlayer.stop();
    }

    // Note: give it some time, in case we're stopping tc player above
    setTimeout(function () {
      var _statusMap;

      var totalCount = state.reports.length;
      var failureCount = state.reports.filter(function (r) {
        return r.stopReason === _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.END_REASON.ERROR;
      }).length;
      var successCount = totalCount - failureCount;

      var statusMap = (_statusMap = {}, _defineProperty(_statusMap, _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.END_REASON.MANUAL, 'Manually stopped'), _defineProperty(_statusMap, _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.END_REASON.COMPLETE, 'OK'), _defineProperty(_statusMap, _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.END_REASON.ERROR, 'Error'), _statusMap);
      var tsStatus = statusMap[state.stopReason || reason];
      var lines = ['Test Suite name: ' + extra.name, 'Start Time: ' + tsTracker.startTime.toString(), 'Overall status: ' + tsStatus + ', Runtime: ' + tsTracker.elapsedInSeconds(), 'Macro run: ' + totalCount, 'Success: ' + successCount, 'Failure: ' + failureCount, 'Macro executed:'];

      state.reports.forEach(function (r) {
        var tcStatus = statusMap[r.stopReason] + (r.stopReason === _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.END_REASON.ERROR ? ': ' + r.errMsg : '');
        lines.push(r.name + ' (' + tcStatus + ', Runtime: ' + r.usedTime + ')');
      });

      store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["addLog"]('info', lines.join('\n')));
    }, 200);
  });

  // Test Case Player: we should handle cases when test case player stops automatically
  tcPlayer.on('END', function (_ref25) {
    var reason = _ref25.reason,
        extra = _ref25.extra;

    if (store.getState().player.mode !== _common_constant__WEBPACK_IMPORTED_MODULE_9__["PLAYER_MODE"].TEST_SUITE) return;

    addReport({
      id: extra.id,
      name: extra.name,
      errMsg: state.lastErrMsg,
      stopReason: reason,
      usedTime: tcTracker.elapsedInSeconds()
    });

    // Avoid a 'stop' loop between tsPlayer and tcPlayer
    switch (reason) {
      case _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.END_REASON.MANUAL:
        break;

      case _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.END_REASON.COMPLETE:
        state.testCasePromiseHandlers.resolve(true);
        break;

      case _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.END_REASON.ERROR:
        store.dispatch(_actions__WEBPACK_IMPORTED_MODULE_10__["updateTestSuite"](state.tsId, function (ts) {
          return _extends({}, ts, {
            playStatus: _extends({}, ts.playStatus, {
              errorIndices: ts.playStatus.errorIndices.concat([tsPlayer.state.nextIndex])
            })
          });
        }));

        setState({
          stopReason: _common_player__WEBPACK_IMPORTED_MODULE_5__["Player"].C.END_REASON.ERROR
        });

        // Updated on 2017-12-15, Even if there is error, test suite should move on to next macro
        // Note: tell tsPlayer not to trigger tcPlayer stop again
        // tsPlayer.stop({ tcPlayerStopped: true })
        state.testCasePromiseHandlers.resolve(true);
        break;
    }
  });

  tcPlayer.on('ERROR', function (_ref26) {
    var msg = _ref26.msg,
        restart = _ref26.restart;

    setState({
      lastErrMsg: msg
    });

    // Note: restart this player if restart is set to true in error, and it's not in test suite mode
    // Delay the execution so that 'END' event is emitted, and player is in stopped state
    //
    // Note that a couple moments after tcPlayer encounters an error and enter stopped state, it tries to set player mode
    // back to test case mode  (in tsPlayer 'END' event)
    if (restart && store.getState().player.mode === _common_constant__WEBPACK_IMPORTED_MODULE_9__["PLAYER_MODE"].TEST_SUITE) {
      setTimeout(function () {
        return tsPlayer.replayLastConfig();
      }, 50);
    }
  });

  return tsPlayer;
};

/***/ }),

/***/ "./src/models/db.js":
/*!**************************!*\
  !*** ./src/models/db.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ "./node_modules/dexie/dist/dexie.js");
/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dexie__WEBPACK_IMPORTED_MODULE_0__);


var db = new dexie__WEBPACK_IMPORTED_MODULE_0___default.a('selenium-ide');

db.version(1).stores({
  testCases: 'id,name,updateTime'
});

db.version(2).stores({
  testCases: 'id,name,updateTime',
  testSuites: 'id,name,updateTime'
});

db.open();

/* harmony default export */ __webpack_exports__["default"] = (db);

/***/ }),

/***/ "./src/models/test_case_model.js":
/*!***************************************!*\
  !*** ./src/models/test_case_model.js ***!
  \***************************************/
/*! exports provided: default, normalizeCommand, normalizeTestCase, commandWithoutBaseUrl, eliminateBaseUrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeCommand", function() { return normalizeCommand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeTestCase", function() { return normalizeTestCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "commandWithoutBaseUrl", function() { return commandWithoutBaseUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eliminateBaseUrl", function() { return eliminateBaseUrl; });
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/utils */ "./src/common/utils.js");
/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./db */ "./src/models/db.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };




var model = {
  table: _db__WEBPACK_IMPORTED_MODULE_1__["default"].testCases,
  list: function list() {
    return _db__WEBPACK_IMPORTED_MODULE_1__["default"].testCases.toArray();
  },
  insert: function insert(data) {
    if (!data.name) {
      throw new Error('Model TestCase - insert: missing name');
    }

    if (!data.data) {
      throw new Error('Model TestCase - insert: missing data');
    }

    data.updateTime = new Date() * 1;
    data.id = Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__["uid"])();
    return _db__WEBPACK_IMPORTED_MODULE_1__["default"].testCases.add(normalizeTestCase(data));
  },
  bulkInsert: function bulkInsert(tcs) {
    var list = tcs.map(function (data) {
      if (!data.name) {
        throw new Error('Model TestCase - insert: missing name');
      }

      if (!data.data) {
        throw new Error('Model TestCase - insert: missing data');
      }

      data.updateTime = new Date() * 1;
      data.id = Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__["uid"])();

      return normalizeTestCase(data);
    });

    return _db__WEBPACK_IMPORTED_MODULE_1__["default"].testCases.bulkAdd(list);
  },
  update: function update(id, data) {
    return _db__WEBPACK_IMPORTED_MODULE_1__["default"].testCases.update(id, normalizeTestCase(data));
  },
  remove: function remove(id) {
    return _db__WEBPACK_IMPORTED_MODULE_1__["default"].testCases.delete(id);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (model);

var normalizeCommand = function normalizeCommand(command) {
  return Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(['cmd', 'target', 'value'], command);
};

var normalizeTestCase = function normalizeTestCase(testCase) {
  return Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__["compose"])(Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__["on"])('data'), Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__["on"])('commands'), _common_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(normalizeCommand)(testCase);
};

var commandWithoutBaseUrl = function commandWithoutBaseUrl(baseUrl) {
  return function (command) {
    if (command.cmd !== 'open') return command;

    return _extends({}, command, {
      target: (baseUrl + '/' + command.target).replace(/\/+/g, '/')
    });
  };
};

var eliminateBaseUrl = function eliminateBaseUrl(testCase) {
  if (!testCase.baseUrl) return testCase;
  return Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__["compose"])(Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__["on"])('data'), Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__["on"])('commands'), _common_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(commandWithoutBaseUrl(testCase.baseUrl))(testCase);
};

/***/ }),

/***/ "./src/models/test_suite_model.js":
/*!****************************************!*\
  !*** ./src/models/test_suite_model.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/utils */ "./src/common/utils.js");
/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./db */ "./src/models/db.js");



var model = {
  table: _db__WEBPACK_IMPORTED_MODULE_1__["default"].testSuites,
  list: function list() {
    return _db__WEBPACK_IMPORTED_MODULE_1__["default"].testSuites.toArray();
  },
  insert: function insert(data) {
    if (!data.name) {
      throw new Error('Model TestSuite - insert: missing name');
    }

    if (!Array.isArray(data.cases)) {
      throw new Error('Model TestSuite - insert: cases should an array');
    }

    data.updateTime = new Date() * 1;
    data.id = Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__["uid"])();
    return _db__WEBPACK_IMPORTED_MODULE_1__["default"].testSuites.add(data);
  },
  bulkInsert: function bulkInsert(tcs) {
    var list = tcs.map(function (data) {
      if (!data.name) {
        throw new Error('Model TestSuite - insert: missing name');
      }

      if (!Array.isArray(data.cases)) {
        throw new Error('Model TestSuite - insert: cases should an array');
      }

      data.updateTime = new Date() * 1;
      data.id = Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__["uid"])();

      return data;
    });

    return _db__WEBPACK_IMPORTED_MODULE_1__["default"].testSuites.bulkAdd(list);
  },
  update: function update(id, data) {
    return _db__WEBPACK_IMPORTED_MODULE_1__["default"].testSuites.update(id, data);
  },
  remove: function remove(id) {
    return _db__WEBPACK_IMPORTED_MODULE_1__["default"].testSuites.delete(id);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (model);

/***/ }),

/***/ "./src/recomputed/index.js":
/*!*********************************!*\
  !*** ./src/recomputed/index.js ***!
  \*********************************/
/*! exports provided: hasUnsavedMacro, editorSelectedCommand */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasUnsavedMacro", function() { return hasUnsavedMacro; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editorSelectedCommand", function() { return editorSelectedCommand; });

function hasUnsavedMacro(state) {
  var editor = state.editor;
  var editing = editor.editing,
      editingSource = editor.editingSource,
      activeTab = editor.activeTab;


  if (!editing.meta.src) return true;

  switch (activeTab) {
    case 'table_view':
      {
        var _ref = editing.meta || {},
            hasUnsaved = _ref.hasUnsaved;

        return hasUnsaved;
      }

    case 'source_view':
      {
        return editingSource.original !== editingSource.current;
      }

    default:
      throw new Error('Unknown activeTab');
  }
}

function editorSelectedCommand(state) {
  var _state$editor$editing = state.editor.editing,
      meta = _state$editor$editing.meta,
      commands = _state$editor$editing.commands;


  if (!meta || meta.selectedIndex === -1) return null;
  return commands[meta.selectedIndex] || null;
}

/***/ }),

/***/ "./src/reducers/index.js":
/*!*******************************!*\
  !*** ./src/reducers/index.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return reducer; });
/* harmony import */ var url_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url-parse */ "./node_modules/url-parse/index.js");
/* harmony import */ var url_parse__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(url_parse__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.isequal */ "./node_modules/lodash.isequal/index.js");
/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isequal__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _actions_action_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../actions/action_types */ "./src/actions/action_types.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/utils */ "./src/common/utils.js");
/* harmony import */ var _models_test_case_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/test_case_model */ "./src/models/test_case_model.js");
/* harmony import */ var _common_convert_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/convert_utils */ "./src/common/convert_utils.js");
/* harmony import */ var _common_constant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/constant */ "./src/common/constant.js");
/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/log */ "./src/common/log.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }










var newTestCaseEditing = {
  commands: [],
  meta: {
    src: null,
    hasUnsaved: true,
    selectedIndex: -1
  }

  // * editor
  //    * testCases:          all test cases stored in indexedDB
  //    * editing:            the current test cases being edited
  //    * clipbard            for copy / cut / paste
  //
  // * player                 the state for player
  //    * nextCommandIndex    the current command beging executed
  //    * errorCommandIndices commands that encounters some error
  //    * doneCommandIndices  commands that have been executed
  //    * currentLoop         the current round
  //    * loops               how many rounds to run totally

};var initialState = {
  status: _common_constant__WEBPACK_IMPORTED_MODULE_6__["APP_STATUS"].NORMAL,
  recorderStatus: _common_constant__WEBPACK_IMPORTED_MODULE_6__["RECORDER_STATUS"].STOPPED,
  inspectorStatus: _common_constant__WEBPACK_IMPORTED_MODULE_6__["INSPECTOR_STATUS"].STOPPED,
  editor: {
    testSuites: [],
    testCases: [],
    editing: _extends({}, newTestCaseEditing),
    editingSource: {
      // Saved version
      original: null,
      // Version before editing
      pure: null,
      // Version keeping track of any editing
      current: null,
      error: null
    },
    clipboard: {
      commands: []
    },
    activeTab: 'table_view'
  },
  player: {
    mode: _common_constant__WEBPACK_IMPORTED_MODULE_6__["PLAYER_MODE"].TEST_CASE,
    status: _common_constant__WEBPACK_IMPORTED_MODULE_6__["PLAYER_STATUS"].STOPPED,
    stopReason: null,
    currentLoop: 0,
    loops: 0,
    nextCommandIndex: null,
    errorCommandIndices: [],
    doneCommandIndices: [],
    breakpointIndices: [],
    playInterval: 0,
    timeoutStatus: {
      type: null,
      total: null,
      past: null
    }
  },
  variables: [],
  logs: [],
  screenshots: [],
  csvs: [],
  visions: [],
  config: {},
  ui: {}

  // Note: for update the `hasUnsaved` status in editing.meta
};var updateHasUnSaved = function updateHasUnSaved(state) {
  var _state$editor$editing = state.editor.editing,
      meta = _state$editor$editing.meta,
      data = _objectWithoutProperties(_state$editor$editing, ['meta']);

  var id = meta.src && meta.src.id;
  if (!id) return state;

  var tc = state.editor.testCases.find(function (tc) {
    return tc.id === id;
  });
  if (!tc) return state;

  var normalizedEditing = Object(_models_test_case_model__WEBPACK_IMPORTED_MODULE_4__["normalizeTestCase"])({ data: data });
  var hasUnsaved = !lodash_isequal__WEBPACK_IMPORTED_MODULE_1___default()(tc.data, normalizedEditing.data);
  return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editing', 'meta', 'hasUnsaved'], hasUnsaved, state);
};

var updateBreakpointIndices = function updateBreakpointIndices(indices, action, actionIndex) {
  var handleSingleAction = function handleSingleAction(indices, action, actionIndex) {
    switch (action) {
      case 'add':
        {
          var result = indices.slice();

          for (var i = 0, len = indices.length; i < len; i++) {
            if (result[i] >= actionIndex) {
              result[i] += 1;
            }
          }

          return result;
        }

      case 'delete':
        {
          var _result = indices.slice();

          for (var _i = indices.length - 1; _i >= 0; _i--) {
            if (_result[_i] > actionIndex) {
              _result[_i] -= 1;
            } else if (_result[_i] === actionIndex) {
              _result.splice(_i, 1);
            }
          }

          return _result;
        }

      default:
        throw new Error('updateBreakpointIndices: unknown action, \'' + action + '\'');
    }
  };

  if (typeof actionIndex === 'number') {
    return handleSingleAction(indices, action, actionIndex);
  }

  if (Array.isArray(actionIndex)) {
    // Note: sort action indices as desc.  Bigger indice will be handled earlier, so that it won't affect others
    var actionIndices = actionIndex.slice();
    actionIndices.sort(function (a, b) {
      return b - a;
    });

    return actionIndices.reduce(function (indices, actionIndex) {
      return handleSingleAction(indices, action, actionIndex);
    }, indices);
  }

  throw new Error('updateBreakpointIndices: actionIndex should be either number or an array of number');
};

var resetEditingSource = Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["partial"])(function (macro, state) {
  Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('resetEditingSource', macro);
  var str = Object(_common_convert_utils__WEBPACK_IMPORTED_MODULE_5__["toJSONString"])(macro);
  return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editingSource'], {
    original: str,
    pure: str,
    current: str,
    error: null
  }, state);
});

var setEditingSourceCurrent = function setEditingSourceCurrent(state) {
  var macro = {
    name: state.editor.editing.meta.src ? state.editor.editing.meta.src.name : 'Untitled',
    commands: state.editor.editing.commands
  };
  Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('setEditingSourceCurrent', macro);

  var str = Object(_common_convert_utils__WEBPACK_IMPORTED_MODULE_5__["toJSONString"])(macro);
  return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editingSource'], function (editingSource) {
    return _extends({}, editingSource, { pure: str, current: str });
  }, state);
};

var saveEditingSourceCurrent = function saveEditingSourceCurrent(state) {
  var current = state.editor.editingSource.current;

  return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editingSource'], function (editingSource) {
    return _extends({}, editingSource, { pure: current, original: current });
  }, state);
};

var setEditingSourceOriginalAndPure = function setEditingSourceOriginalAndPure(macro, state) {
  var str = Object(_common_convert_utils__WEBPACK_IMPORTED_MODULE_5__["toJSONString"])(macro);
  return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editingSource'], function (editingSource) {
    return _extends({}, editingSource, { pure: str, original: str });
  }, state);
};

function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];

  switch (action.type) {
    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].START_RECORDING_SUCCESS:
      return _extends({}, state, {
        status: _common_constant__WEBPACK_IMPORTED_MODULE_6__["APP_STATUS"].RECORDER,
        recorderStatus: _common_constant__WEBPACK_IMPORTED_MODULE_6__["APP_STATUS"].PENDING,
        player: _extends({}, state.player, {
          nextCommandIndex: null,
          errorCommandIndices: [],
          doneCommandIndices: []
        })
      });
    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].STOP_RECORDING_SUCCESS:
      return _extends({}, state, {
        status: _common_constant__WEBPACK_IMPORTED_MODULE_6__["APP_STATUS"].NORMAL,
        recorderStatus: _common_constant__WEBPACK_IMPORTED_MODULE_6__["RECORDER_STATUS"].STOPPED
      });
    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].START_INSPECTING_SUCCESS:
      return _extends({}, state, {
        status: _common_constant__WEBPACK_IMPORTED_MODULE_6__["APP_STATUS"].INSPECTOR,
        inspectorStatus: _common_constant__WEBPACK_IMPORTED_MODULE_6__["INSPECTOR_STATUS"].PENDING
      });
    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].STOP_INSPECTING_SUCCESS:
    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].DONE_INSPECTING:
      return _extends({}, state, {
        status: _common_constant__WEBPACK_IMPORTED_MODULE_6__["APP_STATUS"].NORMAL,
        recorderStatus: _common_constant__WEBPACK_IMPORTED_MODULE_6__["INSPECTOR_STATUS"].STOPPED
      });

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].START_PLAYING:
      return _extends({}, state, {
        status: _common_constant__WEBPACK_IMPORTED_MODULE_6__["APP_STATUS"].PLAYER
      });

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].STOP_PLAYING:
      return _extends({}, state, {
        status: _common_constant__WEBPACK_IMPORTED_MODULE_6__["APP_STATUS"].NORMAL
      });

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].APPEND_COMMAND:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(setEditingSourceCurrent, updateHasUnSaved, Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editing', 'commands'], function (commands) {
        return [].concat(_toConsumableArray(commands), [action.data.command]);
      }))(state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].DUPLICATE_COMMAND:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(setEditingSourceCurrent, updateHasUnSaved, Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editing', 'meta', 'selectedIndex'], action.data.index + 1), Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editing', 'commands'], function (commands) {
        var index = action.data.index;

        var newCommands = commands.slice();
        newCommands.splice(index + 1, 0, commands[index]);
        return newCommands;
      }), Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['player', 'breakpointIndices'], function (indices) {
        return updateBreakpointIndices(indices, 'add', action.data.index + 1);
      }))(state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].INSERT_COMMAND:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(setEditingSourceCurrent, updateHasUnSaved, Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editing', 'meta', 'selectedIndex'], action.data.index), Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editing', 'commands'], function (commands) {
        var _action$data = action.data,
            index = _action$data.index,
            command = _action$data.command;

        var newCommands = commands.slice();
        newCommands.splice(index, 0, command);
        return newCommands;
      }), Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['player', 'breakpointIndices'], function (indices) {
        return updateBreakpointIndices(indices, 'add', action.data.index);
      }))(state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].UPDATE_COMMAND:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(setEditingSourceCurrent, updateHasUnSaved, Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editing', 'commands', action.data.index], action.data.command))(state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].REMOVE_COMMAND:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(setEditingSourceCurrent, updateHasUnSaved, Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editing', 'commands'], function (commands) {
        var index = action.data.index;

        var newCommands = commands.slice();
        newCommands.splice(index, 1);
        return newCommands;
      }), Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['player', 'breakpointIndices'], function (indices) {
        return updateBreakpointIndices(indices, 'delete', action.data.index);
      }))(state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SELECT_COMMAND:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editing', 'meta', 'selectedIndex'], action.data.forceClick || state.editor.editing.meta.selectedIndex !== action.data.index ? action.data.index : -1),
      // Note: normalize commands whenever switching between commands in normal mode
      state.status === _common_constant__WEBPACK_IMPORTED_MODULE_6__["APP_STATUS"].NORMAL ? Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editing', 'commands'], function (cmds) {
        return cmds.map(_models_test_case_model__WEBPACK_IMPORTED_MODULE_4__["normalizeCommand"]);
      }) : function (x) {
        return x;
      })(state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].CUT_COMMAND:
      {
        var commands = action.data.indices.map(function (i) {
          return state.editor.editing.commands[i];
        });

        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(setEditingSourceCurrent, updateHasUnSaved, Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'clipboard', 'commands'], commands), Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editing', 'commands'], function (commands) {
          var newCommands = commands.slice();
          return newCommands.filter(function (c, i) {
            return action.data.indices.indexOf(i) === -1;
          });
        }), Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['player', 'breakpointIndices'], function (indices) {
          return updateBreakpointIndices(indices, 'delete', action.data.indices);
        }))(state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].COPY_COMMAND:
      {
        var _commands = action.data.indices.map(function (i) {
          return state.editor.editing.commands[i];
        });
        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'clipboard', 'commands'], _commands, state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].PASTE_COMMAND:
      {
        var _commands2 = state.editor.clipboard.commands;


        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(setEditingSourceCurrent, updateHasUnSaved, Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editing', 'commands'], function (cmds) {
          var newCmds = cmds.slice();
          newCmds.splice.apply(newCmds, [action.data.index + 1, 0].concat(_toConsumableArray(_commands2)));
          return newCmds;
        }), Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['player', 'breakpointIndices'], function (indices) {
          return updateBreakpointIndices(indices, 'add', _commands2.map(function (_) {
            return action.data.index + 1;
          }));
        }))(state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].NORMALIZE_COMMANDS:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editing', 'commands'], function (cmds) {
        return cmds.map(_models_test_case_model__WEBPACK_IMPORTED_MODULE_4__["normalizeCommand"]);
      }, state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].UPDATE_SELECTED_COMMAND:
      if (state.editor.editing.meta.selectedIndex === -1) {
        return state;
      }

      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(setEditingSourceCurrent, updateHasUnSaved, Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editing', 'commands', state.editor.editing.meta.selectedIndex], function (cmdObj) {
        return _extends({}, cmdObj, action.data);
      }))(state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SAVE_EDITING_AS_EXISTED:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editing', 'meta', 'hasUnsaved'], false), saveEditingSourceCurrent)(state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SAVE_EDITING_AS_NEW:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['editor', 'editing', 'meta'], function (meta) {
        return _extends({}, meta, {
          hasUnsaved: false,
          src: Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["pick"])(['id', 'name'], action.data)
        });
      }), saveEditingSourceCurrent)(state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SET_TEST_CASES:
      {
        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(function (state) {
          var src = state.editor.editing.meta.src;

          if (!src) return state;

          var tc = state.editor.testCases.find(function (tc) {
            return tc.id === src.id;
          });
          if (!tc) return state;

          return setEditingSourceOriginalAndPure({
            name: tc.name,
            commands: tc.data.commands
          }, state);
        }, Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'testCases'], action.data))(state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SET_TEST_SUITES:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'testSuites'], action.data, state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].UPDATE_TEST_SUITE:
      {
        var _action$data2 = action.data,
            id = _action$data2.id,
            updated = _action$data2.updated;

        var index = state.editor.testSuites.findIndex(function (ts) {
          return ts.id === id;
        });

        if (index === -1) return state;
        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'testSuites', index], updated, state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SET_EDITING:
      Object(_common_log__WEBPACK_IMPORTED_MODULE_7__["default"])('REDUCER SET_EDITING', action.data);

      if (!action.data) return state;
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(setEditingSourceCurrent, updateHasUnSaved, Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editing'], action.data))(state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].EDIT_TEST_CASE:
      {
        var testCases = state.editor.testCases;

        var tc = testCases.find(function (tc) {
          return tc.id === action.data;
        });

        if (!tc) return state;

        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editing'], _extends({}, tc.data, {
          meta: {
            selectedIndex: -1,
            hasUnsaved: false,
            src: Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["pick"])(['id', 'name'], tc)
          }
        })), Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['player'], function (player) {
          return _extends({}, player, {
            status: _common_constant__WEBPACK_IMPORTED_MODULE_6__["PLAYER_STATUS"].STOPPED,
            stopReason: null,
            nextCommandIndex: null,
            errorCommandIndices: [],
            doneCommandIndices: [],
            breakpointIndices: []
          });
        }), resetEditingSource({
          name: tc.name,
          commands: tc.data.commands
        }))(state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].UPDATE_TEST_CASE_STATUS:
      {
        var _action$data3 = action.data,
            _id = _action$data3.id,
            status = _action$data3.status;

        if (!_id) return state;

        var _testCases = state.editor.testCases;

        var _index = _testCases.findIndex(function (tc) {
          return tc.id === _id;
        });
        if (_index === -1) return state;

        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'testCases', _index, 'status'], status, state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].RENAME_TEST_CASE:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editing', 'meta', 'src', 'name'], action.data, state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].REMOVE_TEST_CASE:
      {
        if (!action.data.isCurrent) return state;

        var _id2 = state.editor.editing.meta.src.id;
        var selectedIndex = state.editor.editing.meta.selectedIndex;

        var candidates = state.editor.testCases.filter(function (tc) {
          return tc.id !== _id2;
        });
        var lastIndex = state.editor.testCases.findIndex(function (tc) {
          return tc.id === _id2;
        });
        var editing = void 0;

        if (candidates.length === 0) {
          editing = _extends({}, newTestCaseEditing);
        } else {
          var _index2 = lastIndex === -1 ? 0 : lastIndex < candidates.length ? lastIndex : lastIndex - 1;
          var _tc = candidates[_index2];

          editing = _extends({}, _tc.data, {
            meta: {
              src: Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["pick"])(['id', 'name'], _tc),
              hasUnsaved: false,
              selectedIndex: _index2
            }
          });
        }

        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editing'], editing, state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].EDIT_NEW_TEST_CASE:
      {
        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["compose"])(Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editing'], _extends({}, newTestCaseEditing)), Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['player'], function (player) {
          return _extends({}, player, {
            nextCommandIndex: null,
            errorCommandIndices: [],
            doneCommandIndices: [],
            breakpointIndices: []
          });
        }), resetEditingSource({
          name: 'Untitled',
          commands: []
        }))(state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SET_PLAYER_STATE:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['player'], function (playerState) {
        return _extends({}, playerState, action.data);
      }, state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].PLAYER_ADD_ERROR_COMMAND_INDEX:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['player', 'errorCommandIndices'], function (indices) {
        return [].concat(_toConsumableArray(indices), [action.data]);
      }, state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].ADD_BREAKPOINT:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['player', 'breakpointIndices'], function (indices) {
        return indices.indexOf(action.data) === -1 ? [].concat(_toConsumableArray(indices), [action.data]) : indices;
      }, state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].REMOVE_BREAKPOINT:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['player', 'breakpointIndices'], function (indices) {
        return indices.filter(function (index) {
          return index !== action.data;
        });
      }, state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].ADD_LOGS:
      return _extends({}, state, {
        logs: [].concat(_toConsumableArray(state.logs), _toConsumableArray(action.data)).slice(-500)
      });

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].CLEAR_LOGS:
      return _extends({}, state, {
        logs: []
      });

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].ADD_SCREENSHOT:
      return _extends({}, state, {
        screenshots: [].concat(_toConsumableArray(state.screenshots), [action.data])
      });

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].CLEAR_SCREENSHOTS:
      return _extends({}, state, {
        screenshots: []
      });

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].UPDATE_CONFIG:
      return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['config'], function (cfg) {
        return _extends({}, cfg, action.data);
      }, state);

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SET_CSV_LIST:
      return _extends({}, state, {
        csvs: action.data
      });

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SET_SCREENSHOT_LIST:
      return _extends({}, state, {
        screenshots: action.data
      });

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SET_VISION_LIST:
      return _extends({}, state, {
        visions: action.data
      });

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SET_VARIABLE_LIST:
      return _extends({}, state, {
        variables: action.data
      });

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].UPDATE_UI:
      {
        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["updateIn"])(['ui'], function (ui) {
          return _extends({}, ui, action.data);
        }, state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SET_EDITOR_ACTIVE_TAB:
      {
        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'activeTab'], action.data, state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SET_SOURCE_ERROR:
      {
        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editingSource', 'error'], action.data, state);
      }

    case _actions_action_types__WEBPACK_IMPORTED_MODULE_2__["types"].SET_SOURCE_CURRENT:
      {
        return Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__["setIn"])(['editor', 'editingSource', 'current'], action.data, state);
      }

    default:
      return state;
  }
}

/***/ }),

/***/ "./src/redux/index.js":
/*!****************************!*\
  !*** ./src/redux/index.js ***!
  \****************************/
/*! exports provided: Provider, reducer, createStore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createStore", function() { return createStore; });
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Provider", function() { return react_redux__WEBPACK_IMPORTED_MODULE_0__["Provider"]; });

/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/index.js");
/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux-thunk */ "./node_modules/redux-thunk/lib/index.js");
/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(redux_thunk__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _promise_middleware__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./promise_middleware */ "./src/redux/promise_middleware.js");
/* harmony import */ var _post_logic_middleware__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./post_logic_middleware */ "./src/redux/post_logic_middleware.js");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reducers */ "./src/reducers/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reducer", function() { return _reducers__WEBPACK_IMPORTED_MODULE_5__["default"]; });








var createStore = Object(redux__WEBPACK_IMPORTED_MODULE_1__["applyMiddleware"])(redux_thunk__WEBPACK_IMPORTED_MODULE_2___default.a, Object(_promise_middleware__WEBPACK_IMPORTED_MODULE_3__["default"])(), Object(_post_logic_middleware__WEBPACK_IMPORTED_MODULE_4__["default"])())(redux__WEBPACK_IMPORTED_MODULE_1__["createStore"]);



/***/ }),

/***/ "./src/redux/post_logic_middleware.js":
/*!********************************************!*\
  !*** ./src/redux/post_logic_middleware.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return postLogicMiddleWare; });
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// Note: if `post` field provided, it will call `post`
// after the action dispatched and state updated
function postLogicMiddleWare(extra) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        var post = action.post,
            rest = _objectWithoutProperties(action, ['post']);

        if (post && typeof post === 'function') {
          setTimeout(function () {
            post({ dispatch: dispatch, getState: getState }, action, extra);
          }, 0);
        }

        return next(action);
      };
    };
  };
}

/***/ }),

/***/ "./src/redux/promise_middleware.js":
/*!*****************************************!*\
  !*** ./src/redux/promise_middleware.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return promiseMiddleWare; });
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// Note: if a `promise` field and a `types` provied, this middleware will dispatch
// 3 actions REQUEST, SUCCESS, FAILURE based on the status of the promise it returns
function promiseMiddleWare() {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;

    return function (next) {
      return function (action) {
        var promise = action.promise,
            types = action.types,
            rest = _objectWithoutProperties(action, ["promise", "types"]);

        if (!promise) {
          return next(action);
        }

        var _types = _slicedToArray(types, 3),
            REQUEST = _types[0],
            SUCCESS = _types[1],
            FAILURE = _types[2];

        next(_extends({}, rest, { type: REQUEST }));
        return promise().then(function (data) {
          return next(_extends({}, rest, { data: data, type: SUCCESS }));
        }, function (error) {
          return next(_extends({}, rest, { err: error, type: FAILURE }));
        });
      };
    };
  };
};

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2hlYWRlci5zY3NzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL2Rhc2hib2FyZC9kYXNoYm9hcmQuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9zaWRlYmFyL3NpZGViYXIuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZSBzeW5jIF5cXC5cXC8uKiQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvYWN0aW9uX3R5cGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5zY3NzPzA0MGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9iYWNrdXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9ib29rbWFyay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2NvbW1hbmRfcnVubmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vY29udmVydF9zdWl0ZV91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2NvbnZlcnRfdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9jc3YuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9jc3ZfbWFuLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vZG9tX3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vZHJhZ19tb2NrL0RhdGFUcmFuc2Zlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2RyYWdfbW9jay9EcmFnRHJvcEFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2RyYWdfbW9jay9ldmVudEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9kcmFnX21vY2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9lbmNyeXB0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vaW5zcGVjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vaW50ZXJwcmV0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9pcGMvY3NfcG9zdG1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9pcGMvaXBjX2NzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vbGliL2ZpbGVfc2F2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9saWIva2V5c2ltLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vbWFjcm9fbG9nLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vcGxheWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vcmVnaXN0cnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9zZW5kX2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi92YXJpYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi92aXNpb25fbWFuLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VkaXRfaW5fcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZWRpdF90ZXN0X3N1aXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VkaXRhYmxlX3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaGVhZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2hlYWRlci5zY3NzP2FjZjMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc2F2ZV90ZXN0X2Nhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoX2JveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL3ByZWluc3RhbGxfbWFjcm9zLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvcHJlaW5zdGFsbF9zdWl0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvZGFzaGJvYXJkL2JvdHRvbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9kYXNoYm9hcmQvZGFzaGJvYXJkLnNjc3M/OGYyNCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9kYXNoYm9hcmQvZWRpdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL2Rhc2hib2FyZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9zaWRlYmFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL3NpZGViYXIvc2lkZWJhci5zY3NzPzEzMGEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvc2lkZWJhci90ZXN0X2Nhc2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL3NpZGViYXIvdGVzdF9zdWl0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9pbml0X3BsYXllci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWxzL2RiLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbHMvdGVzdF9jYXNlX21vZGVsLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbHMvdGVzdF9zdWl0ZV9tb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVjb21wdXRlZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHV4L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1eC9wb3N0X2xvZ2ljX21pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHV4L3Byb21pc2VfbWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly8vdXRpbCAoaWdub3JlZCkiXSwibmFtZXMiOlsibWFrZTMiLCJuYW1lIiwidHlwZTMiLCJtYXAiLCJrZXkiLCJ0eXBlcyIsInByb21pc2VUeXBlcyIsInJlZHVjZSIsInByZXYiLCJjdXIiLCJmb3JFYWNoIiwic2ltcGxlVHlwZXMiLCJyZWNvcmRlZENvdW50Iiwic2F2ZUVkaXRpbmciLCJkaXNwYXRjaCIsImdldFN0YXRlIiwiZWRpdG9yIiwiZWRpdGluZyIsInN0b3JhZ2UiLCJzZXQiLCJzYXZlQ29uZmlnIiwibGFzdFNpemUiLCJjb25maWciLCJzYXZlZFNpemUiLCJzaXplIiwic2hvd1NpZGViYXIiLCJmaW5hbFNpemUiLCJ3aWR0aCIsImhlaWdodCIsImdldCIsInRoZW4iLCJvbGRDb25maWciLCJ3aW5kb3ciLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJjc0lwYyIsImFzayIsInNldFJvdXRlIiwiZGF0YSIsInR5cGUiLCJUIiwiU0VUX1JPVVRFIiwic3RhcnRSZWNvcmRpbmciLCJwcm9taXNlIiwic2V0VGltZW91dCIsInN0b3BSZWNvcmRpbmciLCJzdGFydEluc3BlY3RpbmciLCJzdG9wSW5zcGVjdGluZyIsInN0YXJ0UGxheWluZyIsIlNUQVJUX1BMQVlJTkciLCJzdG9wUGxheWluZyIsIlNUT1BfUExBWUlORyIsImRvbmVJbnNwZWN0aW5nIiwiRE9ORV9JTlNQRUNUSU5HIiwiYXBwZW5kQ29tbWFuZCIsImNtZE9iaiIsImZyb21SZWNvcmQiLCJ0ZXh0IiwiQVBQRU5EX0NPTU1BTkQiLCJjb21tYW5kIiwicG9zdCIsImR1cGxpY2F0ZUNvbW1hbmQiLCJpbmRleCIsIkRVUExJQ0FURV9DT01NQU5EIiwiaW5zZXJ0Q29tbWFuZCIsIklOU0VSVF9DT01NQU5EIiwidXBkYXRlQ29tbWFuZCIsIlVQREFURV9DT01NQU5EIiwicmVtb3ZlQ29tbWFuZCIsIlJFTU9WRV9DT01NQU5EIiwic2VsZWN0Q29tbWFuZCIsImZvcmNlQ2xpY2siLCJTRUxFQ1RfQ09NTUFORCIsImN1dENvbW1hbmQiLCJDVVRfQ09NTUFORCIsImluZGljZXMiLCJjb3B5Q29tbWFuZCIsIkNPUFlfQ09NTUFORCIsInBhc3RlQ29tbWFuZCIsIlBBU1RFX0NPTU1BTkQiLCJub3JtYWxpemVDb21tYW5kcyIsIk5PUk1BTElaRV9DT01NQU5EUyIsInVwZGF0ZVNlbGVjdGVkQ29tbWFuZCIsIm9iaiIsIlVQREFURV9TRUxFQ1RFRF9DT01NQU5EIiwic2V0U291cmNlRXJyb3IiLCJlcnJvciIsIlNFVF9TT1VSQ0VfRVJST1IiLCJzZXRTb3VyY2VDdXJyZW50Iiwic3RyIiwiU0VUX1NPVVJDRV9DVVJSRU5UIiwic2F2ZVNvdXJjZUNvZGVUb0VkaXRpbmciLCJlZGl0aW5nU291cmNlIiwicHVyZSIsImN1cnJlbnQiLCJsb2ciLCJmcm9tSlNPTlN0cmluZyIsInNldEVkaXRpbmciLCJtZXRhIiwiZSIsIm1lc3NhZ2UiLCJzYXZlRWRpdGluZ0FzRXhpc3RlZCIsInN0YXRlIiwic3JjIiwidGMiLCJ0ZXN0Q2FzZXMiLCJmaW5kIiwiaWQiLCJwaWNrIiwiY29tbWFuZHMiLCJub3JtYWxpemVDb21tYW5kIiwidGVzdENhc2VNb2RlbCIsInVwZGF0ZSIsIlNBVkVfRURJVElOR19BU19FWElTVEVEIiwic2F2ZUVkaXRpbmdBc05ldyIsInNhbWVOYW1lIiwiUHJvbWlzZSIsInJlamVjdCIsIkVycm9yIiwiaW5zZXJ0IiwiU0FWRV9FRElUSU5HX0FTX05FVyIsInNldFRlc3RDYXNlcyIsInRjcyIsIlNFVF9URVNUX0NBU0VTIiwic2hvdWxkU2VsZWN0RGVmYXVsdCIsImxlbmd0aCIsImVkaXRUZXN0Q2FzZSIsIlNFVF9FRElUSU5HIiwiRURJVF9URVNUX0NBU0UiLCJlZGl0TmV3VGVzdENhc2UiLCJFRElUX05FV19URVNUX0NBU0UiLCJ1cHNlcnRUZXN0Q2FzZSIsImV4aXN0ZWRUYyIsIml0ZW0iLCJhZGRUZXN0Q2FzZXMiLCJ2YWxpZFRjcyIsImZpbHRlciIsInRjYyIsImZhaWxUY3MiLCJwYXNzQ291bnQiLCJmYWlsQ291bnQiLCJyZXNvbHZlIiwiYnVsa0luc2VydCIsInJlbmFtZVRlc3RDYXNlIiwidGNJZCIsImVkaXRpbmdJZCIsIlJFTkFNRV9URVNUX0NBU0UiLCJyZW1vdmVUZXN0Q2FzZSIsImN1cklkIiwidHNzIiwidGVzdFN1aXRlcyIsInRzIiwiY2FzZXMiLCJtIiwidGVzdENhc2VJZCIsInJlbW92ZSIsIlJFTU9WRV9URVNUX0NBU0UiLCJpc0N1cnJlbnQiLCJjYXRjaCIsInN0YWNrIiwicmVtb3ZlQ3VycmVudFRlc3RDYXNlIiwiZHVwbGljYXRlVGVzdENhc2UiLCJuZXdUZXN0Q2FzZU5hbWUiLCJzZXRQbGF5ZXJTdGF0ZSIsIlNFVF9QTEFZRVJfU1RBVEUiLCJzZXRUaW1lb3V0U3RhdHVzIiwiYXJncyIsInRpbWVvdXRTdGF0dXMiLCJ0b3RhbCIsInBhc3QiLCJhZGRQbGF5ZXJFcnJvckNvbW1hbmRJbmRleCIsIlBMQVlFUl9BRERfRVJST1JfQ09NTUFORF9JTkRFWCIsImFkZExvZyIsIm9wdGlvbnMiLCJBRERfTE9HUyIsInVpZCIsImNyZWF0ZVRpbWUiLCJEYXRlIiwiY2xlYXJMb2dzIiwiQ0xFQVJfTE9HUyIsImFkZFNjcmVlbnNob3QiLCJzY3JlZW5zaG90IiwiQUREX1NDUkVFTlNIT1QiLCJjbGVhclNjcmVlbnNob3RzIiwiQ0xFQVJfU0NSRUVOU0hPVFMiLCJnZXRTY3JlZW5zaG90TWFuIiwiY2xlYXIiLCJhZGRWaXNpb24iLCJ2aXNpb24iLCJBRERfVklTSU9OIiwiY2xlYXJWaXNpb25zIiwiQ0xFQVJfVklTSU9OUyIsImdldFZpc2lvbk1hbiIsInVwZGF0ZUNvbmZpZyIsIlVQREFURV9DT05GSUciLCJ1cGRhdGVUZXN0Q2FzZVBsYXlTdGF0dXMiLCJzdGF0dXMiLCJVUERBVEVfVEVTVF9DQVNFX1NUQVRVUyIsInBsYXllclBsYXkiLCJjZmciLCJtYWNyb05hbWUiLCJzY29wZSIsInBhcnNlSW50IiwidGltZW91dFBhZ2VMb2FkIiwidGltZW91dEVsZW1lbnQiLCJ0aW1lb3V0TWFjcm8iLCJ0aW1lb3V0RG93bmxvYWQiLCJwb3N0RGVsYXkiLCJvdmVycmlkZVNjb3BlIiwiYnJlYWtwb2ludHMiLCJwbGF5ZXIiLCJicmVha3BvaW50SW5kaWNlcyIsIm9wdHMiLCJjb21wb3NlIiwib24iLCJleHRyYSIsImNvbW1hbmRFeHRyYSIsImdldFBsYXllciIsInBsYXkiLCJwdWJsaWMiLCJsaXN0Q1NWIiwibWFuIiwiZ2V0Q1NWTWFuIiwibGlzdCIsImFsbCIsImdldExpbmsiLCJmaWxlTmFtZSIsInVybCIsImxhc3RNb2RpZmllZCIsIlNFVF9DU1ZfTElTVCIsImxpc3RTY3JlZW5zaG90cyIsInJldmVyc2UiLCJTRVRfU0NSRUVOU0hPVF9MSVNUIiwibGlzdFZpc2lvbnMiLCJTRVRfVklTSU9OX0xJU1QiLCJzZXRUZXN0U3VpdGVzIiwiU0VUX1RFU1RfU1VJVEVTIiwiYWRkVGVzdFN1aXRlIiwidGVzdFN1aXRlTW9kZWwiLCJhZGRUZXN0U3VpdGVzIiwidmFsaWRUc3MiLCJmYWlsVHNzIiwidXBkYXRlVGVzdFN1aXRlIiwicmV2aXNlZCIsIlVQREFURV9URVNUX1NVSVRFIiwidXBkYXRlZCIsInJlbW92ZVRlc3RTdWl0ZSIsInNldFBsYXllck1vZGUiLCJtb2RlIiwicnVuQmFja3VwIiwiYXV0b0JhY2t1cFRlc3RDYXNlcyIsImF1dG9CYWNrdXBUZXN0U3VpdGVzIiwiYXV0b0JhY2t1cFNjcmVlbnNob3RzIiwiYXV0b0JhY2t1cENTVkZpbGVzIiwiYXV0b0JhY2t1cFZpc2lvbkltYWdlcyIsImNzdnMiLCJzY3JlZW5zaG90cyIsInZpc2lvbnMiLCJiYWNrdXAiLCJ0ZXN0Q2FzZSIsInRlc3RTdWl0ZSIsImNzdiIsInNldFZhcmlhYmxlcyIsInZhcmlhYmxlcyIsInNvcnQiLCJhIiwiYiIsIlNFVF9WQVJJQUJMRV9MSVNUIiwidXBkYXRlVUkiLCJVUERBVEVfVUkiLCJhZGRCcmVha3BvaW50IiwiY29tbWFuZEluZGV4IiwiQUREX0JSRUFLUE9JTlQiLCJyZW1vdmVCcmVha3BvaW50IiwiUkVNT1ZFX0JSRUFLUE9JTlQiLCJzZXRFZGl0b3JBY3RpdmVUYWIiLCJ0YWIiLCJTRVRfRURJVE9SX0FDVElWRV9UQUIiLCJBcHAiLCJoaWRlQmFja3VwQWxlcnQiLCJwcm9wcyIsImxhc3RCYWNrdXBBY3Rpb25UaW1lIiwiJGFwcCIsImNsYXNzTGlzdCIsIm9uQ2xpY2tCYWNrdXAiLCJvbkNsaWNrTm9CYWNrdXAiLCJydW4iLCJpc1RpbWUiLCJhZGQiLCJ0aW1lciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImVsIiwiQ29tcG9uZW50IiwiY29ubmVjdCIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFjdGlvbnMiLCJ6aXAiLCJKU1ppcCIsInBzIiwiZm9sZGVyIiwiZmlsZSIsInRvSlNPTlN0cmluZyIsImdlbk5hbWUiLCJuYW1lRmFjdG9yeSIsInN0cmluZ2lmeVRlc3RTdWl0ZSIsInB1c2giLCJyZWFkIiwic3MiLCJidWZmZXIiLCJiaW5hcnkiLCJnZW5lcmF0ZUFzeW5jIiwiYmxvYiIsIkZpbGVTYXZlciIsInNhdmVBcyIsInBCb29rbWFya3NCYXJJZCIsImdldElkc09mT3RoZXJCb29rbWFya3NBbmRCb29rbWFya3NCYXIiLCJib29rbWFya3NCYXJJbmRleCIsIkV4dCIsImlzRmlyZWZveCIsImJvb2ttYXJrcyIsImdldFRyZWUiLCJib29rbWFya3NCYXIiLCJub2RlcyIsImNoaWxkcmVuIiwiY3JlYXRlQm9va21hcmtPbkJhciIsImJvb2ttYXJrIiwiY3JlYXRlIiwicGFyZW50SWQiLCJiYXJJZCIsIkhJR0hMSUdIVF9USU1FT1VUIiwiZ2xvYk1hdGNoIiwicGF0dGVybiIsImdsb2IycmVnIiwidGVzdCIsImdldEVsZW1lbnRCeVhQYXRoIiwieHBhdGgiLCJzbmFwc2hvdCIsImRvY3VtZW50IiwiZXZhbHVhdGUiLCJib2R5IiwiWFBhdGhSZXN1bHQiLCJPUkRFUkVEX05PREVfU05BUFNIT1RfVFlQRSIsInNuYXBzaG90SXRlbSIsInZpZXdwb3J0T2Zmc2V0IiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwibGVmdCIsInVudGlsSW5qZWN0ZWQiLCJhcGkiLCJldmFsIiwiY29kZSIsInBvc3RNZXNzYWdlIiwiY21kIiwicmVzdWx0IiwiaW5qZWN0ZWQiLCJnZXRBdHRyaWJ1dGUiLCJpbnNlcnRTY3JpcHQiLCJleHRlbnNpb24iLCJnZXRVUkwiLCJyZXRyeSIsInNob3VsZFJldHJ5IiwidGltZW91dCIsInJldHJ5SW50ZXJ2YWwiLCJpc0VsZW1lbnRGcm9tUG9pbnQiLCJ0cmltIiwicGFnZUNvb3JkaW5hdGVCeUVsZW1lbnRGcm9tUG9pbnQiLCJyZWciLCJtYXRjaCIsInBhZ2VYIiwicGFyc2VGbG9hdCIsInBhZ2VZIiwidmlld3BvcnRDb29yZGluYXRlQnlFbGVtZW50RnJvbVBvaW50Iiwib2Zmc2V0IiwieCIsInNjcm9sbExlZnQiLCJ5Iiwic2Nyb2xsVG9wIiwiZWxlbWVudEJ5RWxlbWVudEZyb21Qb2ludCIsImVsZW1lbnRGcm9tUG9pbnQiLCJnZXRFbGVtZW50QnlMb2NhdG9yIiwic2hvdWxkV2FpdEZvclZpc2libGUiLCJpIiwiaW5kZXhPZiIsIm1ldGhvZCIsInN1YnN0ciIsInZhbHVlIiwidG9Mb3dlckNhc2UiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwibGlua3MiLCJzbGljZSIsImNhbGwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlYWxWYWwiLCJyZXBsYWNlIiwiY2FuZGlkYXRlcyIsImRvbVRleHQiLCJxdWVyeVNlbGVjdG9yIiwiaXNWaXNpYmxlIiwiZ2V0RnJhbWVCeUxvY2F0b3IiLCJoZWxwZXJzIiwiZnJhbWVzIiwiZnJhbWUiLCJwYXJlbnQiLCJmcmFtZURvbSIsImNvbnRlbnRXaW5kb3ciLCJkb2MiLCJjb250ZW50RG9jdW1lbnQiLCJzIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiZG9jdW1lbnRFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJoYWNrQWxlcnRDb25maXJtUHJvbXB0IiwidGFyZ2V0Iiwid3JhcCIsImZuIiwiZ2VuT3B0aW9ucyIsImVycm9yTXNnIiwiZ2V0RWxlbWVudEJ5TG9jYXRvcldpdGhMb2dGb3JFZnAiLCJsb2NhdG9yIiwiZWxYcGF0aCIsIm1zZyIsImNvbnNvbGUiLCJpbmZvIiwiX19nZXRGcmFtZUJ5TG9jYXRvciIsIl9fZ2V0RWxlbWVudEJ5TG9jYXRvciIsIm5vQ29tbWFuZHNZZXQiLCJ1bnRpbCIsInBhc3MiLCJsb2NhdGlvbiIsImhyZWYiLCJyZWxvYWQiLCJwbGF5U2Nyb2xsRWxlbWVudHNJbnRvVmlldyIsInNjcm9sbEludG9WaWV3IiwiYmxvY2siLCJwbGF5SGlnaGxpZ2h0RWxlbWVudHMiLCJoaWdobGlnaHREb20iLCJkaXNwYXRjaEV2ZW50IiwiTW91c2VFdmVudCIsImJ1YmJsZXMiLCIkc3JjIiwiJHRndCIsImRyYWdNb2NrIiwidHJpZ2dlckRyYWdFdmVudCIsImdldElmcmFtZU9mZnNldCIsImFjdGlvbiIsImlzRWZwIiwicFRhcmdldCIsImlmcmFtZU9mZnNldCIsIndhaXRGb3JWaXNpYmxlIiwic2Nyb2xsQW5kSGlnaGxpZ2h0Iiwic3BsaXQiLCJvcmlnQ2xpZW50WCIsIm9yaWdDbGllbnRZIiwibGFzdFNjcm9sbFgiLCJzY3JvbGxYIiwibGFzdFNjcm9sbFkiLCJzY3JvbGxZIiwiY2xpZW50WCIsImNsaWVudFkiLCJldmVudFR5cGUiLCJ2aWV3IiwiY2FuY2VsYWJsZSIsImNsaWNrIiwib3B0aW9uVHlwZSIsInN1YnN0cmluZyIsIm9wdGlvblZhbHVlIiwib3B0aW9uIiwib3AiLCJfIiwiRXZlbnQiLCJ0YWciLCJ0YWdOYW1lIiwiZmlsZXMiLCJzZWxlY3RvciIsImNzc1NlbGVjdG9yIiwiZGVjcnlwdElmTmVlZGVkIiwic2VuZEtleXMiLCJyZWFsVmFsdWUiLCJjb250ZW50RWRpdGFibGUiLCJpbm5lckhUTUwiLCJmcmFtZVdpbmRvdyIsInRpdGxlIiwicmV0cnlJbmZvIiwic2hvdHNMZWZ0IiwicmV0cnlDb3VudCIsImlzTGFzdENoYW5jZSIsImNoZWNrZWQiLCJsYXN0SW5kZXhPZiIsImF0dHJOYW1lIiwiYXR0ciIsImxhc3RDb21tYW5kT2siLCJ2YXJzIiwicCIsInRvVXBwZXJDYXNlIiwiZ2V0TWF0Y2hBbmRDYXB0dXJlSW5kZXgiLCJub25aZXJvSW5kZXgiLCJuIiwidW5kZWZpbmVkIiwiTWF0aCIsIm1heCIsImV4ZWMiLCJyZXN0IiwibWF0Y2hJbmRleCIsImNhcHR1cmVJbmRleCIsInJlZ2V4cCIsInJhdyIsInJlZ2V4cFRleHQiLCJ0b1JlZ0V4cCIsIm5lZWRFbmNvZGUiLCJmbGFnIiwicmVnZXhwRm9yVGV4dCIsImNhcHR1cmUiLCJmbGFncyIsIm1hdGNoZXMiLCJodG1sIiwib3V0ZXJIVE1MIiwiZ3VhcmQiLCJjbGllbnRSZWN0IiwicFNvdXJjZU9mZnNldCIsInJlY3QiLCJzb3VyY2VPZmZzZXQiLCJlbnN1cmVFeHROYW1lIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIkxBU1RfU0NSRUVOU0hPVF9GSUxFX05BTUUiLCJ3YWl0IiwidGltZW91dEZvclN0YXJ0Iiwib3JpZ2luIiwiY29uZGl0aW9uIiwiY3JlYXRpb25EYXRlIiwiZm9ybWF0RGF0ZSIsIm1hY3JvcyIsImxvb3BzIiwidGNOYW1lIiwibWFjcm8iLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2VUZXN0U3VpdGUiLCJwYXJzZUpzb24iLCJBcnJheSIsImlzQXJyYXkiLCJmb2xkIiwidmFsaWRhdGVUZXN0U3VpdGVUZXh0IiwidG9Cb29rbWFya0RhdGEiLCJib29rbWFya1RpdGxlIiwidG9IdG1sIiwiam9pblVybCIsImJhc2UiLCJ1cmxPYmoiLCJVUkwiLCJ0b1N0cmluZyIsImdlbkh0bWwiLCJiYXNlVXJsIiwiY29tbWFuZFRycyIsImpvaW4iLCJodG1sRGF0YVVyaSIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImpzb25EYXRhVXJpIiwiY29weUNvbW1hbmRzIiwiYyIsIm9wZW5UYyIsInJlcGxhY2VQYXRoIiwicGF0aCIsInRvSHRtbERhdGFVcmkiLCJmcm9tSHRtbCIsIiRyb290IiwiJCIsIiRiYXNlIiwiJHRpdGxlIiwiJHRycyIsIiRlbCIsInRyIiwidHJIdG1sIiwib3V0ZXJIdG1sIiwiJGNoaWxkcmVuIiwiJGNtZCIsImVxIiwiJHZhbCIsIkNvbW1hbmRzIiwiQ29tbWFuZCIsIlRhcmdldCIsIlZhbHVlIiwiZ2V0VG9kYXkiLCJkIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJDcmVhdGlvbkRhdGUiLCJ0b0pTT05EYXRhVXJpIiwiY3N2RGF0YVVSSSIsImNzdlN0ciIsInBhcnNlRnJvbUNTViIsInBhcnNlIiwiZXJyIiwic3RyaW5naWZ5VG9DU1YiLCJ0b0NzdkRhdGFVUkkiLCJDU1ZNYW4iLCJiYXNlRGlyIiwiZ2V0VGltZSIsImZzIiwicmVhZEZpbGUiLCJfX2ZpbGVQYXRoIiwiRmlsZU1hbiIsImdldFN0eWxlIiwiZG9tIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInNldFN0eWxlIiwic3R5bGUiLCJrZXlzIiwiT2JqZWN0IiwibGVuIiwicGl4ZWwiLCJudW0iLCJiaW5kRHJhZyIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnRW5kIiwib25EcmFnIiwiaXNEcmFnZ2luZyIsInN0YXJ0UG9zIiwib25Nb3VzZURvd24iLCJzY3JlZW5YIiwic2NyZWVuWSIsIm9uTW91c2VVcCIsImR4IiwiZHkiLCJvbk1vdXNlTW92ZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwib25DbGljayIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYmluZENvbnRlbnRFZGl0YWJsZUNoYW5nZSIsIm9uQ2hhbmdlIiwiY3VycmVudENFIiwib2xkQ29udGVudCIsIm9uRm9jdXMiLCJvbkJsdXIiLCIkZG9tIiwiaXQiLCJpbm5lclRleHQiLCJ0ZXh0Q29udGVudCIsInBvcyIsImRpc3BsYXkiLCJvcGFjaXR5IiwidmlzaWJpbGl0eSIsIm5vZGVUeXBlIiwiY2xhc3NlcyIsImNsYXNzTmFtZSIsImZyb20iLCJjaGlsZE5vZGVzIiwic2FtZVRhZyIsInNhbWVDbGFzcyIsImNzIiwiYW5kIiwiZmluZEluZGV4IiwibWUiLCJyZXQiLCJpc1Bvc2l0aW9uRml4ZWQiLCJyZW1vdmVGcm9tQXJyYXkiLCJhcnJheSIsInNwbGljZSIsIkRhdGFUcmFuc2ZlciIsImRhdGFCeUZvcm1hdCIsImRyb3BFZmZlY3QiLCJlZmZlY3RBbGxvd2VkIiwiY2xlYXJEYXRhIiwiZGF0YUZvcm1hdCIsImdldERhdGEiLCJzZXREYXRhIiwic2V0RHJhZ0ltYWdlIiwibW9kdWxlIiwiZXhwb3J0cyIsInRtcCIsImV2ZW50RmFjdG9yeSIsInJlcXVpcmUiLCJfbm9vcCIsInBhcnNlUGFyYW1zIiwidGFyZ2V0RWxlbWVudCIsImV2ZW50UHJvcGVydGllcyIsImNvbmZpZ0NhbGxiYWNrIiwiY3VzdG9taXplRXZlbnQiLCJldmVudCIsImlzUHJpbWFyeUV2ZW50IiwiY3JlYXRlQW5kRGlzcGF0Y2hFdmVudHMiLCJldmVudE5hbWVzIiwicHJpbWFyeUV2ZW50TmFtZSIsImRhdGFUcmFuc2ZlciIsImV2ZW50TmFtZSIsImNyZWF0ZUV2ZW50IiwiRHJhZ0Ryb3BBY3Rpb24iLCJsYXN0RHJhZ1NvdXJjZSIsImxhc3REYXRhVHJhbnNmZXIiLCJwZW5kaW5nQWN0aW9uc1F1ZXVlIiwiX3F1ZXVlIiwiX3F1ZXVlRXhlY3V0ZU5leHQiLCJzZWxmIiwiZmlyc3RQZW5kaW5nQWN0aW9uIiwiZG9uZUNhbGxiYWNrIiwic2hpZnQiLCJkcmFnU3RhcnQiLCJwYXJhbXMiLCJldmVudHMiLCJkcmFnRW50ZXIiLCJvdmVyRWxlbWVudCIsImRyYWdPdmVyIiwiZHJhZ0xlYXZlIiwiZHJvcCIsImV2ZW50c09uRHJvcFRhcmdldCIsImV2ZW50c09uRHJhZ1NvdXJjZSIsImNhbGxiYWNrIiwiZGVsYXkiLCJ3YWl0aW5nVGltZU1zIiwiZG9uZSIsImRhdGFUcmFuc2ZlckV2ZW50cyIsIm1lcmdlSW50byIsImRlc3RPYmoiLCJzcmNPYmoiLCJoYXNPd25Qcm9wZXJ0eSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImNyZWF0ZU1vZGVybkV2ZW50IiwiY3JlYXRlTGVnYWN5RXZlbnQiLCJpbml0RXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJFdmVudEZhY3RvcnkiLCJpbnN0YW5jZSIsIm1ldGhvZE5hbWUiLCJhcHBseSIsImVsZW1lbnQiLCJnZXRYcGF0aE9mRWxlbWVudCIsInBhcmVudEVsZW1lbnQiLCJzaWJsaW5nRWxlbWVudCIsInRhZ0NvdW50IiwidG90YWxUYWdDb3VudCIsImlzRm91bmQiLCJzY3JpcHQiLCJ3aW4iLCJzY3JpcHRUYWciLCJhcmd1bWVudHMiLCJSQVdfUFJFRklYIiwiQ0lQSEVSX1BSRUZJWCIsIlJBV19QUkVGSVhfUkVHIiwiUmVnRXhwIiwiQ0lQSEVSX1BSRUZJWF9SRUciLCJnZXRFbmNyeXB0Q29uZmlnIiwic2hvdWxkRW5jcnlwdCIsInNob3VsZEVuY3J5cHRQYXNzd29yZCIsIm1hc3RlclBhc3N3b3JkIiwiYWVzRW5jcnlwdCIsInBhc3N3b3JkIiwicGJrZGYyIiwicGJrZGYyU3luYyIsImVuZ2luZSIsImFlc2pzIiwiTW9kZU9mT3BlcmF0aW9uIiwiY3RyIiwidXRpbHMiLCJoZXgiLCJmcm9tQnl0ZXMiLCJlbmNyeXB0IiwidXRmOCIsInRvQnl0ZXMiLCJhZXNEZWNyeXB0IiwiZGVjcnlwdCIsImVuY3J5cHRJZk5lZWRlZCIsImV4dGVuZCIsImhlYWQiLCJmbGF0dGVuIiwiY29uY2F0Iiwic3VtIiwibGFzdCIsIm9yIiwiemlwV2l0aCIsIm1pbiIsIkluZmluaXR5IiwiaW50ZXJzZWN0IiwidmFsIiwibm8iLCJkZWVwRXF1YWwiLCJzdHlsZU5hbWUiLCJjc3NTdW0iLCJpc0lubGluZSIsImdldENsaWVudFJlY3RzIiwibm9QeCIsInciLCJoIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJyZW1vdmVDaGlsZHJlbiIsInByZWRpY2F0ZSIsInByZWQiLCJpbkRvbSIsIiRvdXRlciIsImluRG9tTGlzdCIsInBhcmVudFdpdGhUYWciLCJsb3dlclRhZyIsInBhcmVudFdpdGhDbGFzcyIsImNvbnRhaW5zIiwiZ2V0VGFnSW5kZXgiLCJub2RlIiwiY291bnQiLCJoZWxwZXIiLCJwYXJ0cyIsInByZWZpeCIsImF0WFBhdGgiLCJsb3dlciIsImdldEZpcnN0V29ya2luZ0xvY2F0b3IiLCJsb2NhdG9ycyIsImdldExvY2F0b3IiLCJ3aXRoQWxsT3B0aW9ucyIsImlzTGluayIsImNob3NlbiIsInRhcmdldE9wdGlvbnMiLCJjaGVja0lmcmFtZSIsImlmcmFtZVdpbiIsInJhbmRvbSIsImdldEZyYW1lTG9jYXRvciIsImZyYW1lV2luIiwiZnJhbWVFbGVtZW50IiwibWFza0ZhY3RvcnkiLCJjYWNoZSIsInJvdW5kIiwiZGVmYXVsdFN0eWxlIiwicG9zaXRpb24iLCJ6SW5kZXgiLCJib3hTaXppbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJwb2ludGVyRXZlbnRzIiwiZ2VuTWFzayIsIm1hc2siLCJnZW4iLCJzaG93TWFza092ZXIiLCJJbnRlcnByZXRlciIsImxhYmVscyIsInRhZ3MiLCJwcmUiLCJfX2N1c3RvbVByZSIsIl9fY3VzdG9tUnVuIiwiX19jdXN0b21Qb3N0IiwiX19zZXRTdGF0ZSIsIm5leHRTdGF0ZSIsImhhbGZUYWdzIiwiZXJyb3JBdEluZGV4IiwiZXJyb3JJbmRleCIsInRvcEhhbGZUYWciLCJzdGFydCIsImVuZCIsInBvcCIsImZvcmsiLCJpc1ZhbGlkVGFyZ2V0IiwiaXNGbG93TG9naWMiLCJuZXh0SW5kZXgiLCJjb25kIiwiZm9ya0luZGV4IiwiZW5kSW5kZXgiLCJsYWJlbE5hbWUiLCJsYWJlbCIsInN0IiwiVFlQRSIsInRhcmdldFdpbiIsIm15V2luIiwicGF5bG9hZCIsInNlY3JldCIsIm9uTXNnIiwiaXNSZXF1ZXN0Iiwib25NZXNzYWdlIiwidHBsIiwic291cmNlIiwicmVzIiwidGhyb3dOb3RUb3AiLCJpcGMiLCJjc0luaXQiLCJzZW5kIiwib25Bc2siLCJkZXN0cm95IiwiZ2V0X1VSTCIsIndlYmtpdFVSTCIsImlzX2ZpcmVmb3hfZXh0ZW5zaW9uIiwicHJvdG9jb2wiLCJjcmVhdGVfbGlua19mb3JfZmZfZXh0IiwiaWZyYW1lSWQiLCIkaWZyYW1lIiwiY3JlYXRlRWxlbWVudE5TIiwibGluayIsInNhdmVfbGluayIsImNhbl91c2Vfc2F2ZV9saW5rIiwiaXNfc2FmYXJpIiwiSFRNTEVsZW1lbnQiLCJzYWZhcmkiLCJpc19jaHJvbWVfaW9zIiwidGhyb3dfb3V0c2lkZSIsImV4Iiwic2V0SW1tZWRpYXRlIiwiZm9yY2Vfc2F2ZWFibGVfdHlwZSIsImFyYml0cmFyeV9yZXZva2VfdGltZW91dCIsInJldm9rZSIsInJldm9rZXIiLCJyZXZva2VPYmplY3RVUkwiLCJmaWxlc2F2ZXIiLCJldmVudF90eXBlcyIsImxpc3RlbmVyIiwiYXV0b19ib20iLCJCbG9iIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibm9fYXV0b19ib20iLCJmb3JjZSIsIm9iamVjdF91cmwiLCJkaXNwYXRjaF9hbGwiLCJmc19lcnJvciIsIkZpbGVSZWFkZXIiLCJyZWFkZXIiLCJvbmxvYWRlbmQiLCJwb3B1cCIsIm9wZW4iLCJyZWFkeVN0YXRlIiwiRE9ORSIsInJlYWRBc0RhdGFVUkwiLCJJTklUIiwiY3JlYXRlT2JqZWN0VVJMIiwib3BlbmVkIiwiZG93bmxvYWQiLCJGU19wcm90byIsIm1zU2F2ZU9yT3BlbkJsb2IiLCJhYm9ydCIsIldSSVRJTkciLCJvbndyaXRlc3RhcnQiLCJvbnByb2dyZXNzIiwib253cml0ZSIsIm9uYWJvcnQiLCJvbmVycm9yIiwib253cml0ZWVuZCIsImNvbnRlbnQiLCJkZWZpbmUiLCJDVFJMIiwiTUVUQSIsIkFMVCIsIlNISUZUIiwiS2V5RXZlbnRzIiwiRE9XTiIsIlBSRVNTIiwiVVAiLCJJTlBVVCIsIkFMTCIsIktleXN0cm9rZSIsIm1vZGlmaWVycyIsImtleUNvZGUiLCJjdHJsS2V5IiwibWV0YUtleSIsImFsdEtleSIsInNoaWZ0S2V5IiwiS2V5Ym9hcmQiLCJjaGFyQ29kZUtleUNvZGVNYXAiLCJhY3Rpb25LZXlDb2RlTWFwIiwiX2NoYXJDb2RlS2V5Q29kZU1hcCIsIl9hY3Rpb25LZXlDb2RlTWFwIiwia2V5c3Ryb2tlIiwiY2hhckNvZGUiLCJrZXlzdHJva2VGb3JDaGFyQ29kZSIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImNoYXJDb2RlRm9yS2V5c3Ryb2tlIiwid2hpY2giLCJrZXlzdHJva2VGb3JBY3Rpb24iLCJkaXNwYXRjaEV2ZW50c0ZvcktleXN0cm9rZSIsImlucHV0IiwiY3VycmVudE1vZGlmaWVyU3RhdGUiLCJjaGFyQ29kZUF0IiwiZGlzcGF0Y2hNb2RpZmllclN0YXRlVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Nb2RpZmllcnMiLCJrZXlkb3duRXZlbnQiLCJjcmVhdGVFdmVudEZyb21LZXlzdHJva2UiLCJ0YXJnZXRDYW5SZWNlaXZlVGV4dElucHV0Iiwia2V5cHJlc3NFdmVudCIsInRleHRpbnB1dEV2ZW50IiwiaW5wdXRFdmVudCIsImtleXVwRXZlbnQiLCJmcm9tTW9kaWZpZXJTdGF0ZSIsInRvTW9kaWZpZXJTdGF0ZSIsImRpZEhhdmVNZXRhIiwid2lsbEhhdmVNZXRhIiwiZGlkSGF2ZUN0cmwiLCJ3aWxsSGF2ZUN0cmwiLCJkaWRIYXZlU2hpZnQiLCJ3aWxsSGF2ZVNoaWZ0IiwiZGlkSGF2ZUFsdCIsIndpbGxIYXZlQWx0IiwiaW5jbHVkZUtleVVwIiwiaW5jbHVkZUtleURvd24iLCJsYXN0UGFydCIsInBhcnQiLCJsYXN0UGFydEtleXN0cm9rZSIsImlzRWRpdGFibGUiLCJVU19FTkdMSVNIX0NIQVJDT0RFX0tFWUNPREVfTUFQIiwiVVNfRU5HTElTSF9BQ1RJT05fS0VZQ09ERV9NQVAiLCJCQUNLU1BBQ0UiLCJUQUIiLCJFTlRFUiIsIlBBVVNFIiwiQ0FQU0xPQ0siLCJFU0NBUEUiLCJQQUdFVVAiLCJQQUdFRE9XTiIsIkVORCIsIkhPTUUiLCJMRUZUIiwiUklHSFQiLCJJTlNFUlQiLCJERUxFVEUiLCJGMSIsIkYyIiwiRjMiLCJGNCIsIkY1IiwiRjYiLCJGNyIsIkY4IiwiRjkiLCJGMTAiLCJGMTEiLCJGMTIiLCJVU19FTkdMSVNIIiwicmVuZGVyTG9nVHlwZSIsImlnbm9yZWQiLCJyZW5kZXJMb2ciLCJNT0RFIiwiU1RSQUlHSFQiLCJTSU5HTEUiLCJMT09QIiwiU1RBVFVTIiwiUExBWUlORyIsIlBBVVNFRCIsIlNUT1BQRUQiLCJFUlJPUiIsIkVORF9SRUFTT04iLCJDT01QTEVURSIsIk1BTlVBTCIsImlzRW1wdHkiLCJpbml0aWFsU3RhdGUiLCJzdGFydFVybCIsInN0YXJ0SW5kZXgiLCJkb25lSW5kaWNlcyIsInJlc291cmNlcyIsIlBsYXllciIsInByZXBhcmUiLCJoYW5kbGVSZXN1bHQiLCJfX3J1biIsIl9fcHJlcGFyZSIsIl9faGFuZGxlIiwibG9vcHNTdGFydCIsImZsb29yIiwibG9vcHNFbmQiLCJiYXNpY1N0YXRlIiwibG9vcHNDdXJzb3IiLCJsYXN0UGxheUNvbmZpZyIsImVtaXQiLCJfX2dvIiwiaXNTdGVwIiwiX19lcnJMb2ciLCJfX2VuZCIsInRva2VuIiwiZ3VhcmRUb2tlbiIsInByZURlbGF5IiwiX19kZWxheSIsIl9fc2hvdWxkQ29udGludWUiLCJwYXVzZWQiLCJzdG9wcGVkIiwiY3VycmVudExvb3AiLCJyZXNvdXJjZSIsImxhc3RCcmVha3BvaW50IiwicGF1c2UiLCJvbGRMb29wc0N1cnNvciIsIl9fc2V0TmV4dCIsImlzTG9vcHNDdXJzb3JDaGFuZ2VkIiwicmVhc29uIiwic2lsZW50IiwicmVzdGFydCIsIm5leHRJbmRleFBhc3NlZCIsIm5leHRJbmRleFRvU2V0IiwibGN1ciIsIm5leHQiLCJlZSIsIkMiLCJwbGF5ZXJQb29sIiwiUmVnaXN0cnkiLCJwcm9jZXNzIiwib25aZXJvIiwib25PbmUiLCJfX3Byb2Nlc3MiLCJfX29uWmVybyIsIl9fb25PbmUiLCJrZXlib2FyZCIsIktleXNpbSIsImZpbmRQYXJlbnRCeVRhZyIsInNwbGl0U3RyaW5nVG9DaGFycyIsInNwZWNpYWxLZXlzIiwic3BsaXRLZWVwIiwiZ2V0S2V5U3Ryb2tlQWN0aW9uIiwiZWRpdGFibGVUeXBlcyIsIm1heWJlRWRpdFRleHQiLCJpc05pbCIsInNlbGVjdGlvblN0YXJ0IiwibGFzdFN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwic2V0U2VsZWN0aW9uIiwibWF5YmVTdWJtaXRGb3JtIiwiZm9ybSIsInN1Ym1pdCIsInJlcGxhY2VBY3Rpb25LZXkiLCJtYXBwaW5nIiwibm9TcGVjaWFsS2V5cyIsInJhd0NoYXJzIiwiY2hhcnMiLCJmb2N1cyIsImRpc3BhdGNoRXZlbnRzRm9yQWN0aW9uIiwia2V5Q29uc3RhbnRzIiwiREVGQVVMVF9LRVkiLCJ2YWxpZGF0ZVZhcmlhYmxlTmFtZSIsImNoYXJBdCIsInZhbGlkYXRlU3RhbmRhcmROYW1lIiwidmFyc0ZhY3RvcnkiLCJpbml0aWFsIiwiaXNJbnZhbGlkSW50ZXJuYWxWYXIiLCJyZWFkb25seSIsInR5cGVDaGVjayIsIm5vcm1hbGl6ZSIsInVwcGVyS2V5IiwiYWNjZXB0U3RyaW5nVHJ1ZUZhbHNlIiwibGlzdGVuZXJzIiwiZmlyZU9uQ2hhbmdlIiwiZmlyZSIsInJlc2V0Iiwia2VlcEdsb2JhbCIsImdsb2JhbHMiLCJyZW5kZXIiLCJnZXRWYXIiLCJyZXBsYWNlQWxsVmFycyIsImdldEtleSIsImRlY29yYXRlIiwidmFyaWFibGUiLCJyZWdEb2xsYXIiLCJyZWdTdG9yZWRWYXJzIiwid2l0aEhhc2hOb3RhdGlvbiIsImZpZWxkIiwiaXNBZG1pbiIsInRyaW1tZWRLZXkiLCJ0YXJnZXRLZXkiLCJjc3ZMaW5lIiwiaXNSZWFkT25seSIsImR1bXAiLCJnZXRWYXJzSW5zdGFuY2UiLCJjcmVhdGVWYXJzRmlsdGVyIiwid2l0aFVzZXJEZWZpbmVkIiwid2l0aENvbW1vbkludGVybmFsIiwid2l0aEFkdmFuY2VkSW50ZXJuYWwiLCJjaGVja1VzZXJEZWZpbmVkIiwiY2hlY2tDb21tb25JbnRlcm5hbCIsImNoZWNrQWR2YW5jZWRJbnRlcm5hbCIsIm9yQ2hlY2siLCJmbnMiLCJWaXNpb25NYW4iLCJ3cml0ZUZpbGUiLCJFZGl0SW5QbGFjZSIsImlzRWRpdGluZyIsImVkaXQiLCJzZXRTdGF0ZSIsIiRpbnB1dCIsInJlZnMiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJjaGVja1ZhbHVlIiwibmV4dFByb3BzIiwibWFyZ2luTGVmdCIsImN1cnNvciIsInJlZiIsIlJlYWN0IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJkZWZhdWx0UHJvcHMiLCJFZGl0VGVzdFN1aXRlIiwidmFsdWVNb2RpZmllZCIsImVyck1zZyIsIm9uU2F2ZSIsInZhbGlkYXRlIiwidmlzaWJsZSIsIm9uQ2xvc2UiLCJjb2xvciIsImxpbmVIZWlnaHQiLCJtYXJnaW5Cb3R0b20iLCJzb3VyY2VFcnJNc2ciLCJqc29uIiwibGluZU51bWJlcnMiLCJtYXRjaEJyYWNrZXRzIiwiYXV0b0Nsb3NlQnJhY2tldHMiLCJib29sIiwiRWRpdGFibGVUZXh0Iiwib25LZXlEb3duIiwib25DbGlja1RleHQiLCJjbGlja1RvRWRpdCIsImZvY3VzT25JbnB1dCIsImlucHV0UHJvcHMiLCJvYmplY3QiLCJ0ZXh0UHJvcHMiLCJhbnkiLCJIZWFkZXIiLCJzaG93UGxheUxvb3BzIiwic2hvd1JlcGxheVNldHRpbmdzIiwiVEVTVF9DQVNFIiwiVEVTVF9TVUlURSIsImdldFRlc3RDYXNlTmFtZSIsInRvZ2dsZVBsYXlMb29wc01vZGFsIiwidG9TaG93Iiwib25Ub2dnbGVSZWNvcmQiLCJSRUNPUkRFUiIsImxhc3RPcGVyYXRpb24iLCJvbkNsaWNrUGxheUxvb3BzIiwicGxheUNvbW1hbmRJbnRlcnZhbCIsIm9uQ2FuY2VsUGxheUxvb3BzIiwibG9vcHNUb1BsYXkiLCJvbkNoYW5nZVBsYXlMb29wcyIsIm9uQ2xpY2tTYXZlIiwiZ2V0U2F2ZVRlc3RDYXNlIiwic2F2ZSIsInBsYXlDdXJyZW50TWFjcm8iLCJwbGF5Q3VycmVudExpbmUiLCJzZWxlY3RlZEluZGV4IiwiaGlzdG9yeSIsInBhdGhuYW1lIiwibGlzdGVuIiwib25Db25maWdDaGFuZ2UiLCJkaXNwbGF5Q29uZmlnIiwibGFiZWxDb2wiLCJzcGFuIiwid3JhcHBlckNvbCIsIm9uRXJyb3JJbkxvb3AiLCJkZWZhdWx0VmlzaW9uU2VhcmNoQ29uZmlkZW5jZSIsInJhbmdlIiwidG9GaXhlZCIsImFsbG93UnVuRnJvbUJvb2ttYXJrIiwiYWxsb3dSdW5Gcm9tRmlsZVNjaGVtYSIsImFsbG93UnVuRnJvbUh0dHBTY2hlbWEiLCJyZWNvcmROb3RpZmljYXRpb24iLCJyZWNvcmRDbGlja1R5cGUiLCJlbmFibGVBdXRvQmFja3VwIiwiYXV0b0JhY2t1cEludGVydmFsIiwiaHRtbFVyaSIsImpzb25VcmkiLCJjYW5QbGF5IiwiZG93bmxvYWROYW1lUHJlZml4Iiwib25DbGlja01lbnVJdGVtIiwicmVuZGVySW5uZXIiLCJQTEFZRVIiLCJuZXh0Q29tbWFuZEluZGV4IiwidW5zaGlmdCIsInBsYXlNZW51Iiwic3RvcCIsInJlc3VtZSIsImhhc1Vuc2F2ZWQiLCJpc1BsYXllclN0b3BwZWQiLCJrbGFzcyIsInNhdmVCdG5TdGF0ZSIsImRpc2FibGVkIiwibmFtZUEiLCJuYW1lQiIsInJlbmRlck1hY3JvIiwicmVuZGVyU3RhdHVzIiwicmVuZGVyQWN0aW9ucyIsInJlbmRlclBsYXlMb29wTW9kYWwiLCJyZW5kZXJTZXR0aW5nTW9kYWwiLCJoYXNVbnNhdmVkTWFjcm8iLCJyb3V0ZSIsIndpdGhSb3V0ZXIiLCJTYXZlQXNNb2RhbCIsImlucHV0U2F2ZVRlc3RDYXNlIiwib25PayIsIm9uQ2FuY2VsIiwiZ2V0Q29udGFpbmVyIiwiJG5ldyIsInRyeVRvU2F2ZSIsInN0b3JlIiwidGVzdENhc2VOYW1lIiwiJGNvbnRhaW5lciIsImV4aXN0ZWQiLCJzdWNjZXNzIiwiUmVhY3RET00iLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwiZmFjdG9yeSIsInNhdmVPck5vdCIsImNvbmZpcm0iLCJva1RleHQiLCJjYW5jZWxUZXh0IiwiZGVmYXVsdE5hbWUiLCJTZWFyY2hCb3giLCJjYW5DbGVhciIsInJpZ2h0IiwidHJhbnNmb3JtIiwiRGVtb0F1dG9maWxsIiwiRGVtb0NhbnZhcyIsIkRlbW9Db21wdXRlclZpc2lvbiIsIkRlbW9EaWFsb2dib3hlcyIsIkRlbW9EcmFnRHJvcCIsIkRlbW9Eb3dubG9hZCIsIkRlbW9FeHRyYWN0IiwiRGVtb0ZyYW1lcyIsIkRlbW9UYWtlU2NyZWVuc2hvdHMiLCJEZW1vSWZFbHNlIiwiRGVtb0lmcmFtZSIsIkRlbW9JbXBsaWNpdFdhaXRpbmciLCJEZW1vQ3N2UmVhZFdpdGhMb29wIiwiRGVtb0NzdlJlYWRXaXRoV2hpbGUiLCJEZW1vQ3N2U2F2ZSIsIkRlbW9TdG9yZUV2YWwiLCJEZW1vVGFicyIsIkRlbW9WaXN1YWxVSVRlc3QiLCJEYXNoYm9hcmRCb3R0b20iLCJhY3RpdmVUYWJGb3JMb2dTY3JlZW5zaG90Iiwic2hvd0NTVk1vZGFsIiwiY3N2VGV4dCIsImNzdkZpbGUiLCJkcmFnIiwic3RhcnRZIiwibGFzdEhlaWdodCIsImN1cnJlbnRNaW5IZWlnaHQiLCJnZXRCb3R0b21NaW5IZWlnaHQiLCJvblJlc2l6ZURyYWdTdGFydCIsInNldEluIiwiY3VycmVudEhlaWdodCIsIm9uUmVzaXplRHJhZ0VuZCIsImRpZmYiLCJvbkZpbGVDaGFuZ2UiLCJjc3ZNYW4iLCJvbmxvYWQiLCJyZWFkZXJFdmVudCIsInJlYWRBc1RleHQiLCJuYW1lcyIsIndyaXRlIiwic2FuaXRpemVGaWxlTmFtZSIsImZpbGVJdGVtIiwicmVtb3ZlQ1NWIiwidmlld0NTViIsIm9uSW1hZ2VGaWxlQ2hhbmdlIiwiZGF0YVVybCIsInN0b3JlSW1hZ2UiLCJ1bmlxdWVOYW1lIiwiY2hlY2siLCJleGlzdHMiLCJkYXRhVVJJdG9CbG9iIiwiZmlsZU5hbWVzIiwidGFrZVNjcmVlbnNob3QiLCJ2aWV3VmlzaW9uIiwiYWRkVmlzaW9uTmFtZVRvVGFyZ2V0Qm94Iiwic2VsZWN0ZWRDb21tYW5kIiwiZXhwb3J0QWxsVmlzaW9ucyIsImxvZ3MiLCIkbG9nQ29udGVudCIsIml0ZW1IZWlnaHQiLCJ2IiwidG9Gb2N1cyIsImJlaGF2aW9yIiwiY29sdW1ucyIsImRhdGFJbmRleCIsInBhZCIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJ0YWJsZUNvbmZpZyIsImRhdGFTb3VyY2UiLCJwYWdpbmF0aW9uIiwiYm9yZGVyZWQiLCJyb3dLZXkiLCJvblJvd0NsaWNrIiwicmVjb3JkIiwicm93Q2xhc3NOYW1lIiwiYmFja2dyb3VuZEltYWdlIiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYmFja2dyb3VuZFBvc2l0aW9uIiwicmVuYW1lIiwic2hvd0NvbW1vbkludGVybmFsVmFyaWFibGVzIiwic2hvd0FkdmFuY2VkSW50ZXJuYWxWYXJpYWJsZXMiLCJmaWx0ZXJzIiwibG9nRmlsdGVyIiwicmVuZGVyQ1NWTW9kYWwiLCJjbiIsImZvY3VzZWQiLCJsb2dTdHlsZSIsInJlbmRlclZhcmlhYmxlVGFibGUiLCJ0b0xvY2FsZVN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbmRlckNTVlRhYmxlIiwiaW1hZ2VGaWxlSW5wdXQiLCJyZW5kZXJWaXNpb25UYWJsZSIsIm1hcmdpblJpZ2h0IiwiZmlsZUlucHV0IiwiaGFzU2VsZWN0ZWRDb21tYW5kIiwiZWRpdG9yU2VsZWN0ZWRDb21tYW5kIiwiYXZhaWxhYmxlQ29tbWFuZHMiLCJuZXdDb21tYW5kIiwiZGVmYXVsdERhdGFTb3VyY2UiLCJEYXNoYm9hcmRFZGl0b3IiLCJjb250ZXh0TWVudSIsImlzU2hvd24iLCJ2aXNpb25GaW5kUHJldmlldyIsInJlc2V0U291cmNlQ29kZUN1cnNvciIsInJlc2V0Q3Vyc29yIiwibGluZSIsImNoIiwib25EZXRhaWxDaGFuZ2UiLCJvbkNoYW5nZUNvbW1hbmRzVmlldyIsImZvcmNlVHlwZSIsImNvZGVNaXJyb3IiLCJzZXRDdXJzb3IiLCJvblNvdXJjZUJsdXIiLCJzb3VyY2VUZXh0TW9kaWZpZWQiLCJzb3VyY2VUZXh0Iiwib25DaGFuZ2VFZGl0U291cmNlIiwib25DbGlja0ZpbmQiLCJwbGF5TGluZSIsInRocm93RXJyb3IiLCJvblRvZ2dsZUluc3BlY3QiLCJJTlNQRUNUT1IiLCJvbkRvdWJsZUNsaWNrIiwibGFzdFNjcmVlblgiLCJsYXN0U2NyZWVuWSIsImxhc3RUaW1lIiwiZ28iLCIkcm93IiwiaW5zcGVjdG9yIiwiaXNOYU4iLCJub3ciLCJzY2hlZHVsZUhpZGVWaXNpb25GaW5kUHJldmlldyIsImNsZWFyVGltZW91dCIsIm9uTW91c2VFbnRlclRhcmdldCIsImNvbW1vbiIsIm9uTW91c2VMZWF2ZVRhcmdldCIsImp1bXBUb1NvdXJjZUNvZGUiLCJjbUVkdGlvckluc3RhbmNlIiwiZW5kTGluZSIsIiR0YWIiLCJ0YWJIZWlnaHQiLCJtYXJnaW4iLCJzY3JvbGwiLCJjb21tYW5kQ2xhc3NOYW1lIiwiZXJyb3JDb21tYW5kSW5kaWNlcyIsImRvbmVDb21tYW5kSW5kaWNlcyIsImNsYXNzTmFtZXMiLCJuZWVkVmlydHVhbExpc3QiLCJ0aHJlc2hvbGQiLCJ2aXJ0dWFsQ29tbW1hbmRMaXN0IiwidmlydHVhbCIsImVkaXRhYmxlIiwicmVuZGVySXRlbSIsImhlYWRlciIsImZvb3RlciIsInJlYWxJbmRleCIsIm9uQ29udGV4dE1lbnUiLCJpdGVtcyIsIm9uSGlkZU1lbnUiLCJidXR0b24iLCJleHRyYU9wdGlvbnMiLCIkdGFibGVCb2R5IiwiYm9yZGVyIiwiY2xpcGJvYXJkIiwiZHciLCJkaCIsIm13IiwibWVudVN0eWxlIiwiaXNCcmVha3BvaW50IiwiaGFuZGxlQ2xpY2siLCJyZW5kZXJWaXJ0dWFsVGFibGUiLCJyZW5kZXJOb3JtYWxUYWJsZSIsIkNvbW1hbmRWaXJ0dWFsTGlzdCIsIlZpcnR1YWxMaXN0IiwiY29udGFpbmVyIiwibGlzdENvbnRhaW5lciIsInBhZGRlZERhdGFTb3VyY2UiLCJzZWxlY3RlZENtZCIsImlzQ21kRWRpdGFibGUiLCJpc0luc3BlY3RpbmciLCJzZWxlY3RlZENtZElzVmlzdWFsU2VhcmNoIiwiYWN0aXZlVGFiIiwicmVuZGVyVGFibGUiLCJmbGV4IiwibWF4V2lkdGgiLCJzdGlja3kiLCJyZW5kZXJDb250ZXh0TWVudSIsInJlbmRlclZpc2lvbkZpbmRQcmV2aWV3IiwiRGFzaGJvYXJkIiwiaXNXaW5kb3dzIiwiU2lkZWJhciIsInN0YXJ0WCIsIm1vdmluZ1giLCJsYXN0V2lkdGgiLCJjdXJyZW50TWluV2lkdGgiLCJnZXRTaWRlQmFyTWluV2lkdGgiLCJjdXJyZW50V2lkdGgiLCJtaW5XaWR0aCIsInVpIiwic2lkZWJhclRhYiIsImFjdGl2ZUtleSIsImRvd25sb2FkVGVzdENhc2VBc0pTT04iLCJkb3dubG9hZFRlc3RDYXNlQXNIVE1MIiwiU2lkZWJhclRlc3RDYXNlcyIsInNlYXJjaFRleHQiLCJzaG93RHVwbGljYXRlIiwiZHVwbGljYXRlTmFtZSIsInNob3dSZW5hbWUiLCJ0Y0NvbnRleHRNZW51Iiwib25DbGlja1JlbmFtZSIsInJlbmFtZVRjSWQiLCJ0b2dnbGVSZW5hbWVNb2RhbCIsIm9uQ2FuY2VsUmVuYW1lIiwib25DaGFuZ2VSZW5hbWUiLCJvbkNsaWNrRHVwbGljYXRlIiwiZHVwbGljYXRlVGNJZCIsInRvZ2dsZUR1cGxpY2F0ZU1vZGFsIiwib25DYW5jZWxEdXBsaWNhdGUiLCJvbkNoYW5nZUR1cGxpY2F0ZSIsImlucHV0RHVwbGljYXRlVGVzdENhc2UiLCJpbnB1dFJlbmFtZVRlc3RDYXNlIiwiZ2V0SXRlbUtsYXNzIiwia2xhc3NlcyIsIlNVQ0NFU1MiLCJOT1JNQUwiLCJjaGFuZ2VUZXN0Q2FzZSIsInBsYXlUZXN0Q2FzZSIsInNob3VsZFBsYXkiLCJwbGF5SW50ZXJ2YWwiLCJvblJlYWRGaWxlIiwiZG9uZUxpc3QiLCJmYWlsTGlzdCIsImZhaWwiLCJvbkhUTUxGaWxlQ2hhbmdlIiwiaHRtbEZpbGVJbnB1dCIsIm9uSlNPTkZpbGVDaGFuZ2UiLCJqc29uRmlsZUlucHV0IiwiYWRkVGVzdENhc2UiLCJvbkNsaWNrVGVzdENhc2VNb3JlIiwidGNJbmRleCIsImhpZGVUY0NvbnRleHRNZW51Iiwib25UY01lbnVDbGljayIsIndhcm5pbmciLCJwcm9tcHQiLCJpc0VkaXRpbmdVbnRpdGxlZCIsInRyaW1TZWFyY2hUZXh0IiwibWF0Y2hUZXh0IiwiJGJveCIsImNyZWF0ZVBvcnRhbCIsImdldFBvcnRhbENvbnRhaW5lciIsInJlbmRlclRlc3RDYXNlTWVudSIsInBsYWNlaG9sZGVyIiwicmVuZGVyVGVzdENhc2VzIiwicmVuZGVyVGVzdENhc2VDb250ZXh0TWVudSIsInJlbmRlckR1cGxpY2F0ZU1vZGFsIiwicmVuZGVyUmVuYW1lTW9kYWwiLCJkb3dubG9hZFRlc3RTdWl0ZSIsImRvd25sb2FkVGVzdFN1aXRlQXNIVE1MIiwiU2lkZWJhclRlc3RTdWl0ZXMiLCJ0c0NvbnRleHRNZW51IiwidHNjQ29udGV4dE1lbnUiLCJ0c0VkaXRpbmdOYW1lSW5kZXgiLCJlZGl0VGVzdFN1aXRlU291cmNlIiwiYWRkVGVzdENhc2VUb1Rlc3RTdWl0ZSIsInJlbW92ZVRlc3RDYXNlRnJvbVRlc3RTdWl0ZSIsInBsYXlTdGF0dXMiLCJlcnJvckluZGljZXMiLCJ1cGRhdGVJbmRleCIsInRvZ2dsZVRlc3RTdWl0ZUZvbGQiLCJmb2xkQWxsVGVzdFN1aXRlcyIsIm9uQ2xpY2tUZXN0U3VpdGVNb3JlIiwidHNJbmRleCIsIm9uQ2xpY2tUc1Rlc3RDYXNlTW9yZSIsImhpZGVUc0NvbnRleHRNZW51IiwiaGlkZVRzY0NvbnRleHRNZW51Iiwib25Uc01lbnVDbGljayIsIm9uVHNjTWVudUNsaWNrIiwib25DaGFuZ2VUc05hbWUiLCJvbkNoYW5nZVRzQ2FzZSIsImdldFRzVGVzdENhc2VDbGFzcyIsInRzUGxheVN0YXR1cyIsImN1cnJlbnRJbmRleCIsIm9uQ2xvc2VQbGF5VGVzdFN1aXRlVGlwIiwiaGlkZVBsYXlUZXN0U3VpdGVUaXAiLCJuZXdUZXN0U3VpdGUiLCJyZW5kZXJUZXN0U3VpdGVNZW51IiwicGFkZGluZ1JpZ2h0IiwicGxheWluZyIsImlzUGxheWluZyIsInJlbmRlclRlc3RTdWl0ZXMiLCJyZW5kZXJUZXN0U3VpdGVDb250ZXh0TWVudSIsInJlbmRlclRlc3RTdWl0ZUNhc2VDb250ZXh0TWVudSIsInJlbmRlckVkaXRUZXN0U3VpdGVTb3VyY2UiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwicm9vdEVsIiwiZW5VUyIsImJpbmREQiIsInJlc3RvcmVUZXN0Q2FzZXMiLCJlbGltaW5hdGVCYXNlVXJsIiwicmVzdG9yZVRlc3RTdWl0ZXMiLCJhbmFtZSIsImJuYW1lIiwidXBkYXRlVGltZSIsInRhYmxlIiwiaG9vayIsInJlc3RvcmVFZGl0aW5nIiwiZmluYWxFZGl0aW5nIiwiY29tbWFuZFdpdGhvdXRCYXNlVXJsIiwicmVzdG9yZUNvbmZpZyIsInJlc3RvcmVDU1YiLCJyZXN0b3JlU2NyZWVuc2hvdHMiLCJyZXN0b3JlVmlzaW9ucyIsImRvd25sb2FkVGV4dEZpbGUiLCJnZW5QbGF5ZXJQbGF5Q2FsbGJhY2siLCJzYXZlbG9nIiwiZXJyb3JMb2ciLCJsb2dUaXRsZSIsImxvZ0NvbnRlbnQiLCJjbG9zZSIsImJpbmRJcGNFdmVudCIsImxvY2F0b3JJbmZvIiwicmFuZG9tTmFtZSIsImdldFNjcmVlbkRwaSIsInVwZGF0ZVBhZ2VUaXRsZSIsImJpbmRXaW5kb3dFdmVudHMiLCJiaW5kVmFyaWFibGVDaGFuZ2UiLCJpbml0U2F2ZVRlc3RDYXNlIiwib3JpZ1RpdGxlIiwicHJlaW5zdGFsbCIsIlBSRUlOU1RBTExfQ1NWX0xJU1QiLCJQUkVJTlNUQUxMX1ZJU0lPTl9MSVNUIiwicHJlVGNzIiwicHJlVHNzIiwibG9hZENzdiIsImxvYWRJbWFnZSIsImluaXRQbGF5ZXIiLCJydW50aW1lIiwiZ2V0TWFuaWZlc3QiLCJ2ZXJzaW9uIiwiVGltZVRyYWNrZXIiLCJzdGFydFRpbWUiLCJlbGFwc2VkIiwiVGltZW91dCIsImNhbmNlbCIsIm5ld1RpbWVvdXQiLCJyZXBsYWNlRXNjYXBlZENoYXIiLCJyZXRyeUlmSGVhcnRCZWF0RXhwaXJlZCIsIm1haW5GdW5jIiwicnVuV2l0aEhlYXJ0QmVhdCIsImluZmluaXRlQ2hlY2tIZWFydEJlYXQiLCJsYXN0U2VjcmV0IiwicmFjZSIsInJldHJ5Rm4iLCJpbnRlcnByZXRTcGVjaWFsQ29tbWFuZHMiLCJjb21tYW5kUnVubmVycyIsImludGVycHJldENTVkNvbW1hbmRzIiwiaW50ZXJwcmV0Q3NGcmVlQ29tbWFuZHMiLCJzc01hbiIsImJ5UGFzcyIsIm5vdGlmaWNhdGlvbiIsImNvbnRyb2wiLCJ3aXRoQ291bnREb3duIiwiaW50ZXJ2YWwiLCJvblRpY2siLCJhY3QiLCJkZWxldGVBZnRlckV4cG9ydCIsIlVpbnQ4QXJyYXkiLCJ2ZXJpZnlQYXR0ZXJuSW1hZ2UiLCJpc05vdFZlcmlmeU9yQXNzZXJ0IiwidmlzaW9uRmlsZU5hbWUiLCJjb25maWRlbmNlIiwibWluU2ltaWxhcml0eSIsInNlYXJjaEFyZWEiLCJzdG9yZWRJbWFnZVJlY3QiLCJyZWdpb25zIiwiYmVzdCIsInNjb3JlZFJlY3RzIiwicnVuV2l0aFJldHJ5IiwibGFzdFJldHJ5SW50ZXJ2YWwiLCJvbkZpcnN0RmFpbCIsIm9uRmluYWwiLCJhcmVhIiwic3RyV2lkdGgiLCJzdHJIZWlnaHQiLCJhY3R1YWwiLCJkZXNpcmVkIiwiaXNFeGlzdGVkIiwicm93Iiwicm93cyIsIm5ld0xpbmVUZXh0Iiwib3JpZ2luYWxUZXh0IiwiaW50ZXJwcmV0ZXIiLCJ0Y1BsYXllciIsImluaXRUZXN0Q2FzZVBsYXllciIsInRzUGxheWVyIiwiaW5pdFRlc3RTdWl0UGxheWVyIiwibWFpblRyYWNrZXIiLCJsb29wVHJhY2tlciIsIm1hY3JvVGltZXIiLCJzdG9wV2l0aEVycm9yIiwibmV4dENvbW1hbmQiLCJwbGF5ZXJTdGF0ZSIsIm9uRXJyb3JDb21tYW5kIiwicHJlcHJvY2VzcyIsInNob3VsZE5vdEFjdGl2YXRlVGFiIiwidXNlQ2xpcGJvYXJkIiwiZWxhcHNlZEluU2Vjb25kcyIsInVwZGF0ZUluIiwiZXJyb3JJZ25vcmUiLCJyZXNldFZhcnMiLCJjb21tYW5kSW5kZXhCeUxhYmVsIiwiY29udGludWVOZXh0TG9vcCIsInByZXBhcmVzIiwiZ2V0Q3VycmVudFBsYXllciIsInBhZ2VVcmwiLCJuZXdWYXJzIiwib2JqTWFwIiwiX191bmRlZmluZWRfXyIsImNsaXBCb2FyZEtleSIsInRpbWVvdXRNYWNyb0tleSIsImhhc0Vycm9yIiwic2V0UG9zdERlbGF5IiwiRkFTVCIsIk1FRElVTSIsIlNMT1ciLCJwb3N0UnVuIiwic3RvcFJlYXNvbiIsImxvZ01zZyIsImJsaW5rIiwidHJpcGxlIiwicmVwbGF5TGFzdENvbmZpZyIsInRzVHJhY2tlciIsInRjVHJhY2tlciIsInRzSWQiLCJsYXN0RXJyTXNnIiwidGVzdENhc2VQcm9taXNlSGFuZGxlcnMiLCJyZXBvcnRzIiwiYWRkUmVwb3J0IiwicmVwb3J0IiwidGNMb29wcyIsInRjUGxheWVyU3RvcHBlZCIsInRvdGFsQ291bnQiLCJmYWlsdXJlQ291bnQiLCJyIiwic3VjY2Vzc0NvdW50Iiwic3RhdHVzTWFwIiwidHNTdGF0dXMiLCJsaW5lcyIsInRjU3RhdHVzIiwidXNlZFRpbWUiLCJkYiIsIkRleGllIiwic3RvcmVzIiwibW9kZWwiLCJ0b0FycmF5Iiwibm9ybWFsaXplVGVzdENhc2UiLCJidWxrQWRkIiwiZGVsZXRlIiwib3JpZ2luYWwiLCJuZXdUZXN0Q2FzZUVkaXRpbmciLCJyZWNvcmRlclN0YXR1cyIsImluc3BlY3RvclN0YXR1cyIsInVwZGF0ZUhhc1VuU2F2ZWQiLCJub3JtYWxpemVkRWRpdGluZyIsImlzRXF1YWwiLCJ1cGRhdGVCcmVha3BvaW50SW5kaWNlcyIsImFjdGlvbkluZGV4IiwiaGFuZGxlU2luZ2xlQWN0aW9uIiwiYWN0aW9uSW5kaWNlcyIsInJlc2V0RWRpdGluZ1NvdXJjZSIsInBhcnRpYWwiLCJzZXRFZGl0aW5nU291cmNlQ3VycmVudCIsInNhdmVFZGl0aW5nU291cmNlQ3VycmVudCIsInNldEVkaXRpbmdTb3VyY2VPcmlnaW5hbEFuZFB1cmUiLCJTVEFSVF9SRUNPUkRJTkdfU1VDQ0VTUyIsIlBFTkRJTkciLCJTVE9QX1JFQ09SRElOR19TVUNDRVNTIiwiU1RBUlRfSU5TUEVDVElOR19TVUNDRVNTIiwiU1RPUF9JTlNQRUNUSU5HX1NVQ0NFU1MiLCJuZXdDb21tYW5kcyIsImNtZHMiLCJuZXdDbWRzIiwibGFzdEluZGV4IiwiYXBwbHlNaWRkbGV3YXJlIiwidGh1bmsiLCJjcmVhdGVQcm9taXNlTWlkZGxld2FyZSIsImNyZWF0ZVBvc3RMb2dpY01pZGRsZXdhcmUiLCJvbGRDcmVhdGVTdG9yZSIsInBvc3RMb2dpY01pZGRsZVdhcmUiLCJwcm9taXNlTWlkZGxlV2FyZSIsIlJFUVVFU1QiLCJGQUlMVVJFIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBUSxvQkFBb0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBaUIsNEJBQTRCO0FBQzdDO0FBQ0E7QUFDQSwwQkFBa0IsMkJBQTJCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxjQUFjO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNuUUE7QUFDTyxJQUFNQSxRQUFRLFNBQVJBLEtBQVEsQ0FBQ0MsSUFBRDtBQUFBLFNBQVUsQ0FBQ0EsT0FBTyxVQUFSLEVBQW9CQSxPQUFPLFVBQTNCLEVBQXVDQSxPQUFPLE9BQTlDLENBQVY7QUFBQSxDQUFkOztBQUVBLElBQU1DLFFBQVEs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TUFBTW91RCxPQUFyQjtBQUNBLGVBQU9odUQsVUFBVWIsSUFBVixDQUNMLFVBQUNRLElBQUQ7QUFBQSxpQkFBVTJoQyxrQkFBU3BrQixJQUFULElBQWV2ZCxVQUFmLEVBQXFCQyxNQUFNdTlDLE9BQTNCLElBQVY7QUFBQSxTQURLLEVBRUwsVUFBQ3g2QyxLQUFELEVBQVc7QUFDUCxpQkFBTzIrQixrQkFBU3BrQixJQUFULElBQWU2RixLQUFLcGdCLEtBQXBCLEVBQTJCL0MsTUFBTXF1RCxPQUFqQyxJQUFQO0FBQ0gsU0FKSSxDQUFQO0FBTUQsT0FmTTtBQUFBLEtBQVA7QUFnQkQsR0FqQkQ7QUFrQkQsRTs7Ozs7Ozs7Ozs7QUNyQkQsZSIsImZpbGUiOiJwb3B1cC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0XCJwb3B1cFwiOiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFtcIi4vc3JjL2luZGV4LmpzXCIsXCJ2ZW5kb3JcIixcImJhY2tncm91bmRfY3N2X2VkaXRvcl9wb3B1cF92aXNpb25fZWRpdG9yXCIsXCJiYWNrZ3JvdW5kX3BvcHVwXCJdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh1bmRlZmluZWQpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgZm9udC1zaXplOiAxNnB4OyB9XFxuXFxuKiB7XFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cXG5cXG4uYXBwIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyB9XFxuICAuYXBwIC5hcHAtaW5uZXIge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAxO1xcbiAgICAgICAgLW1zLWZsZXg6IDE7XFxuICAgICAgICAgICAgZmxleDogMTtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IGhvcml6b250YWw7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsgfVxcbiAgLmFwcC53aXRoLWFsZXJ0IC5iYWNrdXAtYWxlcnQge1xcbiAgICBkaXNwbGF5OiBibG9jazsgfVxcbiAgLmFwcCAuYmFja3VwLWFsZXJ0IHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgcGFkZGluZzogNXB4IDA7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgZm9udC1zaXplOiAxNHB4O1xcbiAgICBiYWNrZ3JvdW5kOiAjZmRmZGMyOyB9XFxuICAgIC5hcHAgLmJhY2t1cC1hbGVydCAuYmFja3VwLWFjdGlvbnMge1xcbiAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4OyB9XFxuICAgICAgLmFwcCAuYmFja3VwLWFsZXJ0IC5iYWNrdXAtYWN0aW9ucyBidXR0b24ge1xcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4OyB9XFxuICAuYXBwIC5jb250ZW50IHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDM7XFxuICAgICAgICAtbXMtZmxleDogMztcXG4gICAgICAgICAgICBmbGV4OiAzO1xcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgICBvdmVyZmxvdy15OiBhdXRvOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh1bmRlZmluZWQpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmhlYWRlciB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeTtcXG4gICAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcGFkZGluZzogMCAyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2NjYztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7IH1cXG4gIC5oZWFkZXIgLnN0YXR1cyB7XFxuICAgIGZsb2F0OiByaWdodDtcXG4gICAgbGluZS1oZWlnaHQ6IDQycHg7XFxuICAgIGZvbnQtc2l6ZTogMTRweDsgfVxcbiAgICAuaGVhZGVyIC5zdGF0dXMgaDEge1xcbiAgICAgIG1hcmdpbjogMDtcXG4gICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgbGluZS1oZWlnaHQ6IDQ0cHg7IH1cXG4gIC5oZWFkZXIgLnNlbGVjdC1jYXNlIHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBsaW5lLWhlaWdodDogNDRweDtcXG4gICAgZm9udC1zaXplOiAxM3B4OyB9XFxuICAgIC5oZWFkZXIgLnNlbGVjdC1jYXNlIC50ZXN0LWNhc2UtbmFtZSB7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xcbiAgICAgIGxpbmUtaGVpZ2h0OiAzNXB4O1xcbiAgICAgIG1heC13aWR0aDogMTIwcHg7XFxuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgfVxcbiAgICAgIC5oZWFkZXIgLnNlbGVjdC1jYXNlIC50ZXN0LWNhc2UtbmFtZS51bnNhdmVkIHtcXG4gICAgICAgIGNvbG9yOiBvcmFuZ2U7IH1cXG4gICAgICAgIC5oZWFkZXIgLnNlbGVjdC1jYXNlIC50ZXN0LWNhc2UtbmFtZS51bnNhdmVkOjphZnRlciB7XFxuICAgICAgICAgIGNvbnRlbnQ6ICcqJztcXG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDNweDsgfVxcbiAgLmhlYWRlciAuYWN0aW9ucyB7XFxuICAgIG1hcmdpbi10b3A6IDZweDsgfVxcbiAgICAuaGVhZGVyIC5hY3Rpb25zIC5hbnQtYnRuLWdyb3VwID4gLmFudC1idG4tZ3JvdXAge1xcbiAgICAgIGZsb2F0OiBub25lOyB9XFxuICAgIC5oZWFkZXIgLmFjdGlvbnMgLnBsYXktYWN0aW9ucyB7XFxuICAgICAgbWFyZ2luOiAwIDEwcHg7IH1cXG5cXG4uYW50LWRyb3Bkb3duLW1lbnUge1xcbiAgbWF4LWhlaWdodDogMzAwcHg7XFxuICBvdmVyZmxvdy15OiBhdXRvOyB9XFxuICAuYW50LWRyb3Bkb3duLW1lbnUgLmVkaXRpbmcge1xcbiAgICBjb2xvcjogYmx1ZSAhaW1wb3J0YW50OyB9XFxuXFxuLnNldHRpbmdzLW1vZGFsIC5hbnQtY2hlY2tib3gtd3JhcHBlciArIC5hbnQtY2hlY2tib3gtd3JhcHBlciB7XFxuICBtYXJnaW4tbGVmdDogMDsgfVxcblxcbi5zZXR0aW5ncy1tb2RhbCAudGlwIHtcXG4gIG1hcmdpbi1sZWZ0OiAxNXB4O1xcbiAgY29sb3I6ICNhYWE7IH1cXG5cXG4uc2V0dGluZ3MtbW9kYWwgLmJhY2t1cC1wYW5lIHtcXG4gIHBhZGRpbmc6IDAgMjBweDsgfVxcbiAgLnNldHRpbmdzLW1vZGFsIC5iYWNrdXAtcGFuZSBoNCB7XFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDsgfVxcbiAgLnNldHRpbmdzLW1vZGFsIC5iYWNrdXAtcGFuZSAucm93IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDsgfVxcbiAgLnNldHRpbmdzLW1vZGFsIC5iYWNrdXAtcGFuZSBwIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4OyB9XFxuICAuc2V0dGluZ3MtbW9kYWwgLmJhY2t1cC1wYW5lIHVsIGxpIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4OyB9XFxuXFxuLnNldHRpbmdzLW1vZGFsIC5zZWN1cml0eS1wYW5lIHtcXG4gIHBhZGRpbmc6IDAgMjBweCAyMHB4OyB9XFxuICAuc2V0dGluZ3MtbW9kYWwgLnNlY3VyaXR5LXBhbmUgaDQge1xcbiAgICBmb250LXNpemU6IDE2cHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7IH1cXG4gIC5zZXR0aW5ncy1tb2RhbCAuc2VjdXJpdHktcGFuZSBwIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDsgfVxcbiAgLnNldHRpbmdzLW1vZGFsIC5zZWN1cml0eS1wYW5lIGxhYmVsIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4OyB9XFxuICAuc2V0dGluZ3MtbW9kYWwgLnNlY3VyaXR5LXBhbmUgLmFudC1yYWRpby13cmFwcGVyIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIGhlaWdodDogMzBweDtcXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHVuZGVmaW5lZCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZGFzaGJvYXJkIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gICAgICAtbXMtZmxleDogMTtcXG4gICAgICAgICAgZmxleDogMTtcXG4gIG1hcmdpbjogMTVweCAxNXB4IDA7IH1cXG4gIC5kYXNoYm9hcmQgLmZsZXgtcm93IHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IGhvcml6b250YWw7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsgfVxcbiAgLmRhc2hib2FyZCAuZm9ybS1ncm91cCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7IH1cXG4gIC5kYXNoYm9hcmQgLnRvb2xib3gge1xcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgIGRpc3BsYXk6IGZsZXg7IH1cXG4gICAgLmRhc2hib2FyZCAudG9vbGJveCAucmVjb3JkLW9wcyB7XFxuICAgICAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gICAgICAgICAgLW1zLWZsZXg6IDE7XFxuICAgICAgICAgICAgICBmbGV4OiAxO1xcbiAgICAgIHRleHQtYWxpZ246IHJpZ2h0OyB9XFxuICAgIC5kYXNoYm9hcmQgLnRvb2xib3ggLnBsYXktb3BzIHtcXG4gICAgICBtYXJnaW4tbGVmdDogMTVweDsgfVxcbiAgLmRhc2hib2FyZCAuYW50LXRhYmxlLXBhZ2luYXRpb24ge1xcbiAgICBkaXNwbGF5OiBub25lOyB9XFxuICAuZGFzaGJvYXJkIC5hbnQtdGFibGUtaGVhZGVyIHtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbiAhaW1wb3J0YW50O1xcbiAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwICFpbXBvcnRhbnQ7IH1cXG4gICAgLmRhc2hib2FyZCAuYW50LXRhYmxlLWhlYWRlciAuYW50LXRhYmxlLXRoZWFkID4gdHIgPiB0aCB7XFxuICAgICAgcGFkZGluZzogMTNweCA4cHg7IH1cXG4gIC5kYXNoYm9hcmQgLmFudC10YWJsZS1ib2R5IC5hbnQtdGFibGUtdGhlYWQgPiB0ciA+IHRoIHtcXG4gICAgcGFkZGluZzogMTBweCA4cHg7IH1cXG4gIC5kYXNoYm9hcmQgLmFudC10YWJsZS10Ym9keSA+IHRyID4gdGQge1xcbiAgICBwYWRkaW5nOiA4cHggOHB4OyB9XFxuICAuZGFzaGJvYXJkIHRyLnNlbGVjdGVkLWNvbW1hbmQgPiB0ZCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZGZmZDEgIWltcG9ydGFudDsgfVxcbiAgLmRhc2hib2FyZCB0ci5lcnJvci1jb21tYW5kID4gdGQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjdjMWMxICFpbXBvcnRhbnQ7IH1cXG4gIC5kYXNoYm9hcmQgdHIucnVubmluZy1jb21tYW5kID4gdGQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDVkNmY5ICFpbXBvcnRhbnQ7IH1cXG4gIC5kYXNoYm9hcmQgdHIuZG9uZS1jb21tYW5kID4gdGQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDFmZmQ4ICFpbXBvcnRhbnQ7IH1cXG4gIC5kYXNoYm9hcmQgLmFudC1idG4tZ3JvdXAgPiAuYW50LWJ0bi1ncm91cCB7XFxuICAgIGZsb2F0OiBub25lOyB9XFxuICAuZGFzaGJvYXJkIC5hbnQtZm9ybS1pdGVtIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDsgfVxcbiAgLmRhc2hib2FyZCAuZWRpdG9yLXdyYXBwZXIge1xcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMjtcXG4gICAgICAgIC1tcy1mbGV4OiAyO1xcbiAgICAgICAgICAgIGZsZXg6IDI7IH1cXG4gIC5kYXNoYm9hcmQgLmNvbW1hbmRzLXZpZXcge1xcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMjtcXG4gICAgICAgIC1tcy1mbGV4OiAyO1xcbiAgICAgICAgICAgIGZsZXg6IDI7IH1cXG4gICAgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuYW50LXRhYnMtYmFyIHtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAwOyB9XFxuICAgIC5kYXNoYm9hcmQgLmNvbW1hbmRzLXZpZXcgLmFudC10YWJzLWNvbnRlbnQge1xcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gICAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gICAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgIC13ZWJraXQtYm94LWZsZXg6IDE7XFxuICAgICAgICAgIC1tcy1mbGV4OiAxO1xcbiAgICAgICAgICAgICAgZmxleDogMTtcXG4gICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkOWQ5ZDk7XFxuICAgICAgYm9yZGVyLXdpZHRoOiAwIDFweCAxcHg7IH1cXG4gICAgICAuZGFzaGJvYXJkIC5jb21tYW5kcy12aWV3IC5hbnQtdGFicy1jb250ZW50IC5hbnQtdGFicy10YWJwYW5lIHtcXG4gICAgICAgIC13ZWJraXQtYm94LWZsZXg6IDE7XFxuICAgICAgICAgICAgLW1zLWZsZXg6IDE7XFxuICAgICAgICAgICAgICAgIGZsZXg6IDE7XFxuICAgICAgICAtbXMtZmxleC1uZWdhdGl2ZTogdW5zZXQgIWltcG9ydGFudDtcXG4gICAgICAgICAgICBmbGV4LXNocmluazogdW5zZXQgIWltcG9ydGFudDtcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxcbiAgICAgIC5kYXNoYm9hcmQgLmNvbW1hbmRzLXZpZXcgLmFudC10YWJzLWNvbnRlbnQgLnRhYmxlLXdyYXBwZXIge1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgdG9wOiAwO1xcbiAgICAgICAgYm90dG9tOiAxNDBweDtcXG4gICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICByaWdodDogMDtcXG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87IH1cXG4gICAgICAuZGFzaGJvYXJkIC5jb21tYW5kcy12aWV3IC5hbnQtdGFicy1jb250ZW50IC5maWVsZHMtd3JhcHBlciB7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgcmlnaHQ6IDA7XFxuICAgICAgICBib3R0b206IDA7XFxuICAgICAgICBoZWlnaHQ6IDEzMHB4OyB9XFxuICAgICAgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuYW50LXRhYnMtY29udGVudCAucmVhY3QtY29kZW1pcnJvcjIge1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuICAgICAgICAuZGFzaGJvYXJkIC5jb21tYW5kcy12aWV3IC5hbnQtdGFicy1jb250ZW50IC5yZWFjdC1jb2RlbWlycm9yMi5oYXMtZXJyb3Ige1xcbiAgICAgICAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDcwcHgpOyB9XFxuICAgICAgICAuZGFzaGJvYXJkIC5jb21tYW5kcy12aWV3IC5hbnQtdGFicy1jb250ZW50IC5yZWFjdC1jb2RlbWlycm9yMi5uby1lcnJvciB7XFxuICAgICAgICAgIGhlaWdodDogY2FsYygxMDAlIC0gMHB4KTsgfVxcbiAgICAgICAgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuYW50LXRhYnMtY29udGVudCAucmVhY3QtY29kZW1pcnJvcjIgLkNvZGVNaXJyb3Ige1xcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgIHRvcDogMDtcXG4gICAgICAgICAgYm90dG9tOiAwO1xcbiAgICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgICByaWdodDogMDtcXG4gICAgICAgICAgaGVpZ2h0OiBhdXRvO1xcbiAgICAgICAgICBmb250LXNpemU6IDEzcHg7IH1cXG4gICAgICAuZGFzaGJvYXJkIC5jb21tYW5kcy12aWV3IC5hbnQtdGFicy1jb250ZW50IC5hbnQtdGFibGUtd3JhcHBlcixcXG4gICAgICAuZGFzaGJvYXJkIC5jb21tYW5kcy12aWV3IC5hbnQtdGFicy1jb250ZW50IC5hbnQtc3Bpbi1uZXN0ZWQtbG9hZGluZyxcXG4gICAgICAuZGFzaGJvYXJkIC5jb21tYW5kcy12aWV3IC5hbnQtdGFicy1jb250ZW50IC5hbnQtc3Bpbi1jb250YWluZXIsXFxuICAgICAgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuYW50LXRhYnMtY29udGVudCAuYW50LXRhYmxlLFxcbiAgICAgIC5kYXNoYm9hcmQgLmNvbW1hbmRzLXZpZXcgLmFudC10YWJzLWNvbnRlbnQgLmFudC10YWJsZS1jb250ZW50LFxcbiAgICAgIC5kYXNoYm9hcmQgLmNvbW1hbmRzLXZpZXcgLmFudC10YWJzLWNvbnRlbnQgLmFudC10YWJsZS1zY3JvbGwge1xcbiAgICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgICAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbiAgICAgICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAgICAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAtd2Via2l0LWJveC1mbGV4OiAxO1xcbiAgICAgICAgICAgIC1tcy1mbGV4OiAxO1xcbiAgICAgICAgICAgICAgICBmbGV4OiAxOyB9XFxuICAgICAgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuYW50LXRhYnMtY29udGVudCAuYW50LXRhYmxlLXNjcm9sbCB7XFxuICAgICAgICBvdmVyZmxvdy15OiBhdXRvOyB9XFxuICAgIC5kYXNoYm9hcmQgLmNvbW1hbmRzLXZpZXcgLmNvbW1hbmQtcm93IHtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAtd2Via2l0LWJveC1vcmllbnQ6IGhvcml6b250YWw7XFxuICAgICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAgICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgICBwYWRkaW5nLWxlZnQ6IDVweDtcXG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2U5ZTllOTtcXG4gICAgICBsaW5lLWhlaWdodDogNDVweDtcXG4gICAgICBmb250LXNpemU6IDEzcHg7IH1cXG4gICAgICAuZGFzaGJvYXJkIC5jb21tYW5kcy12aWV3IC5jb21tYW5kLXJvdzpob3ZlciB7XFxuICAgICAgICBiYWNrZ3JvdW5kOiAjZWNmNmZkOyB9XFxuICAgICAgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuY29tbWFuZC1yb3cuaGVhZGVyLXJvdywgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuY29tbWFuZC1yb3cuZm9vdGVyLXJvdyB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjdmN2Y3O1xcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cXG4gICAgICAuZGFzaGJvYXJkIC5jb21tYW5kcy12aWV3IC5jb21tYW5kLXJvdy5mb290ZXItcm93IHtcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyOyB9XFxuICAgICAgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuY29tbWFuZC1yb3cuYnJlYWtwb2ludC1jb21tYW5kOjpiZWZvcmUge1xcbiAgICAgICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICB0b3A6IDUwJTtcXG4gICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xcbiAgICAgICAgd2lkdGg6IDA7XFxuICAgICAgICBoZWlnaHQ6IDA7XFxuICAgICAgICBib3JkZXI6IDhweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiBncmVlbjsgfVxcbiAgICAgIC5kYXNoYm9hcmQgLmNvbW1hbmRzLXZpZXcgLmNvbW1hbmQtcm93LnNlbGVjdGVkLWNvbW1hbmQge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZkZmZkMTsgfVxcbiAgICAgIC5kYXNoYm9hcmQgLmNvbW1hbmRzLXZpZXcgLmNvbW1hbmQtcm93LmVycm9yLWNvbW1hbmQge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y3YzFjMTsgfVxcbiAgICAgIC5kYXNoYm9hcmQgLmNvbW1hbmRzLXZpZXcgLmNvbW1hbmQtcm93LnJ1bm5pbmctY29tbWFuZCB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDVkNmY5OyB9XFxuICAgICAgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuY29tbWFuZC1yb3cuZG9uZS1jb21tYW5kIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkMWZmZDg7IH1cXG4gICAgICAuZGFzaGJvYXJkIC5jb21tYW5kcy12aWV3IC5jb21tYW5kLXJvdy5jb21tZW50LWNvbW1hbmQge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgICAgICBjb2xvcjogI2NjYztcXG4gICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxcbiAgICAgICAgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuY29tbWFuZC1yb3cuY29tbWVudC1jb21tYW5kLnNlbGVjdGVkLWNvbW1hbmQge1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRmZmQxOyB9XFxuICAgICAgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuY29tbWFuZC1yb3cgLnJvdy1jb2wge1xcbiAgICAgICAgcGFkZGluZzogMCA4cHg7IH1cXG4gICAgICAgIC5kYXNoYm9hcmQgLmNvbW1hbmRzLXZpZXcgLmNvbW1hbmQtcm93IC5yb3ctY29sLmNvbW1hbmQtY29sIHtcXG4gICAgICAgICAgd2lkdGg6IDEzMHB4O1xcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgfVxcbiAgICAgICAgLmRhc2hib2FyZCAuY29tbWFuZHMtdmlldyAuY29tbWFuZC1yb3cgLnJvdy1jb2wudGFyZ2V0LWNvbCB7XFxuICAgICAgICAgIHdpZHRoOiAzMCU7XFxuICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyB9XFxuICAgICAgICAuZGFzaGJvYXJkIC5jb21tYW5kcy12aWV3IC5jb21tYW5kLXJvdyAucm93LWNvbC52YWx1ZS1jb2wge1xcbiAgICAgICAgICAtd2Via2l0LWJveC1mbGV4OiAxO1xcbiAgICAgICAgICAgICAgLW1zLWZsZXg6IDE7XFxuICAgICAgICAgICAgICAgICAgZmxleDogMTtcXG4gICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7IH1cXG4gICAgICAgIC5kYXNoYm9hcmQgLmNvbW1hbmRzLXZpZXcgLmNvbW1hbmQtcm93IC5yb3ctY29sLm9wLWNvbCB7XFxuICAgICAgICAgIHdpZHRoOiA4MHB4O1xcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgfVxcbiAgLmRhc2hib2FyZCAudGFibGUtZm9vdGVyIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiAwO1xcbiAgICByaWdodDogMDtcXG4gICAgdG9wOiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIGxpbmUtaGVpZ2h0OiAzMnB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBiYWNrZ3JvdW5kOiAjZjdmN2Y3O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7IH1cXG4gICAgLmRhc2hib2FyZCAudGFibGUtZm9vdGVyOmhvdmVyIHtcXG4gICAgICBiYWNrZ3JvdW5kOiAjZTBlMGUwOyB9XFxuICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgbWFyZ2luLXRvcDogMTVweDsgfVxcbiAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC5yZXNpemUtaGFuZGxlciB7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIHRvcDogLTEwcHg7XFxuICAgICAgbGVmdDogMDtcXG4gICAgICB3aWR0aDogMTAwJTtcXG4gICAgICBoZWlnaHQ6IDZweDtcXG4gICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgICBjdXJzb3I6IHJvdy1yZXNpemU7IH1cXG4gICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC5yZXNpemUtaGFuZGxlcjpob3ZlciwgLmRhc2hib2FyZCAubG9ncy1zY3JlZW5zaG90cyAucmVzaXplLWhhbmRsZXIuZm9jdXNlZCB7XFxuICAgICAgICBoZWlnaHQ6IDZweDtcXG4gICAgICAgIGJhY2tncm91bmQ6ICNjY2M7IH1cXG4gICAgLmRhc2hib2FyZCAubG9ncy1zY3JlZW5zaG90cyAuYW50LXRhYnMuYW50LXRhYnMtY2FyZCA+IC5hbnQtdGFicy1iYXIgLmFudC10YWJzLXRhYiB7XFxuICAgICAgcGFkZGluZzogNXB4IDEycHggNHB4OyB9XFxuICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLmFudC10YWJzIHtcXG4gICAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gICAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxuICAgICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAgICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAtd2Via2l0LWJveC1mbGV4OiAxO1xcbiAgICAgICAgICAtbXMtZmxleDogMTtcXG4gICAgICAgICAgICAgIGZsZXg6IDE7IH1cXG4gICAgLmRhc2hib2FyZCAubG9ncy1zY3JlZW5zaG90cyAuYW50LXRhYnMtYmFyIHtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAwOyB9XFxuICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLmFudC10YWJzLWNvbnRlbnQge1xcbiAgICAgIC13ZWJraXQtYm94LWZsZXg6IDE7XFxuICAgICAgICAgIC1tcy1mbGV4OiAxO1xcbiAgICAgICAgICAgICAgZmxleDogMTtcXG4gICAgICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgICAgIG1pbi1oZWlnaHQ6IDcwcHg7XFxuICAgICAgYm9yZGVyOiAxcHggc29saWQgI2Q5ZDlkOTtcXG4gICAgICBib3JkZXItd2lkdGg6IDAgMXB4IDFweDsgfVxcbiAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC5scy10b29sYm94IHtcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgcmlnaHQ6IDEwcHg7XFxuICAgICAgdG9wOiAwcHg7IH1cXG4gICAgLmRhc2hib2FyZCAubG9ncy1zY3JlZW5zaG90cyAuc2NyZWVuc2hvdC1jb250ZW50LFxcbiAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC5sb2ctY29udGVudCB7XFxuICAgICAgcGFkZGluZzogMTBweCAwOyB9XFxuICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLnNjcmVlbnNob3QtY29udGVudCBsaSB7XFxuICAgICAgcGFkZGluZzogMCAyMHB4IDIwcHg7IH1cXG4gICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC5zY3JlZW5zaG90LWNvbnRlbnQgbGkgLnRpbWVzdGFtcCB7XFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICBmb250LXNpemU6IDE0cHg7IH1cXG4gICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC5zY3JlZW5zaG90LWNvbnRlbnQgbGkgLmZpbGVuYW1lIHtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOyB9XFxuICAgICAgLmRhc2hib2FyZCAubG9ncy1zY3JlZW5zaG90cyAuc2NyZWVuc2hvdC1jb250ZW50IGxpIGEge1xcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDIwcHg7IH1cXG4gICAgICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLnNjcmVlbnNob3QtY29udGVudCBsaSBhIGltZyB7XFxuICAgICAgICAgIG1heC13aWR0aDogMjUwcHg7XFxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7IH1cXG4gICAgLmRhc2hib2FyZCAubG9ncy1zY3JlZW5zaG90cyAubG9nLWNvbnRlbnQge1xcbiAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICAgICAgbWFyZ2luOiAwO1xcbiAgICAgIHBhZGRpbmc6IDAgMTBweDtcXG4gICAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDM4cHgpO1xcbiAgICAgIG92ZXJmbG93LXk6IGF1dG87IH1cXG4gICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC5sb2ctY29udGVudCBsaSB7XFxuICAgICAgICBwYWRkaW5nOiA1cHggMDtcXG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZjNmM2YzOyB9XFxuICAgICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC5sb2ctY29udGVudCBsaTphZnRlciB7XFxuICAgICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgICBkaXNwbGF5OiB0YWJsZTtcXG4gICAgICAgICAgY2xlYXI6IGJvdGg7IH1cXG4gICAgICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLmxvZy1jb250ZW50IGxpLmVycm9yIHtcXG4gICAgICAgICAgY29sb3I6IHJlZDtcXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cXG4gICAgICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLmxvZy1jb250ZW50IGxpLndhcm5pbmcge1xcbiAgICAgICAgICBjb2xvcjogb3JhbmdlOyB9XFxuICAgICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC5sb2ctY29udGVudCBsaSAubG9nLXR5cGUge1xcbiAgICAgICAgICBmbG9hdDogbGVmdDtcXG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4OyB9XFxuICAgICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC5sb2ctY29udGVudCBsaSAubG9nLWRldGFpbCB7XFxuICAgICAgICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsgfVxcbiAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC5jc3YtY29udGVudCB7XFxuICAgICAgcGFkZGluZzogMTBweDsgfVxcbiAgICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLmNzdi1jb250ZW50IGJ1dHRvbiB7XFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDsgfVxcbiAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC52YXJpYWJsZS1jb250ZW50IHtcXG4gICAgICBwYWRkaW5nOiAxMHB4OyB9XFxuICAgICAgLmRhc2hib2FyZCAubG9ncy1zY3JlZW5zaG90cyAudmFyaWFibGUtY29udGVudCAudmFyaWFibGUtb3B0aW9ucyB7XFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4OyB9XFxuICAgICAgLmRhc2hib2FyZCAubG9ncy1zY3JlZW5zaG90cyAudmFyaWFibGUtY29udGVudCAuYW50LWNoZWNrYm94LXdyYXBwZXIge1xcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcXG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDsgfVxcbiAgICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLnZhcmlhYmxlLWNvbnRlbnQgLnJlYWQtb25seSB7XFxuICAgICAgICBjb2xvcjogI2NjYzsgfVxcbiAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC52aXNpb24tY29udGVudCB7XFxuICAgICAgcGFkZGluZzogMTBweDsgfVxcbiAgICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLnZpc2lvbi1jb250ZW50IC52aXNpb24tdG9wLWFjdGlvbnMge1xcbiAgICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgICAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAgICAgICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XFxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7IH1cXG4gICAgICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLnZpc2lvbi1jb250ZW50IC52aXNpb24tdG9wLWFjdGlvbnMgLm1haW4tYWN0aW9ucyB7XFxuICAgICAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgICAgICAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gICAgICAgICAgZGlzcGxheTogZmxleDsgfVxcbiAgICAgICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC52aXNpb24tY29udGVudCAudmlzaW9uLXRvcC1hY3Rpb25zIC5tYWluLWFjdGlvbnMgPiAqIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7IH1cXG4gICAgICAgICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC52aXNpb24tY29udGVudCAudmlzaW9uLXRvcC1hY3Rpb25zIC5tYWluLWFjdGlvbnMgPiAqOmxhc3QtY2hpbGQge1xcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwOyB9XFxuICAgICAgICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLnZpc2lvbi1jb250ZW50IC52aXNpb24tdG9wLWFjdGlvbnMgLm1haW4tYWN0aW9ucyAubG9hZC1pbWFnZS1idXR0b24ge1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDA7XFxuICAgICAgICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgICAgICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbiAgICAgICAgICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAgICAgICAgICAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgICAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAgICAgICAgICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgfVxcbiAgICAgICAgICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLnZpc2lvbi1jb250ZW50IC52aXNpb24tdG9wLWFjdGlvbnMgLm1haW4tYWN0aW9ucyAubG9hZC1pbWFnZS1idXR0b24gbGFiZWwge1xcbiAgICAgICAgICAgICAgcGFkZGluZzogMCAxNXB4O1xcbiAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOyB9XFxuICAgICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC52aXNpb24tY29udGVudCAudmlzaW9uLXRvcC1hY3Rpb25zIC5tb3JlLWluZm8ge1xcbiAgICAgICAgICBmb250LXNpemU6IDE0cHg7IH1cXG4gICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC52aXNpb24tY29udGVudCAudmlzaW9uLWltYWdlIHtcXG4gICAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xcbiAgICAgICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAgICAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgICAgICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAgICAgICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgIC1tcy1mbGV4LWxpbmUtcGFjazogY2VudGVyO1xcbiAgICAgICAgICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgICAgICB3aWR0aDogMTAwcHg7XFxuICAgICAgICBoZWlnaHQ6IDEwMHB4O1xcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsgfVxcbiAgICAgICAgLmRhc2hib2FyZCAubG9ncy1zY3JlZW5zaG90cyAudmlzaW9uLWNvbnRlbnQgLnZpc2lvbi1pbWFnZSBpbWcge1xcbiAgICAgICAgICBtYXgtaGVpZ2h0OiAxMDBweDsgfVxcbiAgICAgIC5kYXNoYm9hcmQgLmxvZ3Mtc2NyZWVuc2hvdHMgLnZpc2lvbi1jb250ZW50IC52aXNpb24tbmFtZSB7XFxuICAgICAgICBmb250LXNpemU6IDE0cHg7XFxuICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7IH1cXG4gICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC52aXNpb24tY29udGVudCAudmlzaW9uLWFjdGlvbnMgYnV0dG9uIHtcXG4gICAgICAgIG1hcmdpbi1yaWdodDogNXB4OyB9XFxuICAgICAgICAuZGFzaGJvYXJkIC5sb2dzLXNjcmVlbnNob3RzIC52aXNpb24tY29udGVudCAudmlzaW9uLWFjdGlvbnMgYnV0dG9uOmxhc3QtY2hpbGQge1xcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7IH1cXG4gIC5kYXNoYm9hcmQgLm9ubGluZS1oZWxwIHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IGhvcml6b250YWw7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeTtcXG4gICAgICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XFxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xcbiAgICBwYWRkaW5nOiAwIDEwcHg7XFxuICAgIGhlaWdodDogMjVweDtcXG4gICAgbGluZS1oZWlnaHQ6IDI1cHg7XFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7IH1cXG4gIC5kYXNoYm9hcmQgI2NvbnRleHRfbWVudSB7XFxuICAgIHotaW5kZXg6IDEwOyB9XFxuICAgIC5kYXNoYm9hcmQgI2NvbnRleHRfbWVudSAuYW50LW1lbnUge1xcbiAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjY2NjJztcXG4gICAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDFweCA2cHggcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgICAgICAgICAgICAgYm94LXNoYWRvdzogMCAxcHggNnB4IHJnYmEoMCwgMCwgMCwgMC4yKTsgfVxcbiAgICAgIC5kYXNoYm9hcmQgI2NvbnRleHRfbWVudSAuYW50LW1lbnUgLmFudC1tZW51LWl0ZW0ge1xcbiAgICAgICAgaGVpZ2h0OiAzNnB4O1xcbiAgICAgICAgbGluZS1oZWlnaHQ6IDM2cHg7IH1cXG4gICAgICAgIC5kYXNoYm9hcmQgI2NvbnRleHRfbWVudSAuYW50LW1lbnUgLmFudC1tZW51LWl0ZW06aG92ZXIge1xcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjZWNmNmZkOyB9XFxuXFxuLnNvdXJjZS1lcnJvciB7XFxuICBjb2xvcjogcmVkO1xcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xcbiAgZm9udC1zaXplOiAxMnB4OyB9XFxuXFxuLmFudC1kcm9wZG93biAuYW50LWRyb3Bkb3duLW1lbnUge1xcbiAgbWF4LWhlaWdodDogbm9uZTsgfVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLnJlbmFtZS1tb2RhbCxcXG4gIC5kdXBsaWNhdGUtbW9kYWwsXFxuICAuc2F2ZS1tb2RhbCxcXG4gIC5wbGF5LWxvb3AtbW9kYWwge1xcbiAgICB3aWR0aDogNDAwcHggIWltcG9ydGFudDtcXG4gICAgbWFyZ2luOiAwIGF1dG87IH0gfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodW5kZWZpbmVkKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5zaWRlYmFyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIC13ZWJraXQtYm94LWZsZXg6IDE7XFxuICAgICAgLW1zLWZsZXg6IDE7XFxuICAgICAgICAgIGZsZXg6IDE7XFxuICBtaW4td2lkdGg6IDI2MHB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI2NjYzsgfVxcbiAgLnNpZGViYXIgLnNpZGViYXItaW5uZXIge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgYm90dG9tOiAwO1xcbiAgICByaWdodDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgb3ZlcmZsb3cteTogYXV0bzsgfVxcbiAgLnNpZGViYXIgLnNpZGViYXItdGl0bGUge1xcbiAgICBwYWRkaW5nOiAwIDEwcHg7XFxuICAgIGhlaWdodDogNDRweDtcXG4gICAgbGluZS1oZWlnaHQ6IDQ0cHg7XFxuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjY2NjO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5O1xcbiAgICBmb250LXNpemU6IDE2cHg7IH1cXG4gIC5zaWRlYmFyIC5zaWRlYmFyLXRlc3QtY2FzZXMge1xcbiAgICBmb250LXNpemU6IDE0cHg7XFxuICAgIGxpbmUtaGVpZ2h0OiAxOHB4OyB9XFxuICAgIC5zaWRlYmFyIC5zaWRlYmFyLXRlc3QtY2FzZXMgbGkge1xcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xcbiAgICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAgICAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgICAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeTtcXG4gICAgICAgICAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcXG4gICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOyB9XFxuICAgICAgLnNpZGViYXIgLnNpZGViYXItdGVzdC1jYXNlcyBsaS5zdWNjZXNzIHtcXG4gICAgICAgIGJhY2tncm91bmQ6ICNjZmVmZGY7IH1cXG4gICAgICAuc2lkZWJhciAuc2lkZWJhci10ZXN0LWNhc2VzIGxpLmVycm9yIHtcXG4gICAgICAgIGJhY2tncm91bmQ6ICNmY2RiZDk7IH1cXG4gICAgICAuc2lkZWJhciAuc2lkZWJhci10ZXN0LWNhc2VzIGxpLnNlbGVjdGVkIHtcXG4gICAgICAgIGJhY2tncm91bmQ6ICNmZGZmZDE7IH1cXG4gICAgICAgIC5zaWRlYmFyIC5zaWRlYmFyLXRlc3QtY2FzZXMgbGkuc2VsZWN0ZWQuZXJyb3IsIC5zaWRlYmFyIC5zaWRlYmFyLXRlc3QtY2FzZXMgbGkuc2VsZWN0ZWQuc3VjY2VzcyB7XFxuICAgICAgICAgIHBhZGRpbmc6IDFweCAxMHB4IDFweCA2cHg7IH1cXG4gICAgICAgIC5zaWRlYmFyIC5zaWRlYmFyLXRlc3QtY2FzZXMgbGkuc2VsZWN0ZWQuZXJyb3Ige1xcbiAgICAgICAgICBib3JkZXI6IDRweCBzb2xpZCAjZmNkYmQ5OyB9XFxuICAgICAgICAuc2lkZWJhciAuc2lkZWJhci10ZXN0LWNhc2VzIGxpLnNlbGVjdGVkLnN1Y2Nlc3Mge1xcbiAgICAgICAgICBib3JkZXI6IDRweCBzb2xpZCAjY2ZlZmRmOyB9XFxuICAgICAgLnNpZGViYXIgLnNpZGViYXItdGVzdC1jYXNlcyBsaS5kaXNhYmxlZCB7XFxuICAgICAgICAtd2Via2l0LWZpbHRlcjogZ3JheXNjYWxlKDYwJSk7XFxuICAgICAgICAgICAgICAgIGZpbHRlcjogZ3JheXNjYWxlKDYwJSk7XFxuICAgICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkOyB9XFxuICAgICAgLnNpZGViYXIgLnNpZGViYXItdGVzdC1jYXNlcyBsaSAudGVzdC1jYXNlLW5hbWUge1xcbiAgICAgICAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gICAgICAgICAgICAtbXMtZmxleDogMTtcXG4gICAgICAgICAgICAgICAgZmxleDogMTsgfVxcbiAgICAgIC5zaWRlYmFyIC5zaWRlYmFyLXRlc3QtY2FzZXMgbGkgLm1vcmUtYnV0dG9uIHtcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7IH1cXG4gICAgICAuc2lkZWJhciAuc2lkZWJhci10ZXN0LWNhc2VzIGxpOmhvdmVyIC5tb3JlLWJ1dHRvbiB7XFxuICAgICAgICBkaXNwbGF5OiBibG9jazsgfVxcbiAgLnNpZGViYXIgLnRlc3QtY2FzZS1hY3Rpb25zLFxcbiAgLnNpZGViYXIgLnRlc3Qtc3VpdGUtYWN0aW9ucyB7XFxuICAgIHBhZGRpbmc6IDAgMTBweCAxMHB4OyB9XFxuICAgIC5zaWRlYmFyIC50ZXN0LWNhc2UtYWN0aW9ucyBidXR0b24sXFxuICAgIC5zaWRlYmFyIC50ZXN0LXN1aXRlLWFjdGlvbnMgYnV0dG9uIHtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7IH1cXG4gIC5zaWRlYmFyIC50ZXN0LWNhc2UtYWN0aW9ucyB7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gICAgZGlzcGxheTogZmxleDsgfVxcbiAgLnNpZGViYXIgLnNpZGViYXItdGVzdC1zdWl0ZXMgLnRlc3Qtc3VpdGUtaXRlbSB7XFxuICAgIHBhZGRpbmc6IDAgMCAxMHB4IDA7XFxuICAgIG1hcmdpbi1ib3R0b206IDVweDsgfVxcbiAgICAuc2lkZWJhciAuc2lkZWJhci10ZXN0LXN1aXRlcyAudGVzdC1zdWl0ZS1pdGVtLnBsYXlpbmcge1xcbiAgICAgIGJhY2tncm91bmQ6ICNmZGZmZDE7IH1cXG4gICAgLnNpZGViYXIgLnNpZGViYXItdGVzdC1zdWl0ZXMgLnRlc3Qtc3VpdGUtaXRlbS5mb2xkIHtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgICAgIHBhZGRpbmctYm90dG9tOiAwOyB9XFxuICAgICAgLnNpZGViYXIgLnNpZGViYXItdGVzdC1zdWl0ZXMgLnRlc3Qtc3VpdGUtaXRlbS5mb2xkIC50ZXN0LXN1aXRlLW1vcmUtYWN0aW9ucyxcXG4gICAgICAuc2lkZWJhciAuc2lkZWJhci10ZXN0LXN1aXRlcyAudGVzdC1zdWl0ZS1pdGVtLmZvbGQgLnRlc3Qtc3VpdGUtY2FzZXMge1xcbiAgICAgICAgZGlzcGxheTogbm9uZTsgfVxcbiAgICAuc2lkZWJhciAuc2lkZWJhci10ZXN0LXN1aXRlcyAudGVzdC1zdWl0ZS1pdGVtIC50ZXN0LXN1aXRlLXJvdyB7XFxuICAgICAgcGFkZGluZzogNXB4IDEwcHg7XFxuICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAgICAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgIGN1cnNvcjogcG9pbnRlcjsgfVxcbiAgICAgIC5zaWRlYmFyIC5zaWRlYmFyLXRlc3Qtc3VpdGVzIC50ZXN0LXN1aXRlLWl0ZW0gLnRlc3Qtc3VpdGUtcm93IC50ZXN0LXN1aXRlLXRpdGxlIHtcXG4gICAgICAgIC13ZWJraXQtYm94LWZsZXg6IDE7XFxuICAgICAgICAgICAgLW1zLWZsZXg6IDE7XFxuICAgICAgICAgICAgICAgIGZsZXg6IDE7XFxuICAgICAgICBtYXJnaW4tbGVmdDogMTBweDsgfVxcbiAgICAgIC5zaWRlYmFyIC5zaWRlYmFyLXRlc3Qtc3VpdGVzIC50ZXN0LXN1aXRlLWl0ZW0gLnRlc3Qtc3VpdGUtcm93IC5tb3JlLWJ1dHRvbiB7XFxuICAgICAgICBkaXNwbGF5OiBub25lOyB9XFxuICAgICAgLnNpZGViYXIgLnNpZGViYXItdGVzdC1zdWl0ZXMgLnRlc3Qtc3VpdGUtaXRlbSAudGVzdC1zdWl0ZS1yb3c6aG92ZXIgLm1vcmUtYnV0dG9uIHtcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrOyB9XFxuICAgIC5zaWRlYmFyIC5zaWRlYmFyLXRlc3Qtc3VpdGVzIC50ZXN0LXN1aXRlLWl0ZW0gLnRlc3Qtc3VpdGUtY2FzZXMge1xcbiAgICAgIHBhZGRpbmc6IDNweCA1cHg7IH1cXG4gICAgICAuc2lkZWJhciAuc2lkZWJhci10ZXN0LXN1aXRlcyAudGVzdC1zdWl0ZS1pdGVtIC50ZXN0LXN1aXRlLWNhc2VzIGxpIHtcXG4gICAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeTtcXG4gICAgICAgICAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgICAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBwYWRkaW5nOiAzcHggNXB4IDNweCAyMHB4O1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogNXB4OyB9XFxuICAgICAgICAuc2lkZWJhciAuc2lkZWJhci10ZXN0LXN1aXRlcyAudGVzdC1zdWl0ZS1pdGVtIC50ZXN0LXN1aXRlLWNhc2VzIGxpLmRvbmUtdGMge1xcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjY2ZlZmRmOyB9XFxuICAgICAgICAuc2lkZWJhciAuc2lkZWJhci10ZXN0LXN1aXRlcyAudGVzdC1zdWl0ZS1pdGVtIC50ZXN0LXN1aXRlLWNhc2VzIGxpLmVycm9yLXRjIHtcXG4gICAgICAgICAgYmFja2dyb3VuZDogI2ZjZGJkOTsgfVxcbiAgICAgICAgLnNpZGViYXIgLnNpZGViYXItdGVzdC1zdWl0ZXMgLnRlc3Qtc3VpdGUtaXRlbSAudGVzdC1zdWl0ZS1jYXNlcyBsaS5jdXJyZW50LXRjIHtcXG4gICAgICAgICAgYmFja2dyb3VuZDogI2Q1ZDZmOTsgfVxcbiAgICAuc2lkZWJhciAuc2lkZWJhci10ZXN0LXN1aXRlcyAudGVzdC1zdWl0ZS1pdGVtIC50ZXN0LXN1aXRlLW1vcmUtYWN0aW9ucyB7XFxuICAgICAgcGFkZGluZy1sZWZ0OiAyN3B4OyB9XFxuICAuc2lkZWJhciAuYW50LXRhYnMge1xcbiAgICBtaW4taGVpZ2h0OiAxMDAlOyB9XFxuICAuc2lkZWJhciAuYW50LXRhYnMtYmFyIHtcXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNjY2M7IH1cXG4gIC5zaWRlYmFyIC5hbnQtdGFicy1uYXYtY29udGFpbmVyLXNjcm9sbGluZyB7XFxuICAgIHBhZGRpbmctbGVmdDogMDtcXG4gICAgcGFkZGluZy1yaWdodDogMDsgfVxcbiAgLnNpZGViYXIgLmFudC10YWJzLXRhYi1wcmV2LmFudC10YWJzLXRhYi1hcnJvdy1zaG93LFxcbiAgLnNpZGViYXIgLmFudC10YWJzLXRhYi1uZXh0LmFudC10YWJzLXRhYi1hcnJvdy1zaG93IHtcXG4gICAgZGlzcGxheTogbm9uZTsgfVxcbiAgLnNpZGViYXIgLmFudC10YWJzLW5hdiB7XFxuICAgIGhlaWdodDogNDRweDsgfVxcbiAgLnNpZGViYXIgLmFudC10YWJzLW5hdiAuYW50LXRhYnMtdGFiIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xcbiAgICBsaW5lLWhlaWdodDogMjdweDsgfVxcbiAgLnNpZGViYXIgLmFudC10YWJzLW5hdi1zY3JvbGwge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG4gIC5zaWRlYmFyIC5yZXNpemUtaGFuZGxlciB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcmlnaHQ6IC0ycHg7XFxuICAgIHRvcDogMDtcXG4gICAgYm90dG9tOiAwO1xcbiAgICB3aWR0aDogMnB4O1xcbiAgICBiYWNrZ3JvdW5kOiAjY2NjO1xcbiAgICBjdXJzb3I6IGNvbC1yZXNpemU7IH1cXG4gICAgLnNpZGViYXIgLnJlc2l6ZS1oYW5kbGVyOmhvdmVyLCAuc2lkZWJhciAucmVzaXplLWhhbmRsZXIuZm9jdXNlZCB7XFxuICAgICAgcmlnaHQ6IC00cHg7XFxuICAgICAgd2lkdGg6IDZweDtcXG4gICAgICBiYWNrZ3JvdW5kOiAjYWFhOyB9XFxuXFxuLndpdGgtc2lkZWJhciAuc2lkZWJhciB7XFxuICBkaXNwbGF5OiBibG9jazsgfVxcblxcbi5jb250ZXh0LW1lbnUge1xcbiAgei1pbmRleDogMTA7IH1cXG4gIC5jb250ZXh0LW1lbnUgLmFudC1tZW51IHtcXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkICNjY2MnO1xcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogMCAxcHggNnB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gICAgICAgICAgICBib3gtc2hhZG93OiAwIDFweCA2cHggcmdiYSgwLCAwLCAwLCAwLjIpOyB9XFxuICAgIC5jb250ZXh0LW1lbnUgLmFudC1tZW51IC5hbnQtbWVudS1pdGVtIHtcXG4gICAgICBoZWlnaHQ6IDM2cHg7XFxuICAgICAgbGluZS1oZWlnaHQ6IDM2cHg7IH1cXG4gICAgICAuY29udGV4dC1tZW51IC5hbnQtbWVudSAuYW50LW1lbnUtaXRlbTpob3ZlciB7XFxuICAgICAgICBiYWNrZ3JvdW5kOiAjZWNmNmZkOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwidmFyIG1hcCA9IHtcblx0XCIuL2FmXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hZi5qc1wiLFxuXHRcIi4vYWYuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FmLmpzXCIsXG5cdFwiLi9hclwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXIuanNcIixcblx0XCIuL2FyLWR6XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1kei5qc1wiLFxuXHRcIi4vYXItZHouanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLWR6LmpzXCIsXG5cdFwiLi9hci1rd1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXIta3cuanNcIixcblx0XCIuL2FyLWt3LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1rdy5qc1wiLFxuXHRcIi4vYXItbHlcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLWx5LmpzXCIsXG5cdFwiLi9hci1seS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItbHkuanNcIixcblx0XCIuL2FyLW1hXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1tYS5qc1wiLFxuXHRcIi4vYXItbWEuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLW1hLmpzXCIsXG5cdFwiLi9hci1zYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItc2EuanNcIixcblx0XCIuL2FyLXNhLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1zYS5qc1wiLFxuXHRcIi4vYXItdG5cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLXRuLmpzXCIsXG5cdFwiLi9hci10bi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItdG4uanNcIixcblx0XCIuL2FyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci5qc1wiLFxuXHRcIi4vYXpcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2F6LmpzXCIsXG5cdFwiLi9hei5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXouanNcIixcblx0XCIuL2JlXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZS5qc1wiLFxuXHRcIi4vYmUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JlLmpzXCIsXG5cdFwiLi9iZ1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYmcuanNcIixcblx0XCIuL2JnLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZy5qc1wiLFxuXHRcIi4vYm1cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JtLmpzXCIsXG5cdFwiLi9ibS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm0uanNcIixcblx0XCIuL2JuXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibi5qc1wiLFxuXHRcIi4vYm4uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JuLmpzXCIsXG5cdFwiLi9ib1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm8uanNcIixcblx0XCIuL2JvLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iby5qc1wiLFxuXHRcIi4vYnJcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JyLmpzXCIsXG5cdFwiLi9ici5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnIuanNcIixcblx0XCIuL2JzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9icy5qc1wiLFxuXHRcIi4vYnMuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JzLmpzXCIsXG5cdFwiLi9jYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY2EuanNcIixcblx0XCIuL2NhLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jYS5qc1wiLFxuXHRcIi4vY3NcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2NzLmpzXCIsXG5cdFwiLi9jcy5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3MuanNcIixcblx0XCIuL2N2XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jdi5qc1wiLFxuXHRcIi4vY3YuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2N2LmpzXCIsXG5cdFwiLi9jeVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3kuanNcIixcblx0XCIuL2N5LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jeS5qc1wiLFxuXHRcIi4vZGFcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RhLmpzXCIsXG5cdFwiLi9kYS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGEuanNcIixcblx0XCIuL2RlXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS5qc1wiLFxuXHRcIi4vZGUtYXRcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RlLWF0LmpzXCIsXG5cdFwiLi9kZS1hdC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtYXQuanNcIixcblx0XCIuL2RlLWNoXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1jaC5qc1wiLFxuXHRcIi4vZGUtY2guanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RlLWNoLmpzXCIsXG5cdFwiLi9kZS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUuanNcIixcblx0XCIuL2R2XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kdi5qc1wiLFxuXHRcIi4vZHYuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2R2LmpzXCIsXG5cdFwiLi9lbFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZWwuanNcIixcblx0XCIuL2VsLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbC5qc1wiLFxuXHRcIi4vZW4tYXVcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWF1LmpzXCIsXG5cdFwiLi9lbi1hdS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tYXUuanNcIixcblx0XCIuL2VuLWNhXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1jYS5qc1wiLFxuXHRcIi4vZW4tY2EuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWNhLmpzXCIsXG5cdFwiLi9lbi1nYlwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tZ2IuanNcIixcblx0XCIuL2VuLWdiLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1nYi5qc1wiLFxuXHRcIi4vZW4taWVcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWllLmpzXCIsXG5cdFwiLi9lbi1pZS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taWUuanNcIixcblx0XCIuL2VuLW56XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1uei5qc1wiLFxuXHRcIi4vZW4tbnouanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLW56LmpzXCIsXG5cdFwiLi9lb1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW8uanNcIixcblx0XCIuL2VvLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lby5qc1wiLFxuXHRcIi4vZXNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLmpzXCIsXG5cdFwiLi9lcy1kb1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtZG8uanNcIixcblx0XCIuL2VzLWRvLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy1kby5qc1wiLFxuXHRcIi4vZXMtdXNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLXVzLmpzXCIsXG5cdFwiLi9lcy11cy5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtdXMuanNcIixcblx0XCIuL2VzLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy5qc1wiLFxuXHRcIi4vZXRcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2V0LmpzXCIsXG5cdFwiLi9ldC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXQuanNcIixcblx0XCIuL2V1XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldS5qc1wiLFxuXHRcIi4vZXUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2V1LmpzXCIsXG5cdFwiLi9mYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmEuanNcIixcblx0XCIuL2ZhLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mYS5qc1wiLFxuXHRcIi4vZmlcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZpLmpzXCIsXG5cdFwiLi9maS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmkuanNcIixcblx0XCIuL2ZvXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mby5qc1wiLFxuXHRcIi4vZm8uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZvLmpzXCIsXG5cdFwiLi9mclwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnIuanNcIixcblx0XCIuL2ZyLWNhXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci1jYS5qc1wiLFxuXHRcIi4vZnItY2EuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLWNhLmpzXCIsXG5cdFwiLi9mci1jaFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2guanNcIixcblx0XCIuL2ZyLWNoLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci1jaC5qc1wiLFxuXHRcIi4vZnIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLmpzXCIsXG5cdFwiLi9meVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnkuanNcIixcblx0XCIuL2Z5LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9meS5qc1wiLFxuXHRcIi4vZ2RcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dkLmpzXCIsXG5cdFwiLi9nZC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2QuanNcIixcblx0XCIuL2dsXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nbC5qc1wiLFxuXHRcIi4vZ2wuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dsLmpzXCIsXG5cdFwiLi9nb20tbGF0blwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ29tLWxhdG4uanNcIixcblx0XCIuL2dvbS1sYXRuLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nb20tbGF0bi5qc1wiLFxuXHRcIi4vZ3VcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2d1LmpzXCIsXG5cdFwiLi9ndS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ3UuanNcIixcblx0XCIuL2hlXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oZS5qc1wiLFxuXHRcIi4vaGUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hlLmpzXCIsXG5cdFwiLi9oaVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGkuanNcIixcblx0XCIuL2hpLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oaS5qc1wiLFxuXHRcIi4vaHJcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hyLmpzXCIsXG5cdFwiLi9oci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHIuanNcIixcblx0XCIuL2h1XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9odS5qc1wiLFxuXHRcIi4vaHUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2h1LmpzXCIsXG5cdFwiLi9oeS1hbVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHktYW0uanNcIixcblx0XCIuL2h5LWFtLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oeS1hbS5qc1wiLFxuXHRcIi4vaWRcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lkLmpzXCIsXG5cdFwiLi9pZC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaWQuanNcIixcblx0XCIuL2lzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pcy5qc1wiLFxuXHRcIi4vaXMuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lzLmpzXCIsXG5cdFwiLi9pdFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXQuanNcIixcblx0XCIuL2l0LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pdC5qc1wiLFxuXHRcIi4vamFcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2phLmpzXCIsXG5cdFwiLi9qYS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvamEuanNcIixcblx0XCIuL2p2XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9qdi5qc1wiLFxuXHRcIi4vanYuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2p2LmpzXCIsXG5cdFwiLi9rYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2EuanNcIixcblx0XCIuL2thLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rYS5qc1wiLFxuXHRcIi4va2tcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2trLmpzXCIsXG5cdFwiLi9ray5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2suanNcIixcblx0XCIuL2ttXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbS5qc1wiLFxuXHRcIi4va20uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ttLmpzXCIsXG5cdFwiLi9rblwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva24uanNcIixcblx0XCIuL2tuLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbi5qc1wiLFxuXHRcIi4va29cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2tvLmpzXCIsXG5cdFwiLi9rby5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva28uanNcIixcblx0XCIuL2t5XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9reS5qc1wiLFxuXHRcIi4va3kuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2t5LmpzXCIsXG5cdFwiLi9sYlwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbGIuanNcIixcblx0XCIuL2xiLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sYi5qc1wiLFxuXHRcIi4vbG9cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2xvLmpzXCIsXG5cdFwiLi9sby5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbG8uanNcIixcblx0XCIuL2x0XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdC5qc1wiLFxuXHRcIi4vbHQuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x0LmpzXCIsXG5cdFwiLi9sdlwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbHYuanNcIixcblx0XCIuL2x2LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdi5qc1wiLFxuXHRcIi4vbWVcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21lLmpzXCIsXG5cdFwiLi9tZS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWUuanNcIixcblx0XCIuL21pXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9taS5qc1wiLFxuXHRcIi4vbWkuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21pLmpzXCIsXG5cdFwiLi9ta1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWsuanNcIixcblx0XCIuL21rLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tay5qc1wiLFxuXHRcIi4vbWxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21sLmpzXCIsXG5cdFwiLi9tbC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWwuanNcIixcblx0XCIuL21yXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tci5qc1wiLFxuXHRcIi4vbXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21yLmpzXCIsXG5cdFwiLi9tc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXMuanNcIixcblx0XCIuL21zLW15XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tcy1teS5qc1wiLFxuXHRcIi4vbXMtbXkuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLW15LmpzXCIsXG5cdFwiLi9tcy5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXMuanNcIixcblx0XCIuL210XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tdC5qc1wiLFxuXHRcIi4vbXQuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL210LmpzXCIsXG5cdFwiLi9teVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXkuanNcIixcblx0XCIuL215LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9teS5qc1wiLFxuXHRcIi4vbmJcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25iLmpzXCIsXG5cdFwiLi9uYi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmIuanNcIixcblx0XCIuL25lXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uZS5qc1wiLFxuXHRcIi4vbmUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25lLmpzXCIsXG5cdFwiLi9ubFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmwuanNcIixcblx0XCIuL25sLWJlXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubC1iZS5qc1wiLFxuXHRcIi4vbmwtYmUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLWJlLmpzXCIsXG5cdFwiLi9ubC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmwuanNcIixcblx0XCIuL25uXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubi5qc1wiLFxuXHRcIi4vbm4uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25uLmpzXCIsXG5cdFwiLi9wYS1pblwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGEtaW4uanNcIixcblx0XCIuL3BhLWluLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wYS1pbi5qc1wiLFxuXHRcIi4vcGxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3BsLmpzXCIsXG5cdFwiLi9wbC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGwuanNcIixcblx0XCIuL3B0XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC5qc1wiLFxuXHRcIi4vcHQtYnJcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3B0LWJyLmpzXCIsXG5cdFwiLi9wdC1ici5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQtYnIuanNcIixcblx0XCIuL3B0LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC5qc1wiLFxuXHRcIi4vcm9cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3JvLmpzXCIsXG5cdFwiLi9yby5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcm8uanNcIixcblx0XCIuL3J1XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ydS5qc1wiLFxuXHRcIi4vcnUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3J1LmpzXCIsXG5cdFwiLi9zZFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2QuanNcIixcblx0XCIuL3NkLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZC5qc1wiLFxuXHRcIi4vc2VcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NlLmpzXCIsXG5cdFwiLi9zZS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2UuanNcIixcblx0XCIuL3NpXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zaS5qc1wiLFxuXHRcIi4vc2kuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NpLmpzXCIsXG5cdFwiLi9za1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2suanNcIixcblx0XCIuL3NrLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zay5qc1wiLFxuXHRcIi4vc2xcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NsLmpzXCIsXG5cdFwiLi9zbC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2wuanNcIixcblx0XCIuL3NxXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcS5qc1wiLFxuXHRcIi4vc3EuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NxLmpzXCIsXG5cdFwiLi9zclwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3IuanNcIixcblx0XCIuL3NyLWN5cmxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NyLWN5cmwuanNcIixcblx0XCIuL3NyLWN5cmwuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NyLWN5cmwuanNcIixcblx0XCIuL3NyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci5qc1wiLFxuXHRcIi4vc3NcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NzLmpzXCIsXG5cdFwiLi9zcy5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3MuanNcIixcblx0XCIuL3N2XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdi5qc1wiLFxuXHRcIi4vc3YuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N2LmpzXCIsXG5cdFwiLi9zd1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3cuanNcIixcblx0XCIuL3N3LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdy5qc1wiLFxuXHRcIi4vdGFcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RhLmpzXCIsXG5cdFwiLi90YS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGEuanNcIixcblx0XCIuL3RlXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZS5qc1wiLFxuXHRcIi4vdGUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RlLmpzXCIsXG5cdFwiLi90ZXRcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RldC5qc1wiLFxuXHRcIi4vdGV0LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZXQuanNcIixcblx0XCIuL3RoXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90aC5qc1wiLFxuXHRcIi4vdGguanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RoLmpzXCIsXG5cdFwiLi90bC1waFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGwtcGguanNcIixcblx0XCIuL3RsLXBoLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bC1waC5qc1wiLFxuXHRcIi4vdGxoXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bGguanNcIixcblx0XCIuL3RsaC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGxoLmpzXCIsXG5cdFwiLi90clwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHIuanNcIixcblx0XCIuL3RyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ci5qc1wiLFxuXHRcIi4vdHpsXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90emwuanNcIixcblx0XCIuL3R6bC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHpsLmpzXCIsXG5cdFwiLi90em1cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bS5qc1wiLFxuXHRcIi4vdHptLWxhdG5cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bS1sYXRuLmpzXCIsXG5cdFwiLi90em0tbGF0bi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHptLWxhdG4uanNcIixcblx0XCIuL3R6bS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHptLmpzXCIsXG5cdFwiLi91a1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdWsuanNcIixcblx0XCIuL3VrLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ay5qc1wiLFxuXHRcIi4vdXJcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3VyLmpzXCIsXG5cdFwiLi91ci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXIuanNcIixcblx0XCIuL3V6XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ei5qc1wiLFxuXHRcIi4vdXotbGF0blwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXotbGF0bi5qc1wiLFxuXHRcIi4vdXotbGF0bi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXotbGF0bi5qc1wiLFxuXHRcIi4vdXouanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3V6LmpzXCIsXG5cdFwiLi92aVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdmkuanNcIixcblx0XCIuL3ZpLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS92aS5qc1wiLFxuXHRcIi4veC1wc2V1ZG9cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3gtcHNldWRvLmpzXCIsXG5cdFwiLi94LXBzZXVkby5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUveC1wc2V1ZG8uanNcIixcblx0XCIuL3lvXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS95by5qc1wiLFxuXHRcIi4veW8uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3lvLmpzXCIsXG5cdFwiLi96aC1jblwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtY24uanNcIixcblx0XCIuL3poLWNuLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1jbi5qc1wiLFxuXHRcIi4vemgtaGtcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWhrLmpzXCIsXG5cdFwiLi96aC1oay5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtaGsuanNcIixcblx0XCIuL3poLXR3XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC10dy5qc1wiLFxuXHRcIi4vemgtdHcuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLXR3LmpzXCJcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUgc3luYyByZWN1cnNpdmUgXlxcXFwuXFxcXC8uKiRcIjsiLCIvLyBHZW5lcmF0ZSB0aHJlZSBhY3Rpb24gdHlwZXMsIHVzZWQgaW4gYWN0aW9ucyB0aGF0IHJldHVybiBwcm9taXNlc1xyXG5leHBvcnQgY29uc3QgbWFrZTMgPSAobmFtZSkgPT4gW25hbWUgKyAnX1JFUVVFU1QnLCBuYW1lICsgJ19TVUNDRVNTJywgbmFtZSArICdfRkFJTCddO1xyXG5cclxuZXhwb3J0IGNvbnN0IHR5cGUzID0gKG5hbWUpID0+IG1ha2UzKG5hbWUpLm1hcCgoa2V5KSA9PiB0eXBlc1trZXldKTtcclxuXHJcbmNvbnN0IHByb21pc2VUeXBlcyA9IFtcclxuICAnU1RBUlRfUkVDT1JESU5HJyxcclxuICAnU1RPUF9SRUNPUkRJTkcnLFxyXG4gICdTVEFSVF9JTlNQRUNUSU5HJyxcclxuICAnU1RPUF9JTlNQRUNUSU5HJ1xyXG5dLnJlZHVjZSgocHJldiwgY3VyKSA9PiB7XHJcbiAgbWFrZTMoY3VyKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgIHByZXZba2V5XSA9IGtleTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHByZXY7XHJcbn0sIHt9KTtcclxuXHJcbmNvbnN0IHNpbXBsZVR5cGVzID0gW1xyXG4gICdTRVRfUk9VVEUnLFxyXG4gICdTRVRfRURJVE9SX0FDVElWRV9UQUInLFxyXG4gICdET05FX0lOU1BFQ1RJTkcnLFxyXG4gICdVUERBVEVfQkFTRV9VUkwnLFxyXG4gICdBUFBFTkRfQ09NTUFORCcsXHJcbiAgJ0RVUExJQ0FURV9DT01NQU5EJyxcclxuICAnSU5TRVJUX0NPTU1BTkQnLFxyXG4gICdVUERBVEVfQ09NTUFORCcsXHJcbiAgJ1JFTU9WRV9DT01NQU5EJyxcclxuICAnU0VMRUNUX0NPTU1BTkQnLFxyXG5cclxuICAnQ1VUX0NPTU1BTkQnLFxyXG4gICdDT1BZX0NPTU1BTkQnLFxyXG4gICdQQVNURV9DT01NQU5EJyxcclxuXHJcbiAgJ05PUk1BTElaRV9DT01NQU5EUycsXHJcbiAgJ1VQREFURV9TRUxFQ1RFRF9DT01NQU5EJyxcclxuICAnU0FWRV9FRElUSU5HX0FTX0VYSVNURUQnLFxyXG4gICdTQVZFX0VESVRJTkdfQVNfTkVXJyxcclxuXHJcbiAgJ1NFVF9URVNUX0NBU0VTJyxcclxuICAnU0VUX0VESVRJTkcnLFxyXG4gICdFRElUX1RFU1RfQ0FTRScsXHJcbiAgJ0VESVRfTkVXX1RFU1RfQ0FTRScsXHJcbiAgJ0FERF9URVNUX0NBU0VTJyxcclxuICAnUkVOQU1FX1RFU1RfQ0FTRScsXHJcbiAgJ1JFTU9WRV9URVNUX0NBU0UnLFxyXG4gICdVUERBVEVfVEVTVF9DQVNFX1NUQVRVUycsXHJcbiAgJ1NFVF9QTEFZRVJfU1RBVEUnLFxyXG4gICdTRVRfUExBWUVSX01PREUnLFxyXG4gICdQTEFZRVJfQUREX0VSUk9SX0NPTU1BTkRfSU5ERVgnLFxyXG5cclxuICAnU0VUX1RFU1RfU1VJVEVTJyxcclxuICAnVVBEQVRFX1RFU1RfU1VJVEUnLFxyXG5cclxuICAnQUREX0JSRUFLUE9JTlQnLFxyXG4gICdSRU1PVkVfQlJFQUtQT0lOVCcsXHJcblxyXG4gICdBRERfTE9HUycsXHJcbiAgJ0NMRUFSX0xPR1MnLFxyXG5cclxuICAnQUREX1NDUkVFTlNIT1QnLFxyXG4gICdDTEVBUl9TQ1JFRU5TSE9UUycsXHJcblxyXG4gICdBRERfVklTSU9OJyxcclxuICAnQ0xFQVJfVklTSU9OUycsXHJcblxyXG4gICdTVEFSVF9QTEFZSU5HJyxcclxuICAnU1RPUF9QTEFZSU5HJyxcclxuXHJcbiAgJ1NFVF9DU1ZfTElTVCcsXHJcbiAgJ1NFVF9TQ1JFRU5TSE9UX0xJU1QnLFxyXG4gICdTRVRfVklTSU9OX0xJU1QnLFxyXG4gICdTRVRfVkFSSUFCTEVfTElTVCcsXHJcbiAgJ1NFVF9TT1VSQ0VfRVJST1InLFxyXG4gICdTRVRfU09VUkNFX0NVUlJFTlQnLFxyXG5cclxuICAnVVBEQVRFX0NPTkZJRycsXHJcbiAgJ1VQREFURV9VSSdcclxuXS5yZWR1Y2UoKHByZXYsIGN1cikgPT4ge1xyXG4gIHByZXZbY3VyXSA9IGN1clxyXG4gIHJldHVybiBwcmV2XHJcbn0sIHt9KVxyXG5cclxuZXhwb3J0IGNvbnN0IHR5cGVzID0geyAuLi5zaW1wbGVUeXBlcywgLi4ucHJvbWlzZVR5cGVzIH1cclxuIiwiaW1wb3J0IHsgbWVzc2FnZSB9IGZyb20gJ2FudGQnXHJcbmltcG9ydCB7IHR5cGUzLCB0eXBlcyBhcyBUIH0gZnJvbSAnLi9hY3Rpb25fdHlwZXMnXHJcbmltcG9ydCB7IHBpY2ssIHVudGlsLCBvbiwgbWFwLCBjb21wb3NlLCB1aWQgfSBmcm9tICcuLi9jb21tb24vdXRpbHMnXHJcbmltcG9ydCBjc0lwYyBmcm9tICcuLi9jb21tb24vaXBjL2lwY19jcydcclxuaW1wb3J0IHN0b3JhZ2UgZnJvbSAnLi4vY29tbW9uL3N0b3JhZ2UnXHJcbmltcG9ydCB0ZXN0Q2FzZU1vZGVsLCB7IG5vcm1hbGl6ZUNvbW1hbmQgfSBmcm9tICcuLi9tb2RlbHMvdGVzdF9jYXNlX21vZGVsJ1xyXG5pbXBvcnQgdGVzdFN1aXRlTW9kZWwgZnJvbSAnLi4vbW9kZWxzL3Rlc3Rfc3VpdGVfbW9kZWwnXHJcbmltcG9ydCB7IGdldFBsYXllciB9IGZyb20gJy4uL2NvbW1vbi9wbGF5ZXInXHJcbmltcG9ydCB7IGdldENTVk1hbiB9IGZyb20gJy4uL2NvbW1vbi9jc3ZfbWFuJ1xyXG5pbXBvcnQgeyBnZXRTY3JlZW5zaG90TWFuIH0gZnJvbSAnLi4vY29tbW9uL3NjcmVlbnNob3RfbWFuJ1xyXG5pbXBvcnQgeyBnZXRWaXNpb25NYW4gfSBmcm9tICcuLi9jb21tb24vdmlzaW9uX21hbidcclxuaW1wb3J0IGJhY2t1cCBmcm9tICcuLi9jb21tb24vYmFja3VwJ1xyXG5pbXBvcnQgbG9nIGZyb20gJy4uL2NvbW1vbi9sb2cnXHJcbmltcG9ydCB7IGZyb21KU09OU3RyaW5nIH0gZnJvbSAnLi4vY29tbW9uL2NvbnZlcnRfdXRpbHMnXHJcblxyXG5sZXQgcmVjb3JkZWRDb3VudCA9IDBcclxuXHJcbmNvbnN0IHNhdmVFZGl0aW5nID0gKHtkaXNwYXRjaCwgZ2V0U3RhdGV9KSA9PiB7XHJcbiAgY29uc3QgeyBlZGl0b3IgfSAgPSBnZXRTdGF0ZSgpXHJcbiAgY29uc3QgeyBlZGl0aW5nIH0gPSBlZGl0b3JcclxuXHJcbiAgc3RvcmFnZS5zZXQoJ2VkaXRpbmcnLCBlZGl0aW5nKVxyXG59XHJcblxyXG5jb25zdCBzYXZlQ29uZmlnID0gKGZ1bmN0aW9uICgpIHtcclxuICBsZXQgbGFzdFNpemUgPSB7fVxyXG5cclxuICByZXR1cm4gKHtkaXNwYXRjaCwgZ2V0U3RhdGV9KSA9PiB7XHJcbiAgICBsZXQgeyBjb25maWcgfSA9IGdldFN0YXRlKClcclxuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fVxyXG5cclxuICAgIGNvbnN0IHNhdmVkU2l6ZSA9IGNvbmZpZy5zaXplID8gY29uZmlnLnNpemVbY29uZmlnLnNob3dTaWRlYmFyID8gJ3dpdGhfc2lkZWJhcicgOiAnc3RhbmRhcmQnXSA6IG51bGxcclxuICAgIGNvbnN0IGZpbmFsU2l6ZSA9IHNhdmVkU2l6ZSB8fCAoXHJcbiAgICAgIGNvbmZpZy5zaG93U2lkZWJhclxyXG4gICAgICAgID8ge1xyXG4gICAgICAgICAgd2lkdGg6IDg1MCxcclxuICAgICAgICAgIGhlaWdodDogNzc1XHJcbiAgICAgICAgfSA6IHtcclxuICAgICAgICAgIHdpZHRoOiA1MjAsXHJcbiAgICAgICAgICBoZWlnaHQ6IDc3NVxyXG4gICAgICAgIH1cclxuICAgIClcclxuXHJcbiAgICBpZiAoZmluYWxTaXplLndpZHRoICE9PSBsYXN0U2l6ZS53aWR0aCB8fFxyXG4gICAgICBmaW5hbFNpemUuaGVpZ2h0ICE9PSBsYXN0U2l6ZS5oZWlnaHQpIHtcclxuICAgICAgc3RvcmFnZS5nZXQoJ2NvbmZpZycpXHJcbiAgICAgIC50aGVuKG9sZENvbmZpZyA9PiB7XHJcbiAgICAgICAgaWYgKG9sZENvbmZpZy5zaG93U2lkZWJhciA9PT0gY29uZmlnLnNob3dTaWRlYmFyKSByZXR1cm5cclxuXHJcbiAgICAgICAgaWYgKGZpbmFsU2l6ZS53aWR0aCAhPT0gd2luZG93Lm91dGVyV2lkdGggfHwgZmluYWxTaXplLmhlaWdodCAhPT0gd2luZG93Lm91dGVySGVpZ2h0KSB7XHJcbiAgICAgICAgICBjc0lwYy5hc2soJ1BBTkVMX1JFU0laRV9XSU5ET1cnLCB7IHNpemU6IGZpbmFsU2l6ZSB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzdG9yYWdlLnNldCgnY29uZmlnJywgY29uZmlnKVxyXG4gICAgbGFzdFNpemUgPSBmaW5hbFNpemVcclxuICB9XHJcbn0pKClcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRSb3V0ZSAoZGF0YSkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULlNFVF9ST1VURSxcclxuICAgIGRhdGFcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFJlY29yZGluZyAoKSB7XHJcbiAgcmVjb3JkZWRDb3VudCA9IDBcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGVzOiB0eXBlMygnU1RBUlRfUkVDT1JESU5HJyksXHJcbiAgICBwcm9taXNlOiAoKSA9PiB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGNzSXBjLmFzaygnUEFORUxfVFJZX1RPX1JFQ09SRF9PUEVOX0NPTU1BTkQnKVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgcmV0dXJuIGNzSXBjLmFzaygnUEFORUxfU1RBUlRfUkVDT1JESU5HJywge30pXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RvcFJlY29yZGluZyAoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGVzOiB0eXBlMygnU1RPUF9SRUNPUkRJTkcnKSxcclxuICAgIHByb21pc2U6ICgpID0+IHtcclxuICAgICAgcmV0dXJuIGNzSXBjLmFzaygnUEFORUxfU1RPUF9SRUNPUkRJTkcnLCB7fSlcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydEluc3BlY3RpbmcgKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlczogdHlwZTMoJ1NUQVJUX0lOU1BFQ1RJTkcnKSxcclxuICAgIHByb21pc2U6ICgpID0+IHtcclxuICAgICAgcmV0dXJuIGNzSXBjLmFzaygnUEFORUxfU1RBUlRfSU5TUEVDVElORycsIHt9KVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BJbnNwZWN0aW5nICgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZXM6IHR5cGUzKCdTVE9QX0lOU1BFQ1RJTkcnKSxcclxuICAgIHByb21pc2U6ICgpID0+IHtcclxuICAgICAgcmV0dXJuIGNzSXBjLmFzaygnUEFORUxfU1RPUF9JTlNQRUNUSU5HJywge30pXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRQbGF5aW5nICgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5TVEFSVF9QTEFZSU5HLFxyXG4gICAgZGF0YTogbnVsbFxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BQbGF5aW5nICgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5TVE9QX1BMQVlJTkcsXHJcbiAgICBkYXRhOiBudWxsXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZG9uZUluc3BlY3RpbmcgKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULkRPTkVfSU5TUEVDVElORyxcclxuICAgIGRhdGE6IHt9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ29tbWFuZCAoY21kT2JqLCBmcm9tUmVjb3JkID0gZmFsc2UpIHtcclxuICBpZiAoZnJvbVJlY29yZCkge1xyXG4gICAgcmVjb3JkZWRDb3VudCArPSAxXHJcbiAgICAvLyBOb3RlOiBzaG93IGluIGJhZGdlIHRoZSByZWNvcmRlZCBjb3VudFxyXG4gICAgY3NJcGMuYXNrKCdQQU5FTF9VUERBVEVfQkFER0UnLCB7XHJcbiAgICAgIHR5cGU6ICdyZWNvcmQnLFxyXG4gICAgICB0ZXh0OiAnJyArIHJlY29yZGVkQ291bnRcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5BUFBFTkRfQ09NTUFORCxcclxuICAgIGRhdGE6IHsgY29tbWFuZDogY21kT2JqIH0sXHJcbiAgICBwb3N0OiBzYXZlRWRpdGluZ1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGR1cGxpY2F0ZUNvbW1hbmQgKGluZGV4KSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6IFQuRFVQTElDQVRFX0NPTU1BTkQsXHJcbiAgICBkYXRhOiB7IGluZGV4IH0sXHJcbiAgICBwb3N0OiBzYXZlRWRpdGluZ1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluc2VydENvbW1hbmQgKGNtZE9iaiwgaW5kZXgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5JTlNFUlRfQ09NTUFORCxcclxuICAgIGRhdGE6IHtcclxuICAgICAgaW5kZXgsXHJcbiAgICAgIGNvbW1hbmQ6IGNtZE9ialxyXG4gICAgfSxcclxuICAgIHBvc3Q6IHNhdmVFZGl0aW5nXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQ29tbWFuZCAoY21kT2JqLCBpbmRleCkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULlVQREFURV9DT01NQU5ELFxyXG4gICAgZGF0YToge1xyXG4gICAgICBjb21tYW5kOiBjbWRPYmosXHJcbiAgICAgIGluZGV4OiBpbmRleFxyXG4gICAgfSxcclxuICAgIHBvc3Q6IHNhdmVFZGl0aW5nXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ29tbWFuZCAoaW5kZXgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5SRU1PVkVfQ09NTUFORCxcclxuICAgIGRhdGE6IHsgaW5kZXggfSxcclxuICAgIHBvc3Q6IHNhdmVFZGl0aW5nXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0Q29tbWFuZCAoaW5kZXgsIGZvcmNlQ2xpY2spIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5TRUxFQ1RfQ09NTUFORCxcclxuICAgIGRhdGE6IHsgaW5kZXgsIGZvcmNlQ2xpY2sgfSxcclxuICAgIHBvc3Q6IHNhdmVFZGl0aW5nXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3V0Q29tbWFuZCAoaW5kZXgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5DVVRfQ09NTUFORCxcclxuICAgIGRhdGE6IHsgaW5kaWNlczogW2luZGV4XSB9LFxyXG4gICAgcG9zdDogc2F2ZUVkaXRpbmdcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3B5Q29tbWFuZCAoaW5kZXgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5DT1BZX0NPTU1BTkQsXHJcbiAgICBkYXRhOiB7IGluZGljZXM6IFtpbmRleF0gfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhc3RlQ29tbWFuZCAoaW5kZXgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5QQVNURV9DT01NQU5ELFxyXG4gICAgZGF0YTogeyBpbmRleCB9LFxyXG4gICAgcG9zdDogc2F2ZUVkaXRpbmdcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVDb21tYW5kcyAoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6IFQuTk9STUFMSVpFX0NPTU1BTkRTLFxyXG4gICAgZGF0YToge30sXHJcbiAgICBwb3N0OiBzYXZlRWRpdGluZ1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVNlbGVjdGVkQ29tbWFuZCAob2JqKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6IFQuVVBEQVRFX1NFTEVDVEVEX0NPTU1BTkQsXHJcbiAgICBkYXRhOiBvYmosXHJcbiAgICBwb3N0OiBzYXZlRWRpdGluZ1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFNvdXJjZUVycm9yIChlcnJvcikge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULlNFVF9TT1VSQ0VfRVJST1IsXHJcbiAgICBkYXRhOiBlcnJvclxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFNvdXJjZUN1cnJlbnQgKHN0cikge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULlNFVF9TT1VSQ0VfQ1VSUkVOVCxcclxuICAgIGRhdGE6IHN0clxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVTb3VyY2VDb2RlVG9FZGl0aW5nIChzdHIpIHtcclxuICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG4gICAgY29uc3QgeyBlZGl0aW5nLCBlZGl0aW5nU291cmNlIH0gPSBnZXRTdGF0ZSgpLmVkaXRvclxyXG4gICAgaWYgKGVkaXRpbmdTb3VyY2UucHVyZSA9PT0gZWRpdGluZy5jdXJyZW50KSByZXR1cm5cclxuXHJcbiAgICBsb2coJ0FDVElPTiwgc2F2ZVNvdXJjZUNvZGVUb0VkaXRpbmcnLCBzdHIpXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgb2JqID0gZnJvbUpTT05TdHJpbmcoc3RyLCAndW50aXRsZWQnKVxyXG5cclxuICAgICAgZGlzcGF0Y2goc2V0RWRpdGluZyh7XHJcbiAgICAgICAgLi4ub2JqLmRhdGEsXHJcbiAgICAgICAgbWV0YTogZWRpdGluZy5tZXRhXHJcbiAgICAgIH0pKVxyXG5cclxuICAgICAgZGlzcGF0Y2goc2V0U291cmNlRXJyb3IobnVsbCkpXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIG1lc3NhZ2UuZXJyb3IoJ1RoZXJlIGFyZSBlcnJvcnMgaW4gdGhlIHNvdXJjZScpXHJcbiAgICAgIGRpc3BhdGNoKHNldFNvdXJjZUVycm9yKGUubWVzc2FnZSkpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBJbiB0aGUgZm9ybSBvZiByZWR1eC10aHVubmssIGl0IHNhdmVzIGN1cnJlbnQgZWRpdGluZyB0ZXN0IGNhc2UgdG8gbG9jYWwgc3RvcmFnZVxyXG5leHBvcnQgZnVuY3Rpb24gc2F2ZUVkaXRpbmdBc0V4aXN0ZWQgKCkge1xyXG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcbiAgICBjb25zdCBzdGF0ZSA9IGdldFN0YXRlKClcclxuICAgIGNvbnN0IHNyYyAgID0gc3RhdGUuZWRpdG9yLmVkaXRpbmcubWV0YS5zcmNcclxuICAgIGNvbnN0IHRjICAgID0gc3RhdGUuZWRpdG9yLnRlc3RDYXNlcy5maW5kKHRjID0+IHRjLmlkID09PSBzcmMuaWQpXHJcbiAgICBjb25zdCBkYXRhICA9IHBpY2soWydjb21tYW5kcyddLCBzdGF0ZS5lZGl0b3IuZWRpdGluZylcclxuXHJcbiAgICAvLyBNYWtlIHN1cmUsIG9ubHkgJ2NtZCcsICd2YWx1ZScsICd0YXJnZXQnIGFyZSBzYXZlZCBpbiBzdG9yYWdlXHJcbiAgICBkYXRhLmNvbW1hbmRzID0gZGF0YS5jb21tYW5kcy5tYXAobm9ybWFsaXplQ29tbWFuZClcclxuXHJcbiAgICByZXR1cm4gdGVzdENhc2VNb2RlbC51cGRhdGUoc3JjLmlkLCB7Li4udGMsIGRhdGF9KVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgdHlwZTogVC5TQVZFX0VESVRJTkdfQVNfRVhJU1RFRCxcclxuICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgIHBvc3Q6IHNhdmVFZGl0aW5nXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG5cclxuLy8gSW4gdGhlIGZvcm0gb2YgcmVkdXgtdGh1bm5rLCBpdCBzYXZlcyB0aGUgY3VycmVudCBlZGl0aW5nIHRlc3QgY2FzZSBhcyBhIG5ldyBuYW1lZCB0ZXN0IGNhc2VcclxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVFZGl0aW5nQXNOZXcgKG5hbWUpIHtcclxuICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG4gICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpXHJcbiAgICBjb25zdCBkYXRhICA9IHBpY2soWydjb21tYW5kcyddLCBzdGF0ZS5lZGl0b3IuZWRpdGluZylcclxuICAgIGNvbnN0IHNhbWVOYW1lID0gc3RhdGUuZWRpdG9yLnRlc3RDYXNlcy5maW5kKHRjID0+IHRjLm5hbWUgPT09IG5hbWUpXHJcblxyXG4gICAgaWYgKHNhbWVOYW1lKSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1RoZSBtYWNybyBuYW1lIGFscmVhZHkgZXhpc3RzIScpKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0ZXN0Q2FzZU1vZGVsLmluc2VydCh7bmFtZSwgZGF0YX0pXHJcbiAgICAudGhlbihpZCA9PiB7XHJcbiAgICAgIGRpc3BhdGNoKHtcclxuICAgICAgICB0eXBlOiBULlNBVkVfRURJVElOR19BU19ORVcsXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgaWQsXHJcbiAgICAgICAgICBuYW1lXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwb3N0OiBzYXZlRWRpdGluZ1xyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRUZXN0Q2FzZXMgKHRjcykge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULlNFVF9URVNUX0NBU0VTLFxyXG4gICAgZGF0YTogdGNzLFxyXG4gICAgcG9zdDogKHtkaXNwYXRjaCwgZ2V0U3RhdGV9KSA9PiB7XHJcbiAgICAgIGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKVxyXG4gICAgICBjb25zdCBzaG91bGRTZWxlY3REZWZhdWx0ID0gc3RhdGUuZWRpdG9yLnRlc3RDYXNlcy5sZW5ndGggPiAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhc3RhdGUuZWRpdG9yLmVkaXRpbmcubWV0YS5zcmMgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmVkaXRvci5lZGl0aW5nLmNvbW1hbmRzLmxlbmd0aCA9PT0gMFxyXG5cclxuICAgICAgaWYgKHNob3VsZFNlbGVjdERlZmF1bHQpIHtcclxuICAgICAgICBkaXNwYXRjaChlZGl0VGVzdENhc2Uoc3RhdGUuZWRpdG9yLnRlc3RDYXNlc1swXS5pZCkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRFZGl0aW5nIChlZGl0aW5nKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6IFQuU0VUX0VESVRJTkcsXHJcbiAgICBkYXRhOiBlZGl0aW5nXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZWRpdFRlc3RDYXNlIChpZCkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULkVESVRfVEVTVF9DQVNFLFxyXG4gICAgZGF0YTogaWQsXHJcbiAgICBwb3N0OiBzYXZlRWRpdGluZ1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVkaXROZXdUZXN0Q2FzZSAoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6IFQuRURJVF9ORVdfVEVTVF9DQVNFLFxyXG4gICAgZGF0YTogbnVsbCxcclxuICAgIHBvc3Q6IHNhdmVFZGl0aW5nXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBzZXJ0VGVzdENhc2UgKHRjKSB7XHJcbiAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuICAgIGNvbnN0IHN0YXRlICAgICA9IGdldFN0YXRlKClcclxuICAgIGNvbnN0IHRlc3RDYXNlcyA9IHN0YXRlLmVkaXRvci50ZXN0Q2FzZXNcclxuICAgIGNvbnN0IGV4aXN0ZWRUYyA9IHRlc3RDYXNlcy5maW5kKGl0ZW0gPT4gaXRlbS5uYW1lID09PSB0Yy5uYW1lKVxyXG5cclxuICAgIGxvZygndXBzZXJ0VGVzdENhc2UnLCB0YylcclxuICAgIGlmICghZXhpc3RlZFRjKSByZXR1cm4gdGVzdENhc2VNb2RlbC5pbnNlcnQodGMpXHJcbiAgICByZXR1cm4gdGVzdENhc2VNb2RlbC51cGRhdGUoZXhpc3RlZFRjLmlkLCB0YylcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRUZXN0Q2FzZXMgKHRjcykge1xyXG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcbiAgICBjb25zdCBzdGF0ZSAgICAgPSBnZXRTdGF0ZSgpXHJcbiAgICBjb25zdCB0ZXN0Q2FzZXMgPSBzdGF0ZS5lZGl0b3IudGVzdENhc2VzXHJcbiAgICBjb25zdCB2YWxpZFRjcyAgPSB0Y3MuZmlsdGVyKHRjID0+ICF0ZXN0Q2FzZXMuZmluZCh0Y2MgPT4gdGNjLm5hbWUgPT09IHRjLm5hbWUpKVxyXG4gICAgY29uc3QgZmFpbFRjcyAgID0gdGNzLmZpbHRlcih0YyA9PiB0ZXN0Q2FzZXMuZmluZCh0Y2MgPT4gdGNjLm5hbWUgPT09IHRjLm5hbWUpKVxyXG5cclxuICAgIGNvbnN0IHBhc3NDb3VudCA9IHZhbGlkVGNzLmxlbmd0aFxyXG4gICAgY29uc3QgZmFpbENvdW50ID0gdGNzLmxlbmd0aCAtIHBhc3NDb3VudFxyXG5cclxuICAgIGlmIChwYXNzQ291bnQgPT09IDApIHtcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IHBhc3NDb3VudCwgZmFpbENvdW50LCBmYWlsVGNzIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRlc3RDYXNlTW9kZWwuYnVsa0luc2VydCh2YWxpZFRjcylcclxuICAgIC50aGVuKCgpID0+ICh7IHBhc3NDb3VudCwgZmFpbENvdW50LCBmYWlsVGNzIH0pKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbmFtZVRlc3RDYXNlIChuYW1lLCB0Y0lkKSB7XHJcbiAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuICAgIGNvbnN0IHN0YXRlICAgICA9IGdldFN0YXRlKClcclxuICAgIGNvbnN0IGVkaXRpbmdJZCA9IHN0YXRlLmVkaXRvci5lZGl0aW5nLm1ldGEuc3JjLmlkXHJcbiAgICBjb25zdCB0YyAgICAgICAgPSBzdGF0ZS5lZGl0b3IudGVzdENhc2VzLmZpbmQodGMgPT4gdGMuaWQgPT09IHRjSWQpXHJcbiAgICBjb25zdCBzYW1lTmFtZSAgPSBzdGF0ZS5lZGl0b3IudGVzdENhc2VzLmZpbmQodGMgPT4gdGMubmFtZSA9PT0gbmFtZSlcclxuXHJcbiAgICBpZiAoIXRjKSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYE5vIG1hY3JvIGZvdW5kIHdpdGggaWQgJyR7dGNJZH0nIWApKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChzYW1lTmFtZSkge1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdUaGUgbWFjcm8gbmFtZSBhbHJlYWR5IGV4aXN0cyEnKSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGVzdENhc2VNb2RlbC51cGRhdGUodGNJZCwgey4uLnRjLCBuYW1lfSlcclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgaWYgKGVkaXRpbmdJZCA9PT0gdGNJZCkge1xyXG4gICAgICAgIGRpc3BhdGNoKHtcclxuICAgICAgICAgIHR5cGU6IFQuUkVOQU1FX1RFU1RfQ0FTRSxcclxuICAgICAgICAgIGRhdGE6IG5hbWUsXHJcbiAgICAgICAgICBwb3N0OiBzYXZlRWRpdGluZ1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVGVzdENhc2UgKHRjSWQpIHtcclxuICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG4gICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpXHJcbiAgICBjb25zdCBjdXJJZCA9IHN0YXRlLmVkaXRvci5lZGl0aW5nLm1ldGEuc3JjLmlkXHJcbiAgICBjb25zdCB0c3MgICA9IHN0YXRlLmVkaXRvci50ZXN0U3VpdGVzLmZpbHRlcih0cyA9PiB7XHJcbiAgICAgIHJldHVybiB0cy5jYXNlcy5maW5kKG0gPT4gbS50ZXN0Q2FzZUlkID09PSB0Y0lkKVxyXG4gICAgfSlcclxuXHJcbiAgICBpZiAodHNzLmxlbmd0aCA+IDApIHtcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihgQ2FuJ3QgZGVsZXRlIHRoaXMgbWFjcm8gZm9yIG5vdywgaXQncyBjdXJyZW50bHkgdXNlZCBpbiBmb2xsb3dpbmcgdGVzdCBzdWl0ZXM6ICR7dHNzLm1hcChpdGVtID0+IGl0ZW0ubmFtZSl9YCkpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRlc3RDYXNlTW9kZWwucmVtb3ZlKHRjSWQpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgICB0eXBlOiBULlJFTU9WRV9URVNUX0NBU0UsXHJcbiAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIGlzQ3VycmVudDogY3VySWQgPT09IHRjSWRcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBwb3N0OiBzYXZlRWRpdGluZ1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlID0+IGxvZy5lcnJvcihlLnN0YWNrKSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDdXJyZW50VGVzdENhc2UgKCkge1xyXG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcbiAgICBjb25zdCBzdGF0ZSA9IGdldFN0YXRlKClcclxuICAgIGNvbnN0IGlkICAgID0gc3RhdGUuZWRpdG9yLmVkaXRpbmcubWV0YS5zcmMuaWRcclxuXHJcbiAgICByZXR1cm4gcmVtb3ZlVGVzdENhc2UoaWQpKGRpc3BhdGNoLCBnZXRTdGF0ZSlcclxuICB9XHJcbn1cclxuXHJcbi8vIE5vdGU6IGR1cGxpY2F0ZSBjdXJyZW50IGVkaXRpbmcgYW5kIHNhdmUgdG8gYW5vdGhlclxyXG5leHBvcnQgZnVuY3Rpb24gZHVwbGljYXRlVGVzdENhc2UgKG5ld1Rlc3RDYXNlTmFtZSwgdGNJZCkge1xyXG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcbiAgICBjb25zdCBzdGF0ZSAgICAgPSBnZXRTdGF0ZSgpXHJcbiAgICBjb25zdCB0YyAgICAgICAgPSBzdGF0ZS5lZGl0b3IudGVzdENhc2VzLmZpbmQodGMgPT4gdGMuaWQgPT09IHRjSWQpXHJcbiAgICBjb25zdCBzYW1lTmFtZSAgPSBzdGF0ZS5lZGl0b3IudGVzdENhc2VzLmZpbmQodGMgPT4gdGMubmFtZSA9PT0gbmV3VGVzdENhc2VOYW1lKVxyXG5cclxuICAgIGlmICghdGMpIHtcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihgTm8gbWFjcm8gZm91bmQgd2l0aCBpZCAnJHt0Y0lkfSchYCkpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNhbWVOYW1lKSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1RoZSBtYWNybyBuYW1lIGFscmVhZHkgZXhpc3RzIScpKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0ZXN0Q2FzZU1vZGVsLmluc2VydCh7IC4uLnRjLCBuYW1lOiBuZXdUZXN0Q2FzZU5hbWUgfSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRQbGF5ZXJTdGF0ZSAob2JqKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6IFQuU0VUX1BMQVlFUl9TVEFURSxcclxuICAgIGRhdGE6IG9ialxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFRpbWVvdXRTdGF0dXMgKGFyZ3MpIHtcclxuICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XHJcbiAgICBkaXNwYXRjaChzZXRQbGF5ZXJTdGF0ZSh7XHJcbiAgICAgIHRpbWVvdXRTdGF0dXM6IGFyZ3NcclxuICAgIH0pKVxyXG5cclxuICAgIC8vIE5vdGU6IHNob3cgaW4gYmFkZ2UgdGhlIHRpbWVvdXQgbGVmdFxyXG4gICAgY3NJcGMuYXNrKCdQQU5FTF9VUERBVEVfQkFER0UnLCB7XHJcbiAgICAgIHR5cGU6ICdwbGF5JyxcclxuICAgICAgdGV4dDogKGFyZ3MudG90YWwgLSBhcmdzLnBhc3QpIC8gMTAwMCArICdzJ1xyXG4gICAgfSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRQbGF5ZXJFcnJvckNvbW1hbmRJbmRleCAoaW5kZXgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5QTEFZRVJfQUREX0VSUk9SX0NPTU1BTkRfSU5ERVgsXHJcbiAgICBkYXRhOiBpbmRleFxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZExvZyAodHlwZSwgdGV4dCwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6IFQuQUREX0xPR1MsXHJcbiAgICBkYXRhOiBbe1xyXG4gICAgICB0eXBlLFxyXG4gICAgICB0ZXh0LFxyXG4gICAgICBvcHRpb25zLFxyXG4gICAgICBpZDogdWlkKCksXHJcbiAgICAgIGNyZWF0ZVRpbWU6IG5ldyBEYXRlKClcclxuICAgIH1dXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJMb2dzICgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5DTEVBUl9MT0dTLFxyXG4gICAgZGF0YTogbnVsbFxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFNjcmVlbnNob3QgKHNjcmVlbnNob3QpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5BRERfU0NSRUVOU0hPVCxcclxuICAgIGRhdGE6IHtcclxuICAgICAgLi4uc2NyZWVuc2hvdCxcclxuICAgICAgY3JlYXRlVGltZTogbmV3IERhdGUoKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyU2NyZWVuc2hvdHMgKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULkNMRUFSX1NDUkVFTlNIT1RTLFxyXG4gICAgZGF0YTogbnVsbCxcclxuICAgIHBvc3Q6ICgpID0+IHtcclxuICAgICAgcmV0dXJuIGdldFNjcmVlbnNob3RNYW4oKS5jbGVhcigpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkVmlzaW9uICh2aXNpb24pIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5BRERfVklTSU9OLFxyXG4gICAgZGF0YToge1xyXG4gICAgICAuLi52aXNpb24sXHJcbiAgICAgIGNyZWF0ZVRpbWU6IG5ldyBEYXRlKClcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhclZpc2lvbnMgKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULkNMRUFSX1ZJU0lPTlMsXHJcbiAgICBkYXRhOiBudWxsLFxyXG4gICAgcG9zdDogKCkgPT4ge1xyXG4gICAgICByZXR1cm4gZ2V0VmlzaW9uTWFuKCkuY2xlYXIoKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNvbmZpZyAoZGF0YSkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULlVQREFURV9DT05GSUcsXHJcbiAgICBkYXRhOiBkYXRhLFxyXG4gICAgcG9zdDogc2F2ZUNvbmZpZ1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVRlc3RDYXNlUGxheVN0YXR1cyAoaWQsIHN0YXR1cykge1xyXG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcbiAgICBjb25zdCBzdGF0ZSA9IGdldFN0YXRlKClcclxuICAgIGNvbnN0IHRjICAgID0gc3RhdGUuZWRpdG9yLnRlc3RDYXNlcy5maW5kKHRjID0+IHRjLmlkID09PSBpZClcclxuXHJcbiAgICByZXR1cm4gdGVzdENhc2VNb2RlbC51cGRhdGUoaWQsIHsuLi50Yywgc3RhdHVzfSlcclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgIHR5cGU6IFQuVVBEQVRFX1RFU1RfQ0FTRV9TVEFUVVMsXHJcbiAgICAgICAgZGF0YTogeyBpZCwgc3RhdHVzIH1cclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGxheWVyUGxheSAob3B0aW9ucykge1xyXG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcbiAgICBjb25zdCBzdGF0ZSAgICAgICA9IGdldFN0YXRlKClcclxuICAgIGNvbnN0IHsgY29uZmlnIH0gID0gc3RhdGVcclxuICAgIGNvbnN0IGNmZyAgICAgICAgID0gcGljayhbJ3BsYXlIaWdobGlnaHRFbGVtZW50cycsICdwbGF5U2Nyb2xsRWxlbWVudHNJbnRvVmlldyddLCBjb25maWcpXHJcbiAgICBjb25zdCBtYWNyb05hbWUgICA9IHN0YXRlLmVkaXRvci5lZGl0aW5nLm1ldGEuc3JjID8gc3RhdGUuZWRpdG9yLmVkaXRpbmcubWV0YS5zcmMubmFtZSA6ICdVbnRpdGxlZCdcclxuICAgIGNvbnN0IHNjb3BlICAgICAgID0ge1xyXG4gICAgICAnIU1BQ1JPTkFNRSc6ICAgICAgICAgbWFjcm9OYW1lLFxyXG4gICAgICAnIVRJTUVPVVRfUEFHRUxPQUQnOiAgcGFyc2VJbnQoY29uZmlnLnRpbWVvdXRQYWdlTG9hZCwgMTApLFxyXG4gICAgICAnIVRJTUVPVVRfV0FJVCc6ICAgICAgcGFyc2VJbnQoY29uZmlnLnRpbWVvdXRFbGVtZW50LCAxMCksXHJcbiAgICAgICchVElNRU9VVF9NQUNSTyc6ICAgICBwYXJzZUludChjb25maWcudGltZW91dE1hY3JvLCAxMCksXHJcbiAgICAgICchVElNRU9VVF9ET1dOTE9BRCc6ICBwYXJzZUludChjb25maWcudGltZW91dERvd25sb2FkLCAxMCksXHJcbiAgICAgICchUkVQTEFZU1BFRUQnOiAoe1xyXG4gICAgICAgICcwJzogICAgJ0ZBU1QnLFxyXG4gICAgICAgICcwLjMnOiAgJ01FRElVTScsXHJcbiAgICAgICAgJzInOiAgICAnU0xPVydcclxuICAgICAgfSlbb3B0aW9ucy5wb3N0RGVsYXkgLyAxMDAwXSB8fCAnTUVESVVNJyxcclxuICAgICAgLi4uKG9wdGlvbnMub3ZlcnJpZGVTY29wZSB8fCB7fSlcclxuICAgIH1cclxuICAgIGNvbnN0IGJyZWFrcG9pbnRzID0gc3RhdGUucGxheWVyLmJyZWFrcG9pbnRJbmRpY2VzIHx8IFtdXHJcblxyXG4gICAgY29uc3Qgb3B0cyA9IGNvbXBvc2UoXHJcbiAgICAgIG9uKCdyZXNvdXJjZXMnKSxcclxuICAgICAgbWFwLFxyXG4gICAgICBvbignZXh0cmEnKVxyXG4gICAgKSgoZXh0cmEgPSB7fSkgPT4gKHtcclxuICAgICAgLi4uZXh0cmEsXHJcbiAgICAgIC4uLmNmZyxcclxuICAgICAgLi4uKG9wdGlvbnMuY29tbWFuZEV4dHJhIHx8IHt9KVxyXG4gICAgfSkpKG9wdGlvbnMpXHJcblxyXG4gICAgZ2V0UGxheWVyKCkucGxheSh7XHJcbiAgICAgIGJyZWFrcG9pbnRzLFxyXG4gICAgICAuLi5vcHRzLFxyXG4gICAgICBwdWJsaWM6IHtcclxuICAgICAgICAuLi4ob3B0cy5wdWJsaWMgfHwge30pLFxyXG4gICAgICAgIHNjb3BlXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGlzdENTViAoKSB7XHJcbiAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuICAgIGNvbnN0IG1hbiA9IGdldENTVk1hbigpXHJcblxyXG4gICAgbWFuLmxpc3QoKS50aGVuKGxpc3QgPT4ge1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwobGlzdC5tYXAoaXRlbSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG1hbi5nZXRMaW5rKGl0ZW0uZmlsZU5hbWUpXHJcbiAgICAgICAgLnRoZW4odXJsID0+ICh7XHJcbiAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICBuYW1lOiAgICAgICBpdGVtLmZpbGVOYW1lLFxyXG4gICAgICAgICAgc2l6ZTogICAgICAgaXRlbS5zaXplLFxyXG4gICAgICAgICAgY3JlYXRlVGltZTogbmV3IERhdGUoaXRlbS5sYXN0TW9kaWZpZWQpXHJcbiAgICAgICAgfSkpXHJcbiAgICAgIH0pKVxyXG4gICAgfSlcclxuICAgIC50aGVuKGxpc3QgPT4ge1xyXG4gICAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgdHlwZTogVC5TRVRfQ1NWX0xJU1QsXHJcbiAgICAgICAgZGF0YTogbGlzdFxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsaXN0U2NyZWVuc2hvdHMgKCkge1xyXG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcbiAgICBjb25zdCBtYW4gPSBnZXRTY3JlZW5zaG90TWFuKClcclxuXHJcbiAgICBtYW4ubGlzdCgpLnRoZW4obGlzdCA9PiB7XHJcbiAgICAgIGxpc3QucmV2ZXJzZSgpXHJcblxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwobGlzdC5tYXAoaXRlbSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG1hbi5nZXRMaW5rKGl0ZW0uZmlsZU5hbWUpXHJcbiAgICAgICAgLnRoZW4odXJsID0+ICh7XHJcbiAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICBuYW1lOiAgICAgICBpdGVtLmZpbGVOYW1lLFxyXG4gICAgICAgICAgY3JlYXRlVGltZTogbmV3IERhdGUoaXRlbS5sYXN0TW9kaWZpZWQpXHJcbiAgICAgICAgfSkpXHJcbiAgICAgIH0pKVxyXG4gICAgfSkudGhlbihsaXN0ID0+IHtcclxuICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgIHR5cGU6IFQuU0VUX1NDUkVFTlNIT1RfTElTVCxcclxuICAgICAgICBkYXRhOiBsaXN0XHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RWaXNpb25zICgpIHtcclxuICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG4gICAgY29uc3QgbWFuID0gZ2V0VmlzaW9uTWFuKClcclxuXHJcbiAgICBtYW4ubGlzdCgpLnRoZW4obGlzdCA9PiB7XHJcbiAgICAgIGxpc3QucmV2ZXJzZSgpXHJcblxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwobGlzdC5tYXAoaXRlbSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG1hbi5nZXRMaW5rKGl0ZW0uZmlsZU5hbWUpXHJcbiAgICAgICAgLnRoZW4odXJsID0+ICh7XHJcbiAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICBuYW1lOiAgICAgICBpdGVtLmZpbGVOYW1lLFxyXG4gICAgICAgICAgY3JlYXRlVGltZTogbmV3IERhdGUoaXRlbS5sYXN0TW9kaWZpZWQpXHJcbiAgICAgICAgfSkpXHJcbiAgICAgIH0pKVxyXG4gICAgfSkudGhlbihsaXN0ID0+IHtcclxuICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgIHR5cGU6IFQuU0VUX1ZJU0lPTl9MSVNULFxyXG4gICAgICAgIGRhdGE6IGxpc3RcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0VGVzdFN1aXRlcyAodHNzKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6IFQuU0VUX1RFU1RfU1VJVEVTLFxyXG4gICAgZGF0YTogdHNzXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkVGVzdFN1aXRlICh0cykge1xyXG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcbiAgICByZXR1cm4gdGVzdFN1aXRlTW9kZWwuaW5zZXJ0KHRzKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRlc3RTdWl0ZXMgKHRzcykge1xyXG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcbiAgICBjb25zdCBzdGF0ZSAgICAgPSBnZXRTdGF0ZSgpXHJcbiAgICAvLyBjb25zdCB0ZXN0Q2FzZXMgPSBzdGF0ZS5lZGl0b3IudGVzdENhc2VzXHJcbiAgICBjb25zdCB2YWxpZFRzcyAgPSB0c3NcclxuICAgIC8vIGNvbnN0IGZhaWxUY3MgICA9IHRjcy5maWx0ZXIodGMgPT4gdGVzdENhc2VzLmZpbmQodGNjID0+IHRjYy5uYW1lID09PSB0Yy5uYW1lKSlcclxuXHJcbiAgICBjb25zdCBwYXNzQ291bnQgPSB2YWxpZFRzcy5sZW5ndGhcclxuICAgIGNvbnN0IGZhaWxDb3VudCA9IHRzcy5sZW5ndGggLSBwYXNzQ291bnRcclxuXHJcbiAgICBpZiAocGFzc0NvdW50ID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBwYXNzQ291bnQsIGZhaWxDb3VudCwgZmFpbFRzczogW10gfSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGVzdFN1aXRlTW9kZWwuYnVsa0luc2VydCh2YWxpZFRzcylcclxuICAgIC50aGVuKCgpID0+ICh7IHBhc3NDb3VudCwgZmFpbENvdW50LCBmYWlsVHNzOiBbXSB9KSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVUZXN0U3VpdGUgKGlkLCBkYXRhKSB7XHJcbiAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuICAgIGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKVxyXG4gICAgY29uc3QgdHMgICAgPSBzdGF0ZS5lZGl0b3IudGVzdFN1aXRlcy5maW5kKHRzID0+IHRzLmlkID09PSBpZClcclxuXHJcbiAgICBjb25zdCByZXZpc2VkID0ge1xyXG4gICAgICAuLi50cyxcclxuICAgICAgLi4uKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nID8gZGF0YSh0cykgOiBkYXRhKVxyXG4gICAgfVxyXG5cclxuICAgIGRpc3BhdGNoKHtcclxuICAgICAgdHlwZTogVC5VUERBVEVfVEVTVF9TVUlURSxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIGlkOiBpZCxcclxuICAgICAgICB1cGRhdGVkOiByZXZpc2VkXHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIHRlc3RTdWl0ZU1vZGVsLnVwZGF0ZShpZCwgcmV2aXNlZClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVUZXN0U3VpdGUgKGlkKSB7XHJcbiAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuICAgIHJldHVybiB0ZXN0U3VpdGVNb2RlbC5yZW1vdmUoaWQpXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0UGxheWVyTW9kZSAobW9kZSkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULlNFVF9QTEFZRVJfU1RBVEUsXHJcbiAgICBkYXRhOiB7IG1vZGUgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJ1bkJhY2t1cCAoKSB7XHJcbiAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuICAgIGNvbnN0IHsgY29uZmlnLCBlZGl0b3IgfSA9IGdldFN0YXRlKClcclxuICAgIGNvbnN0IHtcclxuICAgICAgYXV0b0JhY2t1cFRlc3RDYXNlcyxcclxuICAgICAgYXV0b0JhY2t1cFRlc3RTdWl0ZXMsXHJcbiAgICAgIGF1dG9CYWNrdXBTY3JlZW5zaG90cyxcclxuICAgICAgYXV0b0JhY2t1cENTVkZpbGVzLFxyXG4gICAgICBhdXRvQmFja3VwVmlzaW9uSW1hZ2VzXHJcbiAgICB9ID0gY29uZmlnXHJcblxyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFtcclxuICAgICAgZ2V0Q1NWTWFuKCkubGlzdCgpLFxyXG4gICAgICBnZXRTY3JlZW5zaG90TWFuKCkubGlzdCgpLFxyXG4gICAgICBnZXRWaXNpb25NYW4oKS5saXN0KClcclxuICAgIF0pXHJcbiAgICAudGhlbigoW2NzdnMsIHNjcmVlbnNob3RzLCB2aXNpb25zXSkgPT4ge1xyXG4gICAgICByZXR1cm4gYmFja3VwKHtcclxuICAgICAgICBjc3ZzLFxyXG4gICAgICAgIHNjcmVlbnNob3RzLFxyXG4gICAgICAgIHZpc2lvbnMsXHJcbiAgICAgICAgdGVzdENhc2VzOiBlZGl0b3IudGVzdENhc2VzLFxyXG4gICAgICAgIHRlc3RTdWl0ZXM6IGVkaXRvci50ZXN0U3VpdGVzLFxyXG4gICAgICAgIGJhY2t1cDoge1xyXG4gICAgICAgICAgdGVzdENhc2U6IGF1dG9CYWNrdXBUZXN0Q2FzZXMsXHJcbiAgICAgICAgICB0ZXN0U3VpdGU6IGF1dG9CYWNrdXBUZXN0U3VpdGVzLFxyXG4gICAgICAgICAgc2NyZWVuc2hvdDogYXV0b0JhY2t1cFNjcmVlbnNob3RzLFxyXG4gICAgICAgICAgY3N2OiBhdXRvQmFja3VwQ1NWRmlsZXMsXHJcbiAgICAgICAgICB2aXNpb246IGF1dG9CYWNrdXBWaXNpb25JbWFnZXNcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICBsb2cuZXJyb3IoZS5zdGFjaylcclxuICAgIH0pXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0VmFyaWFibGVzICh2YXJpYWJsZXMpIHtcclxuICB2YXJpYWJsZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgaWYgKGEua2V5IDwgYi5rZXkpICByZXR1cm4gLTFcclxuICAgIGlmIChhLmtleSA+IGIua2V5KSAgcmV0dXJuIDFcclxuICAgIHJldHVybiAwXHJcbiAgfSlcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6IFQuU0VUX1ZBUklBQkxFX0xJU1QsXHJcbiAgICBkYXRhOiB2YXJpYWJsZXNcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVVSSAoZGF0YSkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULlVQREFURV9VSSxcclxuICAgIGRhdGFcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRCcmVha3BvaW50IChjb21tYW5kSW5kZXgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5BRERfQlJFQUtQT0lOVCxcclxuICAgIGRhdGE6IGNvbW1hbmRJbmRleFxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUJyZWFrcG9pbnQgKGNvbW1hbmRJbmRleCkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBULlJFTU9WRV9CUkVBS1BPSU5ULFxyXG4gICAgZGF0YTogY29tbWFuZEluZGV4XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0RWRpdG9yQWN0aXZlVGFiICh0YWIpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogVC5TRVRfRURJVE9SX0FDVElWRV9UQUIsXHJcbiAgICBkYXRhOiB0YWJcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9ICBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHsgSGFzaEhpc3RvcnkgYXMgUm91dGVyLCBSb3V0ZSwgTGluaywgU3dpdGNoLCBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ2FudGQnXHJcblxyXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucydcclxuaW1wb3J0IGNzSXBjIGZyb20gJy4vY29tbW9uL2lwYy9pcGNfY3MnXHJcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9jb21wb25lbnRzL2hlYWRlcidcclxuaW1wb3J0IFNpZGViYXIgZnJvbSAnLi9jb250YWluZXJzL3NpZGViYXInXHJcbmltcG9ydCBEYXNoYm9hcmRQYWdlIGZyb20gJy4vY29udGFpbmVycy9kYXNoYm9hcmQnXHJcbmltcG9ydCAnYW50ZC9kaXN0L2FudGQuY3NzJ1xyXG5pbXBvcnQgJy4vYXBwLnNjc3MnXHJcblxyXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGhpZGVCYWNrdXBBbGVydCA9ICgpID0+IHtcclxuICAgIHRoaXMucHJvcHMudXBkYXRlQ29uZmlnKHtcclxuICAgICAgbGFzdEJhY2t1cEFjdGlvblRpbWU6IG5ldyBEYXRlKCkgKiAxXHJcbiAgICB9KVxyXG4gICAgdGhpcy4kYXBwLmNsYXNzTGlzdC5yZW1vdmUoJ3dpdGgtYWxlcnQnKVxyXG4gIH1cclxuXHJcbiAgb25DbGlja0JhY2t1cCA9ICgpID0+IHtcclxuICAgIHRoaXMucHJvcHMucnVuQmFja3VwKClcclxuICAgIHRoaXMuaGlkZUJhY2t1cEFsZXJ0KClcclxuICB9XHJcblxyXG4gIG9uQ2xpY2tOb0JhY2t1cCA9ICgpID0+IHtcclxuICAgIHRoaXMuaGlkZUJhY2t1cEFsZXJ0KClcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgIGNvbnN0IHJ1biA9ICgpID0+IHtcclxuICAgICAgY3NJcGMuYXNrKCdQQU5FTF9USU1FX0ZPUl9CQUNLVVAnLCB7fSlcclxuICAgICAgLnRoZW4oaXNUaW1lID0+IHtcclxuICAgICAgICBpZiAoIWlzVGltZSkgIHJldHVyblxyXG4gICAgICAgIHRoaXMuJGFwcC5jbGFzc0xpc3QuYWRkKCd3aXRoLWFsZXJ0JylcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBOb3RlOiBjaGVjayB3aGV0aGVyIGl0J3MgdGltZSBmb3IgYmFja3VwIGV2ZXJ5IDUgbWludXRlc1xyXG4gICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKHJ1biwgNSAqIDYwMDAwKVxyXG4gICAgcnVuKClcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcclxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcilcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFwcCB3aXRoLXNpZGViYXJcIiByZWY9e2VsID0+IHsgdGhpcy4kYXBwID0gZWwgfX0+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiYWNrdXAtYWxlcnRcIj5cclxuICAgICAgICAgIDxzcGFuPkRvIHlvdSB3YW50IHRvIHJ1biB0aGUgYXV0b21hdGVkIGJhY2t1cD88L3NwYW4+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJiYWNrdXAtYWN0aW9uc1wiPlxyXG4gICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJwcmltYXJ5XCIgb25DbGljaz17dGhpcy5vbkNsaWNrQmFja3VwfT5ZZXM8L0J1dHRvbj5cclxuICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLm9uQ2xpY2tOb0JhY2t1cH0+Tm88L0J1dHRvbj5cclxuICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFwcC1pbm5lclwiPlxyXG4gICAgICAgICAgPFNpZGViYXIgLz5cclxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImNvbnRlbnRcIj5cclxuICAgICAgICAgICAgPEhlYWRlciAvPlxyXG4gICAgICAgICAgICA8RGFzaGJvYXJkUGFnZSAvPlxyXG4gICAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxyXG4gIHN0YXRlID0+ICh7fSksXHJcbiAgZGlzcGF0Y2ggPT4gYmluZEFjdGlvbkNyZWF0b3JzKHsuLi5hY3Rpb25zfSwgZGlzcGF0Y2gpXHJcbikoQXBwKVxyXG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2FwcC5zY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHt9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vYXBwLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9hcHAuc2Nzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IEZpbGVTYXZlciBmcm9tICcuL2xpYi9maWxlX3NhdmVyJ1xyXG5pbXBvcnQgSlNaaXAgZnJvbSAnanN6aXAnXHJcbmltcG9ydCB7IG5hbWVGYWN0b3J5IH0gZnJvbSAnLi91dGlscydcclxuaW1wb3J0IHsgdG9KU09OU3RyaW5nIH0gZnJvbSAnLi9jb252ZXJ0X3V0aWxzJ1xyXG5pbXBvcnQgeyBzdHJpbmdpZnlUZXN0U3VpdGUgfSBmcm9tICcuL2NvbnZlcnRfc3VpdGVfdXRpbHMnXHJcbmltcG9ydCB7IGdldFNjcmVlbnNob3RNYW4gfSBmcm9tICcuL3NjcmVlbnNob3RfbWFuJ1xyXG5pbXBvcnQgeyBnZXRDU1ZNYW4gfSBmcm9tICcuL2Nzdl9tYW4nXHJcbmltcG9ydCB7IGdldFZpc2lvbk1hbiB9IGZyb20gJy4vdmlzaW9uX21hbidcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhY2t1cCAoeyBiYWNrdXAsIHRlc3RDYXNlcywgdGVzdFN1aXRlcywgc2NyZWVuc2hvdHMsIGNzdnMsIHZpc2lvbnMgfSkge1xyXG4gIGNvbnN0IHppcCA9IG5ldyBKU1ppcCgpXHJcbiAgY29uc3QgcHMgID0gW11cclxuXHJcbiAgaWYgKGJhY2t1cC50ZXN0Q2FzZSAmJiB0ZXN0Q2FzZXMgJiYgdGVzdENhc2VzLmxlbmd0aCkge1xyXG4gICAgY29uc3QgZm9sZGVyID0gemlwLmZvbGRlcignbWFjcm9zJylcclxuXHJcbiAgICB0ZXN0Q2FzZXMuZm9yRWFjaCh0YyA9PiB7XHJcbiAgICAgIGZvbGRlci5maWxlKGAke3RjLm5hbWV9Lmpzb25gLCB0b0pTT05TdHJpbmcoe1xyXG4gICAgICAgIG5hbWU6IHRjLm5hbWUsXHJcbiAgICAgICAgY29tbWFuZHM6IHRjLmRhdGEuY29tbWFuZHNcclxuICAgICAgfSkpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgaWYgKGJhY2t1cC50ZXN0U3VpdGUgJiYgdGVzdENhc2VzICYmIHRlc3RTdWl0ZXMgJiYgdGVzdFN1aXRlcy5sZW5ndGgpIHtcclxuICAgIGNvbnN0IGZvbGRlciAgPSB6aXAuZm9sZGVyKCd0ZXN0c3VpdGVzJylcclxuICAgIGNvbnN0IGdlbk5hbWUgPSBuYW1lRmFjdG9yeSgpXHJcblxyXG4gICAgdGVzdFN1aXRlcy5mb3JFYWNoKHRzID0+IHtcclxuICAgICAgY29uc3QgbmFtZSA9IGdlbk5hbWUodHMubmFtZSlcclxuICAgICAgZm9sZGVyLmZpbGUoYCR7bmFtZX0uanNvbmAsIHN0cmluZ2lmeVRlc3RTdWl0ZSh0cywgdGVzdENhc2VzKSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBpZiAoYmFja3VwLnNjcmVlbnNob3QgJiYgc2NyZWVuc2hvdHMgJiYgc2NyZWVuc2hvdHMubGVuZ3RoKSB7XHJcbiAgICBjb25zdCBmb2xkZXIgID0gemlwLmZvbGRlcignc2NyZWVuc2hvdHMnKVxyXG4gICAgY29uc3QgbWFuICAgICA9IGdldFNjcmVlbnNob3RNYW4oKVxyXG5cclxuICAgIHNjcmVlbnNob3RzLmZvckVhY2goc3MgPT4ge1xyXG4gICAgICBwcy5wdXNoKFxyXG4gICAgICAgIG1hbi5yZWFkKHNzLmZpbGVOYW1lKVxyXG4gICAgICAgIC50aGVuKGJ1ZmZlciA9PiB7XHJcbiAgICAgICAgICBmb2xkZXIuZmlsZShzcy5maWxlTmFtZSwgYnVmZmVyLCB7IGJpbmFyeTogdHJ1ZSB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgIClcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBpZiAoYmFja3VwLnZpc2lvbiAmJiB2aXNpb25zICYmIHZpc2lvbnMubGVuZ3RoKSB7XHJcbiAgICBjb25zdCBmb2xkZXIgID0gemlwLmZvbGRlcignaW1hZ2VzJylcclxuICAgIGNvbnN0IG1hbiAgICAgPSBnZXRWaXNpb25NYW4oKVxyXG5cclxuICAgIHZpc2lvbnMuZm9yRWFjaCh2aXNpb24gPT4ge1xyXG4gICAgICBwcy5wdXNoKFxyXG4gICAgICAgIG1hbi5yZWFkKHZpc2lvbi5maWxlTmFtZSlcclxuICAgICAgICAudGhlbihidWZmZXIgPT4ge1xyXG4gICAgICAgICAgZm9sZGVyLmZpbGUodmlzaW9uLmZpbGVOYW1lLCBidWZmZXIsIHsgYmluYXJ5OiB0cnVlIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGlmIChiYWNrdXAuY3N2ICYmIGNzdnMgJiYgY3N2cy5sZW5ndGgpIHtcclxuICAgIGNvbnN0IGZvbGRlciAgPSB6aXAuZm9sZGVyKCdkYXRhc291cmNlcycpXHJcbiAgICBjb25zdCBtYW4gICAgID0gZ2V0Q1NWTWFuKClcclxuXHJcbiAgICBjc3ZzLmZvckVhY2goY3N2ID0+IHtcclxuICAgICAgcHMucHVzaChcclxuICAgICAgICBtYW4ucmVhZChjc3YuZmlsZU5hbWUpXHJcbiAgICAgICAgLnRoZW4odGV4dCA9PiBmb2xkZXIuZmlsZShjc3YuZmlsZU5hbWUsIHRleHQpKVxyXG4gICAgICApXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFByb21pc2UuYWxsKHBzKVxyXG4gIC50aGVuKCgpID0+IHtcclxuICAgIHppcC5nZW5lcmF0ZUFzeW5jKHsgdHlwZTogJ2Jsb2InIH0pXHJcbiAgICAudGhlbihmdW5jdGlvbiAoYmxvYikge1xyXG4gICAgICBGaWxlU2F2ZXIuc2F2ZUFzKGJsb2IsICdrYW50dV9iYWNrdXAuemlwJyk7XHJcbiAgICB9KVxyXG4gIH0pXHJcbn1cclxuIiwiXHJcbmltcG9ydCBFeHQgZnJvbSAnLi93ZWJfZXh0ZW5zaW9uJ1xyXG5cclxuLy8gTm90ZTogR2V0IGlkcyBvZiBib29rbWFya3MgYmFyIGFuZCBvdGhlciBib29rbWFya3NcclxuY29uc3QgcEJvb2ttYXJrc0JhcklkID0gKGZ1bmN0aW9uIGdldElkc09mT3RoZXJCb29rbWFya3NBbmRCb29rbWFya3NCYXIgKCkge1xyXG4gIGNvbnN0IGJvb2ttYXJrc0JhckluZGV4ID0gRXh0LmlzRmlyZWZveCgpID8gMSA6IDBcclxuXHJcbiAgcmV0dXJuIEV4dC5ib29rbWFya3MuZ2V0VHJlZSgpXHJcbiAgLnRoZW4obm9kZXMgPT4ge1xyXG4gICAgY29uc3QgYm9va21hcmtzQmFyID0gbm9kZXNbMF0uY2hpbGRyZW5bYm9va21hcmtzQmFySW5kZXhdXHJcbiAgICByZXR1cm4gYm9va21hcmtzQmFyLmlkXHJcbiAgfSlcclxufSkoKVxyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUJvb2ttYXJrT25CYXIgPSAoYm9va21hcmspID0+IHtcclxuICByZXR1cm4gcEJvb2ttYXJrc0JhcklkXHJcbiAgLnRoZW4oYmFySWQgPT4gRXh0LmJvb2ttYXJrcy5jcmVhdGUoeyAuLi5ib29rbWFyaywgcGFyZW50SWQ6IGJhcklkIH0pKVxyXG59XHJcbiIsImltcG9ydCBnbG9iMnJlZyBmcm9tICdrZC1nbG9iLXRvLXJlZ2V4cCdcclxuaW1wb3J0IHsgZGVsYXksIHVudGlsLCB0b1JlZ0V4cCwgaW5zZXJ0U2NyaXB0LCByZXRyeSwgZW5zdXJlRXh0TmFtZSwgd2l0aENvdW50RG93biB9IGZyb20gJy4vdXRpbHMnXHJcbmltcG9ydCB7IHNjcm9sbExlZnQsIHNjcm9sbFRvcCwgZG9tVGV4dCwgaXNWaXNpYmxlLCBjc3NTZWxlY3RvciB9IGZyb20gJy4vZG9tX3V0aWxzJ1xyXG5pbXBvcnQgeyBwb3N0TWVzc2FnZSB9IGZyb20gJy4vaXBjL2NzX3Bvc3RtZXNzYWdlJ1xyXG5pbXBvcnQgRXh0IGZyb20gJy4vd2ViX2V4dGVuc2lvbidcclxuaW1wb3J0IGxvZyBmcm9tICcuL2xvZydcclxuaW1wb3J0IGRyYWdNb2NrIGZyb20gJy4vZHJhZ19tb2NrJ1xyXG5pbXBvcnQgc2VuZEtleXMgZnJvbSAnLi9zZW5kX2tleXMnXHJcbmltcG9ydCB7IGRlY3J5cHRJZk5lZWRlZCB9IGZyb20gJy4vZW5jcnlwdCdcclxuaW1wb3J0IHsgTEFTVF9TQ1JFRU5TSE9UX0ZJTEVfTkFNRSB9IGZyb20gJy4vY29uc3RhbnQnXHJcblxyXG5jb25zdCBISUdITElHSFRfVElNRU9VVCA9IDUwMFxyXG5cclxuY29uc3QgZ2xvYk1hdGNoID0gKHBhdHRlcm4sIHRleHQpID0+IGdsb2IycmVnKHBhdHRlcm4pLnRlc3QodGV4dClcclxuXHJcbmNvbnN0IGdldEVsZW1lbnRCeVhQYXRoID0gKHhwYXRoKSA9PiB7XHJcbiAgY29uc3Qgc25hcHNob3QgPSBkb2N1bWVudC5ldmFsdWF0ZShcclxuICAgIHhwYXRoLFxyXG4gICAgZG9jdW1lbnQuYm9keSxcclxuICAgIG51bGwsXHJcbiAgICBYUGF0aFJlc3VsdC5PUkRFUkVEX05PREVfU05BUFNIT1RfVFlQRSxcclxuICAgIG51bGxcclxuICApXHJcblxyXG4gIHJldHVybiBzbmFwc2hvdC5zbmFwc2hvdEl0ZW0oMClcclxufVxyXG5cclxuLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vdGltb3hsZXkvb2Zmc2V0XHJcbmNvbnN0IHZpZXdwb3J0T2Zmc2V0ID0gKGVsKSA9PiB7XHJcbiAgY29uc3QgYm94ICAgICAgICAgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG5cclxuICAvLyBOb3RlOiBzaW1wbHkgdXNlIGJvdWRkaW5nQ2xpZW50UmVjdCBzaW5jZSBlbGVtZW50RnJvbVBvaW50IHVzZXNcclxuICAvLyB0aGUgc2FtZSB0b3AvbGVmdCByZWxhdGl2ZSB0byB0aGUgY3VycmVudCB2aWV3cG9ydC93aW5kb3cgaW5zdGVhZCBvZiB3aG9sZSBkb2N1bWVudFxyXG4gIHJldHVybiB7XHJcbiAgICB0b3A6IGJveC50b3AsXHJcbiAgICBsZWZ0OiBib3gubGVmdFxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgdW50aWxJbmplY3RlZCA9ICgpID0+IHtcclxuICBjb25zdCBhcGkgPSB7XHJcbiAgICBldmFsOiAoY29kZSkgPT4ge1xyXG4gICAgICBsb2coJ3NlbmRpbmcgSU5KRUNUX1JVTl9FVkFMJylcclxuICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlKHdpbmRvdywgd2luZG93LCB7IGNtZDogJ0lOSkVDVF9SVU5fRVZBTCcsIGFyZ3M6IHtjb2RlfSB9LCAnKicsIDUwMDApXHJcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgIGxvZygnZXZhbCByZXN1bHQnLCBkYXRhKVxyXG4gICAgICAgIHJldHVybiBkYXRhLnJlc3VsdFxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBjb25zdCBpbmplY3RlZCA9ICEhZG9jdW1lbnQuYm9keS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5qZWN0ZWQnKVxyXG4gIGlmIChpbmplY3RlZCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShhcGkpXHJcblxyXG4gIGluc2VydFNjcmlwdChFeHQuZXh0ZW5zaW9uLmdldFVSTCgnaW5qZWN0LmpzJykpXHJcblxyXG4gIHJldHVybiByZXRyeSgoKSA9PiB7XHJcbiAgICBsb2coJ3NlbmRpbmcgSU5KRUNUX1JFQURZJylcclxuICAgIHJldHVybiBwb3N0TWVzc2FnZSh3aW5kb3csIHdpbmRvdywgeyBjbWQ6ICdJTkpFQ1RfUkVBRFknIH0sICcqJywgNTAwKVxyXG4gIH0sIHtcclxuICAgIHNob3VsZFJldHJ5OiAoKSA9PiB0cnVlLFxyXG4gICAgdGltZW91dDogNTAwMCxcclxuICAgIHJldHJ5SW50ZXJ2YWw6IDBcclxuICB9KSgpXHJcbiAgLnRoZW4oKCkgPT4gYXBpKVxyXG4gIC5jYXRjaChlID0+IHtcclxuICAgIGxvZyhlLnN0YWNrKVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsIHRvIGluamVjdCcpXHJcbiAgfSlcclxufVxyXG5cclxuY29uc3QgaXNFbGVtZW50RnJvbVBvaW50ID0gKHN0cikgPT4gL14jZWxlbWVudGZyb21wb2ludC9pLnRlc3Qoc3RyLnRyaW0oKSlcclxuXHJcbmNvbnN0IHBhZ2VDb29yZGluYXRlQnlFbGVtZW50RnJvbVBvaW50ID0gKHN0cikgPT4ge1xyXG4gIGNvbnN0IHJlZyA9IC9eI2VsZW1lbnRmcm9tcG9pbnRcXHMqXFwoKFxcZCsoPzpcXC5cXGQrKT8pXFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwpL2lcclxuICBjb25zdCBtICAgPSBzdHIudHJpbSgpLm1hdGNoKHJlZylcclxuXHJcbiAgaWYgKCFtKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgJyNlbGVtZW50ZnJvbXBvaW50JyBleHByZXNzaW9uYClcclxuICB9XHJcblxyXG4gIGNvbnN0IHBhZ2VYID0gcGFyc2VGbG9hdChtWzFdKVxyXG4gIGNvbnN0IHBhZ2VZID0gcGFyc2VGbG9hdChtWzJdKVxyXG5cclxuICBpZiAocGFnZVggPD0gMCB8fCBwYWdlWSA8PSAwKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCcjZWxlbWVudGZyb21wb2ludCcgb25seSBhY2NlcHRzIHBvc2l0aXZlIG51bWJlcnNgKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFtwYWdlWCwgcGFnZVldXHJcbn1cclxuXHJcbmNvbnN0IHZpZXdwb3J0Q29vcmRpbmF0ZUJ5RWxlbWVudEZyb21Qb2ludCA9IChzdHIpID0+IHtcclxuICBjb25zdCBbcGFnZVgsIHBhZ2VZXSA9IHBhZ2VDb29yZGluYXRlQnlFbGVtZW50RnJvbVBvaW50KHN0cilcclxuICBjb25zdCBvZmZzZXQgID0gMFxyXG4gIGNvbnN0IHggICAgICAgPSBvZmZzZXQgKyBwYWdlWCAtIHNjcm9sbExlZnQoZG9jdW1lbnQpXHJcbiAgY29uc3QgeSAgICAgICA9IG9mZnNldCArIHBhZ2VZIC0gc2Nyb2xsVG9wKGRvY3VtZW50KVxyXG5cclxuICByZXR1cm4gW3gsIHldXHJcbn1cclxuXHJcbmNvbnN0IGVsZW1lbnRCeUVsZW1lbnRGcm9tUG9pbnQgPSAoc3RyKSA9PiB7XHJcbiAgY29uc3QgW3gsIHldICA9IHZpZXdwb3J0Q29vcmRpbmF0ZUJ5RWxlbWVudEZyb21Qb2ludChzdHIpXHJcbiAgY29uc3QgZWwgICAgICA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSlcclxuXHJcbiAgcmV0dXJuIGVsXHJcbn1cclxuXHJcbi8vIE5vdGU6IHBhcnNlIHRoZSBsb2NhdG9yIGFuZCByZXR1cm4gdGhlIGVsZW1lbnQgZm91bmQgYWNjb3JkaW5nbHlcclxuZXhwb3J0IGNvbnN0IGdldEVsZW1lbnRCeUxvY2F0b3IgPSAoc3RyLCBzaG91bGRXYWl0Rm9yVmlzaWJsZSkgPT4ge1xyXG4gIGNvbnN0IGkgPSBzdHIuaW5kZXhPZignPScpXHJcbiAgbGV0IGVsXHJcblxyXG4gIGlmICgoL15cXC8vLnRlc3Qoc3RyKSkpIHtcclxuICAgIGVsID0gZ2V0RWxlbWVudEJ5WFBhdGgoc3RyKVxyXG4gIH0gZWxzZSBpZiAoL14jZWxlbWVudGZyb21wb2ludC9pLnRlc3Qoc3RyLnRyaW0oKSkpIHtcclxuICAgIGVsID0gZWxlbWVudEJ5RWxlbWVudEZyb21Qb2ludChzdHIpXHJcbiAgICBsb2coJ2VsZW1lbnRmcm9tcG9pbnQnLCBlbClcclxuICB9IGVsc2UgaWYgKGkgPT09IC0xKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldEVsZW1lbnRCeUxvY2F0b3I6IGludmFsaWQgbG9jYXRvciwgJyArIHN0cilcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgbWV0aG9kICA9IHN0ci5zdWJzdHIoMCwgaSlcclxuICAgIGNvbnN0IHZhbHVlICAgPSBzdHIuc3Vic3RyKGkgKyAxKVxyXG5cclxuICAgIHN3aXRjaCAobWV0aG9kICYmIG1ldGhvZC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgIGNhc2UgJ2lkJzpcclxuICAgICAgICBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHZhbHVlKVxyXG4gICAgICAgIGJyZWFrXHJcblxyXG4gICAgICBjYXNlICduYW1lJzpcclxuICAgICAgICBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKHZhbHVlKVswXVxyXG4gICAgICAgIGJyZWFrXHJcblxyXG4gICAgICBjYXNlICdpZGVudGlmaWVyJzpcclxuICAgICAgICBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHZhbHVlKSB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSh2YWx1ZSlbMF1cclxuICAgICAgICBicmVha1xyXG5cclxuICAgICAgY2FzZSAnbGluayc6IHtcclxuICAgICAgICBjb25zdCBsaW5rcyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKSlcclxuICAgICAgICAvLyBOb3RlOiB0aGVyZSBhcmUgY2FzZXMgc3VjaCBhcyAnbGluaz1leGFjdDp4eHgnXHJcbiAgICAgICAgbGV0IHJlYWxWYWwgPSB2YWx1ZS5yZXBsYWNlKC9eZXhhY3Q6LywgJycpXHJcbiAgICAgICAgLy8gTm90ZTogcG9zaXRpb24gc3VwcG9ydC4gZWcuIGxpbms9RG93bmxvYWRAUE9TPTNcclxuICAgICAgICBsZXQgbWF0Y2ggICA9IHJlYWxWYWwubWF0Y2goL14oLispQFBPUz0oXFxkKykkL2kpXHJcbiAgICAgICAgbGV0IGluZGV4ICAgPSAwXHJcblxyXG4gICAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgICAgcmVhbFZhbCA9IG1hdGNoWzFdXHJcbiAgICAgICAgICBpbmRleCAgID0gcGFyc2VJbnQobWF0Y2hbMl0pIC0gMVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTm90ZTogdXNlIHRleHRDb250ZW50IGluc3RlYWQgb2YgaW5uZXJUZXh0IHRvIGF2b2lkIGluZmx1ZW5jZSBmcm9tIHRleHQtdHJhbnNmb3JtXHJcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlcyA9IGxpbmtzLmZpbHRlcihhID0+IGdsb2JNYXRjaChyZWFsVmFsLCBkb21UZXh0KGEpKSlcclxuICAgICAgICBlbCA9IGNhbmRpZGF0ZXNbaW5kZXhdXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgfVxyXG5cclxuICAgICAgY2FzZSAnY3NzJzpcclxuICAgICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodmFsdWUpXHJcbiAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgIGNhc2UgJ3hwYXRoJzpcclxuICAgICAgICBlbCA9IGdldEVsZW1lbnRCeVhQYXRoKHZhbHVlKVxyXG4gICAgICAgIGJyZWFrXHJcblxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZ2V0RWxlbWVudEJ5TG9jYXRvcjogdW5zdXBwb3J0ZWQgbG9jYXRvciBtZXRob2QsICcgKyBtZXRob2QpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoIWVsKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldEVsZW1lbnRCeUxvY2F0b3I6IGZhaWwgdG8gZmluZCBlbGVtZW50IGJhc2VkIG9uIHRoZSBsb2NhdG9yLCAnICsgc3RyKVxyXG4gIH1cclxuXHJcbiAgaWYgKHNob3VsZFdhaXRGb3JWaXNpYmxlICYmICFpc1Zpc2libGUoZWwpKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldEVsZW1lbnRCeUxvY2F0b3I6IGVsZW1lbnQgaXMgZm91bmQgYnV0IG5vdCB2aXNpYmxlIHlldCcpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gZWxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldEZyYW1lQnlMb2NhdG9yID0gKHN0ciwgaGVscGVycykgPT4ge1xyXG4gIGNvbnN0IGkgPSBzdHIuaW5kZXhPZignPScpXHJcblxyXG4gIC8vIE5vdGU6IHRyeSB0byBwYXJzZSBmb3JtYXQgb2YgJ2luZGV4PTAnIGFuZCAncmVsYXRpdmU9dG9wL3BhcmVudCdcclxuICBpZiAoaSAhPT0gLTEpIHtcclxuICAgIGNvbnN0IG1ldGhvZCAgPSBzdHIuc3Vic3RyKDAsIGkpXHJcbiAgICBjb25zdCB2YWx1ZSAgID0gc3RyLnN1YnN0cihpICsgMSlcclxuXHJcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xyXG4gICAgICBjYXNlICdpbmRleCc6IHtcclxuICAgICAgICBjb25zdCBpbmRleCAgID0gcGFyc2VJbnQodmFsdWUsIDEwKVxyXG4gICAgICAgIGNvbnN0IGZyYW1lcyAgPSB3aW5kb3cuZnJhbWVzXHJcbiAgICAgICAgY29uc3QgZnJhbWUgICA9IGZyYW1lc1tpbmRleF1cclxuXHJcbiAgICAgICAgaWYgKCFmcmFtZSkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGcmFtZSBpbmRleCBvdXQgb2YgcmFuZ2UgKGluZGV4ICR7dmFsdWV9IGluICR7ZnJhbWVzLmxlbmd0aH0gZnJhbWVzYClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7IGZyYW1lIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgY2FzZSAncmVsYXRpdmUnOiB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSAndG9wJykge1xyXG4gICAgICAgICAgcmV0dXJuIHsgZnJhbWU6IHdpbmRvdy50b3AgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlID09PSAncGFyZW50Jykge1xyXG4gICAgICAgICAgcmV0dXJuIHsgZnJhbWU6IHdpbmRvdy5wYXJlbnQgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCByZWxhdGl2ZSB0eXBlLCAnICsgdmFsdWUpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIE5vdGU6IGNvbnNpZGVyIGl0IGFzIG5hbWUsIGlmIG5vICc9JyBmb3VuZCBhbmQgaXQgaGFzIG5vIHhwYXRoIHBhdHRlcm5cclxuICBpZiAoaSA9PT0gLTEgJiYgIS9eXFwvLy50ZXN0KHN0cikpIHtcclxuICAgIHN0ciA9ICduYW1lPScgKyBzdHJcclxuICB9XHJcblxyXG4gIGNvbnN0IGZyYW1lRG9tID0gZ2V0RWxlbWVudEJ5TG9jYXRvcihzdHIpXHJcblxyXG4gIGlmICghZnJhbWVEb20gfHwgIWZyYW1lRG9tLmNvbnRlbnRXaW5kb3cpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGVsZW1lbnQgZm91bmQgYmFzZWQgb24gJHtzdHJ9IGlzIE5PVCBhIGZyYW1lL2lmcmFtZWApXHJcbiAgfVxyXG5cclxuICAvLyBOb3RlOiBmb3IgdGhvc2UgaWZyYW1lL2ZyYW1lIHRoYXQgZG9uJ3QgaGF2ZSBzcmMsIHRoZXkgd29uJ3QgbG9hZCBjb250ZW50X3NjcmlwdC5qc1xyXG4gIC8vIHNvIHdlIGhhdmUgdG8gaW5qZWN0IHRoZSBzY3JpcHQgYnkgb3Vyc2VsdmVzXHJcbiAgaWYgKCFmcmFtZURvbS5nZXRBdHRyaWJ1dGUoJ3NyYycpKSB7XHJcbiAgICBjb25zdCBmaWxlICA9IEV4dC5leHRlbnNpb24uZ2V0VVJMKCdjb250ZW50X3NjcmlwdC5qcycpXHJcbiAgICBjb25zdCBkb2MgICA9IGZyYW1lRG9tLmNvbnRlbnREb2N1bWVudFxyXG4gICAgY29uc3QgcyAgICAgPSBkb2MuY29uc3RydWN0b3IucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQuY2FsbChkb2MsICdzY3JpcHQnKVxyXG5cclxuICAgIHMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvamF2YXNjcmlwdCcpXHJcbiAgICBzLnNldEF0dHJpYnV0ZSgnc3JjJywgZmlsZSlcclxuXHJcbiAgICBkb2MuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKHMpXHJcbiAgICBzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocylcclxuXHJcbiAgICBoZWxwZXJzLmhhY2tBbGVydENvbmZpcm1Qcm9tcHQoZG9jKVxyXG4gIH1cclxuXHJcbiAgLy8gTm90ZTogY2FuJ3QgcmV0dXJuIHRoZSBjb250ZW50V2luZG93IGRpcmVjdGx5LCBiZWNhdXNlIFByb21pc2UgJ3Jlc29sdmUnIHdpbGxcclxuICAvLyB0cnkgdG8gdGVzdCBpdHMgJy50aGVuJyBtZXRob2QsIHdoaWNoIHdpbGwgY2F1c2UgYSBjcm9zcyBvcmlnaW4gdmlvbGF0aW9uXHJcbiAgLy8gc28sIHdlIHdyYXAgaXQgaW4gYW4gb2JqZWN0XHJcbiAgcmV0dXJuIHsgZnJhbWU6IGZyYW1lRG9tLmNvbnRlbnRXaW5kb3cgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcnVuID0gKGNvbW1hbmQsIGNzSXBjLCBoZWxwZXJzKSA9PiB7XHJcbiAgY29uc3QgeyBjbWQsIHRhcmdldCwgdmFsdWUsIGV4dHJhIH0gPSBjb21tYW5kXHJcbiAgY29uc3Qgd3JhcCA9IChmbiwgZ2VuT3B0aW9ucykgPT4gKC4uLmFyZ3MpID0+IHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBnZW5PcHRpb25zKC4uLmFyZ3MpXHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXNvbHZlKGZuKC4uLmFyZ3MpKVxyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihvcHRpb25zLmVycm9yTXNnKGUubWVzc2FnZSkpKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICBjb25zdCBnZXRFbGVtZW50QnlMb2NhdG9yV2l0aExvZ0ZvckVmcCA9IChsb2NhdG9yLCBzaG91bGRXYWl0Rm9yVmlzaWJsZSkgPT4ge1xyXG4gICAgY29uc3QgZWwgPSBnZXRFbGVtZW50QnlMb2NhdG9yKGxvY2F0b3IsIHNob3VsZFdhaXRGb3JWaXNpYmxlKVxyXG5cclxuICAgIGlmIChpc0VsZW1lbnRGcm9tUG9pbnQobG9jYXRvcikpIHtcclxuICAgICAgbGV0IGVsWHBhdGggPSAndW5rb3duJ1xyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICBlbFhwYXRoID0gaGVscGVycy54cGF0aChlbClcclxuICAgICAgfSBjYXRjaCAoZSkge31cclxuXHJcbiAgICAgIGNvbnN0IG1zZyA9IGAke2xvY2F0b3J9ID0+IHhwYXRoIFwiJHtlbFhwYXRofVwiYFxyXG5cclxuICAgICAgY29uc29sZS5sb2cobXNnLCBlbClcclxuICAgICAgY3NJcGMuYXNrKCdDU19BRERfTE9HJywgeyBpbmZvOiBtc2cgfSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZWxcclxuICB9XHJcbiAgY29uc3QgX19nZXRGcmFtZUJ5TG9jYXRvciA9IHdyYXAoZ2V0RnJhbWVCeUxvY2F0b3IsIChsb2NhdG9yKSA9PiAoe1xyXG4gICAgZXJyb3JNc2c6IChtc2cpID0+IHtcclxuICAgICAgcmV0dXJuIGB0aW1lb3V0IHJlYWNoZWQgd2hlbiBsb29raW5nIGZvciBmcmFtZSAnJHtsb2NhdG9yfSdgXHJcbiAgICB9XHJcbiAgfSkpXHJcbiAgY29uc3QgX19nZXRFbGVtZW50QnlMb2NhdG9yID0gd3JhcChnZXRFbGVtZW50QnlMb2NhdG9yV2l0aExvZ0ZvckVmcCwgKGxvY2F0b3IpID0+ICh7XHJcbiAgICBlcnJvck1zZzogKG1zZykgPT4ge1xyXG4gICAgICBpZiAoL2VsZW1lbnQgaXMgZm91bmQgYnV0IG5vdCB2aXNpYmxlIHlldC8udGVzdChtc2cpKSB7XHJcbiAgICAgICAgcmV0dXJuIGBlbGVtZW50IGlzIGZvdW5kIGJ1dCBub3QgdmlzaWJsZSB5ZXQgZm9yICcke2xvY2F0b3J9JyAodXNlICFXYWl0Rm9yVmlzaWJsZSA9IGZhbHNlIHRvIGRpc2FibGUgd2FpdGluZyBmb3IgdmlzaWJsZSlgXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBgdGltZW91dCByZWFjaGVkIHdoZW4gbG9va2luZyBmb3IgZWxlbWVudCAnJHtsb2NhdG9yfSdgXHJcbiAgICB9XHJcbiAgfSkpXHJcblxyXG4gIHN3aXRjaCAoY21kKSB7XHJcbiAgICBjYXNlICdvcGVuJzpcclxuICAgICAgaWYgKHdpbmRvdy5ub0NvbW1hbmRzWWV0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHVudGlsKCdkb2N1bWVudC5ib2R5JywgKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBwYXNzOiAhIWRvY3VtZW50LmJvZHksXHJcbiAgICAgICAgICByZXN1bHQ6IGRvY3VtZW50LmJvZHlcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKGJvZHkgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gY29tbWFuZC50YXJnZXRcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9KVxyXG5cclxuICAgIGNhc2UgJ3JlZnJlc2gnOlxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKSwgMClcclxuICAgICAgcmV0dXJuIHRydWVcclxuXHJcbiAgICBjYXNlICdtb3VzZU92ZXInOiB7XHJcbiAgICAgIHJldHVybiBfX2dldEVsZW1lbnRCeUxvY2F0b3IodGFyZ2V0KVxyXG4gICAgICAudGhlbihlbCA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGlmIChleHRyYS5wbGF5U2Nyb2xsRWxlbWVudHNJbnRvVmlldykgZWwuc2Nyb2xsSW50b1ZpZXcoeyBibG9jazogJ2NlbnRlcicgfSlcclxuICAgICAgICAgIGlmIChleHRyYS5wbGF5SGlnaGxpZ2h0RWxlbWVudHMpICAgICAgaGVscGVycy5oaWdobGlnaHREb20oZWwsIEhJR0hMSUdIVF9USU1FT1VUKVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIGxvZy5lcnJvcignZXJyb3IgaW4gc2Nyb2xsIGFuZCBoaWdobGlnaHQnLCBlLm1lc3NhZ2UpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdtb3VzZW92ZXInLCB7IGJ1YmJsZXM6IHRydWUgfSkpXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdkcmFnQW5kRHJvcFRvT2JqZWN0Jzoge1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgIF9fZ2V0RWxlbWVudEJ5TG9jYXRvcih0YXJnZXQpLFxyXG4gICAgICAgIF9fZ2V0RWxlbWVudEJ5TG9jYXRvcih2YWx1ZSlcclxuICAgICAgXSlcclxuICAgICAgLnRoZW4oKFskc3JjLCAkdGd0XSkgPT4ge1xyXG4gICAgICAgIGRyYWdNb2NrLnRyaWdnZXJEcmFnRXZlbnQoJHNyYywgJHRndClcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ3dhaXRGb3JWaXNpYmxlJzoge1xyXG4gICAgICByZXR1cm4gX19nZXRFbGVtZW50QnlMb2NhdG9yKHRhcmdldCwgdHJ1ZSlcclxuICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdjbGlja0F0Jzoge1xyXG4gICAgICBjb25zdCBnZXRJZnJhbWVPZmZzZXQgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHdpbmRvdyA9PT0gd2luZG93LnRvcCkge1xyXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IHg6IDAsIHk6IDAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwb3N0TWVzc2FnZSh3aW5kb3cucGFyZW50LCB3aW5kb3csIHtcclxuICAgICAgICAgIGFjdGlvbjogJ1NPVVJDRV9QQUdFX09GRlNFVCcsXHJcbiAgICAgICAgICBkYXRhOiB7fVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgaXNFZnAgICA9IGlzRWxlbWVudEZyb21Qb2ludCh0YXJnZXQpXHJcbiAgICAgIGNvbnN0IHBUYXJnZXQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghaXNFZnApIHJldHVybiBQcm9taXNlLnJlc29sdmUodGFyZ2V0KVxyXG4gICAgICAgIHJldHVybiBnZXRJZnJhbWVPZmZzZXQoKVxyXG4gICAgICAgIC50aGVuKGlmcmFtZU9mZnNldCA9PiB7XHJcbiAgICAgICAgICBsb2coJ2lmcmFtZU9mZnNldCcsIGlmcmFtZU9mZnNldClcclxuICAgICAgICAgIGNvbnN0IFt4LCB5XSA9IHZpZXdwb3J0Q29vcmRpbmF0ZUJ5RWxlbWVudEZyb21Qb2ludCh0YXJnZXQpXHJcbiAgICAgICAgICByZXR1cm4gYCNlbGVtZW50ZnJvbXBvaW50ICgke3ggLSBpZnJhbWVPZmZzZXQueH0sICR7eSAtIGlmcmFtZU9mZnNldC55fSlgXHJcbiAgICAgICAgfSlcclxuICAgICAgfSkoKVxyXG5cclxuICAgICAgcmV0dXJuIHBUYXJnZXQudGhlbih0YXJnZXQgPT4ge1xyXG4gICAgICAgIHJldHVybiBfX2dldEVsZW1lbnRCeUxvY2F0b3IodGFyZ2V0LCBleHRyYS53YWl0Rm9yVmlzaWJsZSlcclxuICAgICAgICAudGhlbihlbCA9PiB7XHJcbiAgICAgICAgICBpZiAoIS9eXFxkK1xccyosXFxzKlxcZCskLy50ZXN0KHZhbHVlKSAmJiAhaXNFbGVtZW50RnJvbVBvaW50KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIG9mZnNldCBmb3IgY2xpY2tBdDogJHt2YWx1ZX1gKVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IHNjcm9sbEFuZEhpZ2hsaWdodCA9ICgpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBpZiAoZXh0cmEucGxheVNjcm9sbEVsZW1lbnRzSW50b1ZpZXcpIGVsLnNjcm9sbEludG9WaWV3KHsgYmxvY2s6ICdjZW50ZXInIH0pXHJcbiAgICAgICAgICAgICAgaWYgKGV4dHJhLnBsYXlIaWdobGlnaHRFbGVtZW50cykgICAgICBoZWxwZXJzLmhpZ2hsaWdodERvbShlbCwgSElHSExJR0hUX1RJTUVPVVQpXHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICBsb2cuZXJyb3IoJ2Vycm9yIGluIHNjcm9sbCBhbmQgaGlnaGxpZ2h0JylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IFtvcmlnQ2xpZW50WCwgb3JpZ0NsaWVudFldID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGlzRWZwKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHZpZXdwb3J0Q29vcmRpbmF0ZUJ5RWxlbWVudEZyb21Qb2ludCh0YXJnZXQpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgW3gsIHldICAgICAgICA9IHZhbHVlLnNwbGl0KCcsJykubWFwKHN0ciA9PiBwYXJzZUludChzdHIudHJpbSgpLCAxMCkpXHJcbiAgICAgICAgICAgICAgY29uc3QgeyB0b3AsIGxlZnQgfSA9IHZpZXdwb3J0T2Zmc2V0KGVsKVxyXG4gICAgICAgICAgICAgIHJldHVybiBbbGVmdCArIHgsIHRvcCArIHldXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pKClcclxuXHJcbiAgICAgICAgICBjb25zdCBsYXN0U2Nyb2xsWCAgID0gd2luZG93LnNjcm9sbFhcclxuICAgICAgICAgIGNvbnN0IGxhc3RTY3JvbGxZICAgPSB3aW5kb3cuc2Nyb2xsWVxyXG5cclxuICAgICAgICAgIGlmICghaXNFZnApIHNjcm9sbEFuZEhpZ2hsaWdodCgpXHJcblxyXG4gICAgICAgICAgY29uc3QgY2xpZW50WCAgICAgICA9IG9yaWdDbGllbnRYICsgKGxhc3RTY3JvbGxYIC0gd2luZG93LnNjcm9sbFgpXHJcbiAgICAgICAgICBjb25zdCBjbGllbnRZICAgICAgID0gb3JpZ0NsaWVudFkgKyAobGFzdFNjcm9sbFkgLSB3aW5kb3cuc2Nyb2xsWSlcclxuXHJcbiAgICAgICAgICBsb2coJ2NsaWNrQXQgY2xpZW50WC9jbGllbnRZJywgY2xpZW50WCwgY2xpZW50WSlcclxuXHJcbiAgICAgICAgICA7Wydtb3VzZWRvd24nLCAnbW91c2V1cCcsICdjbGljayddLmZvckVhY2goZXZlbnRUeXBlID0+IHtcclxuICAgICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICAgICAgICBuZXcgTW91c2VFdmVudChldmVudFR5cGUsIHtcclxuICAgICAgICAgICAgICAgIHZpZXc6IHdpbmRvdyxcclxuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY2xpZW50WCxcclxuICAgICAgICAgICAgICAgIGNsaWVudFlcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgIC8vIE5vdGU6IGRlbGF5IHNjcm9sbCBhbmQgaGlnaGxpZ2h0IGZvciBlZnAsXHJcbiAgICAgICAgICAvLyBvdGhlcndpc2UgdGhhdCBzY3JvbGwgY291bGQgbWVzcyB1cCB0aGUgd2hvbGUgY29vZGlybmF0ZSBjYWxjdWxhdGlvblxyXG4gICAgICAgICAgaWYgKGlzRWZwKSBzY3JvbGxBbmRIaWdobGlnaHQoKVxyXG5cclxuICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdjbGljayc6XHJcbiAgICBjYXNlICdjbGlja0FuZFdhaXQnOiB7XHJcbiAgICAgIHJldHVybiBfX2dldEVsZW1lbnRCeUxvY2F0b3IodGFyZ2V0LCBleHRyYS53YWl0Rm9yVmlzaWJsZSlcclxuICAgICAgLnRoZW4oZWwgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBpZiAoZXh0cmEucGxheVNjcm9sbEVsZW1lbnRzSW50b1ZpZXcpIGVsLnNjcm9sbEludG9WaWV3KHsgYmxvY2s6ICdjZW50ZXInIH0pXHJcbiAgICAgICAgICBpZiAoZXh0cmEucGxheUhpZ2hsaWdodEVsZW1lbnRzKSAgICAgIGhlbHBlcnMuaGlnaGxpZ2h0RG9tKGVsLCBISUdITElHSFRfVElNRU9VVClcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICBsb2cuZXJyb3IoJ2Vycm9yIGluIHNjcm9sbCBhbmQgaGlnaGxpZ2h0JylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsLmNsaWNrKClcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ3NlbGVjdCc6XHJcbiAgICBjYXNlICdzZWxlY3RBbmRXYWl0Jzoge1xyXG4gICAgICByZXR1cm4gX19nZXRFbGVtZW50QnlMb2NhdG9yKHRhcmdldCwgZXh0cmEud2FpdEZvclZpc2libGUpXHJcbiAgICAgIC50aGVuKGVsID0+IHtcclxuICAgICAgICBjb25zdCBvcHRpb25zICAgICA9IFtdLnNsaWNlLmNhbGwoZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ29wdGlvbicpKVxyXG4gICAgICAgIGNvbnN0IGkgICAgICAgICAgID0gdmFsdWUuaW5kZXhPZignPScpXHJcbiAgICAgICAgY29uc3Qgb3B0aW9uVHlwZSAgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgaSlcclxuICAgICAgICBjb25zdCBvcHRpb25WYWx1ZSA9IHZhbHVlLnN1YnN0cmluZyhpICsgMSlcclxuXHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHN3aXRjaCAob3B0aW9uVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdsYWJlbCc6XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZmluZChvcCA9PiBnbG9iTWF0Y2gob3B0aW9uVmFsdWUsIGRvbVRleHQob3ApLnRyaW0oKSkpXHJcblxyXG4gICAgICAgICAgICBjYXNlICdpbmRleCc6XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZmluZCgoXywgaW5kZXgpID0+IGluZGV4ID09PSBwYXJzZUludChvcHRpb25WYWx1ZSkpXHJcblxyXG4gICAgICAgICAgICBjYXNlICdpZCc6XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZmluZCgob3AsIGluZGV4KSA9PiBvcC5pZCA9PT0gb3B0aW9uVmFsdWUpXHJcblxyXG4gICAgICAgICAgICBjYXNlICd2YWx1ZSc6XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZmluZChvcCA9PiBvcC52YWx1ZSA9PT0gb3B0aW9uVmFsdWUpXHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgT3B0aW9uIHR5cGUgXCIke29wdGlvblR5cGV9XCIgbm90IHN1cHBvcnRlZGApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSkoKVxyXG5cclxuICAgICAgICBpZiAoIW9wdGlvbikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZmluZCBvcHRpb24gd2l0aCAnJHt2YWx1ZX0nYClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChleHRyYS5wbGF5U2Nyb2xsRWxlbWVudHNJbnRvVmlldykgZWwuc2Nyb2xsSW50b1ZpZXcoeyBibG9jazogJ2NlbnRlcicgfSlcclxuICAgICAgICBpZiAoZXh0cmEucGxheUhpZ2hsaWdodEVsZW1lbnRzKSAgICAgIGhlbHBlcnMuaGlnaGxpZ2h0RG9tKGVsLCBISUdITElHSFRfVElNRU9VVClcclxuXHJcbiAgICAgICAgZWwudmFsdWUgPSBvcHRpb24udmFsdWVcclxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJykpXHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAndHlwZSc6IHtcclxuICAgICAgcmV0dXJuIF9fZ2V0RWxlbWVudEJ5TG9jYXRvcih0YXJnZXQsIGV4dHJhLndhaXRGb3JWaXNpYmxlKVxyXG4gICAgICAudGhlbihlbCA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFnID0gZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpXHJcblxyXG4gICAgICAgIGlmICh0YWcgIT09ICdpbnB1dCcgJiYgdGFnICE9PSAndGV4dGFyZWEnKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3J1biBjb21tYW5kOiBlbGVtZW50IGZvdW5kIGlzIG5laXRoZXIgaW5wdXQgbm9yIHRleHRhcmVhJylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChleHRyYS5wbGF5U2Nyb2xsRWxlbWVudHNJbnRvVmlldykgZWwuc2Nyb2xsSW50b1ZpZXcoeyBibG9jazogJ2NlbnRlcicgfSlcclxuICAgICAgICBpZiAoZXh0cmEucGxheUhpZ2hsaWdodEVsZW1lbnRzKSAgICAgIGhlbHBlcnMuaGlnaGxpZ2h0RG9tKGVsLCBISUdITElHSFRfVElNRU9VVClcclxuXHJcbiAgICAgICAgLy8gTm90ZTogbmVlZCB0aGUgaGVscCBvZiBjaHJvbWUuZGVidWdnZXIgdG8gc2V0IGZpbGUgcGF0aCB0byBmaWxlIGlucHV0XHJcbiAgICAgICAgaWYgKGVsLnR5cGUgJiYgZWwudHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZmlsZScpIHtcclxuICAgICAgICAgIGlmIChFeHQuaXNGaXJlZm94KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXR0aW5nIGZpbGUgcGF0aCBmbyBmaWxlIGlucHV0cyBpcyBub3Qgc3VwcG9ydGVkIGJ5IEZpcmVmb3ggZXh0ZW5zaW9uIGFwaSB5ZXQnKVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBjc0lwYy5hc2soJ0NTX1NFVF9GSUxFX0lOUFVUX0ZJTEVTJywge1xyXG4gICAgICAgICAgICBmaWxlczogICAgdmFsdWUuc3BsaXQoJzsnKSxcclxuICAgICAgICAgICAgc2VsZWN0b3I6IGNzc1NlbGVjdG9yKGVsKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkZWNyeXB0SWZOZWVkZWQodmFsdWUsIGVsKVxyXG4gICAgICAgIC50aGVuKHJlYWxWYWx1ZSA9PiB7XHJcbiAgICAgICAgICBlbC52YWx1ZSA9ICcnXHJcbiAgICAgICAgICBzZW5kS2V5cyhlbCwgcmVhbFZhbHVlLCB0cnVlKVxyXG5cclxuICAgICAgICAgIGVsLnZhbHVlID0gcmVhbFZhbHVlXHJcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJykpXHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICBpZiAoL1RoaXMgaW5wdXQgZWxlbWVudCBhY2NlcHRzIGEgZmlsZW5hbWUvaS50ZXN0KGUubWVzc2FnZSkpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU29ycnksIHVwbG9hZCBjYW4gbm90IGJlIGF1dG9tYXRlZCBDaHJvbWUgKEFQSSBsaW1pdGF0aW9uKS4nKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhyb3cgZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ2VkaXRDb250ZW50Jzoge1xyXG4gICAgICByZXR1cm4gX19nZXRFbGVtZW50QnlMb2NhdG9yKHRhcmdldCwgZXh0cmEud2FpdEZvclZpc2libGUpXHJcbiAgICAgIC50aGVuKGVsID0+IHtcclxuICAgICAgICBpZiAoZWwuY29udGVudEVkaXRhYmxlICE9PSAndHJ1ZScpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGFyZ2V0IGlzIG5vdCBjb250ZW50ZWRpdGFibGVgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGV4dHJhLnBsYXlTY3JvbGxFbGVtZW50c0ludG9WaWV3KSBlbC5zY3JvbGxJbnRvVmlldyh7IGJsb2NrOiAnY2VudGVyJyB9KVxyXG4gICAgICAgIGlmIChleHRyYS5wbGF5SGlnaGxpZ2h0RWxlbWVudHMpICAgICAgaGVscGVycy5oaWdobGlnaHREb20oZWwsIEhJR0hMSUdIVF9USU1FT1VUKVxyXG5cclxuICAgICAgICBlbC5pbm5lckhUTUwgPSB2YWx1ZVxyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAnc2VsZWN0RnJhbWUnOiB7XHJcbiAgICAgIHJldHVybiBfX2dldEZyYW1lQnlMb2NhdG9yKHRhcmdldCwgaGVscGVycylcclxuICAgICAgLnRoZW4oZnJhbWVXaW5kb3cgPT4ge1xyXG4gICAgICAgIGlmICghZnJhbWVXaW5kb3cpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBmcmFtZS9pZnJhbWUnKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZyYW1lV2luZG93XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAndmVyaWZ5VGV4dCc6IHtcclxuICAgICAgcmV0dXJuIF9fZ2V0RWxlbWVudEJ5TG9jYXRvcih0YXJnZXQpXHJcbiAgICAgIC50aGVuKGVsID0+IHtcclxuICAgICAgICBjb25zdCB0ZXh0ICA9IGRvbVRleHQoZWwpXHJcblxyXG4gICAgICAgIGlmICghZ2xvYk1hdGNoKHZhbHVlLCB0ZXh0KSkge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbG9nOiB7XHJcbiAgICAgICAgICAgICAgZXJyb3I6IGB0ZXh0IG5vdCBtYXRjaGVkLCBcXG5cXHRleHBlY3RlZDogXCIke3ZhbHVlfVwiLCBcXG5cXHRhY3R1YWw6IFwiJHt0ZXh0fVwiYFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ3ZlcmlmeVRpdGxlJzoge1xyXG4gICAgICBpZiAoIWdsb2JNYXRjaCh0YXJnZXQsIGRvY3VtZW50LnRpdGxlKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBsb2c6IHtcclxuICAgICAgICAgICAgZXJyb3I6IGB0aXRsZSBub3QgbWF0Y2hlZCwgXFxuXFx0ZXhwZWN0ZWQ6IFwiJHt0YXJnZXR9XCIsIFxcblxcdGFjdHVhbDogXCIke2RvY3VtZW50LnRpdGxlfVwiYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICd2ZXJpZnlFbGVtZW50UHJlc2VudCc6IHtcclxuICAgICAgY29uc3QgeyB0aW1lb3V0RWxlbWVudCwgcmV0cnlJbmZvIH0gPSBleHRyYSB8fCB7fVxyXG5cclxuICAgICAgcmV0dXJuIF9fZ2V0RWxlbWVudEJ5TG9jYXRvcih0YXJnZXQpXHJcbiAgICAgIC50aGVuKFxyXG4gICAgICAgICgpID0+IHRydWUsXHJcbiAgICAgICAgKGUpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHNob3RzTGVmdCAgICAgPSAodGltZW91dEVsZW1lbnQgKiAxMDAwIC8gcmV0cnlJbmZvLnJldHJ5SW50ZXJ2YWwpIC0gcmV0cnlJbmZvLnJldHJ5Q291bnRcclxuICAgICAgICAgIGNvbnN0IGlzTGFzdENoYW5jZSAgPSBzaG90c0xlZnQgPD0gMVxyXG5cclxuICAgICAgICAgIGlmIChpc0xhc3RDaGFuY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICBsb2c6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yOiBgJyR7dGFyZ2V0fScgZWxlbWVudCBub3QgcHJlc2VudGBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aHJvdyBlXHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAndmVyaWZ5Q2hlY2tlZCc6IHtcclxuICAgICAgcmV0dXJuIF9fZ2V0RWxlbWVudEJ5TG9jYXRvcih0YXJnZXQpXHJcbiAgICAgIC50aGVuKGVsID0+IHtcclxuICAgICAgICBjb25zdCBjaGVja2VkICA9ICEhZWwuY2hlY2tlZFxyXG5cclxuICAgICAgICBpZiAoIWNoZWNrZWQpIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxvZzoge1xyXG4gICAgICAgICAgICAgIGVycm9yOiBgJyR7dGFyZ2V0fScgaXMgbm90IGNoZWNrZWRgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAndmVyaWZ5QXR0cmlidXRlJzoge1xyXG4gICAgICBjb25zdCBpbmRleCA9IHRhcmdldC5sYXN0SW5kZXhPZignQCcpXHJcblxyXG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIHRhcmdldCBmb3IgdmVyaWZ5QXR0cmlidXRlIC0gJHt0YXJnZXR9YClcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgbG9jYXRvciAgID0gdGFyZ2V0LnN1YnN0cigwLCBpbmRleClcclxuICAgICAgY29uc3QgYXR0ck5hbWUgID0gdGFyZ2V0LnN1YnN0cihpbmRleCArIDEpXHJcblxyXG4gICAgICByZXR1cm4gX19nZXRFbGVtZW50QnlMb2NhdG9yKGxvY2F0b3IpXHJcbiAgICAgIC50aGVuKGVsID0+IHtcclxuICAgICAgICBjb25zdCBhdHRyID0gZWwuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKVxyXG5cclxuICAgICAgICBpZiAoIWdsb2JNYXRjaCh2YWx1ZSwgYXR0cikpIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxvZzoge1xyXG4gICAgICAgICAgICAgIGVycm9yOiBgYXR0cmlidXRlIG5vdCBtYXRjaGVkLCBcXG5cXHRleHBlY3RlZDogXCIke3ZhbHVlfVwiLCBcXG5cXHRhY3R1YWw6IFwiJHthdHRyfVwiYFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ3ZlcmlmeUVycm9yJzoge1xyXG4gICAgICBpZiAoZXh0cmEubGFzdENvbW1hbmRPaykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBsb2c6IHtcclxuICAgICAgICAgICAgZXJyb3I6IHRhcmdldFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdhc3NlcnRUZXh0Jzoge1xyXG4gICAgICByZXR1cm4gX19nZXRFbGVtZW50QnlMb2NhdG9yKHRhcmdldClcclxuICAgICAgLnRoZW4oZWwgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRleHQgID0gZG9tVGV4dChlbClcclxuXHJcbiAgICAgICAgaWYgKCFnbG9iTWF0Y2godmFsdWUsIHRleHQpKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHRleHQgbm90IG1hdGNoZWQsIFxcblxcdGV4cGVjdGVkOiBcIiR7dmFsdWV9XCIsIFxcblxcdGFjdHVhbDogXCIke3RleHR9XCJgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdhc3NlcnRUaXRsZSc6IHtcclxuICAgICAgaWYgKCFnbG9iTWF0Y2godGFyZ2V0LCBkb2N1bWVudC50aXRsZSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHRpdGxlIG5vdCBtYXRjaGVkLCBcXG5cXHRleHBlY3RlZDogXCIke3RhcmdldH1cIiwgXFxuXFx0YWN0dWFsOiBcIiR7ZG9jdW1lbnQudGl0bGV9XCJgKVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ2Fzc2VydEVsZW1lbnRQcmVzZW50Jzoge1xyXG4gICAgICByZXR1cm4gX19nZXRFbGVtZW50QnlMb2NhdG9yKHRhcmdldClcclxuICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdhc3NlcnRDaGVja2VkJzoge1xyXG4gICAgICByZXR1cm4gX19nZXRFbGVtZW50QnlMb2NhdG9yKHRhcmdldClcclxuICAgICAgLnRoZW4oZWwgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNoZWNrZWQgID0gISFlbC5jaGVja2VkXHJcblxyXG4gICAgICAgIGlmICghY2hlY2tlZCkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHt0YXJnZXR9JyBpcyBub3QgY2hlY2tlZGApXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ2Fzc2VydEF0dHJpYnV0ZSc6IHtcclxuICAgICAgY29uc3QgaW5kZXggPSB0YXJnZXQubGFzdEluZGV4T2YoJ0AnKVxyXG5cclxuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCB0YXJnZXQgZm9yIGFzc2VydEF0dHJpYnV0ZSAtICR7dGFyZ2V0fWApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGxvY2F0b3IgICA9IHRhcmdldC5zdWJzdHIoMCwgaW5kZXgpXHJcbiAgICAgIGNvbnN0IGF0dHJOYW1lICA9IHRhcmdldC5zdWJzdHIoaW5kZXggKyAxKVxyXG5cclxuICAgICAgcmV0dXJuIF9fZ2V0RWxlbWVudEJ5TG9jYXRvcihsb2NhdG9yKVxyXG4gICAgICAudGhlbihlbCA9PiB7XHJcbiAgICAgICAgY29uc3QgYXR0ciA9IGVsLmdldEF0dHJpYnV0ZShhdHRyTmFtZSlcclxuXHJcbiAgICAgICAgaWYgKCFnbG9iTWF0Y2godmFsdWUsIGF0dHIpKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGF0dHJpYnV0ZSBub3QgbWF0Y2hlZCwgXFxuXFx0ZXhwZWN0ZWQ6IFwiJHt2YWx1ZX1cIiwgXFxuXFx0YWN0dWFsOiBcIiR7YXR0cn1cImApXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ2Fzc2VydEVycm9yJzoge1xyXG4gICAgICBpZiAoZXh0cmEubGFzdENvbW1hbmRPaykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcih0YXJnZXQpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAnYXNzZXJ0QWxlcnQnOiB7XHJcbiAgICAgIGNvbnN0IG1zZyA9IGRvY3VtZW50LmJvZHkuZ2V0QXR0cmlidXRlKCdkYXRhLWFsZXJ0JylcclxuXHJcbiAgICAgIGlmICghbXNnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBhbGVydCBmb3VuZCEnKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWdsb2JNYXRjaCh0YXJnZXQsIG1zZykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVubWF0Y2hlZCBhbGVydCBtc2csIFxcblxcdGV4cGVjdGVkOiBcIiR7dGFyZ2V0fVwiLCBcXG5cXHRhY3R1YWw6IFwiJHttc2d9XCJgKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBkb2N1bWVudC5ib2R5LnNldEF0dHJpYnV0ZSgnZGF0YS1hbGVydCcsICcnKVxyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ2Fzc2VydENvbmZpcm1hdGlvbic6IHtcclxuICAgICAgY29uc3QgbXNnID0gZG9jdW1lbnQuYm9keS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29uZmlybScpXHJcblxyXG4gICAgICBpZiAoIW1zZykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gY29uZmlybSBmb3VuZCEnKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWdsb2JNYXRjaCh0YXJnZXQsIG1zZykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVubWF0Y2hlZCBjb25maXJtIG1zZywgXFxuXFx0ZXhwZWN0ZWQ6IFwiJHt0YXJnZXR9XCIsIFxcblxcdGFjdHVhbDogXCIke21zZ31cImApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKCdkYXRhLWNvbmZpcm0nLCAnJylcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdhc3NlcnRQcm9tcHQnOiB7XHJcbiAgICAgIGNvbnN0IG1zZyA9IGRvY3VtZW50LmJvZHkuZ2V0QXR0cmlidXRlKCdkYXRhLXByb21wdCcpXHJcblxyXG4gICAgICBpZiAoIW1zZykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gcHJvbXB0IGZvdW5kIScpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghZ2xvYk1hdGNoKHRhcmdldCwgbXNnKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5tYXRjaGVkIHByb21wdCBtc2csIFxcblxcdGV4cGVjdGVkOiBcIiR7dGFyZ2V0fVwiLCBcXG5cXHRhY3R1YWw6IFwiJHttc2d9XCJgKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBkb2N1bWVudC5ib2R5LnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9tcHQnLCAnJylcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdhbnN3ZXJPbk5leHRQcm9tcHQnOiB7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKCdkYXRhLXByb21wdC1hbnN3ZXInLCB0YXJnZXQpXHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAnd2FpdEZvclBhZ2VUb0xvYWQnOlxyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG5cclxuICAgIGNhc2UgJ3N0b3JlVGl0bGUnOiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFyczoge1xyXG4gICAgICAgICAgW3ZhbHVlXTogZG9jdW1lbnQudGl0bGVcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdzdG9yZVRleHQnOiB7XHJcbiAgICAgIHJldHVybiBfX2dldEVsZW1lbnRCeUxvY2F0b3IodGFyZ2V0KVxyXG4gICAgICAudGhlbihlbCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHZhcnM6IHtcclxuICAgICAgICAgICAgW3ZhbHVlXTogZG9tVGV4dChlbClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAnc3RvcmVBdHRyaWJ1dGUnOiB7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gdGFyZ2V0Lmxhc3RJbmRleE9mKCdAJylcclxuXHJcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgdGFyZ2V0IGZvciBzdG9yZUF0dHJpYnV0ZSAtICR7dGFyZ2V0fWApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGxvY2F0b3IgICA9IHRhcmdldC5zdWJzdHIoMCwgaW5kZXgpXHJcbiAgICAgIGNvbnN0IGF0dHJOYW1lICA9IHRhcmdldC5zdWJzdHIoaW5kZXggKyAxKVxyXG5cclxuICAgICAgcmV0dXJuIF9fZ2V0RWxlbWVudEJ5TG9jYXRvcihsb2NhdG9yKVxyXG4gICAgICAudGhlbihlbCA9PiB7XHJcbiAgICAgICAgY29uc3QgYXR0ciA9IGVsLmdldEF0dHJpYnV0ZShhdHRyTmFtZSlcclxuXHJcbiAgICAgICAgaWYgKCFhdHRyKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1pc3NpbmcgYXR0cmlidXRlICcke2F0dHJOYW1lfSdgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHZhcnM6IHtcclxuICAgICAgICAgICAgW3ZhbHVlXTogIGF0dHJcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAnc3RvcmVFdmFsJzoge1xyXG4gICAgICByZXR1cm4gdW50aWxJbmplY3RlZCgpXHJcbiAgICAgIC50aGVuKGFwaSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGFwaS5ldmFsKHRhcmdldClcclxuICAgICAgICAudGhlbihyZXN1bHQgPT4gKHtcclxuICAgICAgICAgIHZhcnM6IHtcclxuICAgICAgICAgICAgW3ZhbHVlXTogcmVzdWx0XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSkpXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBpbiBydW5FdmFsIGNvZGU6ICR7ZS5tZXNzYWdlfWApXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdzdG9yZVZhbHVlJzoge1xyXG4gICAgICByZXR1cm4gX19nZXRFbGVtZW50QnlMb2NhdG9yKHRhcmdldClcclxuICAgICAgLnRoZW4oZWwgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRleHQgID0gZWwudmFsdWUgfHwgJydcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHZhcnM6IHtcclxuICAgICAgICAgICAgW3ZhbHVlXTogdGV4dFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdzdG9yZUNoZWNrZWQnOiB7XHJcbiAgICAgIHJldHVybiBfX2dldEVsZW1lbnRCeUxvY2F0b3IodGFyZ2V0KVxyXG4gICAgICAudGhlbihlbCA9PiB7XHJcbiAgICAgICAgY29uc3QgY2hlY2tlZCAgPSAhIWVsLmNoZWNrZWRcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHZhcnM6IHtcclxuICAgICAgICAgICAgW3ZhbHVlXTogY2hlY2tlZFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICd2ZXJpZnlWYWx1ZSc6IHtcclxuICAgICAgcmV0dXJuIF9fZ2V0RWxlbWVudEJ5TG9jYXRvcih0YXJnZXQpXHJcbiAgICAgIC50aGVuKGVsID0+IHtcclxuICAgICAgICBjb25zdCB0ZXh0ICA9IGVsLnZhbHVlXHJcblxyXG4gICAgICAgIGlmICghZ2xvYk1hdGNoKHZhbHVlLCB0ZXh0KSkge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbG9nOiB7XHJcbiAgICAgICAgICAgICAgZXJyb3I6IGB2YWx1ZSBub3QgbWF0Y2hlZCwgXFxuXFx0ZXhwZWN0ZWQ6IFwiJHt2YWx1ZX1cIiwgXFxuXFx0YWN0dWFsOiBcIiR7dGV4dH1cImBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdhc3NlcnRWYWx1ZSc6IHtcclxuICAgICAgcmV0dXJuIF9fZ2V0RWxlbWVudEJ5TG9jYXRvcih0YXJnZXQpXHJcbiAgICAgIC50aGVuKGVsID0+IHtcclxuICAgICAgICBjb25zdCB0ZXh0ICA9IGVsLnZhbHVlXHJcblxyXG4gICAgICAgIGlmICghZ2xvYk1hdGNoKHZhbHVlLCB0ZXh0KSkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB2YWx1ZSBub3QgbWF0Y2hlZCwgXFxuXFx0ZXhwZWN0ZWQ6IFwiJHt2YWx1ZX1cIiwgXFxuXFx0YWN0dWFsOiBcIiR7dGV4dH1cImApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ3NlbmRLZXlzJzoge1xyXG4gICAgICByZXR1cm4gX19nZXRFbGVtZW50QnlMb2NhdG9yKHRhcmdldClcclxuICAgICAgLnRoZW4oZWwgPT4ge1xyXG4gICAgICAgIHNlbmRLZXlzKGVsLCB2YWx1ZSlcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ3NlbGVjdFdpbmRvdyc6IHtcclxuICAgICAgY29uc3QgcCA9IHRhcmdldCAmJiB0YXJnZXQudG9VcHBlckNhc2UoKSA9PT0gJ1RBQj1DTE9TRUFMTE9USEVSJ1xyXG4gICAgICAgICAgICAgICAgICA/IGNzSXBjLmFzaygnQ1NfQ0xPU0VfT1RIRVJfVEFCUycsIHt9KVxyXG4gICAgICAgICAgICAgICAgICA6IGNzSXBjLmFzaygnQ1NfU0VMRUNUX1dJTkRPVycsIHsgdGFyZ2V0LCB2YWx1ZSB9KVxyXG5cclxuICAgICAgLy8gTm90ZTogbGV0IGBzZWxlY3RXaW5kb3dgIHBhc3MgdGhyb3VnaCBjcyBhbmQgYmFjayB0byBiYWNrZ3JvdW5kLFxyXG4gICAgICAvLyB0byBrZWVwIHRoZSBmbG93IG1vcmUgY29uc2lzdGVudCB3aXRoIHRoZSBvdGhlciBjb21tYW5kc1xyXG4gICAgICByZXR1cm4gcC50aGVuKCgpID0+IHRydWUpXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAnc291cmNlU2VhcmNoJzpcclxuICAgIGNhc2UgJ3NvdXJjZUV4dHJhY3QnOiB7XHJcbiAgICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgdGV4dCAvIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBzZWFyY2ggZm9yJylcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBzcGVjaWZ5IGEgdmFyaWFibGUgdG8gc2F2ZSB0aGUgcmVzdWx0JylcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZ2V0TWF0Y2hBbmRDYXB0dXJlSW5kZXggPSAoc3RyKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgbm9uWmVyb0luZGV4ID0gKG4sIG9mZnNldCA9IDApID0+IHtcclxuICAgICAgICAgIGlmIChuID09PSB1bmRlZmluZWQpICByZXR1cm4gMFxyXG4gICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIHBhcnNlSW50KG4sIDEwKSArIG9mZnNldClcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbSA9IC9AXFxzKihcXGQrKSg/OlxccyosXFxzKihcXGQrKSk/XFxzKiQvLmV4ZWMoc3RyKVxyXG5cclxuICAgICAgICBpZiAoIW0pIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3Q6ICAgICAgICAgc3RyLFxyXG4gICAgICAgICAgICBtYXRjaEluZGV4OiAgIDAsXHJcbiAgICAgICAgICAgIGNhcHR1cmVJbmRleDogMFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHJlc3Q6ICAgICAgICAgc3RyLnN1YnN0cmluZygwLCBtLmluZGV4KSxcclxuICAgICAgICAgIG1hdGNoSW5kZXg6ICAgbm9uWmVyb0luZGV4KG1bMV0sIC0xKSxcclxuICAgICAgICAgIGNhcHR1cmVJbmRleDogbm9uWmVyb0luZGV4KG1bMl0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBOb3RlOiBnZXQgbWF0Y2hJbmRleCBjYXB0dXJlSW5kZXggZmlyc3QsIG5vIG1hdHRlciBpdCdzIGZvciByZWdleHAgb3Igc2ltcGxlIHRleHRcclxuICAgICAgY29uc3QgeyByZXN0LCBtYXRjaEluZGV4LCBjYXB0dXJlSW5kZXggfSA9IGdldE1hdGNoQW5kQ2FwdHVyZUluZGV4KHRhcmdldClcclxuXHJcbiAgICAgIGlmIChjbWQgPT09ICdzb3VyY2VTZWFyY2gnICYmIHJlc3QgIT09IHRhcmdldCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIEAgcGFyYW1ldGVyIGlzIG9ubHkgc3VwcG9ydGVkIGluIHNvdXJjZUV4dHJhY3QnKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCByZWdleHAgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghL15yZWdleCg9fDopL2kudGVzdChyZXN0KSkgIHJldHVybiBudWxsXHJcblxyXG4gICAgICAgIGNvbnN0IHJhdyAgICAgICAgID0gcmVzdC5yZXBsYWNlKC9ecmVnZXgoPXw6KS9pLCAnJylcclxuICAgICAgICBjb25zdCByZWdleHBUZXh0ICA9IHJhdy5yZXBsYWNlKC9eXFwvfFxcL2c/JC9nLCAnJylcclxuXHJcbiAgICAgICAgcmV0dXJuIHRvUmVnRXhwKFxyXG4gICAgICAgICAgcmVnZXhwVGV4dCxcclxuICAgICAgICAgIHsgbmVlZEVuY29kZTogZmFsc2UsIGZsYWc6ICdnJyB9XHJcbiAgICAgICAgKVxyXG4gICAgICB9KSgpXHJcbiAgICAgIGNvbnN0IHJlZ2V4cEZvclRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChyZWdleHApIHJldHVybiBudWxsXHJcbiAgICAgICAgY29uc3QgcmF3ID0gcmVzdC5yZXBsYWNlKC9edGV4dCg9fDopL2ksICcnKVxyXG5cclxuICAgICAgICBpZiAoY21kID09PSAnc291cmNlRXh0cmFjdCcgJiYgIS9cXCovLnRlc3QocmF3KSkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nICogb3IgUkVHRVggaW4gc291cmNlRXh0cmFjdC4gRXh0cmFjdGluZyBhIHBsYWluIHRleHQgZG9lc25cXCd0IG1ha2UgbXVjaCBzZW5zZScpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZ2xvYjJyZWcocmF3LCB7IGNhcHR1cmU6IHRydWUsIGZsYWdzOiAnZycgfSlcclxuICAgICAgfSkoKVxyXG4gICAgICBjb25zdCBtYXRjaGVzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBodG1sICAgID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm91dGVySFRNTFxyXG4gICAgICAgIGNvbnN0IHJlZyAgICAgPSByZWdleHAgfHwgcmVnZXhwRm9yVGV4dFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCAgPSBbXVxyXG4gICAgICAgIGxldCBtXHJcblxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxyXG4gICAgICAgIHdoaWxlIChtID0gcmVnLmV4ZWMoaHRtbCkpIHtcclxuICAgICAgICAgIHJlc3VsdC5wdXNoKG0pXHJcblxyXG4gICAgICAgICAgLy8gTm90ZTogc2F2ZSBzb21lIGVuZXJneSwgaWYgaXQncyBhbHJlYWR5IGVub3VnaCB0byBnZXQgd2hhdCB1c2VycyB3YW50XHJcbiAgICAgICAgICBpZiAoY21kID09PSAnc291cmNlRXh0cmFjdCcgJiYgcmVzdWx0Lmxlbmd0aCA+PSBtYXRjaEluZGV4ICsgMSkge1xyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICB9KSgpXHJcblxyXG4gICAgICBsb2coJ21hdGNoZXMnLCBtYXRjaGVzLCByZWdleHAsIHJlZ2V4cEZvclRleHQpXHJcblxyXG4gICAgICBpZiAoY21kID09PSAnc291cmNlU2VhcmNoJykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB2YXJzOiB7XHJcbiAgICAgICAgICAgIFt2YWx1ZV06IG1hdGNoZXMubGVuZ3RoXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY21kID09PSAnc291cmNlRXh0cmFjdCcpIHtcclxuICAgICAgICBjb25zdCBndWFyZCAgID0gc3RyID0+IHN0ciAhPT0gdW5kZWZpbmVkID8gc3RyIDogJyNub21hdGNoZm91bmQnXHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB2YXJzOiB7XHJcbiAgICAgICAgICAgIFt2YWx1ZV06IGd1YXJkKFxyXG4gICAgICAgICAgICAgIChtYXRjaGVzW21hdGNoSW5kZXhdIHx8IFtdKVtjYXB0dXJlSW5kZXhdXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW1wb3NzaWJsZSB0byByZWFjaCBoZXJlJylcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICd2aXNpb25MaW1pdFNlYXJjaEFyZWEnOlxyXG4gICAgY2FzZSAnc3RvcmVJbWFnZSc6IHtcclxuICAgICAgY29uc3QgcnVuID0gKGxvY2F0b3IsIGZpbGVOYW1lKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2V0RWxlbWVudEJ5TG9jYXRvcihsb2NhdG9yKVxyXG4gICAgICAgIC50aGVuKGVsID0+IHtcclxuICAgICAgICAgIGlmICghZmlsZU5hbWUgfHwgIWZpbGVOYW1lLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN0b3JlSW1hZ2U6ICd2YWx1ZScgaXMgcmVxdWlyZWQgYXMgaW1hZ2UgbmFtZWApXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY29uc3QgY2xpZW50UmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXHJcbiAgICAgICAgICBjb25zdCBwU291cmNlT2Zmc2V0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHdpbmRvdy50b3AgPT09IHdpbmRvdykge1xyXG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB4OiAwLCB5OiAwIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE5vdGU6IGl0J3MgdG9vIGNvbXBsaWNhdGVkIHRvIHRha2Ugc2NyZWVuc2hvdCBvZiBlbGVtZW50IGRlZXAgaW4gaWZyYW1lIHN0YWNrXHJcbiAgICAgICAgICAgIC8vIGlmIHlvdSBoYXZlIHRvIHNjcm9sbCBlYWNoIGxldmVsIG9mIGlmcmFtZSB0byBnZXQgdGhlIGZ1bGwgaW1hZ2Ugb2YgaXQuXHJcbiAgICAgICAgICAgIGVsLnNjcm9sbEludG9WaWV3KClcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZSh3aW5kb3cucGFyZW50LCB3aW5kb3csIHtcclxuICAgICAgICAgICAgICBhY3Rpb246ICdTT1VSQ0VfUEFHRV9PRkZTRVQnLFxyXG4gICAgICAgICAgICAgIGRhdGE6IHt9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9KSgpXHJcblxyXG4gICAgICAgICAgcmV0dXJuIHBTb3VyY2VPZmZzZXQudGhlbihzb3VyY2VPZmZzZXQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZWN0ID0ge1xyXG4gICAgICAgICAgICAgIHg6ICAgICAgc291cmNlT2Zmc2V0LnggKyBjbGllbnRSZWN0LnggKyBzY3JvbGxMZWZ0KGRvY3VtZW50KSxcclxuICAgICAgICAgICAgICB5OiAgICAgIHNvdXJjZU9mZnNldC55ICsgY2xpZW50UmVjdC55ICsgc2Nyb2xsVG9wKGRvY3VtZW50KSxcclxuICAgICAgICAgICAgICB3aWR0aDogIGNsaWVudFJlY3Qud2lkdGgsXHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiBjbGllbnRSZWN0LmhlaWdodFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY3NJcGMuYXNrKCdDU19TVE9SRV9TQ1JFRU5TSE9UX0lOX1NFTEVDVElPTicsIHtcclxuICAgICAgICAgICAgICByZWN0LFxyXG4gICAgICAgICAgICAgIGZpbGVOYW1lOiBlbnN1cmVFeHROYW1lKCcucG5nJywgZmlsZU5hbWUpLFxyXG4gICAgICAgICAgICAgIGRldmljZVBpeGVsUmF0aW86IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+ICh7XHJcbiAgICAgICAgICAgICAgdmFyczoge1xyXG4gICAgICAgICAgICAgICAgJyFzdG9yZWRJbWFnZVJlY3QnOiByZWN0XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGxvY2F0b3IsIGZpbGVOYW1lXHJcblxyXG4gICAgICBpZiAoY21kID09PSAnc3RvcmVJbWFnZScpIHtcclxuICAgICAgICBsb2NhdG9yICAgPSB0YXJnZXRcclxuICAgICAgICBmaWxlTmFtZSAgPSB2YWx1ZVxyXG4gICAgICB9IGVsc2UgaWYgKGNtZCA9PT0gJ3Zpc2lvbkxpbWl0U2VhcmNoQXJlYScpIHtcclxuICAgICAgICBsb2NhdG9yICAgPSB0YXJnZXQudHJpbSgpLnJlcGxhY2UoL15lbGVtZW50Oi9pLCAnJykudHJpbSgpXHJcbiAgICAgICAgZmlsZU5hbWUgID0gTEFTVF9TQ1JFRU5TSE9UX0ZJTEVfTkFNRVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcnVuKGxvY2F0b3IsIGZpbGVOYW1lKVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ2NhcHR1cmVTY3JlZW5zaG90Jzoge1xyXG4gICAgICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0Lmxlbmd0aCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2FwdHVyZVNjcmVlbnNob3Q6ICd0YXJnZXQnIGlzIHJlcXVpcmVkIGFzIGZpbGUgbmFtZWApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBjc0lwYy5hc2soJ0NTX0NBUFRVUkVfU0NSRUVOU0hPVCcsIHsgZmlsZU5hbWU6IGVuc3VyZUV4dE5hbWUoJy5wbmcnLCB0YXJnZXQpIH0pXHJcbiAgICAgIC50aGVuKCh7IGZpbGVOYW1lLCB1cmwgfSkgPT4gKHtcclxuICAgICAgICBzY3JlZW5zaG90OiB7XHJcbiAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICBuYW1lOiBmaWxlTmFtZVxyXG4gICAgICAgIH1cclxuICAgICAgfSkpXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAnY2FwdHVyZUVudGlyZVBhZ2VTY3JlZW5zaG90Jzoge1xyXG4gICAgICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0Lmxlbmd0aCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2FwdHVyZUVudGlyZVBhZ2VTY3JlZW5zaG90OiAndGFyZ2V0JyBpcyByZXF1aXJlZCBhcyBmaWxlIG5hbWVgKVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gY3NJcGMuYXNrKCdDU19DQVBUVVJFX0ZVTExfU0NSRUVOU0hPVCcsIHsgZmlsZU5hbWU6IGVuc3VyZUV4dE5hbWUoJy5wbmcnLCB0YXJnZXQpIH0pXHJcbiAgICAgIC50aGVuKCh7IGZpbGVOYW1lLCB1cmwgfSkgPT4gKHtcclxuICAgICAgICBzY3JlZW5zaG90OiB7XHJcbiAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICBuYW1lOiBmaWxlTmFtZVxyXG4gICAgICAgIH1cclxuICAgICAgfSkpXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAnb25Eb3dubG9hZCc6IHtcclxuICAgICAgcmV0dXJuIGNzSXBjLmFzaygnQ1NfT05fRE9XTkxPQUQnLCB7XHJcbiAgICAgICAgZmlsZU5hbWU6IHRhcmdldCxcclxuICAgICAgICB3YWl0OiAodmFsdWUgfHwgJycpLnRyaW0oKSA9PT0gJ3RydWUnLFxyXG4gICAgICAgIHRpbWVvdXQ6IGV4dHJhLnRpbWVvdXREb3dubG9hZCAqIDEwMDAsXHJcbiAgICAgICAgdGltZW91dEZvclN0YXJ0OiBNYXRoLm1heCgxMCwgZXh0cmEudGltZW91dEVsZW1lbnQpICogMTAwMFxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ2RlbGV0ZUFsbENvb2tpZXMnOiB7XHJcbiAgICAgIHJldHVybiBjc0lwYy5hc2soJ0NTX0RFTEVURV9BTExfQ09PS0lFUycsIHtcclxuICAgICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW5cclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdpZic6XHJcbiAgICBjYXNlICd3aGlsZSc6XHJcbiAgICBjYXNlICdnb3RvSWYnOiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1ldmFsXHJcbiAgICAgICAgICBjb25kaXRpb246IHdpbmRvdy5ldmFsKHRhcmdldClcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGluIHJ1bkV2YWwgY29uZGl0aW9uIG9mICR7Y21kfTogJHtlLm1lc3NhZ2V9YClcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ29tbWFuZCAke2NtZH0gbm90IHN1cHBvcnRlZCB5ZXRgKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgcGFyc2VKc29uIGZyb20gJ3BhcnNlLWpzb24nXHJcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICcuL3V0aWxzJ1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0cmluZ2lmeVRlc3RTdWl0ZSA9ICh0ZXN0U3VpdGUsIHRlc3RDYXNlcykgPT4ge1xyXG4gIGNvbnN0IG9iaiA9IHtcclxuICAgIGNyZWF0aW9uRGF0ZTogZm9ybWF0RGF0ZShuZXcgRGF0ZSgpKSxcclxuICAgIG5hbWU6IHRlc3RTdWl0ZS5uYW1lLFxyXG4gICAgbWFjcm9zOiB0ZXN0U3VpdGUuY2FzZXMubWFwKGl0ZW0gPT4ge1xyXG4gICAgICBjb25zdCBsb29wcyAgID0gcGFyc2VJbnQoaXRlbS5sb29wcywgMTApXHJcbiAgICAgIGNvbnN0IHRjSWQgICAgPSBpdGVtLnRlc3RDYXNlSWRcclxuICAgICAgY29uc3QgdGMgICAgICA9IHRlc3RDYXNlcy5maW5kKHRjID0+IHRjLmlkID09PSB0Y0lkKVxyXG4gICAgICBjb25zdCB0Y05hbWUgID0gdGMubmFtZSB8fCAnKE1hY3JvIG5vdCBmb3VuZCknXHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIG1hY3JvOiB0Y05hbWUsXHJcbiAgICAgICAgbG9vcHM6IGxvb3BzXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBudWxsLCAyKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcGFyc2VUZXN0U3VpdGUgPSAodGV4dCwgdGVzdENhc2VzKSA9PiB7XHJcbiAgY29uc3Qgb2JqID0gcGFyc2VKc29uKHRleHQpXHJcblxyXG4gIGlmICh0eXBlb2Ygb2JqLm5hbWUgIT09ICdzdHJpbmcnIHx8IG9iai5uYW1lLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCduYW1lIG11c3QgYmUgYSBzdHJpbmcnKVxyXG4gIH1cclxuXHJcbiAgaWYgKCFBcnJheS5pc0FycmF5KG9iai5tYWNyb3MpKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hY3JvcyBtdXN0IGJlIGFuIGFycmF5JylcclxuICB9XHJcblxyXG4gIGNvbnN0IGNhc2VzID0gb2JqLm1hY3Jvcy5tYXAoaXRlbSA9PiB7XHJcbiAgICBjb25zdCB0YyA9IHRlc3RDYXNlcy5maW5kKHRjID0+IHRjLm5hbWUgPT09IGl0ZW0ubWFjcm8pXHJcblxyXG4gICAgaWYgKCF0Yykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG1hY3JvIGZvdW5kIHdpdGggbmFtZSAnJHtpdGVtLm1hY3JvfSdgKVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgaXRlbS5sb29wcyAhPT0gJ251bWJlcicgfHwgaXRlbS5sb29wcyA8IDEpIHtcclxuICAgICAgaXRlbS5sb29wcyA9IDFcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0ZXN0Q2FzZUlkOiB0Yy5pZCxcclxuICAgICAgbG9vcHM6IGl0ZW0ubG9vcHNcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBjb25zdCB0cyAgPSB7XHJcbiAgICBuYW1lOiBvYmoubmFtZSxcclxuICAgIGZvbGQ6IG9iai5mb2xkLFxyXG4gICAgY2FzZXNcclxuICB9XHJcblxyXG4gIHJldHVybiB0c1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdmFsaWRhdGVUZXN0U3VpdGVUZXh0ID0gcGFyc2VUZXN0U3VpdGVcclxuXHJcbmV4cG9ydCBjb25zdCB0b0Jvb2ttYXJrRGF0YSA9IChvYmopID0+IHtcclxuICBjb25zdCB7IG5hbWUsIGJvb2ttYXJrVGl0bGUgfSA9IG9ialxyXG5cclxuICBpZiAoIW5hbWUpICB0aHJvdyBuZXcgRXJyb3IoJ25hbWUgaXMgcmVxdWlyZWQgdG8gZ2VuZXJhdGUgYm9va21hcmsgZm9yIHRlc3Qgc3VpdGUnKVxyXG4gIGlmICghYm9va21hcmtUaXRsZSkgIHRocm93IG5ldyBFcnJvcignYm9va21hcmtUaXRsZSBpcyByZXF1aXJlZCB0byBnZW5lcmF0ZSBib29rbWFyayBmb3IgdGVzdCBzdWl0ZScpXHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB0aXRsZTogYm9va21hcmtUaXRsZSxcclxuICAgIHVybDogYGphdmFzY3JpcHQ6XHJcbiAgICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdmFyIGV2dCA9IG5ldyBDdXN0b21FdmVudCgna2FudHVSdW5UZXN0U3VpdGUnLCB7IGRldGFpbDogeyBuYW1lOiAnJHtuYW1lfScsIGZyb206ICdib29rbWFyaycgfSB9KTtcclxuICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2dCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgYWxlcnQoJ0thbnR1IEJvb2ttYXJrbGV0IGVycm9yOiAnICsgZS50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pKCk7XHJcbiAgICBgXHJcbiAgICAucmVwbGFjZSgvXFxuXFxzKi9nLCAnJylcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB0b0h0bWwgPSAoeyBuYW1lIH0pID0+IHtcclxuICByZXR1cm4gYDw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PlxyXG48IURPQ1RZUEUgaHRtbCBQVUJMSUMgXCItLy9XM0MvL0RURCBYSFRNTCAxLjAgU3RyaWN0Ly9FTlwiIFwiaHR0cDovL3d3dy53My5vcmcvVFIveGh0bWwxL0RURC94aHRtbDEtc3RyaWN0LmR0ZFwiPlxyXG48aHRtbCB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiB4bWw6bGFuZz1cImVuXCIgbGFuZz1cImVuXCI+XHJcbjxoZWFkPlxyXG48bWV0YSBodHRwLWVxdWl2PVwiQ29udGVudC1UeXBlXCIgY29udGVudD1cInRleHQvaHRtbDsgY2hhcnNldD1VVEYtOFwiIC8+XHJcbjx0aXRsZT4ke25hbWV9PC90aXRsZT5cclxuPC9oZWFkPlxyXG48Ym9keT5cclxuPGgxPiR7bmFtZX08L2gxPlxyXG48c2NyaXB0PlxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBldnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2thbnR1UnVuVGVzdFN1aXRlJywgeyBkZXRhaWw6IHsgbmFtZTogJyR7bmFtZX0nLCBmcm9tOiAnaHRtbCcgfSB9KSAgXHJcbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldnQpO1xyXG5cclxuICAgIGlmICh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdmaWxlOicpIHtcclxuICAgICAgdmFyIG9uSW52b2tlU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpXHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2thbnR1SW52b2tlU3VjY2VzcycsIG9uSW52b2tlU3VjY2VzcylcclxuICAgICAgfVxyXG4gICAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhbGVydChcIkVycm9yOiBJdCBzZWVtcyB5b3UgbmVlZCB0byBlbmFibGUgRmlsZSBBY2Nlc3MgZm9yIEthbnR1IGluIHRoZSBleHRlbnNpb24gc2V0dGluZ3MuXCIpXHJcbiAgICAgIH0sIDIwMDApXHJcblxyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2FudHVJbnZva2VTdWNjZXNzJywgb25JbnZva2VTdWNjZXNzKVxyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGFsZXJ0KCdLYW50dSBCb29rbWFya2xldCBlcnJvcjogJyArIGUudG9TdHJpbmcoKSk7XHJcbiAgfVxyXG59KSgpO1xyXG48L3NjcmlwdD5cclxuPC9ib2R5PlxyXG48L2h0bWw+XHJcbiAgYFxyXG59XHJcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSdcclxuaW1wb3J0IHBhcnNlSnNvbiBmcm9tICdwYXJzZS1qc29uJ1xyXG5pbXBvcnQgVVJMIGZyb20gJ3VybC1wYXJzZSdcclxuaW1wb3J0IHsgcGljayB9IGZyb20gJy4vdXRpbHMnXHJcblxyXG5jb25zdCBqb2luVXJsID0gKGJhc2UsIHVybCkgPT4ge1xyXG4gIGNvbnN0IHVybE9iaiA9IG5ldyBVUkwodXJsLCBiYXNlKVxyXG4gIHJldHVybiB1cmxPYmoudG9TdHJpbmcoKVxyXG59XHJcblxyXG4vLyBIVE1MIHRlbXBsYXRlIGZyb20gdGVzdCBjYXNlXHJcbmZ1bmN0aW9uIGdlbkh0bWwgKHsgbmFtZSwgYmFzZVVybCwgY29tbWFuZFRycyB9KSB7XHJcbiAgcmV0dXJuIGA8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz5cclxuPCFET0NUWVBFIGh0bWwgUFVCTElDIFwiLS8vVzNDLy9EVEQgWEhUTUwgMS4wIFN0cmljdC8vRU5cIiBcImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXN0cmljdC5kdGRcIj5cclxuPGh0bWwgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIgeG1sOmxhbmc9XCJlblwiIGxhbmc9XCJlblwiPlxyXG48aGVhZCBwcm9maWxlPVwiaHR0cDovL3NlbGVuaXVtLWlkZS5vcGVucWEub3JnL3Byb2ZpbGVzL3Rlc3QtY2FzZVwiPlxyXG48bWV0YSBodHRwLWVxdWl2PVwiQ29udGVudC1UeXBlXCIgY29udGVudD1cInRleHQvaHRtbDsgY2hhcnNldD1VVEYtOFwiIC8+XHJcbjxsaW5rIHJlbD1cInNlbGVuaXVtLmJhc2VcIiBocmVmPVwiJHtiYXNlVXJsfVwiIC8+XHJcbjx0aXRsZT4ke25hbWV9PC90aXRsZT5cclxuPC9oZWFkPlxyXG48Ym9keT5cclxuPHRhYmxlIGNlbGxwYWRkaW5nPVwiMVwiIGNlbGxzcGFjaW5nPVwiMVwiIGJvcmRlcj1cIjFcIj5cclxuPHRoZWFkPlxyXG48dHI+PHRkIHJvd3NwYW49XCIxXCIgY29sc3Bhbj1cIjNcIj4ke25hbWV9PC90ZD48L3RyPlxyXG48L3RoZWFkPjx0Ym9keT5cclxuJHtjb21tYW5kVHJzLmpvaW4oJ1xcbicpfVxyXG48L3Rib2R5PjwvdGFibGU+XHJcbjxzY3JpcHQ+XHJcbihmdW5jdGlvbigpIHtcclxuICB0cnkge1xyXG4gICAgdmFyIGV2dCA9IG5ldyBDdXN0b21FdmVudCgna2FudHVTYXZlQW5kUnVuTWFjcm8nLCB7IGRldGFpbDogeyBodG1sOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub3V0ZXJIVE1MIH0gfSkgIFxyXG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZ0KTtcclxuICAgIFxyXG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2ZpbGU6Jykge1xyXG4gICAgICB2YXIgb25JbnZva2VTdWNjZXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcilcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2FudHVJbnZva2VTdWNjZXNzJywgb25JbnZva2VTdWNjZXNzKVxyXG4gICAgICB9XHJcbiAgICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFsZXJ0KFwiRXJyb3I6IEl0IHNlZW1zIHlvdSBuZWVkIHRvIGVuYWJsZSBGaWxlIEFjY2VzcyBmb3IgS2FudHUgaW4gdGhlIGV4dGVuc2lvbiBzZXR0aW5ncy5cIilcclxuICAgICAgfSwgMjAwMClcclxuXHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrYW50dUludm9rZVN1Y2Nlc3MnLCBvbkludm9rZVN1Y2Nlc3MpXHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgYWxlcnQoJ0thbnR1IEJvb2ttYXJrbGV0IGVycm9yOiAnICsgZS50b1N0cmluZygpKTtcclxuICB9XHJcbn0pKCk7XHJcbjwvc2NyaXB0PlxyXG48L2JvZHk+XHJcbjwvaHRtbD5cclxuICBgXHJcbn1cclxuXHJcbi8vIGdlbmVyYXRlIGRhdGEgdXJpIGZyb20gaHRtbFxyXG5mdW5jdGlvbiBodG1sRGF0YVVyaSAoaHRtbCkge1xyXG4gIHJldHVybiAnZGF0YTp0ZXh0L2h0bWw7YmFzZTY0LCcgKyB3aW5kb3cuYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoaHRtbCkpKVxyXG59XHJcblxyXG4vLyBnZW5lcmF0ZSBkYXRhIHVyaSBmcm9tIGpzb25cclxuZnVuY3Rpb24ganNvbkRhdGFVcmkgKHN0cikge1xyXG4gIHJldHVybiAnZGF0YTp0ZXh0L2pzb247YmFzZTY0LCcgKyB3aW5kb3cuYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSkpXHJcbn1cclxuXHJcbi8vIGdlbmVyYXRlIGh0bWwgZnJvbSBhIHRlc3QgY2FzZVxyXG5leHBvcnQgZnVuY3Rpb24gdG9IdG1sICh7IG5hbWUsIGNvbW1hbmRzIH0pIHtcclxuICBjb25zdCBjb3B5Q29tbWFuZHMgID0gY29tbWFuZHMubWFwKGMgPT4gT2JqZWN0LmFzc2lnbih7fSwgYykpXHJcbiAgY29uc3Qgb3BlblRjICAgICAgICA9IGNvcHlDb21tYW5kcy5maW5kKHRjID0+IHRjLmNtZCA9PT0gJ29wZW4nKVxyXG5cclxuICAvLyBOb3RlOiBBdWcgMTAsIDIwMTgsIG5vIGJhc2VVcmwgd2hlbiBleHBvcnRlZCB0byBodG1sXHJcbiAgLy8gc28gdGhhdCBgJHt2YXJpYWJsZX1gIGNvdWxkIGJlIHVzZWQgaW4gb3BlbiBjb21tYW5kLCBhbmQgd29uJ3QgYmUgcHJlZml4ZWQgd2l0aCBiYXNlVXJsXHJcbiAgY29uc3Qgb3JpZ2luICAgICAgICA9IG51bGxcclxuICBjb25zdCByZXBsYWNlUGF0aCAgID0gcGF0aCA9PiBwYXRoXHJcbiAgLy8gY29uc3QgdXJsICAgICAgICAgPSBvcGVuVGMgJiYgbmV3IFVSTChvcGVuVGMudGFyZ2V0KVxyXG4gIC8vIGNvbnN0IG9yaWdpbiAgICAgID0gdXJsICYmIHVybC5vcmlnaW5cclxuICAvLyBjb25zdCByZXBsYWNlUGF0aCA9IChwYXRoKSA9PiB7XHJcbiAgLy8gICBpZiAocGF0aC5pbmRleE9mKG9yaWdpbikgIT09IDApIHJldHVybiBwYXRoXHJcbiAgLy8gICBjb25zdCByZXN1bHQgPSBwYXRoLnJlcGxhY2Uob3JpZ2luLCAnJylcclxuICAvLyAgIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAwID8gJy8nIDogcmVzdWx0XHJcbiAgLy8gfVxyXG5cclxuICBpZiAob3BlblRjKSB7XHJcbiAgICBvcGVuVGMudGFyZ2V0ID0gcmVwbGFjZVBhdGgob3BlblRjLnRhcmdldClcclxuICB9XHJcblxyXG4gIGNvbnN0IGNvbW1hbmRUcnMgPSBjb3B5Q29tbWFuZHMubWFwKGMgPT4ge1xyXG4gICAgaWYgKGMuY21kID09PSAnb3BlbicpIHtcclxuICAgICAgLy8gTm90ZTogcmVtb3ZlIG9yaWdpbiBpZiBpdCdzIHRoZSBzYW1lIGFzIHRoZSBmaXJzdCBvcGVuIGNvbW1hbmRcclxuICAgICAgYy50YXJnZXQgPSByZXBsYWNlUGF0aChjLnRhcmdldClcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYFxyXG4gICAgICA8dHI+XHJcbiAgICAgICAgPHRkPiR7Yy5jbWQgfHwgJyd9PC90ZD5cclxuICAgICAgICA8dGQ+JHtjLnRhcmdldCB8fCAnJ308L3RkPlxyXG4gICAgICAgIDx0ZD4ke2MudmFsdWUgfHwgJyd9PC90ZD5cclxuICAgICAgPC90cj5cclxuICAgIGBcclxuICB9KVxyXG5cclxuICByZXR1cm4gZ2VuSHRtbCh7XHJcbiAgICBuYW1lLFxyXG4gICAgY29tbWFuZFRycyxcclxuICAgIGJhc2VVcmw6IG9yaWdpbiB8fCAnJ1xyXG4gIH0pXHJcbn1cclxuXHJcbi8vIGdlbmVyYXRlIGRhdGEgdXJpIG9mIGh0bWwgZnJvbSBhIHRlc3QgY2FzZVxyXG5leHBvcnQgZnVuY3Rpb24gdG9IdG1sRGF0YVVyaSAob2JqKSB7XHJcbiAgcmV0dXJuIGh0bWxEYXRhVXJpKHRvSHRtbChvYmopKVxyXG59XHJcblxyXG4vLyBwYXJzZSBodG1sIHRvIHRlc3QgY2FzZVxyXG5leHBvcnQgZnVuY3Rpb24gZnJvbUh0bWwgKGh0bWwpIHtcclxuICBjb25zdCAkcm9vdCAgID0gJChgPGRpdj4ke2h0bWx9PC9kaXY+YClcclxuICBjb25zdCAkYmFzZSAgID0gJHJvb3QuZmluZCgnbGluaycpXHJcbiAgY29uc3QgJHRpdGxlICA9ICRyb290LmZpbmQoJ3RpdGxlJylcclxuICBjb25zdCAkdHJzICAgID0gJHJvb3QuZmluZCgndGJvZHkgPiB0cicpXHJcblxyXG4gIGNvbnN0IGJhc2VVcmwgICA9ICRiYXNlICYmICRiYXNlLmF0dHIoJ2hyZWYnKVxyXG4gIGNvbnN0IG5hbWUgICAgICA9ICR0aXRsZS50ZXh0KClcclxuXHJcbiAgaWYgKCFuYW1lIHx8ICFuYW1lLmxlbmd0aCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdmcm9tSHRtbDogbWlzc2luZyB0aXRsZScpXHJcbiAgfVxyXG5cclxuICBjb25zdCBjb21tYW5kcyAgPSBbXS5zbGljZS5jYWxsKCR0cnMpLm1hcCh0ciA9PiB7XHJcbiAgICBjb25zdCAkZWwgICAgICAgPSAkKHRyKVxyXG4gICAgY29uc3QgdHJIdG1sICAgID0gJGVsWzBdLm91dGVySHRtbFxyXG5cclxuICAgIC8vIE5vdGU6IHJlbW92ZSBhbnkgZGF0YWxpc3Qgb3B0aW9uIGluIGthdGFsb24tbGlrZSBodG1sIGZpbGVcclxuICAgICRlbC5maW5kKCdkYXRhbGlzdCcpLnJlbW92ZSgpXHJcblxyXG4gICAgY29uc3QgJGNoaWxkcmVuID0gJGVsLmNoaWxkcmVuKClcclxuICAgIGNvbnN0ICRjbWQgICAgICA9ICRjaGlsZHJlbi5lcSgwKVxyXG4gICAgY29uc3QgJHRndCAgICAgID0gJGNoaWxkcmVuLmVxKDEpXHJcbiAgICBjb25zdCAkdmFsICAgICAgPSAkY2hpbGRyZW4uZXEoMilcclxuICAgIGNvbnN0IGNtZCAgICAgICA9ICRjbWQgJiYgJGNtZC50ZXh0KClcclxuICAgIGNvbnN0IHZhbHVlICAgICA9ICR2YWwgJiYgJHZhbC50ZXh0KClcclxuICAgIGxldCB0YXJnZXQgICAgICA9ICR0Z3QgJiYgJHRndC50ZXh0KClcclxuXHJcbiAgICBpZiAoIWNtZCB8fCAhY21kLmxlbmd0aCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ21pc3NpbmcgY21kIGluICcgKyB0ckh0bWwpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNtZCA9PT0gJ29wZW4nKSB7XHJcbiAgICAgIC8vIE5vdGU6IHdpdGggb3Igd2l0aG91dCBiYXNlVXJsXHJcbiAgICAgIHRhcmdldCA9IGJhc2VVcmwgJiYgYmFzZVVybC5sZW5ndGggJiYgIS86XFwvXFwvLy50ZXN0KHRhcmdldCkgPyBqb2luVXJsKGJhc2VVcmwsIHRhcmdldCkgOiB0YXJnZXRcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyBjbWQsIHRhcmdldCwgdmFsdWUgfVxyXG4gIH0pXHJcblxyXG4gIHJldHVybiB7IG5hbWUsIGRhdGE6IHsgY29tbWFuZHMgfSB9XHJcbn1cclxuXHJcbi8vIHBhcnNlIGpzb24gdG8gdGVzdCBjYXNlXHJcbi8vIHRoZSBjdXJyZW50IGpzb24gc3RydWN0dXJlIGRvZXNuJ3QgcHJvdmlkZSBmaWxlTmFtZSxcclxuLy8gc28gbXVzdCBwcm92aWRlIGEgZmlsZSBuYW1lIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tSlNPTlN0cmluZyAoc3RyLCBmaWxlTmFtZSkge1xyXG4gIGlmICghZmlsZU5hbWUgfHwgIWZpbGVOYW1lLmxlbmd0aCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdmcm9tSlNPTlN0cmluZzogbXVzdCBwcm92aWRlIGZpbGVOYW1lJylcclxuICB9XHJcblxyXG4gIGNvbnN0IG5hbWUgICAgICA9IGZpbGVOYW1lLnNwbGl0KCcuJylbMF1cclxuICBjb25zdCBvYmogICAgICAgPSBwYXJzZUpzb24oc3RyKVxyXG5cclxuICBpZiAob2JqLm1hY3Jvcykge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGlzIGlzIGEgdGVzdCBzdWl0ZSwgbm90IGEgbWFjcm9gKVxyXG4gIH1cclxuXHJcbiAgaWYgKCFBcnJheS5pc0FycmF5KG9iai5Db21tYW5kcykpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgJ0NvbW1hbmRzJyBmaWVsZCBtdXN0IGJlIGFuIGFycmF5YClcclxuICB9XHJcblxyXG4gIGNvbnN0IGNvbW1hbmRzICA9IG9iai5Db21tYW5kcy5tYXAoYyA9PiAoe1xyXG4gICAgY21kOiBjLkNvbW1hbmQsXHJcbiAgICB0YXJnZXQ6IGMuVGFyZ2V0LFxyXG4gICAgdmFsdWU6IGMuVmFsdWVcclxuICB9KSlcclxuXHJcbiAgcmV0dXJuIHsgbmFtZSwgZGF0YTogeyBjb21tYW5kcyB9IH1cclxufVxyXG5cclxuLy8gZ2VuZXJhdGUganNvbiBmcm9tIGEgdGVzdCBjYXNlXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0pTT05TdHJpbmcgKG9iaikge1xyXG4gIGNvbnN0IGdldFRvZGF5ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKClcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGQuZ2V0RnVsbFllYXIoKSxcclxuICAgICAgZC5nZXRNb250aCgpICsgMSxcclxuICAgICAgZC5nZXREYXRlKClcclxuICAgIF0uam9pbignLScpXHJcbiAgfVxyXG4gIGNvbnN0IGRhdGEgPSB7XHJcbiAgICBDcmVhdGlvbkRhdGU6IGdldFRvZGF5KCksXHJcbiAgICBDb21tYW5kczogb2JqLmNvbW1hbmRzLm1hcChjID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBDb21tYW5kOiBjLmNtZCxcclxuICAgICAgICBUYXJnZXQ6IGMudGFyZ2V0IHx8ICcnLFxyXG4gICAgICAgIFZhbHVlOiBjLnZhbHVlIHx8ICcnXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMilcclxufVxyXG5cclxuLy8gZ2VuZXJhdGUgZGF0YSB1cmkgb2YganNvbiBmcm9tIGEgdGVzdCBjYXNlXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0pTT05EYXRhVXJpIChvYmopIHtcclxuICByZXR1cm4ganNvbkRhdGFVcmkodG9KU09OU3RyaW5nKG9iaikpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0Jvb2ttYXJrRGF0YSAob2JqKSB7XHJcbiAgY29uc3QgeyBuYW1lLCBib29rbWFya1RpdGxlIH0gPSBvYmpcclxuXHJcbiAgaWYgKCFuYW1lKSAgdGhyb3cgbmV3IEVycm9yKCduYW1lIGlzIHJlcXVpcmVkIHRvIGdlbmVyYXRlIGJvb2ttYXJrIGZvciBtYWNybycpXHJcbiAgaWYgKCFib29rbWFya1RpdGxlKSAgdGhyb3cgbmV3IEVycm9yKCdib29rbWFya1RpdGxlIGlzIHJlcXVpcmVkIHRvIGdlbmVyYXRlIGJvb2ttYXJrIGZvciBtYWNybycpXHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB0aXRsZTogYm9va21hcmtUaXRsZSxcclxuICAgIHVybDogYGphdmFzY3JpcHQ6XHJcbiAgICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdmFyIGV2dCA9IG5ldyBDdXN0b21FdmVudCgna2FudHVSdW5NYWNybycsIHsgZGV0YWlsOiB7IG5hbWU6ICcke25hbWV9JywgZnJvbTogJ2Jvb2ttYXJrJyB9IH0pO1xyXG4gICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZ0KTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICBhbGVydCgnS2FudHUgQm9va21hcmtsZXQgZXJyb3I6ICcgKyBlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSkoKTtcclxuICAgIGBcclxuICAgIC5yZXBsYWNlKC9cXG5cXHMqL2csICcnKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgY3N2IGZyb20gJ2NzdidcclxuXHJcbmNvbnN0IGNzdkRhdGFVUkkgPSAoY3N2U3RyKSA9PiB7XHJcbiAgcmV0dXJuICdkYXRhOnRleHQvY3N2O2Jhc2U2NCwnICsgd2luZG93LmJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNzdlN0cikpKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VGcm9tQ1NWICh0ZXh0KSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIGNzdi5wYXJzZSh0ZXh0LCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XHJcbiAgICAgIGlmIChlcnIpICByZXR1cm4gcmVqZWN0KGVycilcclxuICAgICAgcmV0dXJuIHJlc29sdmUoZGF0YSlcclxuICAgIH0pXHJcbiAgfSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeVRvQ1NWIChsaXN0KSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIGNzdi5zdHJpbmdpZnkobGlzdCwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xyXG4gICAgICBpZiAoZXJyKSAgcmV0dXJuIHJlamVjdChlcnIpXHJcbiAgICAgIHJldHVybiByZXNvbHZlKGRhdGEpXHJcbiAgICB9KVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0NzdkRhdGFVUkkgKGxpc3QpIHtcclxuICByZXR1cm4gc3RyaW5naWZ5VG9DU1YobGlzdCkudGhlbihjc3ZEYXRhVVJJKVxyXG59XHJcbiIsImltcG9ydCBmcyBmcm9tICcuL2ZpbGVzeXN0ZW0nXHJcbmltcG9ydCBGaWxlTWFuIGZyb20gJy4vZmlsZV9tYW4nXHJcbmltcG9ydCBFeHQgZnJvbSAnLi93ZWJfZXh0ZW5zaW9uJ1xyXG5cclxuZXhwb3J0IGNsYXNzIENTVk1hbiBleHRlbmRzIEZpbGVNYW4ge1xyXG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcclxuICAgIHN1cGVyKHsgLi4ub3B0cywgYmFzZURpcjogJ3NwcmVhZHNoZWV0cycgfSlcclxuICB9XHJcblxyXG4gIGdldExpbmsgKGZpbGVOYW1lKSB7XHJcbiAgICBpZiAoIUV4dC5pc0ZpcmVmb3goKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzdXBlci5nZXRMaW5rKGZpbGVOYW1lKSArICc/JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpKVxyXG5cclxuICAgIC8vIE5vdGU6IEV4Y2VwdCBmb3IgQ2hyb21lLCB0aGUgZmlsZXN5c3RlbSBBUEkgd2UgdXNlIGlzIGEgcG9seWZpbGwgZnJvbSBpZGIuZmlsZXN5c3RlbS5qc1xyXG4gICAgLy8gaWRiLmZpbGVzeXN0ZW0uanMgd29ya3MgZ3JlYXQgYnV0IHRoZSBvbmx5IHByb2JsZW0gaXMgdGhhdCB5b3UgY2FuJ3QgdXNlICdmaWxlc3lzdGVtOicgc2NoZW1hIHRvIHJldHJpZXZlIHRoYXQgZmlsZVxyXG4gICAgLy8gc28gaGVyZSwgd2UgaGF2ZSB0byBjb252ZXJ0IHRoZSBmaWxlIHRvIGRhdGEgdXJsXHJcbiAgICByZXR1cm4gZnMucmVhZEZpbGUodGhpcy5fX2ZpbGVQYXRoKGZpbGVOYW1lKSwgJ0RhdGFVUkwnKVxyXG4gIH1cclxufVxyXG5cclxubGV0IG1hblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENTVk1hbiAob3B0cyA9IHt9KSB7XHJcbiAgaWYgKG9wdHMpIHtcclxuICAgIG1hbiA9IG5ldyBDU1ZNYW4ob3B0cylcclxuICB9XHJcblxyXG4gIGlmICghbWFuKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NzdiBtYW5hZ2VyIG5vdCBpbml0aWFsaXplZCcpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gbWFuXHJcbn1cclxuIiwiaW1wb3J0IHsgYW5kIH0gZnJvbSAnLi91dGlscydcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRTdHlsZSA9IGZ1bmN0aW9uIChkb20pIHtcclxuICBpZiAoIWRvbSkgICB0aHJvdyBuZXcgRXJyb3IoJ2dldFN0eWxlOiBkb20gZG9lcyBub3QgZXhpc3QnKVxyXG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGRvbSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNldFN0eWxlID0gZnVuY3Rpb24gKGRvbSwgc3R5bGUpIHtcclxuICBpZiAoIWRvbSkgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFN0eWxlOiBkb20gZG9lcyBub3QgZXhpc3QnKVxyXG5cclxuICBmb3IgKHZhciBpID0gMCwga2V5cyA9IE9iamVjdC5rZXlzKHN0eWxlKSwgbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgZG9tLnN0eWxlW2tleXNbaV1dID0gc3R5bGVba2V5c1tpXV1cclxuICB9XHJcblxyXG4gIHJldHVybiBkb21cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHBpeGVsID0gZnVuY3Rpb24gKG51bSkge1xyXG4gIGlmICgobnVtICsgJycpLmluZGV4T2YoJ3B4JykgIT09IC0xKSAgcmV0dXJuIG51bVxyXG4gIHJldHVybiAobnVtIHx8IDApICsgJ3B4J1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYmluZERyYWcgPSAoeyBvbkRyYWdTdGFydCwgb25EcmFnRW5kLCBvbkRyYWcsICRlbCwgZG9jID0gZG9jdW1lbnQgfSkgPT4ge1xyXG4gIGxldCBpc0RyYWdnaW5nID0gZmFsc2VcclxuICBsZXQgc3RhcnRQb3MgPSB7IHg6IDAsIHk6IDAgfVxyXG5cclxuICBjb25zdCBvbk1vdXNlRG93biA9IChlKSA9PiB7XHJcbiAgICBpc0RyYWdnaW5nID0gdHJ1ZVxyXG4gICAgc3RhcnRQb3MgPSB7IHg6IGUuc2NyZWVuWCwgeTogZS5zY3JlZW5ZIH1cclxuICAgIG9uRHJhZ1N0YXJ0KGUpXHJcbiAgfVxyXG4gIGNvbnN0IG9uTW91c2VVcCA9IChlKSA9PiB7XHJcbiAgICBpZiAoIWlzRHJhZ2dpbmcpICByZXR1cm5cclxuICAgIGlzRHJhZ2dpbmcgPSBmYWxzZVxyXG4gICAgY29uc3QgZHggPSBlLnNjcmVlblggLSBzdGFydFBvcy54XHJcbiAgICBjb25zdCBkeSA9IGUuc2NyZWVuWSAtIHN0YXJ0UG9zLnlcclxuICAgIG9uRHJhZ0VuZChlLCB7IGR4LCBkeSB9KVxyXG4gIH1cclxuICBjb25zdCBvbk1vdXNlTW92ZSA9IChlKSA9PiB7XHJcbiAgICBpZiAoIWlzRHJhZ2dpbmcpICByZXR1cm5cclxuXHJcbiAgICBjb25zdCBkeCA9IGUuc2NyZWVuWCAtIHN0YXJ0UG9zLnhcclxuICAgIGNvbnN0IGR5ID0gZS5zY3JlZW5ZIC0gc3RhcnRQb3MueVxyXG4gICAgb25EcmFnKGUsIHsgZHgsIGR5IH0pXHJcblxyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXHJcbiAgfVxyXG4gIGNvbnN0IG9uQ2xpY2sgPSAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXHJcbiAgfVxyXG5cclxuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrLCB0cnVlKVxyXG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSwgdHJ1ZSlcclxuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uTW91c2VVcCwgdHJ1ZSlcclxuICAkZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Nb3VzZURvd24sIHRydWUpXHJcblxyXG4gIHJldHVybiAoKSA9PiB7XHJcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrLCB0cnVlKVxyXG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCB0cnVlKVxyXG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNlVXAsIHRydWUpXHJcbiAgICAkZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Nb3VzZURvd24sIHRydWUpXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYmluZENvbnRlbnRFZGl0YWJsZUNoYW5nZSA9ICh7IG9uQ2hhbmdlLCBkb2MgPSBkb2N1bWVudCB9KSA9PiB7XHJcbiAgbGV0IGN1cnJlbnRDRSAgID0gbnVsbFxyXG4gIGxldCBvbGRDb250ZW50ICA9IG51bGxcclxuXHJcbiAgY29uc3Qgb25Gb2N1cyA9IChlKSA9PiB7XHJcbiAgICBpZiAoZS50YXJnZXQuY29udGVudEVkaXRhYmxlICE9PSAndHJ1ZScpICByZXR1cm5cclxuICAgIGN1cnJlbnRDRSAgID0gZS50YXJnZXRcclxuICAgIG9sZENvbnRlbnQgID0gY3VycmVudENFLmlubmVySFRNTFxyXG4gIH1cclxuICBjb25zdCBvbkJsdXIgPSAoZSkgPT4ge1xyXG4gICAgaWYgKGUudGFyZ2V0ICE9PSBjdXJyZW50Q0UpIHtcclxuICAgICAgLy8gRG8gbm90aGluZ1xyXG4gICAgfSBlbHNlIGlmIChjdXJyZW50Q0UuaW5uZXJIVE1MICE9PSBvbGRDb250ZW50KSB7XHJcbiAgICAgIG9uQ2hhbmdlKGUpXHJcbiAgICB9XHJcblxyXG4gICAgY3VycmVudENFICAgPSBudWxsXHJcbiAgICBvbGRDb250ZW50ICA9IG51bGxcclxuICB9XHJcblxyXG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIG9uRm9jdXMsIHRydWUpXHJcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbkJsdXIsIHRydWUpXHJcblxyXG4gIHJldHVybiAoKSA9PiB7XHJcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBvbkZvY3VzLCB0cnVlKVxyXG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbkJsdXIsIHRydWUpXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2Nyb2xsTGVmdCA9IGZ1bmN0aW9uIChkb2N1bWVudCkge1xyXG4gIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdFxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2Nyb2xsVG9wID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XHJcbiAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRvbVRleHQgPSAoJGRvbSkgPT4ge1xyXG4gIGNvbnN0IGl0ICA9ICRkb20uaW5uZXJUZXh0ICYmICRkb20uaW5uZXJUZXh0LnRyaW0oKVxyXG4gIGNvbnN0IHRjICA9ICRkb20udGV4dENvbnRlbnRcclxuICBjb25zdCBwb3MgPSB0Yy50b1VwcGVyQ2FzZSgpLmluZGV4T2YoaXQudG9VcHBlckNhc2UoKSlcclxuXHJcbiAgcmV0dXJuIHRjLnN1YnN0cihwb3MsIGl0Lmxlbmd0aClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGlzVmlzaWJsZSA9IGZ1bmN0aW9uIChlbCkge1xyXG4gIGlmIChlbCA9PT0gd2luZG93LmRvY3VtZW50KSByZXR1cm4gdHJ1ZVxyXG4gIGlmICghZWwpICByZXR1cm4gdHJ1ZVxyXG5cclxuICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKVxyXG4gIGlmIChzdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgfHwgc3R5bGUub3BhY2l0eSA9PT0gJzAnIHx8IHN0eWxlLnZpc2liaWxpdHkgPT09ICdoaWRkZW4nKSAgcmV0dXJuIGZhbHNlXHJcblxyXG4gIHJldHVybiBpc1Zpc2libGUoZWwucGFyZW50Tm9kZSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNzc1NlbGVjdG9yID0gZnVuY3Rpb24gKGRvbSkge1xyXG4gIGlmIChkb20ubm9kZVR5cGUgIT09IDEpIHJldHVybiAnJ1xyXG4gIGlmIChkb20udGFnTmFtZSA9PT0gJ0JPRFknKSByZXR1cm4gJ2JvZHknXHJcbiAgaWYgKGRvbS5pZCkgcmV0dXJuICcjJyArIGRvbS5pZFxyXG5cclxuICB2YXIgY2xhc3NlcyA9IGRvbS5jbGFzc05hbWUuc3BsaXQoL1xccysvZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbSAmJiBpdGVtLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gIHZhciBjaGlsZHJlbiA9IEFycmF5LmZyb20oZG9tLnBhcmVudE5vZGUuY2hpbGROb2RlcykuZmlsdGVyKGZ1bmN0aW9uICgkZWwpIHtcclxuICAgIHJldHVybiAkZWwubm9kZVR5cGUgPT09IDFcclxuICB9KVxyXG5cclxuICB2YXIgc2FtZVRhZyA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoJGVsKSB7XHJcbiAgICByZXR1cm4gJGVsLnRhZ05hbWUgPT09IGRvbS50YWdOYW1lXHJcbiAgfSlcclxuXHJcbiAgdmFyIHNhbWVDbGFzcyA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoJGVsKSB7XHJcbiAgICB2YXIgY3MgPSAkZWwuY2xhc3NOYW1lLnNwbGl0KC9cXHMrL2cpXHJcblxyXG4gICAgcmV0dXJuIGFuZCguLi5jbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xyXG4gICAgICByZXR1cm4gY3MuaW5kZXhPZihjKSAhPT0gLTFcclxuICAgIH0pKVxyXG4gIH0pXHJcblxyXG4gIHZhciBleHRyYSA9ICcnXHJcblxyXG4gIGlmIChzYW1lVGFnLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgZXh0cmEgPSAnJ1xyXG4gIH0gZWxzZSBpZiAoY2xhc3Nlcy5sZW5ndGggJiYgc2FtZUNsYXNzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgZXh0cmEgPSAnLicgKyBjbGFzc2VzLmpvaW4oJy4nKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBleHRyYSA9ICc6bnRoLWNoaWxkKCcgKyAoMSArIGNoaWxkcmVuLmZpbmRJbmRleChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbSA9PT0gZG9tOyB9KSkgKyAnKSdcclxuICB9XHJcblxyXG4gIHZhciBtZSA9IGRvbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgKyBleHRyYVxyXG5cclxuICAvLyBOb3RlOiBicm93c2VyIHdpbGwgYWRkIGFuIGV4dHJhICd0Ym9keScgd2hlbiB0ciBkaXJlY3RseSBpbiB0YWJsZSwgd2hpY2ggd2lsbCBjYXVzZSBhbiB3cm9uZyBzZWxlY3RvcixcclxuICAvLyBzbyB0aGUgaGFjayBpcyB0byByZW1vdmUgYWxsIHRib2R5IGhlcmVcclxuICB2YXIgcmV0ID0gY3NzU2VsZWN0b3IoZG9tLnBhcmVudE5vZGUpICsgJyA+ICcgKyBtZVxyXG4gIHJldHVybiByZXRcclxuICAvLyByZXR1cm4gcmV0LnJlcGxhY2UoL1xccyo+XFxzKnRib2R5XFxzKj4/L2csICcgJylcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGlzUG9zaXRpb25GaXhlZCA9ICgkZG9tKSA9PiB7XHJcbiAgaWYgKCEkZG9tIHx8ICRkb20gPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCAkZG9tID09PSBkb2N1bWVudC5ib2R5KSByZXR1cm4gZmFsc2VcclxuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZSgkZG9tKVsncG9zaXRpb24nXSA9PT0gJ2ZpeGVkJyB8fCBpc1Bvc2l0aW9uRml4ZWQoJGRvbS5wYXJlbnROb2RlKVxyXG59XHJcbiIsIlxyXG5mdW5jdGlvbiByZW1vdmVGcm9tQXJyYXkoYXJyYXksIGl0ZW0pIHtcclxuICB2YXIgaW5kZXggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xyXG5cclxuICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICB9XHJcbn1cclxuXHJcblxyXG52YXIgRGF0YVRyYW5zZmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5kYXRhQnlGb3JtYXQgPSB7fTtcclxuXHJcbiAgdGhpcy5kcm9wRWZmZWN0ID0gJ25vbmUnO1xyXG4gIHRoaXMuZWZmZWN0QWxsb3dlZCA9ICdhbGwnO1xyXG4gIHRoaXMuZmlsZXMgPSBbXTtcclxuICB0aGlzLnR5cGVzID0gW107XHJcbn07XHJcblxyXG5EYXRhVHJhbnNmZXIucHJvdG90eXBlLmNsZWFyRGF0YSA9IGZ1bmN0aW9uKGRhdGFGb3JtYXQpIHtcclxuICBpZiAoZGF0YUZvcm1hdCkge1xyXG4gICAgZGVsZXRlIHRoaXMuZGF0YUJ5Rm9ybWF0W2RhdGFGb3JtYXRdO1xyXG4gICAgcmVtb3ZlRnJvbUFycmF5KHRoaXMudHlwZXMsIGRhdGFGb3JtYXQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLmRhdGFCeUZvcm1hdCA9IHt9O1xyXG4gICAgdGhpcy50eXBlcyA9IFtdO1xyXG4gIH1cclxufTtcclxuXHJcbkRhdGFUcmFuc2Zlci5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uKGRhdGFGb3JtYXQpIHtcclxuICByZXR1cm4gdGhpcy5kYXRhQnlGb3JtYXRbZGF0YUZvcm1hdF07XHJcbn07XHJcblxyXG5EYXRhVHJhbnNmZXIucHJvdG90eXBlLnNldERhdGEgPSBmdW5jdGlvbihkYXRhRm9ybWF0LCBkYXRhKSB7XHJcbiAgdGhpcy5kYXRhQnlGb3JtYXRbZGF0YUZvcm1hdF0gPSBkYXRhO1xyXG5cclxuICBpZiAodGhpcy50eXBlcy5pbmRleE9mKGRhdGFGb3JtYXQpIDwgMCkge1xyXG4gICAgdGhpcy50eXBlcy5wdXNoKGRhdGFGb3JtYXQpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5EYXRhVHJhbnNmZXIucHJvdG90eXBlLnNldERyYWdJbWFnZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGRvbid0IGRvIGFueXRoaW5nICh0aGUgc3R1YiBqdXN0IG1ha2VzIHN1cmUgdGhlcmUgaXMgbm8gZXJyb3IgdGhyb3duIGlmIHNvbWVvbmUgdHJpZXMgdG8gY2FsbCB0aGUgbWV0aG9kKVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKCkge1xyXG4gIC8vIE5vdGU6IGluIEZpcmVmb3gsIHdpbmRvdy5EYXRhVHJhbnNmZXIgZXhpc3RzLCBidXQgaXQgY2FuJ3QgYmUgdXNlZCBhcyBjb25zdHJ1Y3RvclxyXG4gIC8vIEluIEZpcmVmb3gsIGBuZXcgd2luZG93LkRhdGFUcmFuc2ZlcigpYCB0aHJvd3MgZXJyb3JzIGxpa2UgJ1R5cGVFcnJvcjogSWxsZWdhbCBjb25zdHJ1Y3RvcidcclxuICBpZiAod2luZG93LkRhdGFUcmFuc2Zlcikge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdG1wID0gbmV3IHdpbmRvdy5EYXRhVHJhbnNmZXIoKVxyXG4gICAgICByZXR1cm4gd2luZG93LkRhdGFUcmFuc2ZlclxyXG4gICAgfSBjYXRjaCAoZSkge31cclxuICB9XHJcblxyXG4gIHJldHVybiBEYXRhVHJhbnNmZXJcclxufSkoKVxyXG4iLCJcclxudmFyIGV2ZW50RmFjdG9yeSA9IHJlcXVpcmUoJy4vZXZlbnRGYWN0b3J5JylcclxuICAsIERhdGFUcmFuc2ZlciA9IHJlcXVpcmUoJy4vRGF0YVRyYW5zZmVyJyk7XHJcblxyXG5cclxuZnVuY3Rpb24gX25vb3AoKSB7fVxyXG5cclxuXHJcbmZ1bmN0aW9uIHBhcnNlUGFyYW1zKHRhcmdldEVsZW1lbnQsIGV2ZW50UHJvcGVydGllcywgY29uZmlnQ2FsbGJhY2spIHtcclxuICBpZiAodHlwZW9mIGV2ZW50UHJvcGVydGllcyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgY29uZmlnQ2FsbGJhY2sgPSBldmVudFByb3BlcnRpZXM7XHJcbiAgICBldmVudFByb3BlcnRpZXMgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgaWYgKCF0YXJnZXRFbGVtZW50IHx8IHR5cGVvZiB0YXJnZXRFbGVtZW50ICE9PSAnb2JqZWN0Jykge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBmaXJzdCBwYXJhbWV0ZXIgdG8gYmUgYSB0YXJnZXRFbGVtZW50LiBJbnN0ZWFkIGdvdDogJyArIHRhcmdldEVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHRhcmdldEVsZW1lbnQ6IHRhcmdldEVsZW1lbnQsXHJcbiAgICBldmVudFByb3BlcnRpZXM6IGV2ZW50UHJvcGVydGllcyB8fCB7fSxcclxuICAgIGNvbmZpZ0NhbGxiYWNrOiBjb25maWdDYWxsYmFjayB8fCBfbm9vcFxyXG4gIH07XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjdXN0b21pemVFdmVudChldmVudCwgY29uZmlnQ2FsbGJhY2ssIGlzUHJpbWFyeUV2ZW50KSB7XHJcbiAgaWYgKGNvbmZpZ0NhbGxiYWNrKSB7XHJcbiAgICAvLyBjYWxsIGNvbmZpZ0NhbGxiYWNrIG9ubHkgZm9yIHRoZSBwcmltYXJ5IGV2ZW50IGlmIHRoZSBjYWxsYmFjayB0YWtlcyBsZXNzIHRoYW4gdHdvIGFyZ3VtZW50c1xyXG4gICAgaWYgKGNvbmZpZ0NhbGxiYWNrLmxlbmd0aCA8IDIpIHtcclxuICAgICAgaWYgKGlzUHJpbWFyeUV2ZW50KSB7IGNvbmZpZ0NhbGxiYWNrKGV2ZW50KTsgfVxyXG4gICAgfVxyXG4gICAgLy8gY2FsbCBjb25maWdDYWxsYmFjayBmb3IgZWFjaCBldmVudCBpZiB0aGUgY2FsbGJhY2sgdGFrZXMgdHdvIGFyZ3VtZW50c1xyXG4gICAgZWxzZSB7XHJcbiAgICAgIGNvbmZpZ0NhbGxiYWNrKGV2ZW50LCBldmVudC50eXBlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjcmVhdGVBbmREaXNwYXRjaEV2ZW50cyh0YXJnZXRFbGVtZW50LCBldmVudE5hbWVzLCBwcmltYXJ5RXZlbnROYW1lLCBkYXRhVHJhbnNmZXIsIGV2ZW50UHJvcGVydGllcywgY29uZmlnQ2FsbGJhY2spIHtcclxuICBldmVudE5hbWVzLmZvckVhY2goZnVuY3Rpb24oZXZlbnROYW1lKSB7XHJcbiAgICB2YXIgZXZlbnQgPSBldmVudEZhY3RvcnkuY3JlYXRlRXZlbnQoZXZlbnROYW1lLCBldmVudFByb3BlcnRpZXMsIGRhdGFUcmFuc2Zlcik7XHJcbiAgICB2YXIgaXNQcmltYXJ5RXZlbnQgPSBldmVudE5hbWUgPT09IHByaW1hcnlFdmVudE5hbWU7XHJcblxyXG4gICAgY3VzdG9taXplRXZlbnQoZXZlbnQsIGNvbmZpZ0NhbGxiYWNrLCBpc1ByaW1hcnlFdmVudCk7XHJcblxyXG4gICAgdGFyZ2V0RWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxuICB9KTtcclxufVxyXG5cclxuXHJcbnZhciBEcmFnRHJvcEFjdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMubGFzdERyYWdTb3VyY2UgPSBudWxsO1xyXG4gIHRoaXMubGFzdERhdGFUcmFuc2ZlciA9IG51bGw7XHJcbiAgdGhpcy5wZW5kaW5nQWN0aW9uc1F1ZXVlID0gW107XHJcbn07XHJcblxyXG5cclxuRHJhZ0Ryb3BBY3Rpb24ucHJvdG90eXBlLl9xdWV1ZSA9IGZ1bmN0aW9uKGZuKSB7XHJcbiAgdGhpcy5wZW5kaW5nQWN0aW9uc1F1ZXVlLnB1c2goZm4pO1xyXG5cclxuICBpZiAodGhpcy5wZW5kaW5nQWN0aW9uc1F1ZXVlLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgdGhpcy5fcXVldWVFeGVjdXRlTmV4dCgpO1xyXG4gIH1cclxufTtcclxuXHJcbkRyYWdEcm9wQWN0aW9uLnByb3RvdHlwZS5fcXVldWVFeGVjdXRlTmV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICh0aGlzLnBlbmRpbmdBY3Rpb25zUXVldWUubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxyXG5cclxuICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgdmFyIGZpcnN0UGVuZGluZ0FjdGlvbiA9IHRoaXMucGVuZGluZ0FjdGlvbnNRdWV1ZVswXTtcclxuXHJcbiAgdmFyIGRvbmVDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgc2VsZi5wZW5kaW5nQWN0aW9uc1F1ZXVlLnNoaWZ0KCk7XHJcbiAgICBzZWxmLl9xdWV1ZUV4ZWN1dGVOZXh0KCk7XHJcbiAgfTtcclxuXHJcbiAgaWYgKGZpcnN0UGVuZGluZ0FjdGlvbi5sZW5ndGggPT09IDApIHtcclxuICAgIGZpcnN0UGVuZGluZ0FjdGlvbi5jYWxsKHRoaXMpO1xyXG4gICAgZG9uZUNhbGxiYWNrKCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGZpcnN0UGVuZGluZ0FjdGlvbi5jYWxsKHRoaXMsIGRvbmVDYWxsYmFjayk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbkRyYWdEcm9wQWN0aW9uLnByb3RvdHlwZS5kcmFnU3RhcnQgPSBmdW5jdGlvbih0YXJnZXRFbGVtZW50LCBldmVudFByb3BlcnRpZXMsIGNvbmZpZ0NhbGxiYWNrKSB7XHJcbiAgdmFyIHBhcmFtcyA9IHBhcnNlUGFyYW1zKHRhcmdldEVsZW1lbnQsIGV2ZW50UHJvcGVydGllcywgY29uZmlnQ2FsbGJhY2spXHJcbiAgICAsIGV2ZW50cyA9IFsnbW91c2Vkb3duJywgJ2RyYWdzdGFydCcsICdkcmFnJ11cclxuICAgICwgZGF0YVRyYW5zZmVyID0gbmV3IERhdGFUcmFuc2ZlcigpO1xyXG5cclxuICB0aGlzLl9xdWV1ZShmdW5jdGlvbigpIHtcclxuICAgIGNyZWF0ZUFuZERpc3BhdGNoRXZlbnRzKHBhcmFtcy50YXJnZXRFbGVtZW50LCBldmVudHMsICdkcmFnJywgZGF0YVRyYW5zZmVyLCBwYXJhbXMuZXZlbnRQcm9wZXJ0aWVzLCBwYXJhbXMuY29uZmlnQ2FsbGJhY2spO1xyXG5cclxuICAgIHRoaXMubGFzdERyYWdTb3VyY2UgPSB0YXJnZXRFbGVtZW50O1xyXG4gICAgdGhpcy5sYXN0RGF0YVRyYW5zZmVyID0gZGF0YVRyYW5zZmVyO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcblxyXG5EcmFnRHJvcEFjdGlvbi5wcm90b3R5cGUuZHJhZ0VudGVyID0gZnVuY3Rpb24ob3ZlckVsZW1lbnQsIGV2ZW50UHJvcGVydGllcywgY29uZmlnQ2FsbGJhY2spIHtcclxuICB2YXIgcGFyYW1zID0gcGFyc2VQYXJhbXMob3ZlckVsZW1lbnQsIGV2ZW50UHJvcGVydGllcywgY29uZmlnQ2FsbGJhY2spXHJcbiAgICAsIGV2ZW50cyA9IFsnbW91c2Vtb3ZlJywgJ21vdXNlb3ZlcicsICdkcmFnZW50ZXInXTtcclxuXHJcbiAgdGhpcy5fcXVldWUoZnVuY3Rpb24oKSB7XHJcbiAgICBjcmVhdGVBbmREaXNwYXRjaEV2ZW50cyhwYXJhbXMudGFyZ2V0RWxlbWVudCwgZXZlbnRzLCAnZHJhZ2VudGVyJywgdGhpcy5sYXN0RGF0YVRyYW5zZmVyLCBwYXJhbXMuZXZlbnRQcm9wZXJ0aWVzLCBwYXJhbXMuY29uZmlnQ2FsbGJhY2spO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbkRyYWdEcm9wQWN0aW9uLnByb3RvdHlwZS5kcmFnT3ZlciA9IGZ1bmN0aW9uKG92ZXJFbGVtZW50LCBldmVudFByb3BlcnRpZXMsIGNvbmZpZ0NhbGxiYWNrKSB7XHJcbiAgdmFyIHBhcmFtcyA9IHBhcnNlUGFyYW1zKG92ZXJFbGVtZW50LCBldmVudFByb3BlcnRpZXMsIGNvbmZpZ0NhbGxiYWNrKVxyXG4gICAgLCBldmVudHMgPSBbJ21vdXNlbW92ZScsICdtb3VzZW92ZXInLCAnZHJhZ292ZXInXTtcclxuXHJcbiAgdGhpcy5fcXVldWUoZnVuY3Rpb24oKSB7XHJcbiAgICBjcmVhdGVBbmREaXNwYXRjaEV2ZW50cyhwYXJhbXMudGFyZ2V0RWxlbWVudCwgZXZlbnRzLCAnZHJhZycsIHRoaXMubGFzdERhdGFUcmFuc2ZlciwgcGFyYW1zLmV2ZW50UHJvcGVydGllcywgcGFyYW1zLmNvbmZpZ0NhbGxiYWNrKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5EcmFnRHJvcEFjdGlvbi5wcm90b3R5cGUuZHJhZ0xlYXZlID0gZnVuY3Rpb24ob3ZlckVsZW1lbnQsIGV2ZW50UHJvcGVydGllcywgY29uZmlnQ2FsbGJhY2spIHtcclxuICB2YXIgcGFyYW1zID0gcGFyc2VQYXJhbXMob3ZlckVsZW1lbnQsIGV2ZW50UHJvcGVydGllcywgY29uZmlnQ2FsbGJhY2spXHJcbiAgICAsIGV2ZW50cyA9IFsnbW91c2Vtb3ZlJywgJ21vdXNlb3ZlcicsICdkcmFnbGVhdmUnXTtcclxuXHJcbiAgdGhpcy5fcXVldWUoZnVuY3Rpb24oKSB7XHJcbiAgICBjcmVhdGVBbmREaXNwYXRjaEV2ZW50cyhwYXJhbXMudGFyZ2V0RWxlbWVudCwgZXZlbnRzLCAnZHJhZ2xlYXZlJywgdGhpcy5sYXN0RGF0YVRyYW5zZmVyLCBwYXJhbXMuZXZlbnRQcm9wZXJ0aWVzLCBwYXJhbXMuY29uZmlnQ2FsbGJhY2spO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbkRyYWdEcm9wQWN0aW9uLnByb3RvdHlwZS5kcm9wID0gZnVuY3Rpb24odGFyZ2V0RWxlbWVudCwgZXZlbnRQcm9wZXJ0aWVzLCBjb25maWdDYWxsYmFjaykge1xyXG4gIHZhciBwYXJhbXMgPSBwYXJzZVBhcmFtcyh0YXJnZXRFbGVtZW50LCBldmVudFByb3BlcnRpZXMsIGNvbmZpZ0NhbGxiYWNrKTtcclxuICB2YXIgZXZlbnRzT25Ecm9wVGFyZ2V0ID0gWydtb3VzZW1vdmUnLCAnbW91c2V1cCcsICdkcm9wJ107XHJcbiAgdmFyIGV2ZW50c09uRHJhZ1NvdXJjZSA9IFsnZHJhZ2VuZCddO1xyXG5cclxuICB0aGlzLl9xdWV1ZShmdW5jdGlvbigpIHtcclxuICAgIGNyZWF0ZUFuZERpc3BhdGNoRXZlbnRzKHBhcmFtcy50YXJnZXRFbGVtZW50LCBldmVudHNPbkRyb3BUYXJnZXQsICdkcm9wJywgdGhpcy5sYXN0RGF0YVRyYW5zZmVyLCBwYXJhbXMuZXZlbnRQcm9wZXJ0aWVzLCBwYXJhbXMuY29uZmlnQ2FsbGJhY2spO1xyXG5cclxuICAgIGlmICh0aGlzLmxhc3REcmFnU291cmNlKSB7XHJcbiAgICAgIC8vIHRyaWdnZXIgZHJhZ2VuZCBldmVudCBvbiBsYXN0IGRyYWcgc291cmNlIGVsZW1lbnRcclxuICAgICAgY3JlYXRlQW5kRGlzcGF0Y2hFdmVudHModGhpcy5sYXN0RHJhZ1NvdXJjZSwgZXZlbnRzT25EcmFnU291cmNlLCAnZHJvcCcsIHRoaXMubGFzdERhdGFUcmFuc2ZlciwgcGFyYW1zLmV2ZW50UHJvcGVydGllcywgcGFyYW1zLmNvbmZpZ0NhbGxiYWNrKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5EcmFnRHJvcEFjdGlvbi5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgdGhpcy5fcXVldWUoZnVuY3Rpb24oKSB7IGNhbGxiYWNrLmNhbGwodGhpcyk7IH0pOyAgICAvLyBtYWtlIHN1cmUgX3F1ZXVlKCkgaXMgZ2l2ZW4gYSBjYWxsYmFjayB3aXRoIG5vIGFyZ3VtZW50c1xyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbkRyYWdEcm9wQWN0aW9uLnByb3RvdHlwZS5kZWxheSA9IGZ1bmN0aW9uKHdhaXRpbmdUaW1lTXMpIHtcclxuICB0aGlzLl9xdWV1ZShmdW5jdGlvbihkb25lKSB7XHJcbiAgICB3aW5kb3cuc2V0VGltZW91dChkb25lLCB3YWl0aW5nVGltZU1zKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IERyYWdEcm9wQWN0aW9uO1xyXG4iLCJcclxudmFyIERhdGFUcmFuc2ZlciA9IHJlcXVpcmUoJy4vRGF0YVRyYW5zZmVyJyk7XHJcblxyXG52YXIgZGF0YVRyYW5zZmVyRXZlbnRzID0gWydkcmFnJywgJ2RyYWdzdGFydCcsICdkcmFnZW50ZXInLCAnZHJhZ292ZXInLCAnZHJhZ2VuZCcsICdkcm9wJywgJ2RyYWdsZWF2ZSddO1xyXG5cclxuXHJcbmZ1bmN0aW9uIG1lcmdlSW50byhkZXN0T2JqLCBzcmNPYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gc3JjT2JqKSB7XHJcbiAgICBpZiAoIXNyY09iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7IGNvbnRpbnVlOyB9ICAgLy8gaWdub3JlIGluaGVyaXRlZCBwcm9wZXJ0aWVzXHJcblxyXG4gICAgZGVzdE9ialtrZXldID0gc3JjT2JqW2tleV07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZGVzdE9iajtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNGaXJlZm94ICgpIHtcclxuICByZXR1cm4gL0ZpcmVmb3gvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZU1vZGVybkV2ZW50KGV2ZW50TmFtZSwgZXZlbnRUeXBlLCBldmVudFByb3BlcnRpZXMpIHtcclxuICAvLyBpZiAoZXZlbnRUeXBlID09PSAnRHJhZ0V2ZW50JykgeyBldmVudFR5cGUgPSAnQ3VzdG9tRXZlbnQnOyB9ICAgICAvLyBGaXJlZm94IGZpeCAoc2luY2UgRkYgZG9lcyBub3QgYWxsb3cgdXMgdG8gb3ZlcnJpZGUgZGF0YVRyYW5zZmVyKVxyXG5cclxuICB2YXIgY29uc3RydWN0b3IgPSB3aW5kb3dbZXZlbnRUeXBlXTtcclxuICB2YXIgb3B0aW9ucyA9IHsgdmlldzogd2luZG93LCBidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiB0cnVlIH07XHJcblxyXG4gIG1lcmdlSW50byhvcHRpb25zLCBldmVudFByb3BlcnRpZXMpO1xyXG5cclxuICB2YXIgZXZlbnQgPSBuZXcgY29uc3RydWN0b3IoZXZlbnROYW1lLCBvcHRpb25zKTtcclxuXHJcbiAgbWVyZ2VJbnRvKGV2ZW50LCBldmVudFByb3BlcnRpZXMpO1xyXG5cclxuICByZXR1cm4gZXZlbnQ7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMZWdhY3lFdmVudChldmVudE5hbWUsIGV2ZW50VHlwZSwgZXZlbnRQcm9wZXJ0aWVzKSB7XHJcbiAgdmFyIGV2ZW50O1xyXG5cclxuICBzd2l0Y2ggKGV2ZW50VHlwZSkge1xyXG4gICAgY2FzZSAnTW91c2VFdmVudCc6XHJcbiAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnQnKTtcclxuICAgICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50TmFtZSwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XHJcbiAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudChldmVudE5hbWUsIHRydWUsIHRydWUsIDApO1xyXG4gIH1cclxuXHJcbiAgLy8gY29weSBldmVudFByb3BlcnRpZXMgaW50byBldmVudFxyXG4gIGlmIChldmVudFByb3BlcnRpZXMpIHtcclxuICAgIG1lcmdlSW50byhldmVudCwgZXZlbnRQcm9wZXJ0aWVzKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBldmVudDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50KGV2ZW50TmFtZSwgZXZlbnRUeXBlLCBldmVudFByb3BlcnRpZXMpIHtcclxuICBpZiAoaXNGaXJlZm94KCkpIHtcclxuICAgIHJldHVybiBjcmVhdGVMZWdhY3lFdmVudChldmVudE5hbWUsIGV2ZW50VHlwZSwgZXZlbnRQcm9wZXJ0aWVzKTtcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gY3JlYXRlTW9kZXJuRXZlbnQoZXZlbnROYW1lLCBldmVudFR5cGUsIGV2ZW50UHJvcGVydGllcyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiBjcmVhdGVMZWdhY3lFdmVudChldmVudE5hbWUsIGV2ZW50VHlwZSwgZXZlbnRQcm9wZXJ0aWVzKTtcclxuICB9XHJcbn1cclxuXHJcblxyXG52YXIgRXZlbnRGYWN0b3J5ID0ge1xyXG4gIGNyZWF0ZUV2ZW50OiBmdW5jdGlvbihldmVudE5hbWUsIGV2ZW50UHJvcGVydGllcywgZGF0YVRyYW5zZmVyKSB7XHJcbiAgICB2YXIgZXZlbnRUeXBlID0gJ0N1c3RvbUV2ZW50JztcclxuXHJcbiAgICBpZiAoZXZlbnROYW1lLm1hdGNoKC9ebW91c2UvKSkge1xyXG4gICAgICBldmVudFR5cGUgPSAnTW91c2VFdmVudCc7XHJcbiAgICB9IGVsc2UgaWYgKGV2ZW50TmFtZS5tYXRjaCgvXihkcmFnfGRyb3ApLykpIHtcclxuICAgICAgZXZlbnRUeXBlID0gJ0RyYWdFdmVudCdcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0YVRyYW5zZmVyRXZlbnRzLmluZGV4T2YoZXZlbnROYW1lKSA+IC0xKSB7XHJcbiAgICAgIGV2ZW50UHJvcGVydGllcy5kYXRhVHJhbnNmZXIgPSBkYXRhVHJhbnNmZXIgfHwgbmV3IERhdGFUcmFuc2ZlcigpXHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGV2ZW50ID0gY3JlYXRlRXZlbnQoZXZlbnROYW1lLCBldmVudFR5cGUsIGV2ZW50UHJvcGVydGllcyk7XHJcblxyXG4gICAgcmV0dXJuIGV2ZW50O1xyXG4gIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRXZlbnRGYWN0b3J5O1xyXG4iLCJcclxudmFyIERyYWdEcm9wQWN0aW9uID0gcmVxdWlyZSgnLi9EcmFnRHJvcEFjdGlvbicpO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGNhbGwoaW5zdGFuY2UsIG1ldGhvZE5hbWUsIGFyZ3MpIHtcclxuICByZXR1cm4gaW5zdGFuY2VbbWV0aG9kTmFtZV0uYXBwbHkoaW5zdGFuY2UsIGFyZ3MpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0cmlnZ2VyRHJhZ0V2ZW50IChlbGVtZW50LCB0YXJnZXQpIHtcclxuICB2YXIgZ2V0WHBhdGhPZkVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XHJcbiAgICAgICAgICByZXR1cm4gJ251bGwnO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChlbGVtZW50LnBhcmVudEVsZW1lbnQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV0dXJuICcvJyArIGVsZW1lbnQudGFnTmFtZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHNpYmxpbmdFbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuO1xyXG4gICAgICB2YXIgdGFnQ291bnQgPSAwO1xyXG4gICAgICB2YXIgdG90YWxUYWdDb3VudCA9IDA7XHJcbiAgICAgIHZhciBpc0ZvdW5kID0gZmFsc2U7XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpYmxpbmdFbGVtZW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoc2libGluZ0VsZW1lbnRbaV0udGFnTmFtZSA9PSBlbGVtZW50LnRhZ05hbWUgJiYgIWlzRm91bmQpIHtcclxuICAgICAgICAgICAgICB0YWdDb3VudCsrO1xyXG4gICAgICAgICAgICAgIHRvdGFsVGFnQ291bnQrKztcclxuICAgICAgICAgIH0gZWxzZSBpZiAoc2libGluZ0VsZW1lbnRbaV0udGFnTmFtZSA9PSBlbGVtZW50LnRhZ05hbWUpIHtcclxuICAgICAgICAgICAgICB0b3RhbFRhZ0NvdW50Kys7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoc2libGluZ0VsZW1lbnRbaV0gPT0gZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgIGlzRm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodG90YWxUYWdDb3VudCA+IDEpIHtcclxuICAgICAgICAgIHJldHVybiBnZXRYcGF0aE9mRWxlbWVudChlbGVtZW50LnBhcmVudEVsZW1lbnQpICsgXCIvXCIgKyBlbGVtZW50LnRhZ05hbWUgKyBcIltcIiArIHRhZ0NvdW50ICsgXCJdXCI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBnZXRYcGF0aE9mRWxlbWVudChlbGVtZW50LnBhcmVudEVsZW1lbnQpICsgXCIvXCIgKyBlbGVtZW50LnRhZ05hbWU7XHJcbiAgfTtcclxuICB2YXIgc2NyaXB0ID0gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcclxuICAgICAgZnVuY3Rpb24gc2ltdWxhdGVEcmFnRHJvcChzb3VyY2VOb2RlLCBkZXN0aW5hdGlvbk5vZGUpe1xcXHJcbiAgICAgIGZ1bmN0aW9uIGNyZWF0ZUN1c3RvbUV2ZW50KHR5cGUpIHsgICAgICAgICAgICAgICAgICAgICBcXFxyXG4gICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdDdXN0b21FdmVudCcpOyAgICAgICAgXFxcclxuICAgICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudCh0eXBlLCB0cnVlLCB0cnVlLCBudWxsKTsgICAgIFxcXHJcbiAgICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIgPSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxyXG4gICAgICAgICAgICAgIGRhdGE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcclxuICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXHJcbiAgICAgICAgICAgICAgc2V0RGF0YTogZnVuY3Rpb24odHlwZSwgdmFsKSB7ICAgICAgICAgICAgICAgICBcXFxyXG4gICAgICAgICAgICAgICAgICB0aGlzLmRhdGFbdHlwZV0gPSB2YWw7ICAgICAgICAgICAgICAgICAgICAgXFxcclxuICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXHJcbiAgICAgICAgICAgICAgZ2V0RGF0YTogZnVuY3Rpb24odHlwZSkgeyAgICAgICAgICAgICAgICAgICAgICBcXFxyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhW3R5cGVdOyAgICAgICAgICAgICAgICAgICAgXFxcclxuICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXHJcbiAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxyXG4gICAgICAgICAgcmV0dXJuIGV2ZW50OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcclxuICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXHJcbiAgICAgIGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgZXZlbnQpIHsgICAgICAgICAgICBcXFxyXG4gICAgICAgICAgaWYgKG5vZGUuZGlzcGF0Y2hFdmVudCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcclxuICAgICAgICAgICAgICByZXR1cm4gbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTsgICAgICAgICAgICAgIFxcXHJcbiAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxyXG4gICAgICAgICAgaWYgKG5vZGUuZmlyZUV2ZW50KSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcclxuICAgICAgICAgICAgICByZXR1cm4gbm9kZS5maXJlRXZlbnQoJ29uJyArIHR5cGUsIGV2ZW50KTsgICAgIFxcXHJcbiAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxyXG4gICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcclxuICAgICAgdmFyIGV2ZW50ID0gY3JlYXRlQ3VzdG9tRXZlbnQoJ2RyYWdzdGFydCcpOyAgICAgICAgICAgIFxcXHJcbiAgICAgIGRpc3BhdGNoRXZlbnQoc291cmNlTm9kZSwgJ2RyYWdzdGFydCcsIGV2ZW50KTsgICAgICAgICBcXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcclxuICAgICAgdmFyIGRyb3BFdmVudCA9IGNyZWF0ZUN1c3RvbUV2ZW50KCdkcm9wJyk7ICAgICAgICAgICAgIFxcXHJcbiAgICAgIGRyb3BFdmVudC5kYXRhVHJhbnNmZXIgPSBldmVudC5kYXRhVHJhbnNmZXI7ICAgICAgICAgICBcXFxyXG4gICAgICBkaXNwYXRjaEV2ZW50KGRlc3RpbmF0aW9uTm9kZSwgJ2Ryb3AnLCBkcm9wRXZlbnQpOyAgICAgXFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXHJcbiAgICAgIHZhciBkcmFnRW5kRXZlbnQgPSBjcmVhdGVDdXN0b21FdmVudCgnZHJhZ2VuZCcpOyAgICAgICBcXFxyXG4gICAgICBkcmFnRW5kRXZlbnQuZGF0YVRyYW5zZmVyID0gZXZlbnQuZGF0YVRyYW5zZmVyOyAgICAgICAgXFxcclxuICAgICAgZGlzcGF0Y2hFdmVudChzb3VyY2VOb2RlLCAnZHJhZ2VuZCcsIGRyYWdFbmRFdmVudCk7ICAgIFxcXHJcbiAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxyXG4gIHNpbXVsYXRlRHJhZ0Ryb3AoZG9jdW1lbnQuZXZhbHVhdGUoJ1wiICsgZ2V0WHBhdGhPZkVsZW1lbnQoZWxlbWVudCkgKyBcIicsIGRvY3VtZW50LCBudWxsLCBYUGF0aFJlc3VsdC5GSVJTVF9PUkRFUkVEX05PREVfVFlQRSwgbnVsbCkuc2luZ2xlTm9kZVZhbHVlLCBkb2N1bWVudC5ldmFsdWF0ZSgnXCIgKyBnZXRYcGF0aE9mRWxlbWVudCh0YXJnZXQpICsgXCInLCBkb2N1bWVudCwgbnVsbCwgWFBhdGhSZXN1bHQuRklSU1RfT1JERVJFRF9OT0RFX1RZUEUsIG51bGwpLnNpbmdsZU5vZGVWYWx1ZSk7XFxcclxuICBcIjtcclxuICB2YXIgd2luID0gd2luZG93O1xyXG4gIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7XHJcbiAgdmFyIHNjcmlwdFRhZyA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG4gIHNjcmlwdFRhZy50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcclxuICBzY3JpcHRUYWcudGV4dCA9IHNjcmlwdDtcclxuICBkb2MuYm9keS5hcHBlbmRDaGlsZChzY3JpcHRUYWcpO1xyXG59XHJcblxyXG5cclxudmFyIGRyYWdNb2NrID0ge1xyXG4gIGRyYWdTdGFydDogZnVuY3Rpb24odGFyZ2V0RWxlbWVudCwgZXZlbnRQcm9wZXJ0aWVzLCBjb25maWdDYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIGNhbGwobmV3IERyYWdEcm9wQWN0aW9uKCksICdkcmFnU3RhcnQnLCBhcmd1bWVudHMpO1xyXG4gIH0sXHJcbiAgZHJhZ0VudGVyOiBmdW5jdGlvbih0YXJnZXRFbGVtZW50LCBldmVudFByb3BlcnRpZXMsIGNvbmZpZ0NhbGxiYWNrKSB7XHJcbiAgICByZXR1cm4gY2FsbChuZXcgRHJhZ0Ryb3BBY3Rpb24oKSwgJ2RyYWdFbnRlcicsIGFyZ3VtZW50cyk7XHJcbiAgfSxcclxuICBkcmFnT3ZlcjogZnVuY3Rpb24odGFyZ2V0RWxlbWVudCwgZXZlbnRQcm9wZXJ0aWVzLCBjb25maWdDYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIGNhbGwobmV3IERyYWdEcm9wQWN0aW9uKCksICdkcmFnT3ZlcicsIGFyZ3VtZW50cyk7XHJcbiAgfSxcclxuICBkcmFnTGVhdmU6IGZ1bmN0aW9uKHRhcmdldEVsZW1lbnQsIGV2ZW50UHJvcGVydGllcywgY29uZmlnQ2FsbGJhY2spIHtcclxuICAgIHJldHVybiBjYWxsKG5ldyBEcmFnRHJvcEFjdGlvbigpLCAnZHJhZ0xlYXZlJywgYXJndW1lbnRzKTtcclxuICB9LFxyXG4gIGRyb3A6IGZ1bmN0aW9uKHRhcmdldEVsZW1lbnQsIGV2ZW50UHJvcGVydGllcywgY29uZmlnQ2FsbGJhY2spIHtcclxuICAgIHJldHVybiBjYWxsKG5ldyBEcmFnRHJvcEFjdGlvbigpLCAnZHJvcCcsIGFyZ3VtZW50cyk7XHJcbiAgfSxcclxuICBkZWxheTogZnVuY3Rpb24odGFyZ2V0RWxlbWVudCwgZXZlbnRQcm9wZXJ0aWVzLCBjb25maWdDYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIGNhbGwobmV3IERyYWdEcm9wQWN0aW9uKCksICdkZWxheScsIGFyZ3VtZW50cyk7XHJcbiAgfSxcclxuXHJcbiAgdHJpZ2dlckRyYWdFdmVudCxcclxuXHJcbiAgLy8gSnVzdCBmb3IgdW5pdCB0ZXN0aW5nOlxyXG4gIERhdGFUcmFuc2ZlcjogcmVxdWlyZSgnLi9EYXRhVHJhbnNmZXInKSxcclxuICBEcmFnRHJvcEFjdGlvbjogcmVxdWlyZSgnLi9EcmFnRHJvcEFjdGlvbicpLFxyXG4gIGV2ZW50RmFjdG9yeTogcmVxdWlyZSgnLi9ldmVudEZhY3RvcnknKVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBkcmFnTW9jaztcclxuIiwiaW1wb3J0IHBia2RmMiBmcm9tICdwYmtkZjInXHJcbmltcG9ydCBhZXNqcyBmcm9tICdhZXMtanMnXHJcbmltcG9ydCBFeHQgZnJvbSAnLi93ZWJfZXh0ZW5zaW9uJ1xyXG5pbXBvcnQgc3RvcmFnZSBmcm9tICcuL3N0b3JhZ2UnXHJcblxyXG5jb25zdCBSQVdfUFJFRklYID0gJ0BfS0FOVFVfQCdcclxuY29uc3QgQ0lQSEVSX1BSRUZJWCA9ICdfX0tBTlRVX0VOQ1JZUFRFRF9fJ1xyXG5jb25zdCBSQVdfUFJFRklYX1JFRyA9IG5ldyBSZWdFeHAoJ14nICsgUkFXX1BSRUZJWClcclxuY29uc3QgQ0lQSEVSX1BSRUZJWF9SRUcgPSBuZXcgUmVnRXhwKCdeJyArIENJUEhFUl9QUkVGSVgpXHJcblxyXG5jb25zdCBnZXRFbmNyeXB0Q29uZmlnID0gKCkgPT4ge1xyXG4gIHJldHVybiBzdG9yYWdlLmdldCgnY29uZmlnJylcclxuICAudGhlbihjb25maWcgPT4gKHtcclxuICAgIHNob3VsZEVuY3J5cHQ6IGNvbmZpZy5zaG91bGRFbmNyeXB0UGFzc3dvcmQgPT09ICdtYXN0ZXJfcGFzc3dvcmQnLFxyXG4gICAgbWFzdGVyUGFzc3dvcmQ6IGNvbmZpZy5tYXN0ZXJQYXNzd29yZFxyXG4gIH0pKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYWVzRW5jcnlwdCA9ICh0ZXh0LCBwYXNzd29yZCkgPT4ge1xyXG4gIGNvbnN0IGtleSAgICAgPSBwYmtkZjIucGJrZGYyU3luYyhwYXNzd29yZCwgJ3NhbHQnLCAxLCAyNTYgLyA4LCAnc2hhNTEyJylcclxuICBjb25zdCBlbmdpbmUgID0gbmV3IGFlc2pzLk1vZGVPZk9wZXJhdGlvbi5jdHIoa2V5KVxyXG5cclxuICByZXR1cm4gYWVzanMudXRpbHMuaGV4LmZyb21CeXRlcyhcclxuICAgIGVuZ2luZS5lbmNyeXB0KFxyXG4gICAgICBhZXNqcy51dGlscy51dGY4LnRvQnl0ZXModGV4dClcclxuICAgIClcclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhZXNEZWNyeXB0ID0gKHRleHQsIHBhc3N3b3JkKSA9PiB7XHJcbiAgY29uc3Qga2V5ICAgICA9IHBia2RmMi5wYmtkZjJTeW5jKHBhc3N3b3JkLCAnc2FsdCcsIDEsIDI1NiAvIDgsICdzaGE1MTInKVxyXG4gIGNvbnN0IGVuZ2luZSAgPSBuZXcgYWVzanMuTW9kZU9mT3BlcmF0aW9uLmN0cihrZXkpXHJcblxyXG4gIHJldHVybiBhZXNqcy51dGlscy51dGY4LmZyb21CeXRlcyhcclxuICAgIGVuZ2luZS5kZWNyeXB0KFxyXG4gICAgICBhZXNqcy51dGlscy5oZXgudG9CeXRlcyh0ZXh0KVxyXG4gICAgKVxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGVuY3J5cHQgPSAodGV4dCkgPT4ge1xyXG4gIHJldHVybiBnZXRFbmNyeXB0Q29uZmlnKClcclxuICAudGhlbigoeyBzaG91bGRFbmNyeXB0LCBtYXN0ZXJQYXNzd29yZCB9KSA9PiB7XHJcbiAgICBpZiAoIXNob3VsZEVuY3J5cHQpIHJldHVybiB0ZXh0XHJcbiAgICByZXR1cm4gYCR7Q0lQSEVSX1BSRUZJWH0ke2Flc0VuY3J5cHQoUkFXX1BSRUZJWCArIHRleHQsIG1hc3RlclBhc3N3b3JkKX1gXHJcbiAgfSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRlY3J5cHQgPSAodGV4dCkgPT4ge1xyXG4gIHJldHVybiBnZXRFbmNyeXB0Q29uZmlnKClcclxuICAudGhlbigoeyBzaG91bGRFbmNyeXB0LCBtYXN0ZXJQYXNzd29yZCB9KSA9PiB7XHJcbiAgICBpZiAoIXNob3VsZEVuY3J5cHQpIHJldHVybiB0ZXh0XHJcbiAgICBjb25zdCByYXcgPSBhZXNEZWNyeXB0KHRleHQucmVwbGFjZShDSVBIRVJfUFJFRklYX1JFRywgJycpLCBtYXN0ZXJQYXNzd29yZClcclxuICAgIGlmIChyYXcuaW5kZXhPZihSQVdfUFJFRklYKSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdXcm9uZyBtYXN0ZXIgcGFzc3dvcmQnKVxyXG4gICAgcmV0dXJuIHJhdy5yZXBsYWNlKFJBV19QUkVGSVhfUkVHLCAnJylcclxuICB9KVxyXG4gIC5jYXRjaChlID0+IHtcclxuICAgIHRocm93IG5ldyBFcnJvcigncGFzc3dvcmQgc3RyaW5nIGludmFsaWQnKVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBlbmNyeXB0SWZOZWVkZWQgPSAodGV4dCwgZG9tKSA9PiB7XHJcbiAgaWYgKGRvbSAmJiBkb20udGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnSU5QVVQnICYmIGRvbS50eXBlID09PSAncGFzc3dvcmQnKSB7XHJcbiAgICByZXR1cm4gZW5jcnlwdCh0ZXh0KVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0ZXh0KVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZGVjcnlwdElmTmVlZGVkID0gKHRleHQsIGRvbSkgPT4ge1xyXG4gIGlmIChDSVBIRVJfUFJFRklYX1JFRy50ZXN0KHRleHQpICYmIGRvbSAmJiBkb20udGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnSU5QVVQnICYmIGRvbS50eXBlID09PSAncGFzc3dvcmQnKSB7XHJcbiAgICByZXR1cm4gZGVjcnlwdCh0ZXh0KVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0ZXh0KVxyXG59XHJcbiIsIlxyXG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nJ1xyXG5pbXBvcnQgeyBnZXRFbGVtZW50QnlMb2NhdG9yIH0gZnJvbSAnLi9jb21tYW5kX3J1bm5lcidcclxuXHJcbi8qXHJcbiAqIEJhc2ljIHRvb2wgZnVuY3Rpb25cclxuICovXHJcblxyXG52YXIgZXh0ZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpXHJcbiAgdmFyIGxlbiAgPSBhcmdzLmxlbmd0aFxyXG5cclxuICBpZiAobGVuIDw9IDApICAgcmV0dXJuIHt9XHJcbiAgaWYgKGxlbiA9PT0gMSkgIHJldHVybiBhcmdzWzBdXHJcblxyXG4gIHZhciBoZWFkID0gYXJnc1swXVxyXG4gIHZhciByZXN0ID0gYXJncy5zbGljZSgxKVxyXG5cclxuICByZXR1cm4gcmVzdC5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cikge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBPYmplY3Qua2V5cyhjdXIpLCBsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIHByZXZba2V5c1tpXV0gPSBjdXJba2V5c1tpXV1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcHJldlxyXG4gIH0sIGhlYWQpXHJcbn1cclxuXHJcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheVxyXG5cclxudmFyIGlkID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH1cclxuXHJcbnZhciB0cmltID0gZnVuY3Rpb24gKHN0cikge1xyXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpXHJcbn1cclxuXHJcbnZhciBmbGF0dGVuID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuICByZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCBsaXN0KVxyXG59XHJcblxyXG52YXIgc3VtID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBsaXN0ID0gQXJyYXkuZnJvbShhcmd1bWVudHMpXHJcbiAgcmV0dXJuIGxpc3QucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHtcclxuICAgIHJldHVybiBwcmV2ICsgY3VyXHJcbiAgfSwgMClcclxufVxyXG5cclxudmFyIGxhc3QgPSBmdW5jdGlvbiAobGlzdCkge1xyXG4gIHJldHVybiBsaXN0W2xpc3QubGVuZ3RoIC0gMV1cclxufVxyXG5cclxudmFyIG9yID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuICByZXR1cm4gKGxpc3QgfHwgW10pLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VyKSB7XHJcbiAgICByZXR1cm4gcHJldiB8fCBjdXJcclxuICB9LCBmYWxzZSlcclxufVxyXG5cclxudmFyIGFuZCA9IGZ1bmN0aW9uIChsaXN0KSB7XHJcbiAgcmV0dXJuIChsaXN0IHx8IFtdKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cikge1xyXG4gICAgcmV0dXJuIHByZXYgJiYgY3VyXHJcbiAgfSwgdHJ1ZSlcclxufVxyXG5cclxudmFyIHppcFdpdGggPSBmdW5jdGlvbiAoZm4pIHtcclxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpICAgcmV0dXJuIG51bGxcclxuXHJcbiAgdmFyIGxpc3QgPSBBcnJheS5mcm9tKGFyZ3VtZW50cykuc2xpY2UoMSlcclxuICB2YXIgbGVuICA9IGxpc3QucmVkdWNlKGZ1bmN0aW9uIChtaW4sIGN1cikge1xyXG4gICAgcmV0dXJuIGN1ci5sZW5ndGggPCBtaW4gPyBjdXIubGVuZ3RoIDogbWluXHJcbiAgfSwgSW5maW5pdHkpXHJcbiAgdmFyIHJldCAgPSBbXVxyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICByZXQucHVzaChmbi5hcHBseShudWxsLCBsaXN0Lm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbVtpXTsgfSkpKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJldFxyXG59XHJcblxyXG52YXIgaW50ZXJzZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBsaXN0ID0gQXJyYXkuZnJvbShhcmd1bWVudHMpXHJcbiAgdmFyIGxlbiAgPSBNYXRoLm1heC5hcHBseShudWxsLCBsaXN0Lm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbS5sZW5ndGg7IH0pKVxyXG4gIHZhciByZXN1bHQgPSBbXVxyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICB2YXIgdmFsID0gbGlzdFswXVtpXVxyXG4gICAgdmFyIG5vICA9IGxpc3QuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgIHJldHVybiBpdGVtW2ldICE9PSB2YWxcclxuICAgIH0pXHJcblxyXG4gICAgaWYgKG5vICYmIG5vLmxlbmd0aCkgIGJyZWFrXHJcblxyXG4gICAgcmVzdWx0LnB1c2godmFsKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdFxyXG59XHJcblxyXG52YXIgZGVlcEVxdWFsID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICBpZiAoaXNBcnJheShhKSAmJiBpc0FycmF5KGIpKSB7XHJcbiAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGFuZCh6aXBXaXRoKGRlZXBFcXVhbCwgYSwgYikpXHJcbiAgfVxyXG5cclxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnICYmIHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xyXG4gICAgLy8gVE9ET1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG5cclxuICByZXR1cm4gYSA9PT0gYlxyXG59XHJcblxyXG4vKlxyXG4gKiBEb20gaGVscGVyIGZ1bmN0aW9uXHJcbiAqL1xyXG5cclxudmFyIHBpeGVsID0gZnVuY3Rpb24gKG51bSkge1xyXG4gIGlmICgobnVtICsgJycpLmluZGV4T2YoJ3B4JykgIT09IC0xKSAgcmV0dXJuIG51bVxyXG4gIHJldHVybiAobnVtIHx8IDApICsgJ3B4J1xyXG59XHJcblxyXG52YXIgZ2V0U3R5bGUgPSBmdW5jdGlvbiAoZG9tLCBzdHlsZU5hbWUpIHtcclxuICBpZiAoIWRvbSkgICB0aHJvdyBuZXcgRXJyb3IoJ2dldFN0eWxlOiBkb20gZG9lcyBub3QgZXhpc3QnKVxyXG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGRvbSlbc3R5bGVOYW1lXVxyXG59XHJcblxyXG52YXIgc2V0U3R5bGUgPSBmdW5jdGlvbiAoZG9tLCBzdHlsZSkge1xyXG4gIGlmICghZG9tKSAgIHRocm93IG5ldyBFcnJvcignc2V0U3R5bGU6IGRvbSBkb2VzIG5vdCBleGlzdCcpXHJcblxyXG4gIGZvciAodmFyIGkgPSAwLCBrZXlzID0gT2JqZWN0LmtleXMoc3R5bGUpLCBsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICBkb20uc3R5bGVba2V5c1tpXV0gPSBzdHlsZVtrZXlzW2ldXVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRvbVxyXG59XHJcblxyXG52YXIgY3NzU3VtID0gZnVuY3Rpb24gKGRvbSwgbGlzdCkge1xyXG4gIHZhciBpc0lubGluZSA9IGdldFN0eWxlKGRvbSwgJ2Rpc3BsYXknKSA9PT0gJ2lubGluZSdcclxuXHJcbiAgcmV0dXJuIGxpc3QucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHtcclxuICAgIHZhciB2YWwgPSAoaXNJbmxpbmUgJiYgWyd3aWR0aCcsICdoZWlnaHQnXS5pbmRleE9mKGN1cikgIT09IC0xKVxyXG4gICAgICAgICAgPyBkb20uZ2V0Q2xpZW50UmVjdHMoKVswXVtjdXJdXHJcbiAgICAgICAgICA6IGdldFN0eWxlKGRvbSwgY3VyKVxyXG5cclxuICAgIHJldHVybiBwcmV2ICsgcGFyc2VJbnQodmFsIHx8ICcwJywgMTApXHJcbiAgfSwgMClcclxufVxyXG5cclxudmFyIG9mZnNldCA9IGZ1bmN0aW9uIChkb20sIG5vUHgpIHtcclxuICBpZiAoIWRvbSkgcmV0dXJuIHsgbGVmdDogMCwgdG9wOiAwIH1cclxuXHJcbiAgdmFyIHJlY3QgPSBkb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICB2YXIgZm4gICA9IG5vUHggPyBpZCA6IHBpeGVsXHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBsZWZ0OiBmbihyZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCksXHJcbiAgICB0b3A6IGZuKHJlY3QudG9wICsgd2luZG93LnNjcm9sbFkpXHJcbiAgfVxyXG59XHJcblxyXG52YXIgcmVjdCA9IGZ1bmN0aW9uIChkb20sIG5vUHgpIHtcclxuICB2YXIgcG9zICAgICAgID0gb2Zmc2V0KGRvbSwgbm9QeClcclxuICB2YXIgaXNJbmxpbmUgID0gZ2V0U3R5bGUoZG9tLCAnZGlzcGxheScpID09PSAnaW5saW5lJ1xyXG4gIHZhciB3ICAgICAgICAgPSBpc0lubGluZSA/IGRvbS5nZXRDbGllbnRSZWN0cygpWzBdWyd3aWR0aCddICA6IGdldFN0eWxlKGRvbSwgJ3dpZHRoJylcclxuICB2YXIgaCAgICAgICAgID0gaXNJbmxpbmUgPyBkb20uZ2V0Q2xpZW50UmVjdHMoKVswXVsnaGVpZ2h0J10gOiBnZXRTdHlsZShkb20sICdoZWlnaHQnKVxyXG4gIHZhciBmbiAgICAgICAgPSBub1B4ID8gaWQgOiBwaXhlbFxyXG5cclxuICByZXR1cm4gZXh0ZW5kKHt3aWR0aDogZm4odyksIGhlaWdodDogZm4oaCl9LCBwb3MpXHJcbn1cclxuXHJcbi8vIFJlZmVyZW5jZTogaHR0cDovL3J5YW52ZS5jb20vbGFiL2RpbWVuc2lvbnMvXHJcbnZhciBjbGllbnRXaWR0aCA9IGZ1bmN0aW9uIChkb2N1bWVudCkge1xyXG4gIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcclxufVxyXG5cclxudmFyIGNsaWVudEhlaWdodCA9IGZ1bmN0aW9uIChkb2N1bWVudCkge1xyXG4gIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XHJcbn1cclxuXHJcbnZhciByZW1vdmVDaGlsZHJlbiA9IGZ1bmN0aW9uIChkb20sIHByZWRpY2F0ZSkge1xyXG4gIHZhciBwcmVkID0gcHJlZGljYXRlIHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWUgfVxyXG4gIHZhciBjaGlsZHJlbiA9IGRvbS5jaGlsZE5vZGVzXHJcblxyXG4gIGZvciAodmFyIGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgaWYgKHByZWQoY2hpbGRyZW5baV0pKSB7XHJcbiAgICAgIGRvbS5yZW1vdmVDaGlsZChjaGlsZHJlbltpXSlcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnZhciBpbkRvbSA9IGZ1bmN0aW9uICgkb3V0ZXIsICRlbCkge1xyXG4gIGlmICghJGVsKSByZXR1cm4gZmFsc2VcclxuICBpZiAoJG91dGVyID09PSAkZWwpICByZXR1cm4gdHJ1ZVxyXG4gIHJldHVybiBpbkRvbSgkb3V0ZXIsICRlbC5wYXJlbnROb2RlKVxyXG59XHJcblxyXG52YXIgaW5Eb21MaXN0ID0gZnVuY3Rpb24gKGxpc3QsICRlbCkge1xyXG4gIHJldHVybiBvcihsaXN0Lm1hcChmdW5jdGlvbiAoJG91dGVyKSB7XHJcbiAgICByZXR1cm4gaW5Eb20oJG91dGVyLCAkZWwpXHJcbiAgfSkpXHJcbn1cclxuXHJcbnZhciBwYXJlbnRXaXRoVGFnID0gZnVuY3Rpb24gKHRhZywgJGVsKSB7XHJcbiAgdmFyIGxvd2VyVGFnID0gdGFnLnRvTG93ZXJDYXNlKClcclxuICB2YXIgJGRvbSA9ICRlbFxyXG5cclxuICB3aGlsZSAoJGRvbSkge1xyXG4gICAgaWYgKCRkb20udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBsb3dlclRhZykge1xyXG4gICAgICByZXR1cm4gJGRvbVxyXG4gICAgfVxyXG5cclxuICAgICRkb20gPSAkZG9tLnBhcmVudE5vZGVcclxuICB9XHJcblxyXG4gIHJldHVybiBudWxsXHJcbn1cclxuXHJcbnZhciBwYXJlbnRXaXRoQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lLCAkZWwpIHtcclxuICB2YXIgJGRvbSA9ICRlbFxyXG5cclxuICB3aGlsZSAoJGRvbSkge1xyXG4gICAgLy8gTm90ZTogSW4gRmlyZWZveCwgSFRNTCBEb2N1bWVudCBvYmplY3QgZG9lc24ndCBoYXZlIGBjbGFzc0xpc3RgIHByb3BlcnR5XHJcbiAgICBpZiAoJGRvbS5jbGFzc0xpc3QgIT09IHVuZGVmaW5lZCAmJiAkZG9tLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XHJcbiAgICAgIHJldHVybiAkZG9tXHJcbiAgICB9XHJcblxyXG4gICAgJGRvbSA9ICRkb20ucGFyZW50Tm9kZVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG51bGxcclxufVxyXG5cclxudmFyIHNlbGVjdG9yID0gZnVuY3Rpb24gKGRvbSkge1xyXG4gIGlmIChkb20ubm9kZVR5cGUgIT09IDEpIHJldHVybiAnJ1xyXG4gIGlmIChkb20udGFnTmFtZSA9PT0gJ0JPRFknKSByZXR1cm4gJ2JvZHknXHJcbiAgaWYgKGRvbS5pZCkgcmV0dXJuICcjJyArIGRvbS5pZFxyXG5cclxuICB2YXIgY2xhc3NlcyA9IChkb20uZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoL1xccysvZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtICYmIGl0ZW0ubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gIHZhciBjaGlsZHJlbiA9IEFycmF5LmZyb20oZG9tLnBhcmVudE5vZGUuY2hpbGROb2RlcykuZmlsdGVyKGZ1bmN0aW9uICgkZWwpIHtcclxuICAgIHJldHVybiAkZWwubm9kZVR5cGUgPT09IDFcclxuICB9KVxyXG5cclxuICB2YXIgc2FtZVRhZyA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoJGVsKSB7XHJcbiAgICByZXR1cm4gJGVsLnRhZ05hbWUgPT09IGRvbS50YWdOYW1lXHJcbiAgfSlcclxuXHJcbiAgdmFyIHNhbWVDbGFzcyA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoJGVsKSB7XHJcbiAgICB2YXIgY3MgPSAoJGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykuc3BsaXQoL1xccysvZylcclxuXHJcbiAgICByZXR1cm4gYW5kKGNsYXNzZXMubWFwKGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgIHJldHVybiBjcy5pbmRleE9mKGMpICE9PSAtMVxyXG4gICAgfSkpXHJcbiAgfSlcclxuXHJcbiAgdmFyIGV4dHJhID0gJydcclxuXHJcbiAgaWYgKHNhbWVUYWcubGVuZ3RoID09PSAxKSB7XHJcbiAgICBleHRyYSA9ICcnXHJcbiAgfSBlbHNlIGlmIChjbGFzc2VzLmxlbmd0aCAmJiBzYW1lQ2xhc3MubGVuZ3RoID09PSAxKSB7XHJcbiAgICBleHRyYSA9ICcuJyArIGNsYXNzZXMuam9pbignLicpXHJcbiAgfSBlbHNlIHtcclxuICAgIGV4dHJhID0gJzpudGgtY2hpbGQoJyArICgxICsgY2hpbGRyZW4uZmluZEluZGV4KGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtID09PSBkb207IH0pKSArICcpJ1xyXG4gIH1cclxuXHJcbiAgdmFyIG1lID0gZG9tLnRhZ05hbWUudG9Mb3dlckNhc2UoKSArIGV4dHJhXHJcblxyXG4gIC8vIE5vdGU6IGJyb3dzZXIgd2lsbCBhZGQgYW4gZXh0cmEgJ3Rib2R5JyB3aGVuIHRyIGRpcmVjdGx5IGluIHRhYmxlLCB3aGljaCB3aWxsIGNhdXNlIGFuIHdyb25nIHNlbGVjdG9yLFxyXG4gIC8vIHNvIHRoZSBoYWNrIGlzIHRvIHJlbW92ZSBhbGwgdGJvZHkgaGVyZVxyXG4gIHZhciByZXQgPSBzZWxlY3Rvcihkb20ucGFyZW50Tm9kZSkgKyAnID4gJyArIG1lXHJcbiAgcmV0dXJuIHJldFxyXG4gIC8vIHJldHVybiByZXQucmVwbGFjZSgvXFxzKj5cXHMqdGJvZHlcXHMqPj8vZywgJyAnKVxyXG59XHJcblxyXG52YXIgeHBhdGggPSBmdW5jdGlvbiAoZG9tLCBjdXIsIGxpc3QpIHtcclxuICB2YXIgZ2V0VGFnSW5kZXggPSBmdW5jdGlvbiAoZG9tKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbShkb20ucGFyZW50Tm9kZS5jaGlsZE5vZGVzKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgcmV0dXJuIGl0ZW0ubm9kZVR5cGUgPT09IGRvbS5ub2RlVHlwZSAmJiBpdGVtLnRhZ05hbWUgPT09IGRvbS50YWdOYW1lXHJcbiAgICB9KS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIG5vZGUsIGkpIHtcclxuICAgICAgaWYgKHByZXYgIT09IG51bGwpICByZXR1cm4gcHJldlxyXG4gICAgICByZXR1cm4gbm9kZSA9PT0gZG9tID8gKGkgKyAxKSA6IHByZXZcclxuICAgIH0sIG51bGwpXHJcbiAgfVxyXG5cclxuICB2YXIgbmFtZSA9IGZ1bmN0aW9uIChkb20pIHtcclxuICAgIGlmICghZG9tKSAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgIGlmIChkb20ubm9kZVR5cGUgPT09IDMpICAgcmV0dXJuICdAdGV4dCdcclxuXHJcbiAgICB2YXIgaW5kZXggPSBnZXRUYWdJbmRleChkb20pXHJcbiAgICB2YXIgY291bnQgPSBBcnJheS5mcm9tKGRvbS5wYXJlbnROb2RlLmNoaWxkTm9kZXMpLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICByZXR1cm4gaXRlbS5ub2RlVHlwZSA9PT0gZG9tLm5vZGVUeXBlICYmIGl0ZW0udGFnTmFtZSA9PT0gZG9tLnRhZ05hbWVcclxuICAgIH0pLmxlbmd0aFxyXG4gICAgdmFyIHRhZyAgID0gZG9tLnRhZ05hbWUudG9Mb3dlckNhc2UoKVxyXG5cclxuICAgIHJldHVybiBjb3VudCA+IDEgPyAodGFnICsgJ1snICsgaW5kZXggKyAnXScpIDogdGFnXHJcbiAgfVxyXG5cclxuICB2YXIgaGVscGVyID0gZnVuY3Rpb24gKGRvbSwgY3VyLCBsaXN0KSB7XHJcbiAgICBpZiAoIWRvbSkgICByZXR1cm4gbnVsbFxyXG5cclxuICAgIGlmICghY3VyKSB7XHJcbiAgICAgIGlmIChkb20ubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICByZXR1cm4gaGVscGVyKGRvbS5wYXJlbnROb2RlKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBoZWxwZXIoZG9tLCBkb20sIFtdKVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFjdXIucGFyZW50Tm9kZSkge1xyXG4gICAgICByZXR1cm4gWydodG1sJ10uY29uY2F0KGxpc3QpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGN1ci50YWdOYW1lID09PSAnQk9EWScpIHtcclxuICAgICAgcmV0dXJuIFsnaHRtbCcsICdib2R5J10uY29uY2F0KGxpc3QpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGN1ci5pZCkge1xyXG4gICAgICByZXR1cm4gW2AqW0BpZD1cIiR7Y3VyLmlkfVwiXWBdLmNvbmNhdChsaXN0KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBoZWxwZXIoZG9tLCBjdXIucGFyZW50Tm9kZSwgW25hbWUoY3VyKV0uY29uY2F0KGxpc3QpKVxyXG4gIH1cclxuXHJcbiAgdmFyIHBhcnRzICAgPSBoZWxwZXIoZG9tLCBjdXIsIGxpc3QpXHJcbiAgdmFyIHByZWZpeCAgPSBwYXJ0c1swXSA9PT0gJ2h0bWwnID8gJy8nIDogJy8vJ1xyXG4gIHZhciByZXQgICAgID0gcHJlZml4ICsgcGFydHMuam9pbignLycpXHJcblxyXG4gIHJldHVybiByZXRcclxufVxyXG5cclxudmFyIGF0WFBhdGggPSBmdW5jdGlvbiAoeHBhdGgsIGRvY3VtZW50KSB7XHJcbiAgdmFyIGxvd2VyID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyICYmIHN0ci50b0xvd2VyQ2FzZSgpOyB9XHJcbiAgdmFyIHJlZyAgID0gL14oW2EtekEtWjAtOV0rKShcXFsoXFxkKylcXF0pPyQvXHJcblxyXG4gIHJldHVybiB4cGF0aC5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cikge1xyXG4gICAgaWYgKCFwcmV2KSAgcmV0dXJuIHByZXZcclxuICAgIGlmICghcHJldi5jaGlsZE5vZGVzIHx8ICFwcmV2LmNoaWxkTm9kZXMubGVuZ3RoKSAgcmV0dXJuIG51bGxcclxuXHJcbiAgICB2YXIgbWF0Y2ggPSBjdXIubWF0Y2gocmVnKVxyXG4gICAgdmFyIHRhZyAgID0gbWF0Y2hbMV1cclxuICAgIHZhciBpbmRleCA9IG1hdGNoWzNdID8gcGFyc2VJbnQobWF0Y2hbM10sIDEwKSA6IDFcclxuICAgIHZhciBsaXN0ICA9IEFycmF5LmZyb20ocHJldi5jaGlsZE5vZGVzKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgcmV0dXJuIGl0ZW0ubm9kZVR5cGUgPT09IDEgJiYgbG93ZXIoaXRlbS50YWdOYW1lKSA9PT0gbG93ZXIodGFnKVxyXG4gICAgfSlcclxuXHJcbiAgICByZXR1cm4gbGlzdFtpbmRleCAtIDFdXHJcbiAgfSwgZG9jdW1lbnQpXHJcbn1cclxuXHJcbnZhciBkb21UZXh0ID0gKCRkb20pID0+IHtcclxuICBjb25zdCBpdCAgPSAkZG9tLmlubmVyVGV4dCAmJiAkZG9tLmlubmVyVGV4dC50cmltKClcclxuICBjb25zdCB0YyAgPSAkZG9tLnRleHRDb250ZW50XHJcbiAgY29uc3QgcG9zID0gdGMudG9VcHBlckNhc2UoKS5pbmRleE9mKGl0LnRvVXBwZXJDYXNlKCkpXHJcblxyXG4gIHJldHVybiB0Yy5zdWJzdHIocG9zLCBpdC5sZW5ndGgpXHJcbn1cclxuXHJcbnZhciBnZXRGaXJzdFdvcmtpbmdMb2NhdG9yID0gKGxvY2F0b3JzLCAkZWwpID0+IHtcclxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gbG9jYXRvcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgIGlmICgkZWwgPT09IGdldEVsZW1lbnRCeUxvY2F0b3IobG9jYXRvcnNbaV0pKSB7XHJcbiAgICAgIHJldHVybiBsb2NhdG9yc1tpXVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG51bGxcclxufVxyXG5cclxuLy8gTm90ZTogZ2V0IHRoZSBsb2NhdG9yIG9mIGEgRE9NXHJcbnZhciBnZXRMb2NhdG9yID0gKCRkb20sIHdpdGhBbGxPcHRpb25zKSA9PiB7XHJcbiAgY29uc3QgaWQgICAgICA9ICRkb20uZ2V0QXR0cmlidXRlKCdpZCcpXHJcbiAgY29uc3QgbmFtZSAgICA9ICRkb20uZ2V0QXR0cmlidXRlKCduYW1lJylcclxuICBjb25zdCBpc0xpbmsgID0gJGRvbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhJ1xyXG4gIGNvbnN0IHRleHQgICAgPSBkb21UZXh0KCRkb20pXHJcbiAgY29uc3QgY2xhc3NlcyA9IEFycmF5LmZyb20oJGRvbS5jbGFzc0xpc3QpXHJcbiAgY29uc3QgY2FuZGlkYXRlcyA9IFtdXHJcblxyXG4gIC8vIGxpbmtcclxuICBpZiAoaXNMaW5rICYmIHRleHQgJiYgdGV4dC5sZW5ndGgpIHtcclxuICAgIGNvbnN0IGxpbmtzICAgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJykpXHJcbiAgICBjb25zdCBtYXRjaGVzID0gbGlua3MuZmlsdGVyKCRlbCA9PiBkb21UZXh0KCRlbCkgPT09IHRleHQpXHJcbiAgICBjb25zdCBpbmRleCAgID0gbWF0Y2hlcy5maW5kSW5kZXgoJGVsID0+ICRlbCA9PT0gJGRvbSlcclxuXHJcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgIGNhbmRpZGF0ZXMucHVzaChcclxuICAgICAgICBpbmRleCA9PT0gMCA/IGBsaW5rPSR7dGV4dH1gIDogYGxpbms9JHt0ZXh0fUBQT1M9JHtpbmRleCArIDF9YFxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBpZFxyXG4gIGlmIChpZCAmJiBpZC5sZW5ndGgpIHtcclxuICAgIGNhbmRpZGF0ZXMucHVzaChgaWQ9JHtpZH1gKVxyXG4gIH1cclxuXHJcbiAgLy8gbmFtZVxyXG4gIGlmIChuYW1lICYmIG5hbWUubGVuZ3RoKSB7XHJcbiAgICBjYW5kaWRhdGVzLnB1c2goYG5hbWU9JHtuYW1lfWApXHJcbiAgfVxyXG5cclxuICAvLyB4cGF0aFxyXG4gIGNhbmRpZGF0ZXMucHVzaCh4cGF0aCgkZG9tKSlcclxuXHJcbiAgLy8gY3NzXHJcbiAgLy8gVHJ5IHdpdGggc2ltcGxlIGNzcyBzZWxlY3RvciBmaXJzdC4gSWYgbm90IHVucWl1ZSwgdXNlIGZ1bGwgY3NzIHNlbGVjdG9yXHJcbiAgLyoqXHJcbiAgICogQmVsb3cgaXMgdGhlIG9sZCBsb2dpYyB3aXRoIGEgc2hvcnRlciBjc3Mgc2VsZWN0b3JcclxuICAgKlxyXG5cclxuICBsZXQgc2VsID0gbnVsbFxyXG5cclxuICBpZiAoY2xhc3Nlcy5sZW5ndGggPiAwKSB7XHJcbiAgICBzZWwgPSAkZG9tLnRhZ05hbWUudG9Mb3dlckNhc2UoKSArIGNsYXNzZXMubWFwKGMgPT4gJy4nICsgYykuam9pbignJylcclxuXHJcbiAgICBpZiAoJGRvbSAhPT0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWwpWzBdKSB7XHJcbiAgICAgIHNlbCA9IG51bGxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmICghc2VsKSB7XHJcbiAgICBzZWwgPSBzZWxlY3RvcigkZG9tKVxyXG4gIH1cclxuICAqL1xyXG4gIGNhbmRpZGF0ZXMucHVzaChgY3NzPSR7c2VsZWN0b3IoJGRvbSl9YClcclxuXHJcbiAgLy8gR2V0IHRoZSBmaXJzdCBvbmUgd29ya2luZ1xyXG4gIGNvbnN0IGNob3NlbiA9IGdldEZpcnN0V29ya2luZ0xvY2F0b3IoY2FuZGlkYXRlcywgJGRvbSlcclxuXHJcbiAgaWYgKHdpdGhBbGxPcHRpb25zKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0YXJnZXQ6IGNob3NlbixcclxuICAgICAgdGFyZ2V0T3B0aW9uczogY2FuZGlkYXRlc1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNob3NlblxyXG59XHJcblxyXG52YXIgY2hlY2tJZnJhbWUgPSAoaWZyYW1lV2luKSA9PiB7XHJcbiAgdmFyIGtleSA9IG5ldyBEYXRlKCkgKiAxICsgJycgKyBNYXRoLnJhbmRvbSgpXHJcblxyXG4gIHRyeSB7XHJcbiAgICBpZnJhbWVXaW5ba2V5XSA9ICdhc2QnXHJcbiAgICByZXR1cm4gaWZyYW1lV2luW2tleV0gPT09ICdhc2QnXHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG59XHJcblxyXG4vLyBOb3RlOiBnZXQgdGhlIGxvY2F0b3IgZm9yIGZyYW1lXHJcbnZhciBnZXRGcmFtZUxvY2F0b3IgPSAoZnJhbWVXaW4sIHdpbikgPT4ge1xyXG4gIGlmIChjaGVja0lmcmFtZShmcmFtZVdpbikpIHtcclxuICAgIGNvbnN0IGZyYW1lRG9tID0gZnJhbWVXaW4uZnJhbWVFbGVtZW50XHJcbiAgICBjb25zdCBsb2NhdG9yICA9IGdldExvY2F0b3IoZnJhbWVEb20pXHJcblxyXG4gICAgaWYgKC9eaWQ9Ly50ZXN0KGxvY2F0b3IpIHx8IC9ebmFtZT0vLnRlc3QobG9jYXRvcikpIHtcclxuICAgICAgcmV0dXJuIGxvY2F0b3JcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSB3aW4uZnJhbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICBpZiAod2luLmZyYW1lc1tpXSA9PT0gZnJhbWVXaW4pIHtcclxuICAgICAgcmV0dXJuIGBpbmRleD0ke2l9YFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhyb3cgbmV3IEVycm9yKCdGcmFtZSBsb2NhdG9yIG5vdCBmb3VuZCcpXHJcbn1cclxuXHJcbi8qXHJcbiAqIE1hc2sgcmVsYXRlZFxyXG4gKi9cclxuXHJcbnZhciBtYXNrRmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgY2FjaGUgICAgICAgPSBbXVxyXG4gIHZhciBwcmVmaXggICAgICA9ICdfX21hc2tfXycgKyAobmV3IERhdGUoKSAqIDEpICsgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMCkgKyAnX18nXHJcbiAgdmFyIHVpZCAgICAgICAgID0gMVxyXG4gIHZhciBkZWZhdWx0U3R5bGUgID0ge1xyXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICB6SW5kZXg6ICc5OTknLFxyXG4gICAgZGlzcGxheTogJ25vbmUnLFxyXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZWQnLFxyXG4gICAgb3BhY2l0eTogMC41LFxyXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnXHJcbiAgfVxyXG5cclxuICB2YXIgZ2VuTWFzayA9IGZ1bmN0aW9uIChzdHlsZSwgZG9tKSB7XHJcbiAgICB2YXIgbWFzayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcblxyXG4gICAgaWYgKGRvbSkge1xyXG4gICAgICBzdHlsZSA9IGV4dGVuZCh7fSwgZGVmYXVsdFN0eWxlLCBzdHlsZSB8fCB7fSwgcmVjdChkb20pKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3R5bGUgPSBleHRlbmQoe30sIGRlZmF1bHRTdHlsZSwgc3R5bGUgfHwge30pXHJcbiAgICB9XHJcblxyXG4gICAgc2V0U3R5bGUobWFzaywgc3R5bGUpXHJcbiAgICBtYXNrLmlkID0gcHJlZml4ICsgKHVpZCsrKVxyXG4gICAgY2FjaGUucHVzaChtYXNrKVxyXG5cclxuICAgIHJldHVybiBtYXNrXHJcbiAgfVxyXG5cclxuICB2YXIgY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FjaGUubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgdmFyIG1hc2sgPSBjYWNoZVtpXVxyXG5cclxuICAgICAgaWYgKG1hc2sgJiYgbWFzay5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgbWFzay5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG1hc2spXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBnZW46IGdlbk1hc2ssXHJcbiAgICBjbGVhcjogIGNsZWFyXHJcbiAgfVxyXG59XHJcblxyXG52YXIgc2hvd01hc2tPdmVyID0gZnVuY3Rpb24gKG1hc2ssIGVsKSB7XHJcbiAgdmFyIHBvcyA9IG9mZnNldChlbClcclxuICB2YXIgdyAgID0gY3NzU3VtKGVsLCBbJ3dpZHRoJywgICdwYWRkaW5nTGVmdCcsICdwYWRkaW5nUmlnaHQnLCAgJ2JvcmRlckxlZnRXaWR0aCcsICdib3JkZXJSaWdodFdpZHRoJ10pXHJcbiAgdmFyIGggICA9IGNzc1N1bShlbCwgWydoZWlnaHQnLCAncGFkZGluZ1RvcCcsICAncGFkZGluZ0JvdHRvbScsICdib3JkZXJUb3BXaWR0aCcsICcgYm9yZGVyQm90dG9tV2lkdGgnXSlcclxuXHJcbiAgc2V0U3R5bGUobWFzaywgZXh0ZW5kKHBvcywge1xyXG4gICAgd2lkdGg6IHBpeGVsKHcpLFxyXG4gICAgaGVpZ2h0OiBwaXhlbChoKSxcclxuICAgIGRpc3BsYXk6ICdibG9jaydcclxuICB9KSlcclxufVxyXG5cclxudmFyIGlzVmlzaWJsZSA9IGZ1bmN0aW9uIChlbCkge1xyXG4gIGlmIChlbCA9PT0gd2luZG93LmRvY3VtZW50KSByZXR1cm4gdHJ1ZVxyXG4gIGlmICghZWwpICByZXR1cm4gdHJ1ZVxyXG5cclxuICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKVxyXG4gIGlmIChzdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgfHwgc3R5bGUub3BhY2l0eSA9PT0gJzAnIHx8IHN0eWxlLnZpc2liaWxpdHkgPT09ICdoaWRkZW4nKSAgcmV0dXJuIGZhbHNlXHJcblxyXG4gIHJldHVybiBpc1Zpc2libGUoZWwucGFyZW50Tm9kZSlcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIG9mZnNldCxcclxuICBzZXRTdHlsZSxcclxuICBzZWxlY3RvcixcclxuICB4cGF0aCxcclxuICBhdFhQYXRoLFxyXG4gIGRvbVRleHQsXHJcbiAgZ2V0TG9jYXRvcixcclxuICBnZXRGcmFtZUxvY2F0b3IsXHJcbiAgbWFza0ZhY3RvcnksXHJcbiAgc2hvd01hc2tPdmVyLFxyXG4gIGluRG9tLFxyXG4gIGlzVmlzaWJsZSxcclxuICBwYXJlbnRXaXRoVGFnLFxyXG4gIHBhcmVudFdpdGhDbGFzc1xyXG59XHJcbiIsIlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnRlcnByZXRlciB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICBsYWJlbHM6IHt9LFxyXG4gICAgdGFnczogW10sXHJcbiAgICBjb21tYW5kczogW11cclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcclxuICAgIGlmIChvcHRzLnByZSkge1xyXG4gICAgICB0aGlzLl9fY3VzdG9tUHJlID0gb3B0cy5wcmVcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0cy5ydW4pIHtcclxuICAgICAgdGhpcy5fX2N1c3RvbVJ1biA9IG9wdHMucnVuXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdHMucG9zdCkge1xyXG4gICAgICB0aGlzLl9fY3VzdG9tUG9zdCA9IG9wdHMucG9zdFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzZXQgKCkge1xyXG4gICAgdGhpcy5fX3NldFN0YXRlKHtcclxuICAgICAgbGFiZWxzOiB7fSxcclxuICAgICAgdGFnczogW10sXHJcbiAgICAgIGNvbW1hbmRzOiBbXVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHByZXByb2Nlc3MgKGNvbW1hbmRzKSB7XHJcbiAgICBsZXQgbmV4dFN0YXRlICAgICA9IHsgY29tbWFuZHMsIHRhZ3M6IFtdIH1cclxuICAgIGxldCBoYWxmVGFncyAgICAgID0gW11cclxuICAgIGxldCBlcnJvckF0SW5kZXggID0gKGksIG1zZykgPT4ge1xyXG4gICAgICBjb25zdCBlID0gbmV3IEVycm9yKG1zZylcclxuICAgICAgZS5lcnJvckluZGV4ID0gaVxyXG4gICAgICByZXR1cm4gZVxyXG4gICAgfVxyXG5cclxuICAgIGNvbW1hbmRzLmZvckVhY2goKGMsIGkpID0+IHtcclxuICAgICAgaWYgKHRoaXMuX19jdXN0b21QcmUgJiYgdGhpcy5fX2N1c3RvbVByZShjLCBpKSkgcmV0dXJuXHJcblxyXG4gICAgICBjb25zdCB0b3BIYWxmVGFnID0gaGFsZlRhZ3NbaGFsZlRhZ3MubGVuZ3RoIC0gMV1cclxuXHJcbiAgICAgIHN3aXRjaCAoYy5jbWQpIHtcclxuICAgICAgICAvLyBDb21tYW5kcyBmb3IgV0hJTEUgc3RhdGVtZW50c1xyXG4gICAgICAgIGNhc2UgJ3doaWxlJzoge1xyXG4gICAgICAgICAgaWYgKGhhbGZUYWdzLmZpbmQodGFnID0+IHRhZy50eXBlID09PSAnd2hpbGUnKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnJvckF0SW5kZXgoaSwgYE5vIG5lc3RlZCB3aGlsZSBhbGxvd2VkIChhdCBjb21tYW5kICMke2kgKyAxfSlgKVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGhhbGZUYWdzLnB1c2goe1xyXG4gICAgICAgICAgICB0eXBlOiAnd2hpbGUnLFxyXG4gICAgICAgICAgICBzdGFydDogeyBpbmRleDogaSwgY29tbWFuZDogYyB9XHJcbiAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYXNlICdlbmRXaGlsZSc6IHtcclxuICAgICAgICAgIGlmICghdG9wSGFsZlRhZyB8fCB0b3BIYWxmVGFnLnR5cGUgIT09ICd3aGlsZScpIHtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3JBdEluZGV4KGksIGBObyBtYXRjaGluZyB3aGlsZSBmb3IgdGhpcyBlbmRXaGlsZSAoYXQgY29tbWFuZCAjJHtpICsgMX0pYClcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBuZXh0U3RhdGUudGFncy5wdXNoKHtcclxuICAgICAgICAgICAgLi4udG9wSGFsZlRhZyxcclxuICAgICAgICAgICAgZW5kOiB7IGluZGV4OiBpLCBjb21tYW5kOiBjIH1cclxuICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgaGFsZlRhZ3MucG9wKClcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgICAgIC8vIENvbW1hbmRzIGZvciBJRiBzdGF0ZW1lbnRzXHJcbiAgICAgICAgY2FzZSAnaWYnOiB7XHJcbiAgICAgICAgICBpZiAoaGFsZlRhZ3MuZmluZCh0YWcgPT4gdGFnLnR5cGUgPT09ICdpZicpKSB7XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yQXRJbmRleChpLCBgTm8gbmVzdGVkIGlmIGFsbG93ZWQgKGF0IGNvbW1hbmQgIyR7aSArIDF9KWApXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaGFsZlRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdpZicsXHJcbiAgICAgICAgICAgIHN0YXJ0OiB7IGluZGV4OiBpLCBjb21tYW5kOiBjIH1cclxuICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhc2UgJ2Vsc2UnOiB7XHJcbiAgICAgICAgICBpZiAoIXRvcEhhbGZUYWcgfHwgdG9wSGFsZlRhZy50eXBlICE9PSAnaWYnKSB7XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yQXRJbmRleChpLCBgTm8gbWF0Y2hpbmcgaWYgZm9yIHRoaXMgZWxzZSAoYXQgY29tbWFuZCAjJHtpICsgMX0pYClcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHRvcEhhbGZUYWcsIHtcclxuICAgICAgICAgICAgZm9yazogeyBpbmRleDogaSwgY29tbWFuZDogYyB9XHJcbiAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYXNlICdlbmRpZic6IHtcclxuICAgICAgICAgIGlmICghdG9wSGFsZlRhZyB8fCB0b3BIYWxmVGFnLnR5cGUgIT09ICdpZicpIHtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3JBdEluZGV4KGksIGBObyBtYXRjaGluZyBpZiBmb3IgdGhpcyBlbmRpZiAoYXQgY29tbWFuZCAjJHtpICsgMX0pYClcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBuZXh0U3RhdGUudGFncy5wdXNoKHtcclxuICAgICAgICAgICAgLi4udG9wSGFsZlRhZyxcclxuICAgICAgICAgICAgZW5kOiB7IGluZGV4OiBpLCBjb21tYW5kOiBjIH1cclxuICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgaGFsZlRhZ3MucG9wKClcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgICAgIGNhc2UgJ2xhYmVsJzoge1xyXG4gICAgICAgICAgaWYgKCFjLnRhcmdldCB8fCAhYy50YXJnZXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB0YXJnZXQgZm9yIGxhYmVsIGNvbW1tYW5kJylcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aGlzLl9fc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAuLi50aGlzLnN0YXRlLmxhYmVscyxcclxuICAgICAgICAgICAgICBbYy50YXJnZXRdOiB7IGluZGV4OiBpIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICBpZiAoaGFsZlRhZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCB0b3BIYWxmVGFnID0gaGFsZlRhZ3NbaGFsZlRhZ3MubGVuZ3RoIC0gMV1cclxuICAgICAgdGhyb3cgZXJyb3JBdEluZGV4KHRvcEhhbGZUYWcuc3RhcnQuaW5kZXgsIGBVbmNsb3NlZCAnJHt0b3BIYWxmVGFnLnR5cGV9JyAoYXQgY29tbWFuZCAjJHt0b3BIYWxmVGFnLnN0YXJ0LmluZGV4ICsgMX0pYClcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9fc2V0U3RhdGUobmV4dFN0YXRlKVxyXG4gIH1cclxuXHJcbiAgcnVuIChjb21tYW5kLCBpbmRleCkge1xyXG4gICAgY29uc3QgeyBjbWQsIHRhcmdldCwgdmFsdWUgfSA9IGNvbW1hbmRcclxuXHJcbiAgICBpZiAodGhpcy5fX2N1c3RvbVJ1bikge1xyXG4gICAgICBjb25zdCBwID0gdGhpcy5fX2N1c3RvbVJ1bihjb21tYW5kLCBpbmRleClcclxuICAgICAgaWYgKHApICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHApXHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGFiZWxcclxuICAgIHN3aXRjaCAoY21kKSB7XHJcbiAgICAgIGNhc2UgJ29uRXJyb3InOiB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgICAgICAgICAgID0gY29tbWFuZC52YWx1ZSAmJiBjb21tYW5kLnZhbHVlLnRyaW0oKVxyXG4gICAgICAgIGNvbnN0IHRhcmdldCAgICAgICAgICA9IGNvbW1hbmQudGFyZ2V0ICYmIGNvbW1hbmQudGFyZ2V0LnRyaW0oKVxyXG4gICAgICAgIGNvbnN0IGlzVmFsaWRUYXJnZXQgICA9IHRhcmdldCAmJiAoL14jcmVzdGFydCQvaS50ZXN0KHRhcmdldCkgfHwgL14jZ290byQvaS50ZXN0KHRhcmdldCkpXHJcblxyXG4gICAgICAgIGlmICghaXNWYWxpZFRhcmdldCkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHRhcmdldCBmb3Igb25FcnJvciBjb21tYW5kJylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgvXiNnb3RvJC9pLnRlc3QodGFyZ2V0KSkge1xyXG4gICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmxhYmVsc1t2YWx1ZV0pIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBsYWJlbCAke3ZhbHVlfSBkb2Vzbid0IGV4aXN0YClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBpc0Zsb3dMb2dpYzogdHJ1ZSB9KVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjYXNlICdnb3RvTGFiZWwnOiB7XHJcbiAgICAgICAgaWYgKCF0YXJnZXQgfHwgIXRhcmdldC5sZW5ndGgpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB0YXJnZXQgZm9yIGdvdG9MYWJlbCBjb21tbWFuZCcpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUubGFiZWxzW3RhcmdldF0pIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbGFiZWwgJHt0YXJnZXR9IGRvZXNuJ3QgZXhpc3RgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgICAgICBpc0Zsb3dMb2dpYzogIHRydWUsXHJcbiAgICAgICAgICBuZXh0SW5kZXg6ICAgIHRoaXMuc3RhdGUubGFiZWxzW3RhcmdldF0uaW5kZXhcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjYXNlICdlbHNlJzoge1xyXG4gICAgICAgIC8vIE5vdGU6ICdlbHNlJyBjb21tYW5kIGl0c2VsZiB3aWxsIGJlIHNraXBwZWQgaWYgY29uZGl0aW9uIGlzIGZhbHNlLFxyXG4gICAgICAgIC8vIEJ1dCBpdCB3aWxsIGJlIHJ1biBhcyB0aGUgZW5kaW5nIGNvbW1hbmQgb2YgJ2lmLWVsc2UnIHdoZW4gY29uZGl0aW9uIGlzIHRydWVcclxuICAgICAgICBjb25zdCB0YWcgPSB0aGlzLnN0YXRlLnRhZ3MuZmluZCh0YWcgPT4gdGFnLnR5cGUgPT09ICdpZicgJiYgdGFnLmZvcmsuaW5kZXggPT09IGluZGV4KVxyXG5cclxuICAgICAgICBpZiAoIXRhZykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0YWcgbm90IGZvdW5kIGZvciB0aGlzIGVsc2UgKGF0IGNvbW1hbmQgIyR7aW5kZXggKyAxfSlgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgICAgICBpc0Zsb3dMb2dpYzogdHJ1ZSxcclxuICAgICAgICAgIG5leHRJbmRleDogdGFnLmVuZC5pbmRleCArIDFcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjYXNlICdlbmRpZic6IHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgaXNGbG93TG9naWM6IHRydWUgfSlcclxuICAgICAgfVxyXG5cclxuICAgICAgY2FzZSAnZW5kV2hpbGUnOiB7XHJcbiAgICAgICAgY29uc3QgdGFnID0gdGhpcy5zdGF0ZS50YWdzLmZpbmQodGFnID0+IHRhZy50eXBlID09PSAnd2hpbGUnICYmIHRhZy5lbmQuaW5kZXggPT09IGluZGV4KVxyXG5cclxuICAgICAgICBpZiAoIXRhZykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0YWcgbm90IGZvdW5kIGZvciB0aGlzIGVuZFdoaWxlIChhdCBjb21tYW5kICMke2luZGV4ICsgMX0pYClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgICAgICAgaXNGbG93TG9naWM6IHRydWUsXHJcbiAgICAgICAgICBuZXh0SW5kZXg6IHRhZy5zdGFydC5pbmRleFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgJ2NvbW1lbnQnOlxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBpc0Zsb3dMb2dpYzogdHJ1ZSB9KVxyXG5cclxuICAgICAgLy8gQXMgb2YgJ2xhYmVsJywgaXQgZG9lc24ndCBkbyBhbnl0aGluZywgc28gd2UganVzdCBraW5kIG9mIHNraXAgaXRcclxuICAgICAgY2FzZSAnbGFiZWwnOlxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBpc0Zsb3dMb2dpYzogdHJ1ZSB9KVxyXG5cclxuICAgICAgLy8gTm90ZTogZ290b0lmLCBpZiBhbmQgd2hpbGUgbmVlZCB0byBydW4gZXZhbCwgd2hpY2ggaXMgbm90IGFsbG93ZWQgaW4gZXh0ZW5zaW9uIHNjb3BlLFxyXG4gICAgICAvLyBzbyB3ZSBoYXZlIHRvIHJ1biBldmFsIGluIGNvbnRlbnQgc2NyaXB0XHJcbiAgICAgIGNhc2UgJ2dvdG9JZic6XHJcbiAgICAgIGNhc2UgJ2lmJzpcclxuICAgICAgY2FzZSAnd2hpbGUnOlxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBpc0Zsb3dMb2dpYzogZmFsc2UgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHBvc3RSdW4gKGNvbW1hbmQsIGluZGV4LCByZXN1bHQpIHtcclxuICAgIGNvbnN0IHsgY21kLCB0YXJnZXQsIHZhbHVlIH0gPSBjb21tYW5kXHJcblxyXG4gICAgaWYgKHRoaXMuX19jdXN0b21Qb3N0KSB7XHJcbiAgICAgIGNvbnN0IHAgPSB0aGlzLl9fY3VzdG9tUG9zdChjb21tYW5kLCBpbmRleCwgcmVzdWx0KVxyXG4gICAgICBpZiAocCkgIHJldHVybiBQcm9taXNlLnJlc29sdmUocClcclxuICAgIH1cclxuXHJcbiAgICBzd2l0Y2ggKGNtZCkge1xyXG4gICAgICBjYXNlICdnb3RvSWYnOiB7XHJcbiAgICAgICAgLy8gc2hvcnQtY2lyY3VpdCB0aGUgY2hlY2sgb24gdmFsdWVcclxuICAgICAgICBpZiAoIXJlc3VsdC5jb25kaXRpb24pICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcclxuXHJcbiAgICAgICAgaWYgKCF2YWx1ZSB8fCAhdmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgdmFsdWUgZm9yIHZhbHVlIGNvbW1tYW5kJylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5sYWJlbHNbdmFsdWVdKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGxhYmVsICR7dmFsdWV9IGRvZXNuJ3QgZXhpc3RgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgICAgICBuZXh0SW5kZXg6IHRoaXMuc3RhdGUubGFiZWxzW3ZhbHVlXS5pbmRleFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgJ2lmJzoge1xyXG4gICAgICAgIGNvbnN0IGNvbmQgPSByZXN1bHQuY29uZGl0aW9uXHJcbiAgICAgICAgY29uc3QgdGFnICA9IHRoaXMuc3RhdGUudGFncy5maW5kKHRhZyA9PiB0YWcudHlwZSA9PT0gJ2lmJyAmJiB0YWcuc3RhcnQuaW5kZXggPT09IGluZGV4KVxyXG5cclxuICAgICAgICBpZiAoIXRhZykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0YWcgbm90IGZvdW5kIGZvciB0aGlzIGlmIChhdCBjb21tYW5kICMke2luZGV4ICsgMX0pYClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGZvcmtJbmRleCA9IHRhZy5mb3JrICYmICh0YWcuZm9yay5pbmRleCArIDEpXHJcbiAgICAgICAgY29uc3QgZW5kSW5kZXggID0gdGFnLmVuZCAmJiAodGFnLmVuZC5pbmRleCArIDEpXHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgICAgICAgbmV4dEluZGV4OiBjb25kID8gKGluZGV4ICsgMSkgOiAoZm9ya0luZGV4IHx8IGVuZEluZGV4KVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgJ3doaWxlJzoge1xyXG4gICAgICAgIGNvbnN0IGNvbmQgPSByZXN1bHQuY29uZGl0aW9uXHJcbiAgICAgICAgY29uc3QgdGFnICA9IHRoaXMuc3RhdGUudGFncy5maW5kKHRhZyA9PiB0YWcudHlwZSA9PT0gJ3doaWxlJyAmJiB0YWcuc3RhcnQuaW5kZXggPT09IGluZGV4KVxyXG5cclxuICAgICAgICBpZiAoIXRhZykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0YWcgbm90IGZvdW5kIGZvciB0aGlzIHdoaWxlIChhdCBjb21tYW5kICMke2luZGV4ICsgMX0pYClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGFnLmVuZCB8fCB0YWcuZW5kLmluZGV4ID09PSB1bmRlZmluZWQgfHwgdGFnLmVuZC5pbmRleCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0YWcgZG9lc24ndCBoYXZlIGEgdmFsaWQgZW5kIGluZGV4YClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXHJcbiAgICAgICAgICBjb25kID8ge30gOiB7IG5leHRJbmRleDogdGFnLmVuZC5pbmRleCArIDEgfVxyXG4gICAgICAgIClcclxuICAgICAgfVxyXG5cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbW1hbmRJbmRleEJ5TGFiZWwgKGxhYmVsTmFtZSkge1xyXG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLnN0YXRlLmxhYmVsc1tsYWJlbE5hbWVdXHJcblxyXG4gICAgaWYgKCFsYWJlbCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGxhYmVsICcke2xhYmVsTmFtZX0nIGRvZXNuJ3QgZXhpc3RgKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBsYWJlbC5pbmRleFxyXG4gIH1cclxuXHJcbiAgX19zZXRTdGF0ZSAoc3QpIHtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIC4uLnRoaXMuc3RhdGUsXHJcbiAgICAgIC4uLnN0XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIlxyXG5jb25zdCBUWVBFID0gJ1NFTEVOSVVNX0lERV9DU19NU0cnXHJcblxyXG5leHBvcnQgY29uc3QgcG9zdE1lc3NhZ2UgPSAodGFyZ2V0V2luLCBteVdpbiwgcGF5bG9hZCwgdGFyZ2V0ID0gJyonLCB0aW1lb3V0ID0gNjAwMDApID0+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgaWYgKCF0YXJnZXRXaW4gfHwgIXRhcmdldFdpbi5wb3N0TWVzc2FnZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NzUG9zdE1lc3NhZ2U6IHRhcmdldFdpbiBpcyBub3QgYSB3aW5kb3cnLCB0YXJnZXRXaW4pXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFteVdpbiB8fCAhbXlXaW4uYWRkRXZlbnRMaXN0ZW5lciB8fCAhbXlXaW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NzUG9zdE1lc3NhZ2U6IG15V2luIGlzIG5vdCBhIHdpbmRvdycsIG15V2luKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNlY3JldCAgPSBNYXRoLnJhbmRvbSgpXHJcbiAgICBjb25zdCB0eXBlICAgID0gVFlQRVxyXG5cclxuICAgIC8vIE5vdGU6IGNyZWF0ZSBhIGxpc3RlbmVyIHdpdGggYSBjb3JyZXNwb25kaW5nIHNlY3JldCBldmVyeSB0aW1lXHJcbiAgICBjb25zdCBvbk1zZyAgID0gKGUpID0+IHtcclxuICAgICAgaWYgKGUuZGF0YSAmJiBlLmRhdGEudHlwZSA9PT0gVFlQRSAmJiAhZS5kYXRhLmlzUmVxdWVzdCAmJiBlLmRhdGEuc2VjcmV0ID09PSBzZWNyZXQpIHtcclxuICAgICAgICBteVdpbi5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25Nc2cpXHJcbiAgICAgICAgY29uc3QgeyBwYXlsb2FkLCBlcnJvciB9ID0gZS5kYXRhXHJcblxyXG4gICAgICAgIGlmIChlcnJvcikgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihlcnJvcikpXHJcbiAgICAgICAgaWYgKHBheWxvYWQgIT09IHVuZGVmaW5lZCkgIHJldHVybiByZXNvbHZlKHBheWxvYWQpXHJcblxyXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2NzUG9zdE1lc3NhZ2U6IE5vIHBheWxvYWQgbm9yIGVycm9yIGZvdW5kJykpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBteVdpbi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25Nc2cpXHJcblxyXG4gICAgLy8gTm90ZTpcclxuICAgIC8vICogYHR5cGVgIHRvIG1ha2Ugc3VyZSB3ZSBjaGVjayBvdXIgb3duIG1zZyBvbmx5XHJcbiAgICAvLyAqIGBzZWNyZXRgIGlzIGZvciAxIHRvIDEgcmVsYXRpb25zaGlwIGJldHdlZW4gYSBtc2cgYW5kIGEgbGlzdGVuZXJcclxuICAgIC8vICogYHBheWxvYWRgIGlzIHRoZSByZWFsIGRhdGEgeW91IHdhbnQgdG8gc2VuZFxyXG4gICAgLy8gKiBgaXNSZXF1ZXN0YCBpcyB0byBtYXJrIHRoYXQgaXQncyBub3QgYW4gYW5zd2VyIHRvIHNvbWUgcHJldmlvdXMgcmVxdWVzdFxyXG4gICAgdGFyZ2V0V2luLnBvc3RNZXNzYWdlKHtcclxuICAgICAgdHlwZSxcclxuICAgICAgc2VjcmV0LFxyXG4gICAgICBwYXlsb2FkLFxyXG4gICAgICBpc1JlcXVlc3Q6IHRydWVcclxuICAgIH0sIHRhcmdldClcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgcmVqZWN0KG5ldyBFcnJvcihgY3NQb3N0TWVzc2FnZTogdGltZW91dCAke3RpbWVvdXR9IG1zYCkpXHJcbiAgICB9LCB0aW1lb3V0KVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBvbk1lc3NhZ2UgPSAod2luLCBmbikgPT4ge1xyXG4gIGlmICghd2luIHx8ICF3aW4uYWRkRXZlbnRMaXN0ZW5lciB8fCAhd2luLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignY3NPbk1lc3NhZ2U6IG5vdCBhIHdpbmRvdycsIHdpbilcclxuICB9XHJcblxyXG4gIGNvbnN0IG9uTXNnID0gKGUpID0+IHtcclxuICAgIC8vIE5vdGU6IG9ubHkgcmVzcG9uZCB0byBtc2cgd2l0aCBgaXNSZXF1ZXN0YCBhcyB0cnVlXHJcbiAgICBpZiAoZSAmJiBlLmRhdGEgJiYgZS5kYXRhLnR5cGUgPT09IFRZUEUgJiYgZS5kYXRhLmlzUmVxdWVzdCAmJiBlLmRhdGEuc2VjcmV0KSB7XHJcbiAgICAgIGNvbnN0IHRwbCA9IHtcclxuICAgICAgICB0eXBlOiBUWVBFLFxyXG4gICAgICAgIHNlY3JldDogZS5kYXRhLnNlY3JldFxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBOb3RlOiB3cmFwcGVkIHdpdGggYSBuZXcgUHJvbWlzZSB0byBjYXRjaCBhbnkgZXhjZXB0aW9uIGR1cmluZyB0aGUgZXhlY3V0aW9uIG9mIGZuXHJcbiAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBsZXQgcmV0O1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgcmV0ID0gZm4oZS5kYXRhLnBheWxvYWQsIHtcclxuICAgICAgICAgICAgc291cmNlOiBlLnNvdXJjZVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgIHJlamVjdChlcnIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOb3RlOiBvbmx5IHJlc29sdmUgaWYgcmV0dXJuZWQgdmFsdWUgaXMgbm90IHVuZGVmaW5lZC4gV2l0aCB0aGlzLCB3ZSBjYW4gaGF2ZSBtdWx0aXBsZVxyXG4gICAgICAgIC8vIGxpc3RlbmVycyBhZGRlZCB0byBvbk1lc3NhZ2UsIGFuZCBlYWNoIG9uZSB0YWtlcyBjYXJlIG9mIHdoYXQgaXQgcmVhbGx5IGNhcmVzXHJcbiAgICAgICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICByZXNvbHZlKHJldClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKFxyXG4gICAgICAgIChyZXMpID0+IHtcclxuICAgICAgICAgIGUuc291cmNlLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICAgICAgLi4udHBsLFxyXG4gICAgICAgICAgICBwYXlsb2FkOiByZXNcclxuICAgICAgICAgIH0sICcqJylcclxuICAgICAgICB9LFxyXG4gICAgICAgIChlcnIpID0+IHtcclxuICAgICAgICAgIGUuc291cmNlLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICAgICAgLi4udHBsLFxyXG4gICAgICAgICAgICBlcnJvcjogZXJyLm1lc3NhZ2VcclxuICAgICAgICAgIH0sICcqJylcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHdpbi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25Nc2cpXHJcbiAgcmV0dXJuICgpID0+IHdpbi5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25Nc2cpXHJcbn1cclxuIiwiaW1wb3J0IHsgY3NJbml0IH0gZnJvbSAnLi9pcGNfYmdfY3MnXHJcblxyXG5jb25zdCB0aHJvd05vdFRvcCA9ICgpID0+IHtcclxuICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBhcmUgbm90IGEgdG9wIHdpbmRvdywgbm90IGFsbG93ZWQgdG8gaW5pdGlhbGl6ZS91c2UgY3NJcGMnKVxyXG59XHJcblxyXG4vLyBOb3RlOiBjc0lwYyBpcyBvbmx5IGF2YWlsYWJsZSB0byB0b3Agd2luZG93XHJcbmNvbnN0IGlwYyA9IHdpbmRvdy50b3AgPT09IHdpbmRvdyA/IGNzSW5pdCgpIDoge1xyXG4gIGFzazogdGhyb3dOb3RUb3AsXHJcbiAgc2VuZDogdGhyb3dOb3RUb3AsXHJcbiAgb25Bc2s6IHRocm93Tm90VG9wLFxyXG4gIGRlc3Ryb3k6IHRocm93Tm90VG9wXHJcbn1cclxuXHJcbi8vIE5vdGU6IG9uZSBpcGMgc2luZ2xldG9uIHBlciBjb250ZW50IHNjcmlwdFxyXG5leHBvcnQgZGVmYXVsdCBpcGNcclxuIiwiLyogRmlsZVNhdmVyLmpzXHJcbiAqIEEgc2F2ZUFzKCkgRmlsZVNhdmVyIGltcGxlbWVudGF0aW9uLlxyXG4gKiAxLjMuMlxyXG4gKiAyMDE2LTA2LTE2IDE4OjI1OjE5XHJcbiAqXHJcbiAqIEJ5IEVsaSBHcmV5LCBodHRwOi8vZWxpZ3JleS5jb21cclxuICogTGljZW5zZTogTUlUXHJcbiAqICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGlncmV5L0ZpbGVTYXZlci5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXHJcbiAqL1xyXG5cclxuLypnbG9iYWwgc2VsZiAqL1xyXG4vKmpzbGludCBiaXR3aXNlOiB0cnVlLCBpbmRlbnQ6IDQsIGxheGJyZWFrOiB0cnVlLCBsYXhjb21tYTogdHJ1ZSwgc21hcnR0YWJzOiB0cnVlLCBwbHVzcGx1czogdHJ1ZSAqL1xyXG5cclxuLyohIEBzb3VyY2UgaHR0cDovL3B1cmwuZWxpZ3JleS5jb20vZ2l0aHViL0ZpbGVTYXZlci5qcy9ibG9iL21hc3Rlci9GaWxlU2F2ZXIuanMgKi9cclxuXHJcbnZhciBzYXZlQXMgPSBzYXZlQXMgfHwgKGZ1bmN0aW9uKHZpZXcpIHtcclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHQvLyBJRSA8MTAgaXMgZXhwbGljaXRseSB1bnN1cHBvcnRlZFxyXG5cdGlmICh0eXBlb2YgdmlldyA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmIC9NU0lFIFsxLTldXFwuLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdHZhclxyXG5cdFx0ICBkb2MgPSB2aWV3LmRvY3VtZW50XHJcblx0XHQgIC8vIG9ubHkgZ2V0IFVSTCB3aGVuIG5lY2Vzc2FyeSBpbiBjYXNlIEJsb2IuanMgaGFzbid0IG92ZXJyaWRkZW4gaXQgeWV0XHJcblx0XHQsIGdldF9VUkwgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHZpZXcuVVJMIHx8IHZpZXcud2Via2l0VVJMIHx8IHZpZXc7XHJcblx0XHR9XHJcblx0XHQsIGlzX2ZpcmVmb3hfZXh0ZW5zaW9uID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnbW96LWV4dGVuc2lvbjonXHJcblx0XHQsIGNyZWF0ZV9saW5rX2Zvcl9mZl9leHQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdC8vIFRlbXBvcmFyeSBmaXggZm9yIGZpcmVmb3ggZXh0ZW5zaW9uIG9uIE1hYyAvIExpbnV4XHJcblx0XHRcdC8vIHJlZmVyZW5jZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/Zm9ybWF0PWRlZmF1bHQmaWQ9MTQyMDQxOVxyXG5cdFx0XHR2YXIgaWZyYW1lSWQgXHQ9ICdkb3dubG9hZEZyYW1lJ1xyXG5cdFx0XHR2YXIgJGlmcmFtZSBcdD0gZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiwgXCJpZnJhbWVcIilcclxuXHJcblx0XHRcdCRpZnJhbWUuaWQgPSBpZnJhbWVJZFxyXG5cdFx0XHQkaWZyYW1lLnN0eWxlLnZpc2liaWxpdHkgXHQ9ICdoaWRkZW4nXHJcblx0XHRcdCRpZnJhbWUuc3R5bGUucG9zaXRpb24gXHRcdD0gJ2Fic29sdXRlJ1xyXG5cdFx0XHQkaWZyYW1lLnN0eWxlLmxlZnQgXHRcdFx0XHQ9ICctOTk5cHgnXHJcblx0XHRcdGRvYy5ib2R5LmFwcGVuZENoaWxkKCRpZnJhbWUpXHJcblxyXG5cdFx0XHR2YXIgbGluayA9ICRpZnJhbWUuY29udGVudERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxyXG5cclxuXHRcdFx0Ly8gd2FpdCBmb3IgbmV4dCB0aWNrIHdoZW4gaWZyYW1lIGlzIGFscmVhZHkgaW4gZG9jdW1lbnQsXHJcblx0XHRcdC8vIG90aGVyd2lzZSBsaW5rIHdvbid0IGJlIGFkZCB0byBib2R5IG9mIGlmcmFtZVxyXG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHQkaWZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspXHJcblx0XHRcdH0pXHJcblxyXG5cdFx0XHRyZXR1cm4gbGlua1xyXG5cdFx0fVxyXG5cdFx0LCBzYXZlX2xpbmsgPSBpc19maXJlZm94X2V4dGVuc2lvbiA/IGNyZWF0ZV9saW5rX2Zvcl9mZl9leHQoKSA6IGRvYy5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsIFwiYVwiKVxyXG5cdFx0LCBjYW5fdXNlX3NhdmVfbGluayA9IFwiZG93bmxvYWRcIiBpbiBzYXZlX2xpbmtcclxuXHRcdCwgY2xpY2sgPSBmdW5jdGlvbihub2RlKSB7XHJcblx0XHRcdHZhciBldmVudCA9IG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIik7XHJcblx0XHRcdG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcblx0XHR9XHJcblx0XHQsIGlzX3NhZmFyaSA9IC9jb25zdHJ1Y3Rvci9pLnRlc3Qodmlldy5IVE1MRWxlbWVudCkgfHwgdmlldy5zYWZhcmlcclxuXHRcdCwgaXNfY2hyb21lX2lvcyA9L0NyaU9TXFwvW1xcZF0rLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXHJcblx0XHQsIHRocm93X291dHNpZGUgPSBmdW5jdGlvbihleCkge1xyXG5cdFx0XHQodmlldy5zZXRJbW1lZGlhdGUgfHwgdmlldy5zZXRUaW1lb3V0KShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR0aHJvdyBleDtcclxuXHRcdFx0fSwgMCk7XHJcblx0XHR9XHJcblx0XHQsIGZvcmNlX3NhdmVhYmxlX3R5cGUgPSBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiXHJcblx0XHQvLyB0aGUgQmxvYiBBUEkgaXMgZnVuZGFtZW50YWxseSBicm9rZW4gYXMgdGhlcmUgaXMgbm8gXCJkb3dubG9hZGZpbmlzaGVkXCIgZXZlbnQgdG8gc3Vic2NyaWJlIHRvXHJcblx0XHQsIGFyYml0cmFyeV9yZXZva2VfdGltZW91dCA9IDEwMDAgKiA0MCAvLyBpbiBtc1xyXG5cdFx0LCByZXZva2UgPSBmdW5jdGlvbihmaWxlKSB7XHJcblx0XHRcdHZhciByZXZva2VyID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBmaWxlID09PSBcInN0cmluZ1wiKSB7IC8vIGZpbGUgaXMgYW4gb2JqZWN0IFVSTFxyXG5cdFx0XHRcdFx0Z2V0X1VSTCgpLnJldm9rZU9iamVjdFVSTChmaWxlKTtcclxuXHRcdFx0XHR9IGVsc2UgeyAvLyBmaWxlIGlzIGEgRmlsZVxyXG5cdFx0XHRcdFx0ZmlsZS5yZW1vdmUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHRcdHNldFRpbWVvdXQocmV2b2tlciwgYXJiaXRyYXJ5X3Jldm9rZV90aW1lb3V0KTtcclxuXHRcdH1cclxuXHRcdCwgZGlzcGF0Y2ggPSBmdW5jdGlvbihmaWxlc2F2ZXIsIGV2ZW50X3R5cGVzLCBldmVudCkge1xyXG5cdFx0XHRldmVudF90eXBlcyA9IFtdLmNvbmNhdChldmVudF90eXBlcyk7XHJcblx0XHRcdHZhciBpID0gZXZlbnRfdHlwZXMubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoaS0tKSB7XHJcblx0XHRcdFx0dmFyIGxpc3RlbmVyID0gZmlsZXNhdmVyW1wib25cIiArIGV2ZW50X3R5cGVzW2ldXTtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGxpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdGxpc3RlbmVyLmNhbGwoZmlsZXNhdmVyLCBldmVudCB8fCBmaWxlc2F2ZXIpO1xyXG5cdFx0XHRcdFx0fSBjYXRjaCAoZXgpIHtcclxuXHRcdFx0XHRcdFx0dGhyb3dfb3V0c2lkZShleCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQsIGF1dG9fYm9tID0gZnVuY3Rpb24oYmxvYikge1xyXG5cdFx0XHQvLyBwcmVwZW5kIEJPTSBmb3IgVVRGLTggWE1MIGFuZCB0ZXh0LyogdHlwZXMgKGluY2x1ZGluZyBIVE1MKVxyXG5cdFx0XHQvLyBub3RlOiB5b3VyIGJyb3dzZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGNvbnZlcnQgVVRGLTE2IFUrRkVGRiB0byBFRiBCQiBCRlxyXG5cdFx0XHRpZiAoL15cXHMqKD86dGV4dFxcL1xcUyp8YXBwbGljYXRpb25cXC94bWx8XFxTKlxcL1xcUypcXCt4bWwpXFxzKjsuKmNoYXJzZXRcXHMqPVxccyp1dGYtOC9pLnRlc3QoYmxvYi50eXBlKSkge1xyXG5cdFx0XHRcdHJldHVybiBuZXcgQmxvYihbU3RyaW5nLmZyb21DaGFyQ29kZSgweEZFRkYpLCBibG9iXSwge3R5cGU6IGJsb2IudHlwZX0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBibG9iO1xyXG5cdFx0fVxyXG5cdFx0LCBGaWxlU2F2ZXIgPSBmdW5jdGlvbihibG9iLCBuYW1lLCBub19hdXRvX2JvbSkge1xyXG5cdFx0XHRpZiAoIW5vX2F1dG9fYm9tKSB7XHJcblx0XHRcdFx0YmxvYiA9IGF1dG9fYm9tKGJsb2IpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIEZpcnN0IHRyeSBhLmRvd25sb2FkLCB0aGVuIHdlYiBmaWxlc3lzdGVtLCB0aGVuIG9iamVjdCBVUkxzXHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdCAgZmlsZXNhdmVyID0gdGhpc1xyXG5cdFx0XHRcdCwgdHlwZSA9IGJsb2IudHlwZVxyXG5cdFx0XHRcdCwgZm9yY2UgPSB0eXBlID09PSBmb3JjZV9zYXZlYWJsZV90eXBlXHJcblx0XHRcdFx0LCBvYmplY3RfdXJsXHJcblx0XHRcdFx0LCBkaXNwYXRjaF9hbGwgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGRpc3BhdGNoKGZpbGVzYXZlciwgXCJ3cml0ZXN0YXJ0IHByb2dyZXNzIHdyaXRlIHdyaXRlZW5kXCIuc3BsaXQoXCIgXCIpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gb24gYW55IGZpbGVzeXMgZXJyb3JzIHJldmVydCB0byBzYXZpbmcgd2l0aCBvYmplY3QgVVJMc1xyXG5cdFx0XHRcdCwgZnNfZXJyb3IgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICgoaXNfY2hyb21lX2lvcyB8fCAoZm9yY2UgJiYgaXNfc2FmYXJpKSkgJiYgdmlldy5GaWxlUmVhZGVyKSB7XHJcblx0XHRcdFx0XHRcdC8vIFNhZmFyaSBkb2Vzbid0IGFsbG93IGRvd25sb2FkaW5nIG9mIGJsb2IgdXJsc1xyXG5cdFx0XHRcdFx0XHR2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuXHRcdFx0XHRcdFx0cmVhZGVyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciB1cmwgPSBpc19jaHJvbWVfaW9zID8gcmVhZGVyLnJlc3VsdCA6IHJlYWRlci5yZXN1bHQucmVwbGFjZSgvXmRhdGE6W147XSo7LywgJ2RhdGE6YXR0YWNobWVudC9maWxlOycpO1xyXG5cdFx0XHRcdFx0XHRcdHZhciBwb3B1cCA9IHZpZXcub3Blbih1cmwsICdfYmxhbmsnKTtcclxuXHRcdFx0XHRcdFx0XHRpZighcG9wdXApIHZpZXcubG9jYXRpb24uaHJlZiA9IHVybDtcclxuXHRcdFx0XHRcdFx0XHR1cmw9dW5kZWZpbmVkOyAvLyByZWxlYXNlIHJlZmVyZW5jZSBiZWZvcmUgZGlzcGF0Y2hpbmdcclxuXHRcdFx0XHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5ET05FO1xyXG5cdFx0XHRcdFx0XHRcdGRpc3BhdGNoX2FsbCgpO1xyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0XHRyZWFkZXIucmVhZEFzRGF0YVVSTChibG9iKTtcclxuXHRcdFx0XHRcdFx0ZmlsZXNhdmVyLnJlYWR5U3RhdGUgPSBmaWxlc2F2ZXIuSU5JVDtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly8gZG9uJ3QgY3JlYXRlIG1vcmUgb2JqZWN0IFVSTHMgdGhhbiBuZWVkZWRcclxuXHRcdFx0XHRcdGlmICghb2JqZWN0X3VybCkge1xyXG5cdFx0XHRcdFx0XHRvYmplY3RfdXJsID0gZ2V0X1VSTCgpLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChmb3JjZSkge1xyXG5cdFx0XHRcdFx0XHR2aWV3LmxvY2F0aW9uLmhyZWYgPSBvYmplY3RfdXJsO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0dmFyIG9wZW5lZCA9IHZpZXcub3BlbihvYmplY3RfdXJsLCBcIl9ibGFua1wiKTtcclxuXHRcdFx0XHRcdFx0aWYgKCFvcGVuZWQpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBBcHBsZSBkb2VzIG5vdCBhbGxvdyB3aW5kb3cub3Blbiwgc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L3NhZmFyaS9kb2N1bWVudGF0aW9uL1Rvb2xzL0NvbmNlcHR1YWwvU2FmYXJpRXh0ZW5zaW9uR3VpZGUvV29ya2luZ3dpdGhXaW5kb3dzYW5kVGFicy9Xb3JraW5nd2l0aFdpbmRvd3NhbmRUYWJzLmh0bWxcclxuXHRcdFx0XHRcdFx0XHR2aWV3LmxvY2F0aW9uLmhyZWYgPSBvYmplY3RfdXJsO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5ET05FO1xyXG5cdFx0XHRcdFx0ZGlzcGF0Y2hfYWxsKCk7XHJcblx0XHRcdFx0XHRyZXZva2Uob2JqZWN0X3VybCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQ7XHJcblx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLklOSVQ7XHJcblxyXG5cdFx0XHRpZiAoY2FuX3VzZV9zYXZlX2xpbmspIHtcclxuXHRcdFx0XHRvYmplY3RfdXJsID0gZ2V0X1VSTCgpLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0c2F2ZV9saW5rLmhyZWYgPSBvYmplY3RfdXJsO1xyXG5cdFx0XHRcdFx0c2F2ZV9saW5rLmRvd25sb2FkID0gbmFtZTtcclxuXHRcdFx0XHRcdGNsaWNrKHNhdmVfbGluayk7XHJcblx0XHRcdFx0XHRkaXNwYXRjaF9hbGwoKTtcclxuXHRcdFx0XHRcdHJldm9rZShvYmplY3RfdXJsKTtcclxuXHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmc19lcnJvcigpO1xyXG5cdFx0fVxyXG5cdFx0LCBGU19wcm90byA9IEZpbGVTYXZlci5wcm90b3R5cGVcclxuXHRcdCwgc2F2ZUFzID0gZnVuY3Rpb24oYmxvYiwgbmFtZSwgbm9fYXV0b19ib20pIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBGaWxlU2F2ZXIoYmxvYiwgbmFtZSB8fCBibG9iLm5hbWUgfHwgXCJkb3dubG9hZFwiLCBub19hdXRvX2JvbSk7XHJcblx0XHR9XHJcblx0O1xyXG5cdC8vIElFIDEwKyAobmF0aXZlIHNhdmVBcylcclxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYikge1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGJsb2IsIG5hbWUsIG5vX2F1dG9fYm9tKSB7XHJcblx0XHRcdG5hbWUgPSBuYW1lIHx8IGJsb2IubmFtZSB8fCBcImRvd25sb2FkXCI7XHJcblxyXG5cdFx0XHRpZiAoIW5vX2F1dG9fYm9tKSB7XHJcblx0XHRcdFx0YmxvYiA9IGF1dG9fYm9tKGJsb2IpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihibG9iLCBuYW1lKTtcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRGU19wcm90by5hYm9ydCA9IGZ1bmN0aW9uKCl7fTtcclxuXHRGU19wcm90by5yZWFkeVN0YXRlID0gRlNfcHJvdG8uSU5JVCA9IDA7XHJcblx0RlNfcHJvdG8uV1JJVElORyA9IDE7XHJcblx0RlNfcHJvdG8uRE9ORSA9IDI7XHJcblxyXG5cdEZTX3Byb3RvLmVycm9yID1cclxuXHRGU19wcm90by5vbndyaXRlc3RhcnQgPVxyXG5cdEZTX3Byb3RvLm9ucHJvZ3Jlc3MgPVxyXG5cdEZTX3Byb3RvLm9ud3JpdGUgPVxyXG5cdEZTX3Byb3RvLm9uYWJvcnQgPVxyXG5cdEZTX3Byb3RvLm9uZXJyb3IgPVxyXG5cdEZTX3Byb3RvLm9ud3JpdGVlbmQgPVxyXG5cdFx0bnVsbDtcclxuXHJcblx0cmV0dXJuIHNhdmVBcztcclxufShcclxuXHQgICB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmXHJcblx0fHwgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3dcclxuXHR8fCB0aGlzLmNvbnRlbnRcclxuKSk7XHJcbi8vIGBzZWxmYCBpcyB1bmRlZmluZWQgaW4gRmlyZWZveCBmb3IgQW5kcm9pZCBjb250ZW50IHNjcmlwdCBjb250ZXh0XHJcbi8vIHdoaWxlIGB0aGlzYCBpcyBuc0lDb250ZW50RnJhbWVNZXNzYWdlTWFuYWdlclxyXG4vLyB3aXRoIGFuIGF0dHJpYnV0ZSBgY29udGVudGAgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgd2luZG93XHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG4gIG1vZHVsZS5leHBvcnRzLnNhdmVBcyA9IHNhdmVBcztcclxufSBlbHNlIGlmICgodHlwZW9mIGRlZmluZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkZWZpbmUgIT09IG51bGwpICYmIChkZWZpbmUuYW1kICE9PSBudWxsKSkge1xyXG4gIGRlZmluZShcIkZpbGVTYXZlci5qc1wiLCBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBzYXZlQXM7XHJcbiAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IGlzRWRpdGFibGUgZnJvbSAnZG9tLWVsZW1lbnQtaXMtbmF0aXZlbHktZWRpdGFibGUnO1xyXG5cclxuY29uc3QgQ1RSTCA9IDEgPDwgMDtcclxuY29uc3QgTUVUQSA9IDEgPDwgMTtcclxuY29uc3QgQUxUID0gMSA8PCAyO1xyXG5jb25zdCBTSElGVCA9IDEgPDwgMztcclxuXHJcbi8vIEtleSBFdmVudHNcclxuZXhwb3J0IGNvbnN0IEtleUV2ZW50cyA9IHtcclxuICBET1dOOiAxIDw8IDAsXHJcbiAgUFJFU1M6IDEgPDwgMSxcclxuICBVUDogMSA8PCAyLFxyXG4gIElOUFVUOiAxIDw8IDNcclxufTtcclxuS2V5RXZlbnRzLkFMTCA9IEtleUV2ZW50cy5ET1dOIHwgS2V5RXZlbnRzLlBSRVNTIHwgS2V5RXZlbnRzLlVQIHwgS2V5RXZlbnRzLklOUFVUO1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBrZXlzdHJva2UsIG9yIGEgc2luZ2xlIGtleSBjb2RlIHdpdGggYSBzZXQgb2YgYWN0aXZlIG1vZGlmaWVycy5cclxuICpcclxuICogQGNsYXNzIEtleXN0cm9rZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEtleXN0cm9rZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1vZGlmaWVycyBBIGJpdG1hc2sgZm9ybWVkIGJ5IENUUkwsIE1FVEEsIEFMVCwgYW5kIFNISUZULlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBrZXlDb2RlXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IgKG1vZGlmaWVycywga2V5Q29kZSkge1xyXG4gICAgdGhpcy5tb2RpZmllcnMgPSBtb2RpZmllcnM7XHJcbiAgICB0aGlzLmN0cmxLZXkgPSAhIShtb2RpZmllcnMgJiBDVFJMKTtcclxuICAgIHRoaXMubWV0YUtleSA9ICEhKG1vZGlmaWVycyAmIE1FVEEpO1xyXG4gICAgdGhpcy5hbHRLZXkgPSAhIShtb2RpZmllcnMgJiBBTFQpO1xyXG4gICAgdGhpcy5zaGlmdEtleSA9ICEhKG1vZGlmaWVycyAmIFNISUZUKTtcclxuICAgIHRoaXMua2V5Q29kZSA9IGtleUNvZGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBiaXRtYXNrIHZhbHVlIGZvciB0aGUgXCJjb250cm9sXCIgbW9kaWZpZXIuXHJcbiAgICpcclxuICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAqL1xyXG4gIHN0YXRpYyBDVFJMID0gQ1RSTDtcclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgYml0bWFzayB2YWx1ZSBmb3IgdGhlIFwibWV0YVwiIG1vZGlmaWVyLlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7bnVtYmVyfVxyXG4gICAqL1xyXG4gIHN0YXRpYyBNRVRBID0gTUVUQTtcclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgYml0bWFzayB2YWx1ZSBmb3IgdGhlIFwiYWx0XCIgbW9kaWZpZXIuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAgICovXHJcbiAgc3RhdGljIEFMVCA9IEFMVDtcclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgYml0bWFzayB2YWx1ZSBmb3IgdGhlIFwic2hpZnRcIiBtb2RpZmllci5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgKi9cclxuICBzdGF0aWMgU0hJRlQgPSBTSElGVDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNpbXVsYXRlcyBhIGtleWJvYXJkIHdpdGggYSBwYXJ0aWN1bGFyIGtleS10by1jaGFyYWN0ZXIgYW5kIGtleS10by1hY3Rpb25cclxuICogbWFwcGluZy4gVXNlIGBVU19FTkdMSVNIYCB0byBnZXQgYSBwcmUtY29uZmlndXJlZCBrZXlib2FyZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBLZXlib2FyZCB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtPYmplY3QuPG51bWJlciwgS2V5c3Ryb2tlPn0gY2hhckNvZGVLZXlDb2RlTWFwXHJcbiAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgbnVtYmVyPn0gYWN0aW9uS2V5Q29kZU1hcFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yIChjaGFyQ29kZUtleUNvZGVNYXAsIGFjdGlvbktleUNvZGVNYXApIHtcclxuICAgIHRoaXMuX2NoYXJDb2RlS2V5Q29kZU1hcCA9IGNoYXJDb2RlS2V5Q29kZU1hcDtcclxuICAgIHRoaXMuX2FjdGlvbktleUNvZGVNYXAgPSBhY3Rpb25LZXlDb2RlTWFwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lcyB0aGUgY2hhcmFjdGVyIGNvZGUgZ2VuZXJhdGVkIGJ5IHByZXNzaW5nIHRoZSBnaXZlbiBrZXlzdHJva2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0tleXN0cm9rZX0ga2V5c3Ryb2tlXHJcbiAgICogQHJldHVybiB7P251bWJlcn1cclxuICAgKi9cclxuICBjaGFyQ29kZUZvcktleXN0cm9rZSAoa2V5c3Ryb2tlKSB7XHJcbiAgICBsZXQgbWFwID0gdGhpcy5fY2hhckNvZGVLZXlDb2RlTWFwO1xyXG4gICAgZm9yIChsZXQgY2hhckNvZGUgaW4gbWFwKSB7XHJcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFwLCBjaGFyQ29kZSkpIHtcclxuICAgICAgICBsZXQga2V5c3Ryb2tlRm9yQ2hhckNvZGUgPSBtYXBbY2hhckNvZGVdO1xyXG4gICAgICAgIGlmIChrZXlzdHJva2Uua2V5Q29kZSA9PT0ga2V5c3Ryb2tlRm9yQ2hhckNvZGUua2V5Q29kZSAmJlxyXG4gICAgICAgICAga2V5c3Ryb2tlLm1vZGlmaWVycyA9PT0ga2V5c3Ryb2tlRm9yQ2hhckNvZGUubW9kaWZpZXJzKSB7XHJcbiAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoY2hhckNvZGUsIDEwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhbiBldmVudCByZWFkeSBmb3IgZGlzcGF0Y2hpbmcgb250byB0aGUgZ2l2ZW4gdGFyZ2V0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgT25lIG9mIFwia2V5ZG93blwiLCBcImtleXByZXNzXCIsIFwia2V5dXBcIiwgXCJ0ZXh0SW5wdXRcIiBvciBcImlucHV0XCIuXHJcbiAgICogQHBhcmFtIHtLZXlzdHJva2V9IGtleXN0cm9rZVxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhcmdldFxyXG4gICAqIEByZXR1cm4ge0V2ZW50fVxyXG4gICAqL1xyXG4gIGNyZWF0ZUV2ZW50RnJvbUtleXN0cm9rZSAodHlwZSwga2V5c3Ryb2tlLCB0YXJnZXQpIHtcclxuICAgIGNvbnN0IGRvY3VtZW50ID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XHJcbiAgICBjb25zdCB3aW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcclxuICAgIGNvbnN0IEV2ZW50ID0gd2luZG93LkV2ZW50O1xyXG5cclxuICAgIGxldCBldmVudDtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBldmVudCA9IG5ldyBFdmVudCh0eXBlKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnVUlFdmVudHMnKTtcclxuICAgIH1cclxuXHJcbiAgICBldmVudC5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XHJcblxyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgIGNhc2UgJ3RleHRJbnB1dCc6XHJcbiAgICAgICAgZXZlbnQuZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5jaGFyQ29kZUZvcktleXN0cm9rZShrZXlzdHJva2UpKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ2tleWRvd24nOlxyXG4gICAgICBjYXNlICdrZXlwcmVzcyc6XHJcbiAgICAgIGNhc2UgJ2tleXVwJzpcclxuICAgICAgICBldmVudC5zaGlmdEtleSA9IGtleXN0cm9rZS5zaGlmdEtleTtcclxuICAgICAgICBldmVudC5hbHRLZXkgPSBrZXlzdHJva2UuYWx0S2V5O1xyXG4gICAgICAgIGV2ZW50Lm1ldGFLZXkgPSBrZXlzdHJva2UubWV0YUtleTtcclxuICAgICAgICBldmVudC5jdHJsS2V5ID0ga2V5c3Ryb2tlLmN0cmxLZXk7XHJcbiAgICAgICAgZXZlbnQua2V5Q29kZSA9IHR5cGUgPT09ICdrZXlwcmVzcycgPyB0aGlzLmNoYXJDb2RlRm9yS2V5c3Ryb2tlKGtleXN0cm9rZSkgOiBrZXlzdHJva2Uua2V5Q29kZTtcclxuICAgICAgICBldmVudC5jaGFyQ29kZSA9IHR5cGUgPT09ICdrZXlwcmVzcycgPyBldmVudC5rZXlDb2RlIDogMDtcclxuICAgICAgICBldmVudC53aGljaCA9IGV2ZW50LmtleUNvZGU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGV2ZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmlyZXMgdGhlIGNvcnJlY3Qgc2VxdWVuY2Ugb2YgZXZlbnRzIG9uIHRoZSBnaXZlbiB0YXJnZXQgYXMgaWYgdGhlIGdpdmVuXHJcbiAgICogYWN0aW9uIHdhcyB1bmRlcnRha2VuIGJ5IGEgaHVtYW4uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uIGUuZy4gXCJhbHQrc2hpZnQrbGVmdFwiIG9yIFwiYmFja3NwYWNlXCJcclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcclxuICAgKi9cclxuICBkaXNwYXRjaEV2ZW50c0ZvckFjdGlvbiAoYWN0aW9uLCB0YXJnZXQpIHtcclxuICAgIGNvbnN0IGtleXN0cm9rZSA9IHRoaXMua2V5c3Ryb2tlRm9yQWN0aW9uKGFjdGlvbik7XHJcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnRzRm9yS2V5c3Ryb2tlKGtleXN0cm9rZSwgdGFyZ2V0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZpcmVzIHRoZSBjb3JyZWN0IHNlcXVlbmNlIG9mIGV2ZW50cyBvbiB0aGUgZ2l2ZW4gdGFyZ2V0IGFzIGlmIHRoZSBnaXZlblxyXG4gICAqIGlucHV0IGhhZCBiZWVuIHR5cGVkIGJ5IGEgaHVtYW4uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRcclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcclxuICAgKi9cclxuICBkaXNwYXRjaEV2ZW50c0ZvcklucHV0IChpbnB1dCwgdGFyZ2V0KSB7XHJcbiAgICBsZXQgY3VycmVudE1vZGlmaWVyU3RhdGUgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IGlucHV0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGtleXN0cm9rZSA9IHRoaXMua2V5c3Ryb2tlRm9yQ2hhckNvZGUoaW5wdXQuY2hhckNvZGVBdChpKSk7XHJcbiAgICAgIGlmICgha2V5c3Ryb2tlKSBjb250aW51ZVxyXG5cclxuICAgICAgdGhpcy5kaXNwYXRjaE1vZGlmaWVyU3RhdGVUcmFuc2l0aW9uKHRhcmdldCwgY3VycmVudE1vZGlmaWVyU3RhdGUsIGtleXN0cm9rZS5tb2RpZmllcnMpO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnRzRm9yS2V5c3Ryb2tlKGtleXN0cm9rZSwgdGFyZ2V0LCBmYWxzZSk7XHJcbiAgICAgIGN1cnJlbnRNb2RpZmllclN0YXRlID0ga2V5c3Ryb2tlLm1vZGlmaWVycztcclxuICAgIH1cclxuICAgIHRoaXMuZGlzcGF0Y2hNb2RpZmllclN0YXRlVHJhbnNpdGlvbih0YXJnZXQsIGN1cnJlbnRNb2RpZmllclN0YXRlLCAwKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZpcmVzIHRoZSBjb3JyZWN0IHNlcXVlbmNlIG9mIGV2ZW50cyBvbiB0aGUgZ2l2ZW4gdGFyZ2V0IGFzIGlmIHRoZSBnaXZlblxyXG4gICAqIGtleXN0cm9rZSB3YXMgcGVyZm9ybWVkIGJ5IGEgaHVtYW4uIFdoZW4gc2ltdWxhdGluZywgZm9yIGV4YW1wbGUsIHR5cGluZ1xyXG4gICAqIHRoZSBsZXR0ZXIgXCJBXCIgKGFzc3VtaW5nIGEgVS5TLiBFbmdsaXNoIGtleWJvYXJkKSB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsXHJcbiAgICogbG9vayBsaWtlIHRoaXM6XHJcbiAgICpcclxuICAgKiAgIGtleWRvd24gICBrZXlDb2RlPTE2IChTSElGVCkgY2hhckNvZGU9MCAgICAgIHNoaWZ0S2V5PXRydWVcclxuICAgKiAgIGtleWRvd24gICBrZXlDb2RlPTY1IChBKSAgICAgY2hhckNvZGU9MCAgICAgIHNoaWZ0S2V5PXRydWVcclxuICAgKiAgIGtleXByZXNzICBrZXlDb2RlPTY1IChBKSAgICAgY2hhckNvZGU9NjUgKEEpIHNoaWZ0S2V5PXRydWVcclxuICAgKiAgIHRleHRJbnB1dCBkYXRhPUFcclxuICAgKiAgIGlucHV0XHJcbiAgICogICBrZXl1cCAgICAga2V5Q29kZT02NSAoQSkgICAgIGNoYXJDb2RlPTAgICAgICBzaGlmdEtleT10cnVlXHJcbiAgICogICBrZXl1cCAgICAga2V5Q29kZT0xNiAoU0hJRlQpIGNoYXJDb2RlPTAgICAgICBzaGlmdEtleT1mYWxzZVxyXG4gICAqXHJcbiAgICogSWYgdGhlIGtleXN0cm9rZSB3b3VsZCBub3QgY2F1c2UgYSBjaGFyYWN0ZXIgdG8gYmUgaW5wdXQsIHN1Y2ggYXMgd2hlblxyXG4gICAqIHByZXNzaW5nIGFsdCtzaGlmdCtsZWZ0LCB0aGUgc2VxdWVuY2UgbG9va3MgbGlrZSB0aGlzOlxyXG4gICAqXHJcbiAgICogICBrZXlkb3duICAga2V5Q29kZT0xNiAoU0hJRlQpIGNoYXJDb2RlPTAgYWx0S2V5PWZhbHNlIHNoaWZ0S2V5PXRydWVcclxuICAgKiAgIGtleWRvd24gICBrZXlDb2RlPTE4IChBTFQpICAgY2hhckNvZGU9MCBhbHRLZXk9dHJ1ZSAgc2hpZnRLZXk9dHJ1ZVxyXG4gICAqICAga2V5ZG93biAgIGtleUNvZGU9MzcgKExFRlQpICBjaGFyQ29kZT0wIGFsdEtleT10cnVlICBzaGlmdEtleT10cnVlXHJcbiAgICogICBrZXl1cCAgICAga2V5Q29kZT0zNyAoTEVGVCkgIGNoYXJDb2RlPTAgYWx0S2V5PXRydWUgIHNoaWZ0S2V5PXRydWVcclxuICAgKiAgIGtleXVwICAgICBrZXlDb2RlPTE4IChBTFQpICAgY2hhckNvZGU9MCBhbHRLZXk9ZmFsc2Ugc2hpZnRLZXk9dHJ1ZVxyXG4gICAqICAga2V5dXAgICAgIGtleUNvZGU9MTYgKFNISUZUKSBjaGFyQ29kZT0wIGFsdEtleT1mYWxzZSBzaGlmdEtleT1mYWxzZVxyXG4gICAqXHJcbiAgICogVG8gZGlzYWJsZSBoYW5kbGluZyBvZiBtb2RpZmllciBrZXlzLCBjYWxsIHdpdGggYHRyYW5zaXRpb25Nb2RpZmVyc2Agc2V0XHJcbiAgICogdG8gZmFsc2UuIERvaW5nIHNvIHdpbGwgb21pdCB0aGUga2V5ZG93biBhbmQga2V5dXAgZXZlbnRzIGFzc29jaWF0ZWQgd2l0aFxyXG4gICAqIHNoaWZ0LCBjdHJsLCBhbHQsIGFuZCBtZXRhIGtleXMgc3Vycm91bmRpbmcgdGhlIGFjdHVhbCBrZXlzdHJva2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0tleXN0cm9rZX0ga2V5c3Ryb2tlXHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0XHJcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdHJhbnNpdGlvbk1vZGlmaWVyc1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudHNcclxuICAgKi9cclxuICBkaXNwYXRjaEV2ZW50c0ZvcktleXN0cm9rZSAoa2V5c3Ryb2tlLCB0YXJnZXQsIHRyYW5zaXRpb25Nb2RpZmllcnMgPSB0cnVlLCBldmVudHMgPSBLZXlFdmVudHMuQUxMKSB7XHJcbiAgICBpZiAoIWtleXN0cm9rZSkgcmV0dXJuXHJcblxyXG4gICAgaWYgKHRyYW5zaXRpb25Nb2RpZmllcnMpIHtcclxuICAgICAgdGhpcy5kaXNwYXRjaE1vZGlmaWVyU3RhdGVUcmFuc2l0aW9uKHRhcmdldCwgMCwga2V5c3Ryb2tlLm1vZGlmaWVycywgZXZlbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQga2V5ZG93bkV2ZW50O1xyXG4gICAgaWYgKGV2ZW50cyAmIEtleUV2ZW50cy5ET1dOKSB7XHJcbiAgICAgIGtleWRvd25FdmVudCA9IHRoaXMuY3JlYXRlRXZlbnRGcm9tS2V5c3Ryb2tlKCdrZXlkb3duJywga2V5c3Ryb2tlLCB0YXJnZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChrZXlkb3duRXZlbnQgJiYgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoa2V5ZG93bkV2ZW50KSAmJiB0aGlzLnRhcmdldENhblJlY2VpdmVUZXh0SW5wdXQodGFyZ2V0KSkge1xyXG4gICAgICBsZXQga2V5cHJlc3NFdmVudDtcclxuICAgICAgaWYgKGV2ZW50cyAmIEtleUV2ZW50cy5QUkVTUykge1xyXG4gICAgICAgIGtleXByZXNzRXZlbnQgPSB0aGlzLmNyZWF0ZUV2ZW50RnJvbUtleXN0cm9rZSgna2V5cHJlc3MnLCBrZXlzdHJva2UsIHRhcmdldCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGtleXByZXNzRXZlbnQgJiYga2V5cHJlc3NFdmVudC5jaGFyQ29kZSAmJiB0YXJnZXQuZGlzcGF0Y2hFdmVudChrZXlwcmVzc0V2ZW50KSkge1xyXG4gICAgICAgIGlmIChldmVudHMgJiBLZXlFdmVudHMuSU5QVVQpIHtcclxuICAgICAgICAgIGNvbnN0IHRleHRpbnB1dEV2ZW50ID0gdGhpcy5jcmVhdGVFdmVudEZyb21LZXlzdHJva2UoJ3RleHRJbnB1dCcsIGtleXN0cm9rZSwgdGFyZ2V0KTtcclxuICAgICAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KHRleHRpbnB1dEV2ZW50KTtcclxuXHJcbiAgICAgICAgICBjb25zdCBpbnB1dEV2ZW50ID0gdGhpcy5jcmVhdGVFdmVudEZyb21LZXlzdHJva2UoJ2lucHV0Jywga2V5c3Ryb2tlLCB0YXJnZXQpO1xyXG4gICAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoaW5wdXRFdmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV2ZW50cyAmIEtleUV2ZW50cy5VUCkge1xyXG4gICAgICBjb25zdCBrZXl1cEV2ZW50ID0gdGhpcy5jcmVhdGVFdmVudEZyb21LZXlzdHJva2UoJ2tleXVwJywga2V5c3Ryb2tlLCB0YXJnZXQpO1xyXG4gICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChrZXl1cEV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHJhbnNpdGlvbk1vZGlmaWVycykge1xyXG4gICAgICB0aGlzLmRpc3BhdGNoTW9kaWZpZXJTdGF0ZVRyYW5zaXRpb24odGFyZ2V0LCBrZXlzdHJva2UubW9kaWZpZXJzLCAwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYW5zaXRpb25zIGZyb20gb25lIG1vZGlmaWVyIHN0YXRlIHRvIGFub3RoZXIgYnkgZGlzcGF0Y2hpbmcga2V5IGV2ZW50cy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHRhcmdldFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tTW9kaWZpZXJTdGF0ZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0b01vZGlmaWVyU3RhdGVcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnRzXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBkaXNwYXRjaE1vZGlmaWVyU3RhdGVUcmFuc2l0aW9uICh0YXJnZXQsIGZyb21Nb2RpZmllclN0YXRlLCB0b01vZGlmaWVyU3RhdGUsIGV2ZW50cyA9IEtleUV2ZW50cy5BTEwpIHtcclxuICAgIGxldCBjdXJyZW50TW9kaWZpZXJTdGF0ZSA9IGZyb21Nb2RpZmllclN0YXRlO1xyXG4gICAgbGV0IGRpZEhhdmVNZXRhID0gKGZyb21Nb2RpZmllclN0YXRlICYgTUVUQSkgPT09IE1FVEE7XHJcbiAgICBsZXQgd2lsbEhhdmVNZXRhID0gKHRvTW9kaWZpZXJTdGF0ZSAmIE1FVEEpID09PSBNRVRBO1xyXG4gICAgbGV0IGRpZEhhdmVDdHJsID0gKGZyb21Nb2RpZmllclN0YXRlICYgQ1RSTCkgPT09IENUUkw7XHJcbiAgICBsZXQgd2lsbEhhdmVDdHJsID0gKHRvTW9kaWZpZXJTdGF0ZSAmIENUUkwpID09PSBDVFJMO1xyXG4gICAgbGV0IGRpZEhhdmVTaGlmdCA9IChmcm9tTW9kaWZpZXJTdGF0ZSAmIFNISUZUKSA9PT0gU0hJRlQ7XHJcbiAgICBsZXQgd2lsbEhhdmVTaGlmdCA9ICh0b01vZGlmaWVyU3RhdGUgJiBTSElGVCkgPT09IFNISUZUO1xyXG4gICAgbGV0IGRpZEhhdmVBbHQgPSAoZnJvbU1vZGlmaWVyU3RhdGUgJiBBTFQpID09PSBBTFQ7XHJcbiAgICBsZXQgd2lsbEhhdmVBbHQgPSAodG9Nb2RpZmllclN0YXRlICYgQUxUKSA9PT0gQUxUO1xyXG5cclxuICAgIGNvbnN0IGluY2x1ZGVLZXlVcCA9IGV2ZW50cyAmIEtleUV2ZW50cy5VUDtcclxuICAgIGNvbnN0IGluY2x1ZGVLZXlEb3duID0gZXZlbnRzICYgS2V5RXZlbnRzLkRPV047XHJcblxyXG4gICAgaWYgKGluY2x1ZGVLZXlVcCAmJiBkaWRIYXZlTWV0YSA9PT0gdHJ1ZSAmJiB3aWxsSGF2ZU1ldGEgPT09IGZhbHNlKSB7XHJcbiAgICAgIC8vIFJlbGVhc2UgdGhlIG1ldGEga2V5LlxyXG4gICAgICBjdXJyZW50TW9kaWZpZXJTdGF0ZSAmPSB+TUVUQTtcclxuICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgdGhpcy5jcmVhdGVFdmVudEZyb21LZXlzdHJva2UoXHJcbiAgICAgICAgICAna2V5dXAnLFxyXG4gICAgICAgICAgbmV3IEtleXN0cm9rZShjdXJyZW50TW9kaWZpZXJTdGF0ZSwgdGhpcy5fYWN0aW9uS2V5Q29kZU1hcC5NRVRBKSxcclxuICAgICAgICAgIHRhcmdldFxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5jbHVkZUtleVVwICYmIGRpZEhhdmVDdHJsID09PSB0cnVlICYmIHdpbGxIYXZlQ3RybCA9PT0gZmFsc2UpIHtcclxuICAgICAgLy8gUmVsZWFzZSB0aGUgY3RybCBrZXkuXHJcbiAgICAgIGN1cnJlbnRNb2RpZmllclN0YXRlICY9IH5DVFJMO1xyXG4gICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICB0aGlzLmNyZWF0ZUV2ZW50RnJvbUtleXN0cm9rZShcclxuICAgICAgICAgICdrZXl1cCcsXHJcbiAgICAgICAgICBuZXcgS2V5c3Ryb2tlKGN1cnJlbnRNb2RpZmllclN0YXRlLCB0aGlzLl9hY3Rpb25LZXlDb2RlTWFwLkNUUkwpLFxyXG4gICAgICAgICAgdGFyZ2V0XHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpbmNsdWRlS2V5VXAgJiYgZGlkSGF2ZVNoaWZ0ID09PSB0cnVlICYmIHdpbGxIYXZlU2hpZnQgPT09IGZhbHNlKSB7XHJcbiAgICAgIC8vIFJlbGVhc2UgdGhlIHNoaWZ0IGtleS5cclxuICAgICAgY3VycmVudE1vZGlmaWVyU3RhdGUgJj0gflNISUZUO1xyXG4gICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICB0aGlzLmNyZWF0ZUV2ZW50RnJvbUtleXN0cm9rZShcclxuICAgICAgICAgICdrZXl1cCcsXHJcbiAgICAgICAgICBuZXcgS2V5c3Ryb2tlKGN1cnJlbnRNb2RpZmllclN0YXRlLCB0aGlzLl9hY3Rpb25LZXlDb2RlTWFwLlNISUZUKSxcclxuICAgICAgICAgIHRhcmdldFxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5jbHVkZUtleVVwICYmIGRpZEhhdmVBbHQgPT09IHRydWUgJiYgd2lsbEhhdmVBbHQgPT09IGZhbHNlKSB7XHJcbiAgICAgIC8vIFJlbGVhc2UgdGhlIGFsdCBrZXkuXHJcbiAgICAgIGN1cnJlbnRNb2RpZmllclN0YXRlICY9IH5BTFQ7XHJcbiAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgIHRoaXMuY3JlYXRlRXZlbnRGcm9tS2V5c3Ryb2tlKFxyXG4gICAgICAgICAgJ2tleXVwJyxcclxuICAgICAgICAgIG5ldyBLZXlzdHJva2UoY3VycmVudE1vZGlmaWVyU3RhdGUsIHRoaXMuX2FjdGlvbktleUNvZGVNYXAuQUxUKSxcclxuICAgICAgICAgIHRhcmdldFxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5jbHVkZUtleURvd24gJiYgZGlkSGF2ZU1ldGEgPT09IGZhbHNlICYmIHdpbGxIYXZlTWV0YSA9PT0gdHJ1ZSkge1xyXG4gICAgICAvLyBQcmVzcyB0aGUgbWV0YSBrZXkuXHJcbiAgICAgIGN1cnJlbnRNb2RpZmllclN0YXRlIHw9IE1FVEE7XHJcbiAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgIHRoaXMuY3JlYXRlRXZlbnRGcm9tS2V5c3Ryb2tlKFxyXG4gICAgICAgICAgJ2tleWRvd24nLFxyXG4gICAgICAgICAgbmV3IEtleXN0cm9rZShjdXJyZW50TW9kaWZpZXJTdGF0ZSwgdGhpcy5fYWN0aW9uS2V5Q29kZU1hcC5NRVRBKSxcclxuICAgICAgICAgIHRhcmdldFxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5jbHVkZUtleURvd24gJiYgZGlkSGF2ZUN0cmwgPT09IGZhbHNlICYmIHdpbGxIYXZlQ3RybCA9PT0gdHJ1ZSkge1xyXG4gICAgICAvLyBQcmVzcyB0aGUgY3RybCBrZXkuXHJcbiAgICAgIGN1cnJlbnRNb2RpZmllclN0YXRlIHw9IENUUkw7XHJcbiAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgIHRoaXMuY3JlYXRlRXZlbnRGcm9tS2V5c3Ryb2tlKFxyXG4gICAgICAgICAgJ2tleWRvd24nLFxyXG4gICAgICAgICAgbmV3IEtleXN0cm9rZShjdXJyZW50TW9kaWZpZXJTdGF0ZSwgdGhpcy5fYWN0aW9uS2V5Q29kZU1hcC5DVFJMKSxcclxuICAgICAgICAgIHRhcmdldFxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5jbHVkZUtleURvd24gJiYgZGlkSGF2ZVNoaWZ0ID09PSBmYWxzZSAmJiB3aWxsSGF2ZVNoaWZ0ID09PSB0cnVlKSB7XHJcbiAgICAgIC8vIFByZXNzIHRoZSBzaGlmdCBrZXkuXHJcbiAgICAgIGN1cnJlbnRNb2RpZmllclN0YXRlIHw9IFNISUZUO1xyXG4gICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICB0aGlzLmNyZWF0ZUV2ZW50RnJvbUtleXN0cm9rZShcclxuICAgICAgICAgICdrZXlkb3duJyxcclxuICAgICAgICAgIG5ldyBLZXlzdHJva2UoY3VycmVudE1vZGlmaWVyU3RhdGUsIHRoaXMuX2FjdGlvbktleUNvZGVNYXAuU0hJRlQpLFxyXG4gICAgICAgICAgdGFyZ2V0XHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpbmNsdWRlS2V5RG93biAmJiBkaWRIYXZlQWx0ID09PSBmYWxzZSAmJiB3aWxsSGF2ZUFsdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAvLyBQcmVzcyB0aGUgYWx0IGtleS5cclxuICAgICAgY3VycmVudE1vZGlmaWVyU3RhdGUgfD0gQUxUO1xyXG4gICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICB0aGlzLmNyZWF0ZUV2ZW50RnJvbUtleXN0cm9rZShcclxuICAgICAgICAgICdrZXlkb3duJyxcclxuICAgICAgICAgIG5ldyBLZXlzdHJva2UoY3VycmVudE1vZGlmaWVyU3RhdGUsIHRoaXMuX2FjdGlvbktleUNvZGVNYXAuQUxUKSxcclxuICAgICAgICAgIHRhcmdldFxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY3VycmVudE1vZGlmaWVyU3RhdGUgIT09IHRvTW9kaWZpZXJTdGF0ZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgYGludGVybmFsIGVycm9yLCBleHBlY3RlZCBtb2RpZmllciBzdGF0ZTogJHt0b01vZGlmaWVyU3RhdGV9YCArXHJcbiAgICAgICAgYCwgZ290OiAke2N1cnJlbnRNb2RpZmllclN0YXRlfWBcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGtleXN0cm9rZSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGFjdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb25cclxuICAgKiBAcmV0dXJuIHs/S2V5c3Ryb2tlfVxyXG4gICAqL1xyXG4gIGtleXN0cm9rZUZvckFjdGlvbiAoYWN0aW9uKSB7XHJcbiAgICBsZXQga2V5Q29kZSA9IG51bGw7XHJcbiAgICBsZXQgbW9kaWZpZXJzID0gMDtcclxuXHJcbiAgICAvLyBOb3RlOiB3aGVuIGl0IGNvbWVzIHRvIGEgc2luZ2xlIGNoYXJhY3RlciBhcyAnKycsXHJcbiAgICAvLyBzaG91bGQgbm90IHRha2UgaXQgYXMgYSBrZXkgY29tYmluaWF0aW9uIChubyBhY3Rpb24uc3BsaXQpXHJcbiAgICBsZXQgcGFydHMgPSBhY3Rpb24ubGVuZ3RoID09PSAxID8gW2FjdGlvbl0gOiBhY3Rpb24uc3BsaXQoJysnKTtcclxuICAgIGxldCBsYXN0UGFydCA9IHBhcnRzLnBvcCgpO1xyXG5cclxuICAgIHBhcnRzLmZvckVhY2goKHBhcnQpID0+IHtcclxuICAgICAgc3dpdGNoIChwYXJ0LnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICBjYXNlICdDVFJMJzpcclxuICAgICAgICAgIG1vZGlmaWVycyB8PSBDVFJMO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnTUVUQSc6XHJcbiAgICAgICAgICBtb2RpZmllcnMgfD0gTUVUQTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ0FMVCc6XHJcbiAgICAgICAgICBtb2RpZmllcnMgfD0gQUxUO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnU0hJRlQnOlxyXG4gICAgICAgICAgbW9kaWZpZXJzIHw9IFNISUZUO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3BhcnRzJywgcGFydHMpXHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGluIFwiJHthY3Rpb259XCIsIGludmFsaWQgbW9kaWZpZXI6ICR7cGFydH1gKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKGxhc3RQYXJ0LnRvVXBwZXJDYXNlKCkgaW4gdGhpcy5fYWN0aW9uS2V5Q29kZU1hcCkge1xyXG4gICAgICBrZXlDb2RlID0gdGhpcy5fYWN0aW9uS2V5Q29kZU1hcFtsYXN0UGFydC50b1VwcGVyQ2FzZSgpXTtcclxuICAgIH0gZWxzZSBpZiAobGFzdFBhcnQubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIGxldCBsYXN0UGFydEtleXN0cm9rZSA9IHRoaXMua2V5c3Ryb2tlRm9yQ2hhckNvZGUobGFzdFBhcnQuY2hhckNvZGVBdCgwKSk7XHJcbiAgICAgIGlmICghbGFzdFBhcnRLZXlzdHJva2UpIHJldHVybiBudWxsXHJcblxyXG4gICAgICBtb2RpZmllcnMgfD0gbGFzdFBhcnRLZXlzdHJva2UubW9kaWZpZXJzO1xyXG4gICAgICBrZXlDb2RlID0gbGFzdFBhcnRLZXlzdHJva2Uua2V5Q29kZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW4gXCIke2FjdGlvbn1cIiwgaW52YWxpZCBhY3Rpb246ICR7bGFzdFBhcnR9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBLZXlzdHJva2UobW9kaWZpZXJzLCBrZXlDb2RlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIGtleXN0cm9rZSB1c2VkIHRvIGdlbmVyYXRlIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjaGFyQ29kZVxyXG4gICAqIEByZXR1cm4gez9LZXlzdHJva2V9XHJcbiAgICovXHJcbiAga2V5c3Ryb2tlRm9yQ2hhckNvZGUgKGNoYXJDb2RlKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fY2hhckNvZGVLZXlDb2RlTWFwW2NoYXJDb2RlXSB8fCBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICB0YXJnZXRDYW5SZWNlaXZlVGV4dElucHV0ICh0YXJnZXQpIHtcclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaXNFZGl0YWJsZSh0YXJnZXQpO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgVVNfRU5HTElTSF9DSEFSQ09ERV9LRVlDT0RFX01BUCA9IHtcclxuICAzMjogbmV3IEtleXN0cm9rZSgwLCAzMiksIC8vIDxzcGFjZT5cclxuICAzMzogbmV3IEtleXN0cm9rZShTSElGVCwgNDkpLCAvLyAhXHJcbiAgMzQ6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDIyMiksIC8vIFwiXHJcbiAgMzU6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDUxKSwgLy8gI1xyXG4gIDM2OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA1MiksIC8vICRcclxuICAzNzogbmV3IEtleXN0cm9rZShTSElGVCwgNTMpLCAvLyAlXHJcbiAgMzg6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDU1KSwgLy8gJlxyXG4gIDM5OiBuZXcgS2V5c3Ryb2tlKDAsIDIyMiksIC8vICdcclxuICA0MDogbmV3IEtleXN0cm9rZShTSElGVCwgNTcpLCAvLyAoXHJcbiAgNDE6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDQ4KSwgLy8gKVxyXG4gIDQyOiBuZXcgS2V5c3Ryb2tlKFNISUZULCA1NiksIC8vICpcclxuICA0MzogbmV3IEtleXN0cm9rZShTSElGVCwgMTg3KSwgLy8gK1xyXG4gIDQ0OiBuZXcgS2V5c3Ryb2tlKDAsIDE4OCksIC8vICxcclxuICA0NTogbmV3IEtleXN0cm9rZSgwLCAxODkpLCAvLyAtXHJcbiAgNDY6IG5ldyBLZXlzdHJva2UoMCwgMTkwKSwgLy8gLlxyXG4gIDQ3OiBuZXcgS2V5c3Ryb2tlKDAsIDE5MSksIC8vIC9cclxuICA0ODogbmV3IEtleXN0cm9rZSgwLCA0OCksIC8vIDBcclxuICA0OTogbmV3IEtleXN0cm9rZSgwLCA0OSksIC8vIDFcclxuICA1MDogbmV3IEtleXN0cm9rZSgwLCA1MCksIC8vIDJcclxuICA1MTogbmV3IEtleXN0cm9rZSgwLCA1MSksIC8vIDNcclxuICA1MjogbmV3IEtleXN0cm9rZSgwLCA1MiksIC8vIDRcclxuICA1MzogbmV3IEtleXN0cm9rZSgwLCA1MyksIC8vIDVcclxuICA1NDogbmV3IEtleXN0cm9rZSgwLCA1NCksIC8vIDZcclxuICA1NTogbmV3IEtleXN0cm9rZSgwLCA1NSksIC8vIDdcclxuICA1NjogbmV3IEtleXN0cm9rZSgwLCA1NiksIC8vIDhcclxuICA1NzogbmV3IEtleXN0cm9rZSgwLCA1NyksIC8vIDlcclxuICA1ODogbmV3IEtleXN0cm9rZShTSElGVCwgMTg2KSwgLy8gOlxyXG4gIDU5OiBuZXcgS2V5c3Ryb2tlKDAsIDE4NiksIC8vIDtcclxuICA2MDogbmV3IEtleXN0cm9rZShTSElGVCwgMTg4KSwgLy8gPFxyXG4gIDYxOiBuZXcgS2V5c3Ryb2tlKDAsIDE4NyksIC8vID1cclxuICA2MjogbmV3IEtleXN0cm9rZShTSElGVCwgMTkwKSwgLy8gPlxyXG4gIDYzOiBuZXcgS2V5c3Ryb2tlKFNISUZULCAxOTEpLCAvLyA/XHJcbiAgNjQ6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDUwKSwgLy8gQFxyXG4gIDY1OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA2NSksIC8vIEFcclxuICA2NjogbmV3IEtleXN0cm9rZShTSElGVCwgNjYpLCAvLyBCXHJcbiAgNjc6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDY3KSwgLy8gQ1xyXG4gIDY4OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA2OCksIC8vIERcclxuICA2OTogbmV3IEtleXN0cm9rZShTSElGVCwgNjkpLCAvLyBFXHJcbiAgNzA6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDcwKSwgLy8gRlxyXG4gIDcxOiBuZXcgS2V5c3Ryb2tlKFNISUZULCA3MSksIC8vIEdcclxuICA3MjogbmV3IEtleXN0cm9rZShTSElGVCwgNzIpLCAvLyBIXHJcbiAgNzM6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDczKSwgLy8gSVxyXG4gIDc0OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA3NCksIC8vIEpcclxuICA3NTogbmV3IEtleXN0cm9rZShTSElGVCwgNzUpLCAvLyBLXHJcbiAgNzY6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDc2KSwgLy8gTFxyXG4gIDc3OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA3NyksIC8vIE1cclxuICA3ODogbmV3IEtleXN0cm9rZShTSElGVCwgNzgpLCAvLyBOXHJcbiAgNzk6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDc5KSwgLy8gT1xyXG4gIDgwOiBuZXcgS2V5c3Ryb2tlKFNISUZULCA4MCksIC8vIFBcclxuICA4MTogbmV3IEtleXN0cm9rZShTSElGVCwgODEpLCAvLyBRXHJcbiAgODI6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDgyKSwgLy8gUlxyXG4gIDgzOiBuZXcgS2V5c3Ryb2tlKFNISUZULCA4MyksIC8vIFNcclxuICA4NDogbmV3IEtleXN0cm9rZShTSElGVCwgODQpLCAvLyBUXHJcbiAgODU6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDg1KSwgLy8gVVxyXG4gIDg2OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA4NiksIC8vIFZcclxuICA4NzogbmV3IEtleXN0cm9rZShTSElGVCwgODcpLCAvLyBXXHJcbiAgODg6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDg4KSwgLy8gWFxyXG4gIDg5OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA4OSksIC8vIFlcclxuICA5MDogbmV3IEtleXN0cm9rZShTSElGVCwgOTApLCAvLyBaXHJcbiAgOTE6IG5ldyBLZXlzdHJva2UoMCwgMjE5KSwgLy8gW1xyXG4gIDkyOiBuZXcgS2V5c3Ryb2tlKDAsIDIyMCksIC8vIFxcXHJcbiAgOTM6IG5ldyBLZXlzdHJva2UoMCwgMjIxKSwgLy8gXVxyXG4gIDk0OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA1NCksIC8vIF5cclxuICA5NTogbmV3IEtleXN0cm9rZShTSElGVCwgMTg5KSwgLy8gX1xyXG4gIDk2OiBuZXcgS2V5c3Ryb2tlKDAsIDE5MiksIC8vIGBcclxuICA5NzogbmV3IEtleXN0cm9rZSgwLCA2NSksIC8vIGFcclxuICA5ODogbmV3IEtleXN0cm9rZSgwLCA2NiksIC8vIGJcclxuICA5OTogbmV3IEtleXN0cm9rZSgwLCA2NyksIC8vIGNcclxuICAxMDA6IG5ldyBLZXlzdHJva2UoMCwgNjgpLCAvLyBkXHJcbiAgMTAxOiBuZXcgS2V5c3Ryb2tlKDAsIDY5KSwgLy8gZVxyXG4gIDEwMjogbmV3IEtleXN0cm9rZSgwLCA3MCksIC8vIGZcclxuICAxMDM6IG5ldyBLZXlzdHJva2UoMCwgNzEpLCAvLyBnXHJcbiAgMTA0OiBuZXcgS2V5c3Ryb2tlKDAsIDcyKSwgLy8gaFxyXG4gIDEwNTogbmV3IEtleXN0cm9rZSgwLCA3MyksIC8vIGlcclxuICAxMDY6IG5ldyBLZXlzdHJva2UoMCwgNzQpLCAvLyBqXHJcbiAgMTA3OiBuZXcgS2V5c3Ryb2tlKDAsIDc1KSwgLy8ga1xyXG4gIDEwODogbmV3IEtleXN0cm9rZSgwLCA3NiksIC8vIGxcclxuICAxMDk6IG5ldyBLZXlzdHJva2UoMCwgNzcpLCAvLyBtXHJcbiAgMTEwOiBuZXcgS2V5c3Ryb2tlKDAsIDc4KSwgLy8gblxyXG4gIDExMTogbmV3IEtleXN0cm9rZSgwLCA3OSksIC8vIG9cclxuICAxMTI6IG5ldyBLZXlzdHJva2UoMCwgODApLCAvLyBwXHJcbiAgMTEzOiBuZXcgS2V5c3Ryb2tlKDAsIDgxKSwgLy8gcVxyXG4gIDExNDogbmV3IEtleXN0cm9rZSgwLCA4MiksIC8vIHJcclxuICAxMTU6IG5ldyBLZXlzdHJva2UoMCwgODMpLCAvLyBzXHJcbiAgMTE2OiBuZXcgS2V5c3Ryb2tlKDAsIDg0KSwgLy8gdFxyXG4gIDExNzogbmV3IEtleXN0cm9rZSgwLCA4NSksIC8vIHVcclxuICAxMTg6IG5ldyBLZXlzdHJva2UoMCwgODYpLCAvLyB2XHJcbiAgMTE5OiBuZXcgS2V5c3Ryb2tlKDAsIDg3KSwgLy8gd1xyXG4gIDEyMDogbmV3IEtleXN0cm9rZSgwLCA4OCksIC8vIHhcclxuICAxMjE6IG5ldyBLZXlzdHJva2UoMCwgODkpLCAvLyB5XHJcbiAgMTIyOiBuZXcgS2V5c3Ryb2tlKDAsIDkwKSwgLy8gelxyXG4gIDEyMzogbmV3IEtleXN0cm9rZShTSElGVCwgMjE5KSwgLy8ge1xyXG4gIDEyNDogbmV3IEtleXN0cm9rZShTSElGVCwgMjIwKSwgLy8gfFxyXG4gIDEyNTogbmV3IEtleXN0cm9rZShTSElGVCwgMjIxKSwgLy8gfVxyXG4gIDEyNjogbmV3IEtleXN0cm9rZShTSElGVCwgMTkyKSAvLyB+XHJcbn07XHJcblxyXG5jb25zdCBVU19FTkdMSVNIX0FDVElPTl9LRVlDT0RFX01BUCA9IHtcclxuICBCQUNLU1BBQ0U6IDgsXHJcbiAgVEFCOiA5LFxyXG4gIEVOVEVSOiAxMyxcclxuICBTSElGVDogMTYsXHJcbiAgQ1RSTDogMTcsXHJcbiAgQUxUOiAxOCxcclxuICBQQVVTRTogMTksXHJcbiAgQ0FQU0xPQ0s6IDIwLFxyXG4gIEVTQ0FQRTogMjcsXHJcbiAgUEFHRVVQOiAzMyxcclxuICBQQUdFRE9XTjogMzQsXHJcbiAgRU5EOiAzNSxcclxuICBIT01FOiAzNixcclxuICBMRUZUOiAzNyxcclxuICBVUDogMzgsXHJcbiAgUklHSFQ6IDM5LFxyXG4gIERPV046IDQwLFxyXG4gIElOU0VSVDogNDUsXHJcbiAgREVMRVRFOiA0NixcclxuICBNRVRBOiA5MSxcclxuICBGMTogMTEyLFxyXG4gIEYyOiAxMTMsXHJcbiAgRjM6IDExNCxcclxuICBGNDogMTE1LFxyXG4gIEY1OiAxMTYsXHJcbiAgRjY6IDExNyxcclxuICBGNzogMTE4LFxyXG4gIEY4OiAxMTksXHJcbiAgRjk6IDEyMCxcclxuICBGMTA6IDEyMSxcclxuICBGMTE6IDEyMixcclxuICBGMTI6IDEyM1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgYSBrZXlib2FyZCBpbnN0YW5jZSBjb25maWd1cmVkIGFzIGEgVS5TLiBFbmdsaXNoIGtleWJvYXJkIHdvdWxkIGJlLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHtLZXlib2FyZH1cclxuICovXHJcbktleWJvYXJkLlVTX0VOR0xJU0ggPSBuZXcgS2V5Ym9hcmQoXHJcbiAgVVNfRU5HTElTSF9DSEFSQ09ERV9LRVlDT0RFX01BUCxcclxuICBVU19FTkdMSVNIX0FDVElPTl9LRVlDT0RFX01BUFxyXG4pO1xyXG4iLCJcclxuZXhwb3J0IGNvbnN0IHJlbmRlckxvZ1R5cGUgPSAobG9nKSA9PiB7XHJcbiAgc3dpdGNoIChsb2cudHlwZSkge1xyXG4gICAgY2FzZSAncmVmbGVjdCc6XHJcbiAgICAgIHJldHVybiAnW2luZm9dJ1xyXG5cclxuICAgIGNhc2UgJ2Vycm9yJzpcclxuICAgICAgcmV0dXJuIChsb2cub3B0aW9ucyAmJiBsb2cub3B0aW9ucy5pZ25vcmVkKSA/ICdbZXJyb3JdW2lnbm9yZWRdJyA6ICdbZXJyb3JdJ1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBgWyR7bG9nLnR5cGV9XWBcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZW5kZXJMb2cgPSAobG9nKSA9PiB7XHJcbiAgcmV0dXJuIHJlbmRlckxvZ1R5cGUobG9nKSArICcgJyArIGxvZy50ZXh0XHJcbn1cclxuIiwiaW1wb3J0IGVlIGZyb20gJ2V2ZW50LWVtaXR0ZXInXHJcbmltcG9ydCB7IHBpY2ssIGRlbGF5IH0gZnJvbSAnLi91dGlscydcclxuXHJcbmNvbnN0IE1PREUgPSB7XHJcbiAgU1RSQUlHSFQ6ICdTVFJBSUdIVCcsXHJcbiAgU0lOR0xFOiAnU0lOR0xFJyxcclxuICBMT09QOiAnTE9PUCdcclxufVxyXG5cclxuY29uc3QgU1RBVFVTID0ge1xyXG4gIFBMQVlJTkc6ICdQTEFZSU5HJyxcclxuICBQQVVTRUQ6ICdQQVVTRUQnLFxyXG4gIFNUT1BQRUQ6ICdTVE9QUEVEJyxcclxuICBFUlJPUjogJ0VSUk9SJ1xyXG59XHJcblxyXG5jb25zdCBFTkRfUkVBU09OID0ge1xyXG4gIENPTVBMRVRFOiAnQ09NUExFVEUnLFxyXG4gIEVSUk9SOiAnRVJST1InLFxyXG4gIE1BTlVBTDogJ01BTlVBTCdcclxufVxyXG5cclxuY29uc3QgaXNFbXB0eSA9IHggPT4geCA9PT0gdW5kZWZpbmVkIHx8IHggPT09IG51bGxcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuICBzdGFydFVybDogbnVsbCxcclxuXHJcbiAgc3RhcnRJbmRleDogbnVsbCxcclxuICBlbmRJbmRleDogbnVsbCxcclxuICBuZXh0SW5kZXg6IG51bGwsXHJcbiAgZXJyb3JJbmRleDogbnVsbCxcclxuICBkb25lSW5kaWNlczogW10sXHJcblxyXG4gIG1vZGU6IE1PREUuU1RSQUlHSFQsXHJcbiAgcmVzb3VyY2VzOiBbXSxcclxuXHJcbiAgLy8gcHJlRGVsYXk6IDAsXHJcbiAgLy8gcG9zdERlbGF5OiAwLFxyXG5cclxuICBzdGF0dXM6IFNUQVRVUy5TVE9QUEVEXHJcbn1cclxuXHJcbi8vIE5vdGU6IEEgZ2VuZXJpYyBwbGF5ZXIgZm9yIGNvbnN1bWluZyBzb21lIGtpbmQgb2YgcmVzb3VyY2VzXHJcbi8vIEl0IHN1cHBvcnRzIDMgbW9kZXM6IHNpbmdsZSwgc3RyYWlnaHQsIGxvb3AuXHJcbi8vIEFsc28gZm9yIHN0cmFpZ2h0IGFuZCBsb29wLCBpdCBjYW4gc3RhcnQgb3IgZW5kIGF0IGFueSB2YWxpZCBpbmRleCB5b3Ugd2FudFxyXG4vL1xyXG4vLyBUaGUgbWFpbiBBUEkgb2YgYSBwbGF5ZXIgaXNcclxuLy8gMS4gY29uc3RydWN0b3IoeyBydW46IEZ1bmN0aW9uLCAgcHJlcGFyZTogRnVuY3Rpb24gfSlcclxuLy8gMi4gcGxheShjb25maWcpXHJcbi8vIDMuIHBhdXNlKClcclxuLy8gNC4gcmVzdW1lKClcclxuLy8gNS4gc3RvcCgpXHJcbi8vXHJcbi8vIEV2ZW50cyBpdCBlbWl0c1xyXG4vLyAxLiBTVEFSVFxyXG4vLyAyLiBUT19QTEFZXHJcbi8vIDMuIFBMQVlFRF9MSVNUXHJcbi8vIDQuIFBBVVNFRFxyXG4vLyA1LiBSRVNVTUVEXHJcbi8vIDYuIEVORFxyXG4vLyA3LiBFUlJPUlxyXG5cclxuZXhwb3J0IGNsYXNzIFBsYXllciB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICAuLi5pbml0aWFsU3RhdGVcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yIChvcHRzLCBzdGF0ZSkge1xyXG4gICAgaWYgKCFvcHRzKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxheWVyIC0gY29uc3RydWN0b3I6IG11c3QgcHJvdmlkZSBvcHRzIGFzIDFzdCBhcmd1bWVudCcpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBvcHRzLnJ1biAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsYXllciAtIGNvbnN0cnVjdG9yOiBtdXN0IHByb3ZpZGUgYSBydW4gZnVuY3Rpb24nKVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygb3B0cy5wcmVwYXJlICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxheWVyIC0gY29uc3RydWN0b3I6IG11c3QgcHJvdmlkZSBhIHByZXBhcmUgZnVuY3Rpb24nKVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygb3B0cy5oYW5kbGVSZXN1bHQgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGF5ZXIgLSBjb25zdHJ1Y3RvcjogbXVzdCBwcm92aWRlIGEgaGFuZGxlUmVzdWx0IGZ1bmN0aW9uJylcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9fcnVuICAgICAgPSBvcHRzLnJ1blxyXG4gICAgdGhpcy5fX3ByZXBhcmUgID0gb3B0cy5wcmVwYXJlXHJcbiAgICB0aGlzLl9faGFuZGxlICAgPSBvcHRzLmhhbmRsZVJlc3VsdFxyXG5cclxuICAgIHRoaXMuX19zZXRTdGF0ZShzdGF0ZSB8fCB7fSlcclxuICB9XHJcblxyXG4gIHBsYXkgKGNvbmZpZykge1xyXG4gICAgaWYgKCFjb25maWcpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGF5ZXIgLSBwbGF5OiBjb25maWcgc2hvdWxkIG5vdCBiZSBlbXB0eScpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFjb25maWcubW9kZSB8fCBPYmplY3Qua2V5cyhNT0RFKS5pbmRleE9mKGNvbmZpZy5tb2RlKSA9PT0gLTEpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGF5ZXIgLSBwbGF5OiBtdXN0IHByb3ZpZGUgYSB2YWxpZCBtb2RlLCBub3cgaXQgaXMgJyArIGNvbmZpZy5tb2RlKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb25maWcubW9kZSA9PT0gTU9ERS5MT09QICYmXHJcbiAgICAgICAgKCFjb25maWcubG9vcHNTdGFydCB8fCBjb25maWcubG9vcHNTdGFydCA8IDAgfHwgTWF0aC5mbG9vcihjb25maWcubG9vcHNTdGFydCkgIT09IGNvbmZpZy5sb29wc1N0YXJ0IHx8XHJcbiAgICAgICAgICFjb25maWcubG9vcHNFbmQgICB8fCBjb25maWcubG9vcHNFbmQgPCBjb25maWcubG9vcHNTdGFydCB8fCBNYXRoLmZsb29yKGNvbmZpZy5sb29wc0VuZCkgIT09IGNvbmZpZy5sb29wc0VuZCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQbGF5ZXIgLSBwbGF5OiBtdXN0IHByb3ZpZGUgYSB2YWxpZCB0dXBsZSBvZiBcImxvb3BzU3RhcnRcIiBhbmQgXCJsb29wc0VuZFwiIGluIGxvb3AgbW9kZSwgbm93IGl0IGlzICR7Y29uZmlnLmxvb3BzU3RhcnR9LCAke2NvbmZpZy5sb29wc0VuZH1gKVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghY29uZmlnLnJlc291cmNlcyB8fCAhY29uZmlnLnJlc291cmNlcy5sZW5ndGgpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGF5ZXIgLSBwbGF5OiByZXNvdXJjZXMgc2hvdWxkIG5vdCBiZSBlbXB0eScpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzRW1wdHkoY29uZmlnLnN0YXJ0SW5kZXgpIHx8IGNvbmZpZy5zdGFydEluZGV4IDwgMCB8fFxyXG4gICAgICAgIGNvbmZpZy5zdGFydEluZGV4ID49IGNvbmZpZy5yZXNvdXJjZXMubGVuZ3RoKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUGxheWVyIC0gcGxheTogc3RhcnRJbmRleCBvdXQgb2YgcmFuZ2UsIG5vdyBpdCBpcyAke2NvbmZpZy5zdGFydEluZGV4fSwgbGVuOiAke2NvbmZpZy5yZXNvdXJjZXMubGVuZ3RofWApXHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm90ZTogZW5kSW5kZXggY291bGQgYmUgb21pdHRlZFxyXG4gICAgaWYgKCFpc0VtcHR5KGNvbmZpZy5lbmRJbmRleCkgJiZcclxuICAgICAgICAoY29uZmlnLmVuZEluZGV4IDwgMCB8fCBjb25maWcuZW5kSW5kZXggPj0gY29uZmlnLnJlc291cmNlcy5sZW5ndGgpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUGxheWVyIC0gcGxheTogZW5kSW5kZXggb3V0IG9mIHJhbmdlLCBub3cgaXQgaXMgJHtjb25maWcuZW5kSW5kZXh9LCBsZW46ICR7Y29uZmlnLnJlc291cmNlcy5sZW5ndGh9YClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IHN0YXJ0SW5kZXgsIHN0YXJ0VXJsLCByZXNvdXJjZXMsIHRpdGxlLCBleHRyYSB9ID0gY29uZmlnXHJcbiAgICBjb25zdCBlbmRJbmRleCA9IGNvbmZpZy5lbmRJbmRleCB8fCByZXNvdXJjZXMubGVuZ3RoIC0gMVxyXG4gICAgY29uc3QgYmFzaWNTdGF0ZSA9IHtcclxuICAgICAgdGl0bGUsXHJcbiAgICAgIGV4dHJhLFxyXG4gICAgICBzdGFydFVybCxcclxuICAgICAgc3RhcnRJbmRleCxcclxuICAgICAgZW5kSW5kZXgsXHJcbiAgICAgIG5leHRJbmRleDogc3RhcnRJbmRleCxcclxuICAgICAgZXJyb3JJbmRleDogbnVsbCxcclxuICAgICAgZG9uZUluZGljZXM6IFtdLFxyXG4gICAgICBtb2RlOiBjb25maWcubW9kZSxcclxuICAgICAgbG9vcHNDdXJzb3I6IDEsXHJcbiAgICAgIGxvb3BzU3RhcnQ6IDEsXHJcbiAgICAgIGxvb3BzRW5kOiAxLFxyXG4gICAgICByZXNvdXJjZXM6IGNvbmZpZy5yZXNvdXJjZXMsXHJcbiAgICAgIGJyZWFrcG9pbnRzOiBjb25maWcuYnJlYWtwb2ludHMgfHwgW10sXHJcbiAgICAgIHN0YXR1czogU1RBVFVTLlBMQVlJTkcsXHJcbiAgICAgIHB1YmxpYzogY29uZmlnLnB1YmxpYyB8fCB7fSxcclxuICAgICAgY2FsbGJhY2s6IGNvbmZpZy5jYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgbGFzdFBsYXlDb25maWc6IGNvbmZpZ1xyXG4gICAgfVxyXG5cclxuICAgIDtbJ3ByZURlbGF5JywgJ3Bvc3REZWxheSddLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgaWYgKGlzRW1wdHkoY29uZmlnW2tleV0pKSByZXR1cm5cclxuICAgICAgYmFzaWNTdGF0ZVtrZXldID0gY29uZmlnW2tleV1cclxuICAgIH0pXHJcblxyXG4gICAgc3dpdGNoIChjb25maWcubW9kZSkge1xyXG4gICAgICBjYXNlIE1PREUuU1RSQUlHSFQ6XHJcbiAgICAgICAgdGhpcy5fX3NldFN0YXRlKHtcclxuICAgICAgICAgIC4uLmJhc2ljU3RhdGVcclxuICAgICAgICB9KVxyXG4gICAgICAgIGJyZWFrXHJcblxyXG4gICAgICBjYXNlIE1PREUuU0lOR0xFOlxyXG4gICAgICAgIHRoaXMuX19zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAuLi5iYXNpY1N0YXRlLFxyXG4gICAgICAgICAgZW5kSW5kZXg6IHN0YXJ0SW5kZXhcclxuICAgICAgICB9KVxyXG4gICAgICAgIGJyZWFrXHJcblxyXG4gICAgICBjYXNlIE1PREUuTE9PUDpcclxuICAgICAgICB0aGlzLl9fc2V0U3RhdGUoe1xyXG4gICAgICAgICAgLi4uYmFzaWNTdGF0ZSxcclxuICAgICAgICAgIGxvb3BzQ3Vyc29yOiBjb25maWcubG9vcHNTdGFydCxcclxuICAgICAgICAgIGxvb3BzU3RhcnQ6IGNvbmZpZy5sb29wc1N0YXJ0LFxyXG4gICAgICAgICAgbG9vcHNFbmQ6IGNvbmZpZy5sb29wc0VuZFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmVtaXQoJ1NUQVJUJywge1xyXG4gICAgICB0aXRsZSxcclxuICAgICAgbG9vcHNDdXJzb3I6IHRoaXMuc3RhdGUubG9vcHNDdXJzb3IsXHJcbiAgICAgIGV4dHJhOiB0aGlzLnN0YXRlLmV4dHJhXHJcbiAgICB9KVxyXG5cclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxyXG4gICAgLnRoZW4oKCkgPT4gdGhpcy5fX3ByZXBhcmUodGhpcy5zdGF0ZSkpXHJcbiAgICAudGhlbihcclxuICAgICAgKCkgID0+IHRoaXMuX19nbyhudWxsLCBjb25maWcuaXNTdGVwKSxcclxuICAgICAgZSAgID0+IHRoaXMuX19lcnJMb2coZSwgZS5lcnJvckluZGV4KVxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgcGF1c2UgKCkge1xyXG4gICAgdGhpcy5fX3NldFN0YXRlKHtcclxuICAgICAgc3RhdHVzOiBTVEFUVVMuUEFVU0VEXHJcbiAgICB9KVxyXG5cclxuICAgIHRoaXMuZW1pdCgnUEFVU0VEJywgeyBleHRyYTogdGhpcy5zdGF0ZS5leHRyYSB9KVxyXG4gIH1cclxuXHJcbiAgcmVzdW1lIChpc1N0ZXApIHtcclxuICAgIHRoaXMuX19zZXRTdGF0ZSh7XHJcbiAgICAgIHN0YXR1czogU1RBVFVTLlBMQVlJTkdcclxuICAgIH0pXHJcblxyXG4gICAgdGhpcy5lbWl0KCdSRVNVTUVEJywgeyBleHRyYTogdGhpcy5zdGF0ZS5leHRyYSB9KVxyXG4gICAgdGhpcy5fX2dvKG51bGwsIGlzU3RlcClcclxuICB9XHJcblxyXG4gIHN0b3AgKG9wdHMpIHtcclxuICAgIHRoaXMuX19lbmQoRU5EX1JFQVNPTi5NQU5VQUwsIG9wdHMpXHJcbiAgfVxyXG5cclxuICBzdG9wV2l0aEVycm9yIChlcnJvcikge1xyXG4gICAgdGhpcy5fX2VyckxvZyhlcnJvcilcclxuICB9XHJcblxyXG4gIGp1bXBUbyAobmV4dEluZGV4KSB7XHJcbiAgICBjb25zdCB7IHJlc291cmNlcyB9ID0gdGhpcy5zdGF0ZVxyXG5cclxuICAgIC8vIE5vdGU6IHZhbGlkYXRlIG5leHRJbmRleCBieSByZXNvdXJjZXMubGVuZ3RoIGluc3RlYWQgb2Ygc3RhcnRJbmRleCBhbmQgZW5kSW5kZXgsXHJcbiAgICAvLyB0byBtYWtlIGl0IHBvc3NpYmxlIGZvciAncnVuIGZyb20gaGVyZScgdG8ganVtcCB0byBjb21tYW5kcyBhaGVhZCBvZiB0aGUgc3RhcnQgcG9pbnRcclxuICAgIGlmIChuZXh0SW5kZXggPCAwIHx8IG5leHRJbmRleCA+PSByZXNvdXJjZXMubGVuZ3RoKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignanVtcFRvOiBuZXh0SW5kZXggb3V0IG9mIHJhbmdlJylcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9fc2V0U3RhdGUoe1xyXG4gICAgICBuZXh0SW5kZXhcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBzZXRQb3N0RGVsYXkgKG4pIHtcclxuICAgIHRoaXMuX19zZXRTdGF0ZSh7XHJcbiAgICAgIHBvc3REZWxheTogblxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGdldFN0YXR1cyAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5zdGF0dXNcclxuICB9XHJcblxyXG4gIHJlcGxheUxhc3RDb25maWcgKCkge1xyXG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5zdGF0ZS5sYXN0UGxheUNvbmZpZ1xyXG4gICAgaWYgKCFjb25maWcpICB0aHJvdyBuZXcgRXJyb3IoJ05vIGxhc3QgcGxheSBjb25maWcgYXZhaWxhYmxlJylcclxuICAgIHJldHVybiB0aGlzLnBsYXkoY29uZmlnKVxyXG4gIH1cclxuXHJcbiAgX19nbyAodG9rZW4sIGlzU3RlcCkge1xyXG4gICAgLy8gTm90ZTogaW4gY2FzZSBpdCBpcyByZXR1cm5lZCBmcm9tIHByZXZpb3VzIGNhbGxcclxuXHJcbiAgICBpZiAodG9rZW4gPT09IHVuZGVmaW5lZCB8fCB0b2tlbiA9PT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnRva2VuID0gdG9rZW4gPSBNYXRoLnJhbmRvbSgpXHJcbiAgICB9IGVsc2UgaWYgKHRva2VuICE9PSB0aGlzLnRva2VuKSB7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGd1YXJkVG9rZW4gPSAoZm4pID0+ICguLi5hcmdzKSA9PiB7XHJcbiAgICAgIGlmICh0b2tlbiAhPT0gdGhpcy50b2tlbikgdGhyb3cgbmV3IEVycm9yKCd0b2tlbiBleHBpcmVkJylcclxuICAgICAgcmV0dXJuIGZuKC4uLmFyZ3MpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyByZXNvdXJjZXMsIG5leHRJbmRleCwgcHJlRGVsYXkgfSA9IHRoaXMuc3RhdGVcclxuICAgIGNvbnN0IHByZSA9IHByZURlbGF5ID4gMCA/IHRoaXMuX19kZWxheSgoKSA9PiB1bmRlZmluZWQsIHByZURlbGF5KSA6IFByb21pc2UucmVzb2x2ZSgpXHJcblxyXG4gICAgLy8gTm90ZTogdGhlIGZsb3cgb2YgdGhpcyBwcm9jZXNzOlxyXG4gICAgLy8gMS4gZGVsYXkgaWYgYHByZURlbGF5YCBzZXRcclxuICAgIC8vIDIuIGNoZWNrIGBfX3Nob3VsZENvbnRpbnVlYFxyXG4gICAgLy8gMy4gc3RvcCBpZiB0aGUgcGxheWVyIGlzIHN0b3BwZWQgb3IgcGF1c2VkXHJcbiAgICAvLyA0LiBvdGhlcndpc2UgY2FsbCBgX19ydW5gIHRvIGFjdHVhbGx5IGNvbnN1bWUgdGhlIGN1cnJlbnQgcmVzb3VyY2VcclxuICAgIC8vIDUuIHNldCB0aGUgc3RhdGUgdG8gbmV4dCBieSBjYWxsaW5nIGBfX3NldE5leHRgXHJcbiAgICAvLyA2LiBkZWxheSBpZiBgcG9zdERlbGF5YCBzZXRcclxuICAgIHJldHVybiBwcmUudGhlbigoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX19zaG91bGRDb250aW51ZSgpXHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKCh7IHBhdXNlZCwgc3RvcHBlZCB9KSA9PiB7XHJcbiAgICAgICAgaWYgKHN0b3BwZWQpICAgICAgcmV0dXJuIHRoaXMuX19lbmQoRU5EX1JFQVNPTi5DT01QTEVURSlcclxuICAgICAgICBlbHNlIGlmIChwYXVzZWQpICByZXR1cm5cclxuXHJcbiAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgcmVzb3VyY2VzLCBuZXh0SW5kZXgsIHN0YXJ0SW5kZXgsXHJcbiAgICAgICAgICBsb29wc0N1cnNvciwgbG9vcHNTdGFydCwgbG9vcHNFbmRcclxuICAgICAgICB9ID0gdGhpcy5zdGF0ZVxyXG5cclxuICAgICAgICAvLyBOb3RlOiB3aGVuIHdlJ3JlIHJ1bm5pbmcgbG9vcHNcclxuICAgICAgICBpZiAobmV4dEluZGV4ID09PSBzdGFydEluZGV4KSB7XHJcbiAgICAgICAgICBjb25zdCBvYmogPSB7XHJcbiAgICAgICAgICAgIGxvb3BzQ3Vyc29yLFxyXG4gICAgICAgICAgICBpbmRleDogbmV4dEluZGV4LFxyXG4gICAgICAgICAgICBjdXJyZW50TG9vcDogbG9vcHNDdXJzb3IgLSBsb29wc1N0YXJ0ICsgMSxcclxuICAgICAgICAgICAgbG9vcHM6IGxvb3BzRW5kIC0gbG9vcHNTdGFydCArIDEsXHJcbiAgICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZXNbbmV4dEluZGV4XSxcclxuICAgICAgICAgICAgZXh0cmE6IHRoaXMuc3RhdGUuZXh0cmFcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aGlzLmVtaXQoJ0xPT1BfU1RBUlQnLCBvYmopXHJcblxyXG4gICAgICAgICAgaWYgKGxvb3BzQ3Vyc29yICE9PSBsb29wc1N0YXJ0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnTE9PUF9SRVNUQVJUJywgb2JqKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lbWl0KCdUT19QTEFZJywge1xyXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcclxuICAgICAgICAgIGN1cnJlbnRMb29wOiBsb29wc0N1cnNvciAtIGxvb3BzU3RhcnQgKyAxLFxyXG4gICAgICAgICAgbG9vcHM6IGxvb3BzRW5kIC0gbG9vcHNTdGFydCArIDEsXHJcbiAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2VzW25leHRJbmRleF0sXHJcbiAgICAgICAgICBleHRyYTogdGhpcy5zdGF0ZS5leHRyYVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vIE5vdGU6IHRoZXJlIHdpbGwgbmV2ZXIgYmUgdHdvIGJyZWFrcG9pbnRzIGluIHN0cmFpZ2h0LiBVc2UgYGxhc3RCcmVha3BvaW50YCB0byB0ZWxsIHdoZXRoZXIgd2UganVzdCBoaXQgYSBicmVha3BvaW50XHJcbiAgICAgICAgLy8gQWxzbyBub3RlIHRoYXQsICdUT19QTEFZJyBldmVudHMgbmVlZCB0byBiZSBmaXJlZCBiZWZvcmUgd2UgcGF1c2UuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubGFzdEJyZWFrcG9pbnQgPT09IHVuZGVmaW5lZCAmJiB0aGlzLnN0YXRlLmJyZWFrcG9pbnRzLmluZGV4T2YobmV4dEluZGV4KSAhPT0gLTEpIHtcclxuICAgICAgICAgIHRoaXMuX19zZXRTdGF0ZSh7IGxhc3RCcmVha3BvaW50OiBuZXh0SW5kZXggfSlcclxuICAgICAgICAgIHRoaXMuZW1pdCgnQlJFQUtQT0lOVCcsIHtcclxuICAgICAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcclxuICAgICAgICAgICAgY3VycmVudExvb3A6IGxvb3BzQ3Vyc29yIC0gbG9vcHNTdGFydCArIDEsXHJcbiAgICAgICAgICAgIGxvb3BzOiBsb29wc0VuZCAtIGxvb3BzU3RhcnQgKyAxLFxyXG4gICAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2VzW25leHRJbmRleF0sXHJcbiAgICAgICAgICAgIGV4dHJhOiB0aGlzLnN0YXRlLmV4dHJhXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucGF1c2UoKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLl9fc2V0U3RhdGUoeyBsYXN0QnJlYWtwb2ludDogdW5kZWZpbmVkIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOb3RlOiBDaGVjayB3aGV0aGVyIHRva2VuIGV4cGlyZWQgb3Igbm90IGFmdGVyIGVhY2ggYXN5bmMgb3BlcmF0aW9uc1xyXG4gICAgICAgIC8vIEFsc28gYWxzbyBpbiB0aGUgZmluYWwgY2F0Y2ggdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBpbnZva2Ugb2YgX19lcnJMb2dcclxuICAgICAgICByZXR1cm4gdGhpcy5fX3J1bihyZXNvdXJjZXNbbmV4dEluZGV4XSwgdGhpcy5zdGF0ZSlcclxuICAgICAgICAgIC50aGVuKGd1YXJkVG9rZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgLy8gTm90ZTogYWxsb3cgdXNlcnMgdG8gaGFuZGxlIHRoZSByZXN1bHRcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19oYW5kbGUocmVzLCByZXNvdXJjZXNbbmV4dEluZGV4XSwgdGhpcy5zdGF0ZSlcclxuICAgICAgICAgICAgLnRoZW4oZ3VhcmRUb2tlbihuZXh0SW5kZXggPT4ge1xyXG4gICAgICAgICAgICAgIC8vIE5vdGU6IF9faGFuZGxlIGhhcyB0aGUgY2hhbmNlIHRvIHJldHVybiBhIGBuZXh0SW5kZXhgLCBtb3N0bHkgd2hlbiBpdCdzXHJcbiAgICAgICAgICAgICAgLy8gZnJvbSBhIGZsb3cgbG9naWMuIEJ1dCBzdGlsbCwgaXQgY291bGQgYmUgdW5kZWZpbmVkIGZvciBub3JtYWwgY29tbWFuZHNcclxuICAgICAgICAgICAgICBjb25zdCBvbGRMb29wc0N1cnNvciA9IHRoaXMuc3RhdGUubG9vcHNDdXJzb3JcclxuXHJcbiAgICAgICAgICAgICAgdGhpcy5fX3NldE5leHQobmV4dEluZGV4KVxyXG4gICAgICAgICAgICAgIHRoaXMuZW1pdCgnUExBWUVEX0xJU1QnLCB7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2VzOiB0aGlzLnN0YXRlLmRvbmVJbmRpY2VzLFxyXG4gICAgICAgICAgICAgICAgZXh0cmE6IHRoaXMuc3RhdGUuZXh0cmFcclxuICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gb2xkTG9vcHNDdXJzb3IgIT09IHRoaXMuc3RhdGUubG9vcHNDdXJzb3JcclxuICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgIC50aGVuKChpc0xvb3BzQ3Vyc29yQ2hhbmdlZCkgPT4ge1xyXG4gICAgICAgICAgICAgIC8vIF9faGFuZGxlIG1heSBjaGFuZ2UgcG9zdERlbGF5XHJcbiAgICAgICAgICAgICAgY29uc3QgeyBwb3N0RGVsYXkgfSA9IHRoaXMuc3RhdGVcclxuICAgICAgICAgICAgICBjb25zdCBkZWxheSAgICAgICAgID0gTWF0aC5tYXgocG9zdERlbGF5LCBpc0xvb3BzQ3Vyc29yQ2hhbmdlZCA/IDEwIDogMClcclxuICAgICAgICAgICAgICByZXR1cm4gZGVsYXkgPiAwID8gdGhpcy5fX2RlbGF5KCgpID0+IHVuZGVmaW5lZCwgZGVsYXkpIDogUHJvbWlzZS5yZXNvbHZlKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChpc1N0ZXApIHJldHVybiB0aGlzLnBhdXNlKClcclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fX2dvKHRva2VuKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfSkpXHJcbiAgICAgICAgICAuY2F0Y2goZ3VhcmRUb2tlbihlcnIgPT4gdGhpcy5fX2VyckxvZyhlcnIpKSlcclxuICAgICAgfSlcclxuICB9XHJcblxyXG4gIF9fc2hvdWxkQ29udGludWUgKCkge1xyXG4gICAgY29uc3QgeyBzdGF0dXMsIG1vZGUsIG5leHRJbmRleCwgc3RhcnRJbmRleCwgZW5kSW5kZXggfSA9IHRoaXMuc3RhdGVcclxuICAgIGxldCByZXRcclxuXHJcbiAgICBpZiAoc3RhdHVzID09PSBTVEFUVVMuUExBWUlORyAmJlxyXG4gICAgICAgIG5leHRJbmRleCA+PSBzdGFydEluZGV4ICYmXHJcbiAgICAgICAgbmV4dEluZGV4IDw9IGVuZEluZGV4KSB7XHJcbiAgICAgIHJldCA9IHsgcGF1c2VkOiBmYWxzZSwgc3RvcHBlZDogZmFsc2UgfVxyXG4gICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFNUQVRVUy5QQVVTRUQpIHtcclxuICAgICAgcmV0ID0geyBwYXVzZWQ6IHRydWUgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0ID0geyBzdG9wcGVkOiB0cnVlIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBOb3RlOiBtYWtlIHRoaXMgZnVuY3Rpb24gcmV0dXJuIHByb21pc2UsIGp1c3QgaW4gY2FzZVxyXG4gICAgLy8gYW4gYXN5bmMgY2hlY2sgaXMgbmVlZGVkIGluIGZ1dHVyZVxyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXQpXHJcbiAgfVxyXG5cclxuICBfX2VuZCAocmVhc29uLCBvcHRzKSB7XHJcbiAgICAvLyBOb3RlOiBDQU5OT1QgZW5kIHRoZSBwbGF5ZXIgdHdpY2VcclxuICAgIGlmICh0aGlzLnN0YXRlLnN0YXR1cyA9PT0gU1RBVFVTLlNUT1BQRUQpIHJldHVyblxyXG5cclxuICAgIGlmIChPYmplY3Qua2V5cyhFTkRfUkVBU09OKS5pbmRleE9mKHJlYXNvbikgPT09IC0xKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxheWVyIC0gX19lbmQ6IGludmFsaWQgcmVhc29uLCAnICsgcmVhc29uKVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghb3B0cyB8fCAhb3B0cy5zaWxlbnQpIHtcclxuICAgICAgdGhpcy5lbWl0KCdFTkQnLCB7IG9wdHMsIHJlYXNvbiwgZXh0cmE6IHRoaXMuc3RhdGUuZXh0cmEgfSlcclxuXHJcbiAgICAgIGlmIChyZWFzb24gIT09IEVORF9SRUFTT04uRVJST1IpIHtcclxuICAgICAgICB0aGlzLnN0YXRlLmNhbGxiYWNrKG51bGwsIHJlYXNvbilcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX19zZXRTdGF0ZShpbml0aWFsU3RhdGUpXHJcbiAgfVxyXG5cclxuICBfX2VyckxvZyAoZXJyLCBlcnJvckluZGV4KSB7XHJcbiAgICAvLyBOb3RlOiBDQU5OT1QgbG9nIGVycm9yIGlmIHBsYXllciBpcyBhbHJlYWR5IHN0b3BwZWRcclxuICAgIGlmICh0aGlzLnN0YXRlLnN0YXR1cyA9PT0gU1RBVFVTLlNUT1BQRUQpIHJldHVyblxyXG5cclxuICAgIHRoaXMuZW1pdCgnRVJST1InLCB7XHJcbiAgICAgIGVycm9ySW5kZXg6ICAgZXJyb3JJbmRleCAhPT0gdW5kZWZpbmVkID8gZXJyb3JJbmRleCA6IHRoaXMuc3RhdGUubmV4dEluZGV4LFxyXG4gICAgICBtc2c6ICAgICAgICAgIGVyciAmJiBlcnIubWVzc2FnZSxcclxuICAgICAgZXh0cmE6ICAgICAgICB0aGlzLnN0YXRlLmV4dHJhLFxyXG4gICAgICByZXN0YXJ0OiAgICAgICEhZXJyLnJlc3RhcnRcclxuICAgIH0pXHJcbiAgICB0aGlzLnN0YXRlLmNhbGxiYWNrKGVyciwgbnVsbClcclxuICAgIHRoaXMuX19lbmQoRU5EX1JFQVNPTi5FUlJPUilcclxuICB9XHJcblxyXG4gIF9fc2V0TmV4dCAobmV4dEluZGV4UGFzc2VkKSB7XHJcbiAgICBpZiAobmV4dEluZGV4UGFzc2VkICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAobmV4dEluZGV4UGFzc2VkIDwgMCB8fCBuZXh0SW5kZXhQYXNzZWQgPiB0aGlzLnN0YXRlLnJlc291cmNlcy5sZW5ndGgpKSB7XHJcbiAgICAgIC8vIE5vdGU6IG5leHRJbmRleFBhc3NlZCBpcyBhbGxvd2VkIHRvIGJlIGVxdWFsIHRvIHJlc291cmNlcy5sZW5ndGhcclxuICAgICAgLy8gVGhhdCBtZWFucyB3ZSBydW4gb3V0IG9mIGNvbW1hbmRzXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBuZXh0SW5kZXhQYXNzZWQgJHtuZXh0SW5kZXhQYXNzZWR9YClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7XHJcbiAgICAgIG1vZGUsIGRvbmVJbmRpY2VzLCBuZXh0SW5kZXgsXHJcbiAgICAgIGVuZEluZGV4LCBzdGFydEluZGV4LCBsb29wc0N1cnNvciwgbG9vcHNFbmRcclxuICAgIH0gPSB0aGlzLnN0YXRlXHJcblxyXG4gICAgY29uc3QgbmV4dEluZGV4VG9TZXQgPSBuZXh0SW5kZXhQYXNzZWQgIT09IHVuZGVmaW5lZCA/IG5leHRJbmRleFBhc3NlZCA6IChuZXh0SW5kZXggKyAxKVxyXG5cclxuICAgIGxldCBkb25lID0gZG9uZUluZGljZXMuaW5kZXhPZihuZXh0SW5kZXgpID09PSAtMSA/IFsuLi5kb25lSW5kaWNlcywgbmV4dEluZGV4XSA6IGRvbmVJbmRpY2VzXHJcbiAgICBsZXQgbGN1ciA9IGxvb3BzQ3Vyc29yXHJcbiAgICBsZXQgbmV4dCA9IG51bGxcclxuXHJcbiAgICBpZiAobW9kZSA9PT0gTU9ERS5MT09QKSB7XHJcbiAgICAgIGlmIChuZXh0SW5kZXhUb1NldCA8PSBlbmRJbmRleCkge1xyXG4gICAgICAgIG5leHQgPSBuZXh0SW5kZXhUb1NldFxyXG4gICAgICB9IGVsc2UgaWYgKGxvb3BzQ3Vyc29yID49IGxvb3BzRW5kKSB7XHJcbiAgICAgICAgbmV4dCA9IG5leHRJbmRleFRvU2V0XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGN1ciArPSAxXHJcbiAgICAgICAgbmV4dCA9IHN0YXJ0SW5kZXhcclxuICAgICAgICBkb25lID0gW11cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV4dCA9IG5leHRJbmRleFRvU2V0XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fX3NldFN0YXRlKHtcclxuICAgICAgbG9vcHNDdXJzb3I6IGxjdXIsXHJcbiAgICAgIG5leHRJbmRleDogbmV4dCxcclxuICAgICAgZG9uZUluZGljZXM6IGRvbmVcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBfX3NldFN0YXRlIChvYmopIHtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIC4uLnRoaXMuc3RhdGUsXHJcbiAgICAgIC4uLm9ialxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX19kZWxheSAoZm4sIHRpbWVvdXQpIHtcclxuICAgIGxldCBwYXN0ICAgID0gMFxyXG4gICAgY29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgIHBhc3QgKz0gMTAwMFxyXG4gICAgICB0aGlzLmVtaXQoJ0RFTEFZJywge1xyXG4gICAgICAgIGV4dHJhOiB0aGlzLnN0YXRlLmV4dHJhLFxyXG4gICAgICAgIHRvdGFsOiB0aW1lb3V0LFxyXG4gICAgICAgIHBhc3RcclxuICAgICAgfSlcclxuICAgIH0sIDEwMDApXHJcblxyXG4gICAgcmV0dXJuIGRlbGF5KGZuLCB0aW1lb3V0KVxyXG4gICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgaWYgKHRpbWVyKSAgY2xlYXJJbnRlcnZhbCh0aW1lcilcclxuICAgICAgcmV0dXJuIHJlc1xyXG4gICAgfSlcclxuICB9XHJcbn1cclxuXHJcbmVlKFBsYXllci5wcm90b3R5cGUpXHJcblxyXG5QbGF5ZXIuQyA9IFBsYXllci5wcm90b3R5cGUuQyA9IHtcclxuICBNT0RFLFxyXG4gIFNUQVRVUyxcclxuICBFTkRfUkVBU09OXHJcbn1cclxuXHJcbmxldCBwbGF5ZXJQb29sID0ge31cclxuXHJcbi8vIGZhY3RvcnkgZnVuY3Rpb24gdG8gcmV0dXJuIGEgcGxheWVyIHNpbmdsZXRvblxyXG5leHBvcnQgY29uc3QgZ2V0UGxheWVyID0gKG9wdHMgPSB7fSwgc3RhdGUpID0+IHtcclxuICBjb25zdCBuYW1lID0gb3B0cy5uYW1lIHx8ICd0ZXN0Q2FzZSdcclxuICBkZWxldGUgb3B0cy5uYW1lXHJcblxyXG4gIGlmIChPYmplY3Qua2V5cyhvcHRzKS5sZW5ndGggPiAwKSB7XHJcbiAgICBwbGF5ZXJQb29sW25hbWVdID0gbmV3IFBsYXllcihvcHRzLCBzdGF0ZSlcclxuICB9XHJcblxyXG4gIGlmICghcGxheWVyUG9vbFtuYW1lXSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdwbGF5ZXIgbm90IGluaXRpYWxpemVkJylcclxuICB9XHJcblxyXG4gIHJldHVybiBwbGF5ZXJQb29sW25hbWVdXHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVnaXN0cnkge1xyXG4gIGNvbnN0cnVjdG9yICh7IHByb2Nlc3MsIG9uWmVybywgb25PbmUgfSkge1xyXG4gICAgdGhpcy5jYWNoZSA9IHt9XHJcbiAgICB0aGlzLl9fcHJvY2VzcyA9IHByb2Nlc3NcclxuICAgIHRoaXMuX19vblplcm8gID0gb25aZXJvIHx8ICgoKSA9PiB7fSlcclxuICAgIHRoaXMuX19vbk9uZSAgID0gb25PbmUgfHwgKCgpID0+IHt9KVxyXG4gIH1cclxuXHJcbiAgYWRkIChpZCwgb2JqKSB7XHJcbiAgICB0aGlzLmNhY2hlW2lkXSA9IHRoaXMuY2FjaGVbaWRdIHx8IFtdXHJcbiAgICB0aGlzLmNhY2hlW2lkXS5wdXNoKG9iailcclxuXHJcbiAgICBpZiAodGhpcy5jYWNoZVtpZF0ubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIHRyeSB7IHRoaXMuX19vbk9uZShpZCkgfSBjYXRjaCAoZSkgeyBjb25zb2xlLmVycm9yKCdpbiBvbk9uZSwgJyArIGUubWVzc2FnZSkgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG5cclxuICByZW1vdmUgKGlkLCBvYmopIHtcclxuICAgIGlmICghdGhpcy5jYWNoZVtpZF0pICByZXR1cm4gZmFsc2VcclxuICAgIHRoaXMuY2FjaGVbaWRdID0gdGhpcy5jYWNoZVtpZF0uZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gb2JqKVxyXG5cclxuICAgIGlmICh0aGlzLmNhY2hlW2lkXS5sZW5ndGggPT09IDApIHtcclxuICAgICAgdHJ5IHsgdGhpcy5fX29uWmVybyhpZCkgfSBjYXRjaCAoZSkgeyBjb25zb2xlLmVycm9yKCdpbiBvblplcm8sICcgKyBlLm1lc3NhZ2UpIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgZmlyZSAoaWQsIGRhdGEpIHtcclxuICAgIGlmICghdGhpcy5jYWNoZVtpZF0pICByZXR1cm4gZmFsc2VcclxuICAgIHRoaXMuY2FjaGVbaWRdLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIHRyeSB7IHRoaXMuX19wcm9jZXNzKGl0ZW0sIGRhdGEsIGlkKSB9IGNhdGNoIChlKSB7IGNvbnNvbGUuZXJyb3IoJ2luIHByb2Nlc3MsICcgKyBlLm1lc3NhZ2UpIH1cclxuICAgIH0pXHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgaGFzIChpZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FjaGVbaWRdICYmIHRoaXMuY2FjaGVbaWRdLmxlbmd0aCA+IDBcclxuICB9XHJcblxyXG4gIGtleXMgKCkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuY2FjaGUpLmZpbHRlcihrZXkgPT4gdGhpcy5jYWNoZVtrZXldICYmIHRoaXMuY2FjaGVba2V5XS5sZW5ndGggPiAwKVxyXG4gIH1cclxuXHJcbiAgZGVzdG9yeSAoKSB7XHJcbiAgICB0aGlzLmNhY2hlID0ge31cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgS2V5c2ltIGZyb20gJy4vbGliL2tleXNpbSdcclxuaW1wb3J0IHsgc3BsaXRLZWVwIH0gZnJvbSAnLi91dGlscydcclxuaW1wb3J0IGxvZyBmcm9tICcuL2xvZydcclxuXHJcbmxldCBrZXlib2FyZCA9IEtleXNpbS5LZXlib2FyZC5VU19FTkdMSVNIXHJcblxyXG5jb25zdCBmaW5kUGFyZW50QnlUYWcgPSAoZWwsIHRhZykgPT4ge1xyXG4gIGxldCBwID0gZWxcclxuXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbmQtYXNzaWduXHJcbiAgd2hpbGUgKHAgPSBwLnBhcmVudE5vZGUpIHtcclxuICAgIGlmIChwLnRhZ05hbWUgPT09IHRhZy50b1VwcGVyQ2FzZSgpKSB7XHJcbiAgICAgIHJldHVybiBwXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbFxyXG59XHJcblxyXG5jb25zdCBzcGxpdFN0cmluZ1RvQ2hhcnMgPSAoc3RyKSA9PiB7XHJcbiAgY29uc3Qgc3BlY2lhbEtleXMgPSBbXHJcbiAgICAnS0VZX0xFRlQnLCAnS0VZX1VQJywgJ0tFWV9SSUdIVCcsICdLRVlfRE9XTicsXHJcbiAgICAnS0VZX1BHVVAnLCAnS0VZX1BBR0VfVVAnLCAnS0VZX1BHRE4nLCAnS0VZX1BBR0VfRE9XTicsXHJcbiAgICAnS0VZX0JLU1AnLCAnS0VZX0JBQ0tTUEFDRScsICdLRVlfREVMJywgJ0tFWV9ERUxFVEUnLFxyXG4gICAgJ0tFWV9FTlRFUicsICdLRVlfVEFCJ1xyXG4gIF1cclxuICBjb25zdCByZWcgICA9IG5ldyBSZWdFeHAoYFxcXFwkXFxcXHsoJHtzcGVjaWFsS2V5cy5qb2luKCd8Jyl9KVxcXFx9YClcclxuICBjb25zdCBwYXJ0cyA9IHNwbGl0S2VlcChyZWcsIHN0cilcclxuXHJcbiAgcmV0dXJuIHBhcnRzLnJlZHVjZSgocHJldiwgY3VyKSA9PiB7XHJcbiAgICBpZiAocmVnLnRlc3QoY3VyKSkge1xyXG4gICAgICBwcmV2LnB1c2goY3VyKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcHJldiA9IHByZXYuY29uY2F0KGN1ci5zcGxpdCgnJykpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByZXZcclxuICB9LCBbXSlcclxufVxyXG5cclxuY29uc3QgZ2V0S2V5U3Ryb2tlQWN0aW9uID0gKHN0cikgPT4ge1xyXG4gIGNvbnN0IHJlZyA9IC9eXFwkXFx7KFtefV0rKVxcfSQvXHJcbiAgbGV0IG1hdGNoXHJcblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxyXG4gIGlmIChtYXRjaCA9IHN0ci5tYXRjaChyZWcpKSB7XHJcbiAgICBzd2l0Y2ggKG1hdGNoWzFdKSB7XHJcbiAgICAgIGNhc2UgJ0tFWV9MRUZUJzpcclxuICAgICAgICByZXR1cm4gJ0xFRlQnXHJcblxyXG4gICAgICBjYXNlICdLRVlfVVAnOlxyXG4gICAgICAgIHJldHVybiAnVVAnXHJcblxyXG4gICAgICBjYXNlICdLRVlfUklHSFQnOlxyXG4gICAgICAgIHJldHVybiAnUklHSFQnXHJcblxyXG4gICAgICBjYXNlICdLRVlfRE9XTic6XHJcbiAgICAgICAgcmV0dXJuICdET1dOJ1xyXG5cclxuICAgICAgY2FzZSAnS0VZX1BHVVAnOlxyXG4gICAgICBjYXNlICdLRVlfUEFHRV9VUCc6XHJcbiAgICAgICAgcmV0dXJuICdQQUdFVVAnXHJcblxyXG4gICAgICBjYXNlICdLRVlfUEdETic6XHJcbiAgICAgIGNhc2UgJ0tFWV9QQUdFX0RPV04nOlxyXG4gICAgICAgIHJldHVybiAnUEFHRURPV04nXHJcblxyXG4gICAgICBjYXNlICdLRVlfQktTUCc6XHJcbiAgICAgIGNhc2UgJ0tFWV9CQUNLU1BBQ0UnOlxyXG4gICAgICAgIHJldHVybiAnQkFDS1NQQUNFJ1xyXG5cclxuICAgICAgY2FzZSAnS0VZX0RFTCc6XHJcbiAgICAgIGNhc2UgJ0tFWV9ERUxFVEUnOlxyXG4gICAgICAgIHJldHVybiAnREVMRVRFJ1xyXG5cclxuICAgICAgY2FzZSAnS0VZX0VOVEVSJzpcclxuICAgICAgICByZXR1cm4gJ0VOVEVSJ1xyXG5cclxuICAgICAgY2FzZSAnS0VZX1RBQic6XHJcbiAgICAgICAgcmV0dXJuICdUQUInXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RyXHJcbn1cclxuXHJcbmNvbnN0IGlzRWRpdGFibGUgPSAoZWwpID0+IHtcclxuICBpZiAoZWwuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpICE9PSBudWxsKSByZXR1cm4gZmFsc2VcclxuICBjb25zdCB0YWcgICA9IGVsLnRhZ05hbWUudG9VcHBlckNhc2UoKVxyXG4gIGNvbnN0IHR5cGUgID0gKGVsLnR5cGUgfHwgJycpLnRvTG93ZXJDYXNlKClcclxuICBjb25zdCBlZGl0YWJsZVR5cGVzID0gW1xyXG4gICAgJ3RleHQnLFxyXG4gICAgJ3NlYXJjaCcsXHJcbiAgICAndGVsJyxcclxuICAgICd1cmwnLFxyXG4gICAgJ2VtYWlsJyxcclxuICAgICdwYXNzd29yZCcsXHJcbiAgICAnbnVtYmVyJ1xyXG4gIF1cclxuXHJcbiAgaWYgKHRhZyA9PT0gJ1RFWFRBUkVBJykgcmV0dXJuIHRydWVcclxuICBpZiAodGFnID09PSAnSU5QVVQnICYmIGVkaXRhYmxlVHlwZXMuaW5kZXhPZih0eXBlKSAhPT0gLTEpICByZXR1cm4gdHJ1ZVxyXG5cclxuICByZXR1cm4gZmFsc2VcclxufVxyXG5cclxuY29uc3QgbWF5YmVFZGl0VGV4dCA9ICh0YXJnZXQsIGMpID0+IHtcclxuICBpZiAoIWlzRWRpdGFibGUodGFyZ2V0KSkgIHJldHVyblxyXG4gIGlmIChjLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgaWYgKCFpc05pbCh0YXJnZXQuc2VsZWN0aW9uU3RhcnQpKSB7XHJcbiAgICAgIGNvbnN0IGxhc3RTdGFydCA9IHRhcmdldC5zZWxlY3Rpb25TdGFydFxyXG4gICAgICB0YXJnZXQudmFsdWUgICAgPSB0YXJnZXQudmFsdWUuc3Vic3RyaW5nKDAsIHRhcmdldC5zZWxlY3Rpb25TdGFydCkgKyBjICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlLnN1YnN0cmluZyh0YXJnZXQuc2VsZWN0aW9uRW5kKVxyXG5cclxuICAgICAgc2V0U2VsZWN0aW9uKHRhcmdldCwgbGFzdFN0YXJ0ICsgMSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRhcmdldC52YWx1ZSAgICA9IHRhcmdldC52YWx1ZSArIGNcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgc3dpdGNoIChjKSB7XHJcbiAgICAgIGNhc2UgJ0VOVEVSJzpcclxuICAgICAgICB0YXJnZXQudmFsdWUgPSB0YXJnZXQudmFsdWUgKyAnXFxuJ1xyXG4gICAgICAgIHNldFNlbGVjdGlvbih0YXJnZXQsIHRhcmdldC52YWx1ZS5sZW5ndGgpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAnVEFCJzpcclxuICAgICAgICB0YXJnZXQudmFsdWUgPSB0YXJnZXQudmFsdWUgKyAnXFx0J1xyXG4gICAgICAgIHNldFNlbGVjdGlvbih0YXJnZXQsIHRhcmdldC52YWx1ZS5sZW5ndGgpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAnTEVGVCc6XHJcbiAgICAgICAgc2V0U2VsZWN0aW9uKHRhcmdldCwgdGFyZ2V0LnNlbGVjdGlvblN0YXJ0IC0gMSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdSSUdIVCc6XHJcbiAgICAgICAgc2V0U2VsZWN0aW9uKHRhcmdldCwgdGFyZ2V0LnNlbGVjdGlvbkVuZCArIDEpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAnQkFDS1NQQUNFJzoge1xyXG4gICAgICAgIGNvbnN0IHBvcyAgICA9ICB0YXJnZXQuc2VsZWN0aW9uU3RhcnRcclxuICAgICAgICB0YXJnZXQudmFsdWUgPSAgdGFyZ2V0LnZhbHVlLnN1YnN0cmluZygwLCB0YXJnZXQuc2VsZWN0aW9uU3RhcnQgLSAxKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZS5zdWJzdHJpbmcodGFyZ2V0LnNlbGVjdGlvbkVuZClcclxuICAgICAgICBzZXRTZWxlY3Rpb24odGFyZ2V0LCBwb3MgLSAxKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnREVMRVRFJzoge1xyXG4gICAgICAgIGNvbnN0IHBvcyAgICA9ICB0YXJnZXQuc2VsZWN0aW9uRW5kXHJcbiAgICAgICAgdGFyZ2V0LnZhbHVlID0gIHRhcmdldC52YWx1ZS5zdWJzdHJpbmcoMCwgdGFyZ2V0LnNlbGVjdGlvblN0YXJ0KSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZS5zdWJzdHJpbmcodGFyZ2V0LnNlbGVjdGlvbkVuZCArIDEpXHJcbiAgICAgICAgc2V0U2VsZWN0aW9uKHRhcmdldCwgcG9zKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IG1heWJlU3VibWl0Rm9ybSA9ICh0YXJnZXQsIGtleSkgPT4ge1xyXG4gIGlmIChrZXkgIT09ICdFTlRFUicpICAgICAgcmV0dXJuXHJcbiAgaWYgKCFpc0VkaXRhYmxlKHRhcmdldCkpICByZXR1cm5cclxuXHJcbiAgY29uc3QgZm9ybSA9IGZpbmRQYXJlbnRCeVRhZyh0YXJnZXQsICdGT1JNJylcclxuICBpZiAoIWZvcm0pICAgICAgICAgICAgICAgIHJldHVyblxyXG5cclxuICBmb3JtLnN1Ym1pdCgpXHJcbn1cclxuXHJcbmNvbnN0IGlzTmlsID0gKHZhbCkgPT4gdmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkXHJcblxyXG5jb25zdCBzZXRTZWxlY3Rpb24gPSAoJGVsLCBzdGFydCwgZW5kKSA9PiB7XHJcbiAgLy8gTm90ZTogSW5wdXRzIGxpa2UgbnVtYmVyIGFuZCBlbWFpbCwgZG9lc24ndCBzdXBwb3J0IHNlbGVjdGlvbkVuZFxyXG4gIC8vIGZvciBzYWZldHksIG1ha2Ugc3VyZSB0aG9zZSB2YWx1ZXMgYXJlIG5vdCBudWxsIG9yIHVuZGVmaW5lZCAoaW5mZXJzIHRoYXQgaXQncyBhdmFpbGFibGUpXHJcbiAgaWYgKCFpc05pbCgkZWwuc2VsZWN0aW9uU3RhcnQpKSB7XHJcbiAgICAkZWwuc2VsZWN0aW9uU3RhcnQgPSBzdGFydFxyXG4gIH1cclxuXHJcbiAgaWYgKCFpc05pbCgkZWwuc2VsZWN0aW9uRW5kKSkge1xyXG4gICAgJGVsLnNlbGVjdGlvbkVuZCA9IChlbmQgIT09IHVuZGVmaW5lZCA/IGVuZCA6IHN0YXJ0KVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgcmVwbGFjZUFjdGlvbktleSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgY29uc3QgbWFwcGluZyA9IHtcclxuICAgIDA6ICBudWxsLCAgICAvLyB0aGUgTlVMTCBjaGFyYWN0ZXJcclxuICAgIDg6ICAnQkFDS1NQQUNFJyxcclxuICAgIDk6ICAnVEFCJyxcclxuICAgIDEwOiAnRU5URVInLCAvLyBcXG4gIG5ldyBsaW5lXHJcbiAgICAxMTogIG51bGwsICAgLy8gXFx2ICB2ZXJ0aWNhbCB0YWJcclxuICAgIDEyOiAgbnVsbCwgICAvLyBcXGYgIGZvcm0gZmVlZFxyXG4gICAgMTM6ICBudWxsICAgIC8vIFxcciAgY2FycmlhZ2UgcmV0dXJuXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKGMpID0+IHtcclxuICAgIC8vIE5vdGU6IGl0IG1lYW5zIGl0J3MgYWxyZWFkeSBrZXkgc3Ryb2tlIGFjdGlvblxyXG4gICAgaWYgKGMubGVuZ3RoID4gMSkgcmV0dXJuIGNcclxuICAgIHJldHVybiBtYXBwaW5nW2MuY2hhckNvZGVBdCgwKV0gfHwgY1xyXG4gIH1cclxufSkoKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VuZEtleXMgKHRhcmdldCwgc3RyLCBub1NwZWNpYWxLZXlzKSB7XHJcbiAgY29uc3QgcmF3Q2hhcnMgID0gbm9TcGVjaWFsS2V5cyA/IHN0ci5zcGxpdCgnJykgOiBzcGxpdFN0cmluZ1RvQ2hhcnMoc3RyKVxyXG4gIGNvbnN0IGNoYXJzICAgICA9IHJhd0NoYXJzLm1hcChyZXBsYWNlQWN0aW9uS2V5KS5maWx0ZXIoeCA9PiB4ICYmIHgubGVuZ3RoKVxyXG5cclxuICB0YXJnZXQuZm9jdXMoKVxyXG4gIGlmICh0YXJnZXQudmFsdWUpIHtcclxuICAgIHNldFNlbGVjdGlvbih0YXJnZXQsIHRhcmdldC52YWx1ZS5sZW5ndGgpXHJcbiAgfVxyXG5cclxuICBjaGFycy5mb3JFYWNoKGMgPT4ge1xyXG4gICAgY29uc3QgYWN0aW9uID0gZ2V0S2V5U3Ryb2tlQWN0aW9uKGMpXHJcblxyXG4gICAgbWF5YmVFZGl0VGV4dCh0YXJnZXQsIGFjdGlvbilcclxuICAgIC8vIE5vdGU6IFRoaXMgbGluZSB3aWxsIHRha2UgY2FyZSBvZiBLRVlET1dOIEtFWVBSRVNTIEtFWVVQIGFuZCBURVhUSU5QVVRcclxuICAgIGtleWJvYXJkLmRpc3BhdGNoRXZlbnRzRm9yQWN0aW9uKGFjdGlvbiwgdGFyZ2V0KVxyXG5cclxuICAgIGlmICghbm9TcGVjaWFsS2V5cykge1xyXG4gICAgICBtYXliZVN1Ym1pdEZvcm0odGFyZ2V0LCBhY3Rpb24pXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG4iLCJpbXBvcnQgUmVnaXN0cnkgZnJvbSAnLi9yZWdpc3RyeSdcclxuaW1wb3J0IHsgdmFsaWRhdGVTdGFuZGFyZE5hbWUgfSBmcm9tICcuLi9jb21tb24vdXRpbHMnXHJcblxyXG5jb25zdCBrZXlDb25zdGFudHMgPSBbXHJcbiAgJ0tFWV9MRUZUJywgJ0tFWV9VUCcsICdLRVlfUklHSFQnLCAnS0VZX0RPV04nLFxyXG4gICdLRVlfUEdVUCcsICdLRVlfUEFHRV9VUCcsICdLRVlfUEdETicsICdLRVlfUEFHRV9ET1dOJyxcclxuICAnS0VZX0JLU1AnLCAnS0VZX0JBQ0tTUEFDRScsICdLRVlfREVMJywgJ0tFWV9ERUxFVEUnLFxyXG4gICdLRVlfRU5URVInLCAnS0VZX1RBQidcclxuXVxyXG5cclxuY29uc3QgREVGQVVMVF9LRVkgPSAnbWFpbidcclxuY29uc3QgY2FjaGUgPSB7fVxyXG5cclxuY29uc3QgdmFsaWRhdGVWYXJpYWJsZU5hbWUgPSAobmFtZSkgPT4ge1xyXG4gIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gJyEnKSB7XHJcbiAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSlcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICB2YWxpZGF0ZVN0YW5kYXJkTmFtZShuYW1lKVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB2YXJpYWJsZSBuYW1lICcke25hbWV9Jy4gQSB2YXJpYWJsZSBuYW1lIGAgKyBlLm1lc3NhZ2UpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2YXJzRmFjdG9yeSAobmFtZSA9IERFRkFVTFRfS0VZLCBvcHRpb25zID0ge30sIGluaXRpYWwgPSB7fSkge1xyXG4gIGNvbnN0IG9wdHMgPSB7XHJcbiAgICBpc0ludmFsaWRJbnRlcm5hbFZhcjogKGtleSkgPT4ge1xyXG4gICAgICByZXR1cm4ga2V5LmluZGV4T2YoJyEnKSA9PT0gMCAmJlxyXG4gICAgICAgICAgICAgIGtleSAhPT0gJyFUSU1FT1VUX1BBR0VMT0FEJyAmJlxyXG4gICAgICAgICAgICAgIGtleSAhPT0gJyFUSU1FT1VUX1dBSVQnICYmXHJcbiAgICAgICAgICAgICAga2V5ICE9PSAnIVRJTUVPVVRfTUFDUk8nICYmXHJcbiAgICAgICAgICAgICAga2V5ICE9PSAnIVRJTUVPVVRfRE9XTkxPQUQnICYmXHJcbiAgICAgICAgICAgICAga2V5ICE9PSAnIVJFUExBWVNQRUVEJyAmJlxyXG4gICAgICAgICAgICAgIGtleSAhPT0gJyFMT09QJyAmJlxyXG4gICAgICAgICAgICAgIGtleSAhPT0gJyFVUkwnICYmXHJcbiAgICAgICAgICAgICAga2V5ICE9PSAnIU1BQ1JPTkFNRScgJiZcclxuICAgICAgICAgICAgICBrZXkgIT09ICchUlVOVElNRScgJiZcclxuICAgICAgICAgICAgICBrZXkgIT09ICchQ1NWTElORScgJiZcclxuICAgICAgICAgICAgICBrZXkgIT09ICchQ1NWTElORScgJiZcclxuICAgICAgICAgICAgICBrZXkgIT09ICchTEFTVENPTU1BTkRPSycgJiZcclxuICAgICAgICAgICAgICBrZXkgIT09ICchRVJST1JJR05PUkUnICYmXHJcbiAgICAgICAgICAgICAga2V5ICE9PSAnIUNTVlJFQURMSU5FTlVNQkVSJyAmJlxyXG4gICAgICAgICAgICAgIGtleSAhPT0gJyFDU1ZSRUFEU1RBVFVTJyAmJlxyXG4gICAgICAgICAgICAgIGtleSAhPT0gJyFDU1ZSRUFETUFYUk9XJyAmJlxyXG4gICAgICAgICAgICAgIGtleSAhPT0gJyFDTElQQk9BUkQnICYmXHJcbiAgICAgICAgICAgICAga2V5ICE9PSAnIVNUQVRVU09LJyAmJlxyXG4gICAgICAgICAgICAgIGtleSAhPT0gJyFXQUlURk9SVklTSUJMRScgJiZcclxuICAgICAgICAgICAgICBrZXkgIT09ICchSU1BR0VYJyAmJlxyXG4gICAgICAgICAgICAgIGtleSAhPT0gJyFJTUFHRVknICYmXHJcbiAgICAgICAgICAgICAga2V5ICE9PSAnIVZJU1VBTFNFQVJDSEFSRUEnICYmXHJcbiAgICAgICAgICAgICAga2V5ICE9PSAnIVNUT1JFRElNQUdFUkVDVCcgJiZcclxuICAgICAgICAgICAgICAhL14hQ09MXFxkKyQvaS50ZXN0KGtleSlcclxuICAgIH0sXHJcbiAgICByZWFkb25seTogW1xyXG4gICAgICAnIUxPT1AnLCAnIVVSTCcsICchTUFDUk9OQU1FJywgJyFSVU5USU1FJywgJyFMQVNUQ09NTUFORE9LJywgJyFDU1ZSRUFEU1RBVFVTJywgJyFDU1ZSRUFETUFYUk9XJywgJyFWSVNVQUxTRUFSQ0hBUkVBJyxcclxuICAgICAgLi4ua2V5Q29uc3RhbnRzXHJcbiAgICBdLFxyXG4gICAgdHlwZUNoZWNrOiB7XHJcbiAgICAgICchUkVQTEFZU1BFRUQnOiAgICAgICAodmFsKSA9PiBbJ1NMT1cnLCAnTUVESVVNJywgJ0ZBU1QnXS5pbmRleE9mKCh2YWwgfHwgJycpLnRvVXBwZXJDYXNlKCkpICE9PSAtMSxcclxuICAgICAgJyFUSU1FT1VUX1BBR0VMT0FEJzogICh2YWwpID0+IHBhcnNlSW50KHZhbCwgMTApID49IDAsXHJcbiAgICAgICchVElNRU9VVF9XQUlUJzogICAgICAodmFsKSA9PiBwYXJzZUludCh2YWwsIDEwKSA+PSAwLFxyXG4gICAgICAnIVRJTUVPVVRfTUFDUk8nOiAgICAgKHZhbCkgPT4gcGFyc2VJbnQodmFsLCAxMCkgPj0gMCxcclxuICAgICAgJyFUSU1FT1VUX0RPV05MT0FEJzogICh2YWwpID0+IHBhcnNlSW50KHZhbCwgMTApID49IDAsXHJcbiAgICAgICchQ1NWUkVBRExJTkVOVU1CRVInOiAodmFsKSA9PiBwYXJzZUludCh2YWwsIDEwKSA+PSAwXHJcbiAgICB9LFxyXG4gICAgbm9ybWFsaXplOiAoa2V5LCB2YWwpID0+IHtcclxuICAgICAgY29uc3QgdXBwZXJLZXkgPSBrZXkudG9VcHBlckNhc2UoKVxyXG4gICAgICBjb25zdCBhY2NlcHRTdHJpbmdUcnVlRmFsc2UgPSAodmFsKSA9PiB7XHJcbiAgICAgICAgaWYgKHZhbCA9PT0gJ3RydWUnKSAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgaWYgKHZhbCA9PT0gJ2ZhbHNlJykgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIHJldHVybiB2YWxcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBudW0gPSAocykgPT4gcGFyc2VGbG9hdChzKVxyXG5cclxuICAgICAgc3dpdGNoICh1cHBlcktleSkge1xyXG4gICAgICAgIGNhc2UgJyFFUlJPUklHTk9SRSc6XHJcbiAgICAgICAgY2FzZSAnIVdBSVRGT1JWSVNJQkxFJzpcclxuICAgICAgICAgIHJldHVybiBhY2NlcHRTdHJpbmdUcnVlRmFsc2UodmFsKVxyXG5cclxuICAgICAgICBjYXNlICchVElNRU9VVF9QQUdFTE9BRCc6XHJcbiAgICAgICAgY2FzZSAnIVRJTUVPVVRfV0FJVCc6XHJcbiAgICAgICAgY2FzZSAnIVRJTUVPVVRfTUFDUk8nOlxyXG4gICAgICAgIGNhc2UgJyFUSU1FT1VUX0RPV05MT0FEJzpcclxuICAgICAgICAgIHJldHVybiBudW0odmFsKVxyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgcmV0dXJuIHZhbFxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgLi4ub3B0aW9uc1xyXG4gIH1cclxuICBsZXQgdmFycyA9IGluaXRpYWxcclxuXHJcbiAgY29uc3QgbGlzdGVuZXJzICAgICA9IG5ldyBSZWdpc3RyeSh7IHByb2Nlc3M6IChmbiwgZGF0YSwgZXZlbnROYW1lKSA9PiBmbihkYXRhKSB9KVxyXG4gIGNvbnN0IGZpcmVPbkNoYW5nZSAgPSAoKSA9PiBsaXN0ZW5lcnMuZmlyZSgnY2hhbmdlJywgeyB2YXJzOiBPYmplY3QuYXNzaWduKHt9LCB2YXJzKSB9KVxyXG4gIGNvbnN0IHNlbGYgPSB7XHJcbiAgICByZXNldDogKG9wdGlvbnMgPSB7fSkgPT4ge1xyXG4gICAgICBpZiAob3B0aW9ucy5rZWVwR2xvYmFsKSB7XHJcbiAgICAgICAgY29uc3QgZ2xvYmFscyA9IE9iamVjdC5rZXlzKHZhcnMpLnJlZHVjZSgocHJldiwga2V5KSA9PiB7XHJcbiAgICAgICAgICBpZiAoL15nbG9iYWwvaS50ZXN0KGtleSkpIHByZXZba2V5XSA9IHZhcnNba2V5XVxyXG4gICAgICAgICAgcmV0dXJuIHByZXZcclxuICAgICAgICB9LCB7fSlcclxuXHJcbiAgICAgICAgdmFycyA9IGdsb2JhbHNcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXJzID0ge31cclxuICAgICAgfVxyXG5cclxuICAgICAgZmlyZU9uQ2hhbmdlKClcclxuICAgIH0sXHJcbiAgICByZW5kZXI6IChzdHIsIG9wdGlvbnMpID0+IHtcclxuICAgICAgY29uc3QgZ2V0VmFyID0ga2V5ID0+IHtcclxuICAgICAgICBjb25zdCB1cHBlcktleSA9IChrZXkgfHwgJycpLnRvVXBwZXJDYXNlKClcclxuXHJcbiAgICAgICAgaWYgKHVwcGVyS2V5IGluIHZhcnMpIHtcclxuICAgICAgICAgIHJldHVybiB2YXJzW3VwcGVyS2V5XVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoL14hLy50ZXN0KHVwcGVyS2V5KSkgdGhyb3cgbmV3IEVycm9yKGBJbnRlcm5hbCB2YXJpYWJsZSBcIiR7dXBwZXJLZXl9XCIgbm90IHN1cHBvcnRlZGApXHJcbiAgICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcihgdmFyaWFibGUgXCIke3VwcGVyS2V5fVwiIGlzIG5vdCBkZWZpbmVkYClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcmVwbGFjZUFsbFZhcnMgPSAoc3RyLCByZWcsIGdldEtleSA9IGFyZ3MgPT4gYXJnc1sxXSwgZGVjb3JhdGUgPSB4ID0+IHgpID0+IHtcclxuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVnLCAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgY29uc3QgdmFyaWFibGUgPSAoZ2V0S2V5KGFyZ3MpIHx8ICcnKS50b1VwcGVyQ2FzZSgpXHJcbiAgICAgICAgICAvLyBOb3RlOiBrZWVwIGFzIGl0IGlzIGlmIGl0J3MgYSBLRVlfWFhYIHZhcmlhYmxlLCB3aGljaCBzaG91bGQgYmUgaGFuZGxlZCBieSBjb21tYW5kIHJ1bm5lclxyXG4gICAgICAgICAgaWYgKGtleUNvbnN0YW50cy5pbmRleE9mKHZhcmlhYmxlKSAhPT0gLTEpICByZXR1cm4gYXJnc1swXVxyXG4gICAgICAgICAgcmV0dXJuIGRlY29yYXRlKGdldFZhcih2YXJpYWJsZSkpXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgICBjb25zdCByZWdEb2xsYXIgICAgID0gbmV3IFJlZ0V4cChgXFxcXCRcXFxceyghP1xcXFx3KylcXFxcfWAsICdnaScpXHJcbiAgICAgIGNvbnN0IHJlZ1N0b3JlZFZhcnMgPSBuZXcgUmVnRXhwKGBzdG9yZWRWYXJzXFxcXFsoJ3xcIikoIT9cXFxcdyspXFxcXDFcXFxcXWAsICdnaScpXHJcblxyXG4gICAgICBsZXQgcmVzdWx0ID0gcmVwbGFjZUFsbFZhcnMoc3RyLCByZWdEb2xsYXIpXHJcblxyXG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndpdGhIYXNoTm90YXRpb24pIHtcclxuICAgICAgICByZXN1bHQgPSByZXBsYWNlQWxsVmFycyhyZXN1bHQsIHJlZ1N0b3JlZFZhcnMsIGFyZ3MgPT4gYXJnc1syXSwgeCA9PiBKU09OLnN0cmluZ2lmeSh4KSlcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgfSxcclxuICAgIGdldDogKGZpZWxkKSA9PiB7XHJcbiAgICAgIHJldHVybiB2YXJzW2ZpZWxkLnRvVXBwZXJDYXNlKCldXHJcbiAgICB9LFxyXG4gICAgc2V0OiAob2JqLCBpc0FkbWluKSA9PiB7XHJcbiAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRyaW1tZWRLZXkgPSBrZXkudHJpbSgpXHJcbiAgICAgICAgaWYgKHRyaW1tZWRLZXkubGVuZ3RoID09PSAwKSAgcmV0dXJuXHJcblxyXG4gICAgICAgIHZhbGlkYXRlVmFyaWFibGVOYW1lKHRyaW1tZWRLZXkpXHJcblxyXG4gICAgICAgIGNvbnN0IHRhcmdldEtleSA9IHRyaW1tZWRLZXkudG9VcHBlckNhc2UoKVxyXG5cclxuICAgICAgICAvLyBOb3RlOiBwcmV2ZW50IHZhcmlhYmxlIHdpdGggZW1wdHkgbmFtZVxyXG4gICAgICAgIGlmICh0YXJnZXRLZXkubGVuZ3RoID09PSAwKSByZXR1cm5cclxuXHJcbiAgICAgICAgLy8gTm90ZTogc3BlY2lhbCB0cmVhdG1lbnQgZm9yICFDU1ZMSU5FXHJcbiAgICAgICAgaWYgKC9eIUNTVkxJTkUkL2kudGVzdCh0YXJnZXRLZXkpKSB7XHJcbiAgICAgICAgICBsZXQgY3N2TGluZSA9IHNlbGYuZ2V0KCchQ1NWTElORScpXHJcblxyXG4gICAgICAgICAgaWYgKGNzdkxpbmUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjc3ZMaW5lID0gW11cclxuICAgICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoY3N2TGluZSkpIHtcclxuICAgICAgICAgICAgY3N2TGluZSA9IFtjc3ZMaW5lXVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNzdkxpbmUucHVzaChvYmpba2V5XSlcclxuICAgICAgICAgIHZhcnNbJyFDU1ZMSU5FJ10gPSBjc3ZMaW5lXHJcblxyXG4gICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWlzQWRtaW4gJiYgb3B0cy5yZWFkb25seS5pbmRleE9mKHRhcmdldEtleSkgIT09IC0xKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB3cml0ZSB0byByZWFkb255IHZhcmlhYmxlICcke2tleX0nYClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRzLmlzSW52YWxpZEludGVybmFsVmFyKHRhcmdldEtleSkpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IGFsbG93ZWQgdG8gd3JpdGUgdG8gJyR7a2V5fSdgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdHMudHlwZUNoZWNrW3RhcmdldEtleV0gJiYgIW9wdHMudHlwZUNoZWNrW3RhcmdldEtleV0ob2JqW2tleV0pKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFZhbHVlICcke29ialtrZXldfScgbm90IHN1cHBvcnRlZCBmb3IgdmFyaWFibGUgXCIke3RhcmdldEtleX1cImApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXJzW3RhcmdldEtleV0gPSBvcHRzLm5vcm1hbGl6ZShrZXksIG9ialtrZXldKVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgZmlyZU9uQ2hhbmdlKClcclxuICAgIH0sXHJcbiAgICBjbGVhcjogKHJlZykgPT4ge1xyXG4gICAgICBPYmplY3Qua2V5cyh2YXJzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgaWYgKHJlZy50ZXN0KGtleSkpIHtcclxuICAgICAgICAgIGRlbGV0ZSB2YXJzW2tleV1cclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBmaXJlT25DaGFuZ2UoKVxyXG4gICAgfSxcclxuICAgIGlzUmVhZE9ubHk6ICh2YXJpYWJsZSkgPT4ge1xyXG4gICAgICBjb25zdCBzdHIgPSAodmFyaWFibGUgJiYgdmFyaWFibGUudG9VcHBlckNhc2UpID8gdmFyaWFibGUudG9VcHBlckNhc2UoKSA6ICcnXHJcbiAgICAgIHJldHVybiBvcHRzLnJlYWRvbmx5LmluZGV4T2Yoc3RyKSAhPT0gLTFcclxuICAgIH0sXHJcbiAgICBkdW1wOiAoKSA9PiAoey4uLnZhcnN9KSxcclxuICAgIG9uQ2hhbmdlOiAoZm4pID0+IHtcclxuICAgICAgbGlzdGVuZXJzLmFkZCgnY2hhbmdlJywgZm4pXHJcbiAgICAgIHJldHVybiAoKSA9PiBsaXN0ZW5lcnMucmVtb3ZlKCdjaGFuZ2UnLCBmbilcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNhY2hlW25hbWVdID0gc2VsZlxyXG4gIHJldHVybiBzZWxmXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRWYXJzSW5zdGFuY2UgPSAobmFtZSA9IERFRkFVTFRfS0VZKSA9PiB7XHJcbiAgcmV0dXJuIGNhY2hlW25hbWVdXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVWYXJzRmlsdGVyID0gKHsgd2l0aFVzZXJEZWZpbmVkID0gdHJ1ZSwgd2l0aENvbW1vbkludGVybmFsLCB3aXRoQWR2YW5jZWRJbnRlcm5hbCB9KSA9PiB7XHJcbiAgY29uc3QgY2hlY2tVc2VyRGVmaW5lZCAgICA9IChuYW1lKSA9PiAhL14hLy50ZXN0KG5hbWUpXHJcbiAgY29uc3QgY2hlY2tDb21tb25JbnRlcm5hbCA9IChuYW1lKSA9PiB7XHJcbiAgICBjb25zdCBsaXN0ID0gWychdXJsJywgJyFjbGlwYm9hcmQnLCAnIXJ1bnRpbWUnLCAnIXN0YXR1c29rJywgJyFlcnJvcmlnbm9yZSddLm1hcCh4ID0+IHgudG9VcHBlckNhc2UoKSlcclxuICAgIHJldHVybiBsaXN0LmluZGV4T2YobmFtZS50b1VwcGVyQ2FzZSgpKSAhPT0gLTFcclxuICB9XHJcbiAgY29uc3QgY2hlY2tBZHZhbmNlZEludGVybmFsID0gKG5hbWUpID0+IC9eIS8udGVzdChuYW1lKSAmJiAhY2hlY2tDb21tb25JbnRlcm5hbChuYW1lKVxyXG4gIGNvbnN0IG9yQ2hlY2sgPSAoZm5zKSA9PiB7XHJcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGZucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGlmIChmbnNbaV0oLi4uYXJncykpICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuICBjb25zdCBsaXN0ID0gW1xyXG4gICAgd2l0aFVzZXJEZWZpbmVkID8gY2hlY2tVc2VyRGVmaW5lZCA6IG51bGwsXHJcbiAgICB3aXRoQ29tbW9uSW50ZXJuYWwgPyBjaGVja0NvbW1vbkludGVybmFsIDogbnVsbCxcclxuICAgIHdpdGhBZHZhbmNlZEludGVybmFsID8gY2hlY2tBZHZhbmNlZEludGVybmFsIDogbnVsbFxyXG4gIF1cclxuICAuZmlsdGVyKHggPT4gISF4KVxyXG5cclxuICByZXR1cm4gb3JDaGVjayhsaXN0KVxyXG59XHJcbiIsImltcG9ydCBmcyBmcm9tICcuL2ZpbGVzeXN0ZW0nXHJcbmltcG9ydCBGaWxlTWFuIGZyb20gJy4vZmlsZV9tYW4nXHJcbmltcG9ydCBFeHQgZnJvbSAnLi93ZWJfZXh0ZW5zaW9uJ1xyXG5cclxuZXhwb3J0IGNsYXNzIFZpc2lvbk1hbiBleHRlbmRzIEZpbGVNYW4ge1xyXG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcclxuICAgIHN1cGVyKHsgLi4ub3B0cywgYmFzZURpcjogJ3Zpc2lvbnMnIH0pXHJcbiAgfVxyXG5cclxuICB3cml0ZSAoZmlsZU5hbWUsIGJsb2IpIHtcclxuICAgIHJldHVybiBmcy53cml0ZUZpbGUodGhpcy5fX2ZpbGVQYXRoKGZpbGVOYW1lLCB0cnVlKSwgYmxvYilcclxuICB9XHJcblxyXG4gIHJlYWQgKGZpbGVOYW1lKSB7XHJcbiAgICByZXR1cm4gZnMucmVhZEZpbGUodGhpcy5fX2ZpbGVQYXRoKGZpbGVOYW1lKSwgJ0FycmF5QnVmZmVyJylcclxuICB9XHJcblxyXG4gIHJlYWRBc0RhdGFVUkwgKGZpbGVOYW1lKSB7XHJcbiAgICByZXR1cm4gZnMucmVhZEZpbGUodGhpcy5fX2ZpbGVQYXRoKGZpbGVOYW1lKSwgJ0RhdGFVUkwnKVxyXG4gIH1cclxuXHJcbiAgZ2V0TGluayAoZmlsZU5hbWUpIHtcclxuICAgIGlmICghRXh0LmlzRmlyZWZveCgpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN1cGVyLmdldExpbmsoZmlsZU5hbWUpKVxyXG5cclxuICAgIC8vIE5vdGU6IEV4Y2VwdCBmb3IgQ2hyb21lLCB0aGUgZmlsZXN5c3RlbSBBUEkgd2UgdXNlIGlzIGEgcG9seWZpbGwgZnJvbSBpZGIuZmlsZXN5c3RlbS5qc1xyXG4gICAgLy8gaWRiLmZpbGVzeXN0ZW0uanMgd29ya3MgZ3JlYXQgYnV0IHRoZSBvbmx5IHByb2JsZW0gaXMgdGhhdCB5b3UgY2FuJ3QgdXNlICdmaWxlc3lzdGVtOicgc2NoZW1hIHRvIHJldHJpZXZlIHRoYXQgZmlsZVxyXG4gICAgLy8gc28gaGVyZSwgd2UgaGF2ZSB0byBjb252ZXJ0IHRoZSBmaWxlIHRvIGRhdGEgdXJsXHJcbiAgICByZXR1cm4gZnMucmVhZEZpbGUodGhpcy5fX2ZpbGVQYXRoKGZpbGVOYW1lKSwgJ0RhdGFVUkwnKVxyXG4gIH1cclxufVxyXG5cclxubGV0IG1hblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZpc2lvbk1hbiAob3B0cyA9IHt9KSB7XHJcbiAgaWYgKG9wdHMpIHtcclxuICAgIG1hbiA9IG5ldyBWaXNpb25NYW4ob3B0cylcclxuICB9XHJcblxyXG4gIGlmICghbWFuKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Zpc2lvbiBtYW5hZ2VyIG5vdCBpbml0aWFsaXplZCcpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gbWFuXHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBJbnB1dCwgSWNvbiB9IGZyb20gJ2FudGQnXHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRJblBsYWNlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xyXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gICAgY2hlY2tWYWx1ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAgIGdldFNlbGVjdGlvbjogUHJvcFR5cGVzLmZ1bmNcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XHJcbiAgICBnZXRTZWxlY3Rpb246ICgpID0+IG51bGxcclxuICB9XHJcblxyXG4gIHN0YXRlID0ge1xyXG4gICAgaXNFZGl0aW5nOiBmYWxzZSxcclxuICAgIHZhbHVlOiAnJ1xyXG4gIH1cclxuXHJcbiAgZWRpdCA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0VkaXRpbmc6IHRydWUgfSlcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBjb25zdCAkaW5wdXQgPSB0aGlzLiRpbnB1dCAmJiB0aGlzLiRpbnB1dC5yZWZzICYmIHRoaXMuJGlucHV0LnJlZnMuaW5wdXRcclxuXHJcbiAgICAgIGlmICgkaW5wdXQpIHtcclxuICAgICAgICAkaW5wdXQuZm9jdXMoKVxyXG5cclxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gICAgICAgPSB0aGlzLnByb3BzLmdldFNlbGVjdGlvbih0aGlzLnN0YXRlLnZhbHVlLCAkaW5wdXQpXHJcbiAgICAgICAgJGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gc2VsZWN0aW9uID8gc2VsZWN0aW9uLnN0YXJ0IDogMFxyXG4gICAgICAgICRpbnB1dC5zZWxlY3Rpb25FbmQgICA9IHNlbGVjdGlvbiA/IHNlbGVjdGlvbi5lbmQgOiAkaW5wdXQudmFsdWUubGVuZ3RoXHJcbiAgICAgIH1cclxuICAgIH0sIDEwMClcclxuICB9XHJcblxyXG4gIHN1Ym1pdCA9ICgpID0+IHtcclxuICAgIHRoaXMucHJvcHMuY2hlY2tWYWx1ZSh0aGlzLnN0YXRlLnZhbHVlKVxyXG4gICAgLnRoZW4ocGFzcyA9PiB7XHJcbiAgICAgIGlmIChwYXNzKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzRWRpdGluZzogZmFsc2UgfSlcclxuICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHRoaXMuc3RhdGUudmFsdWUpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICByZXNldCA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBpc0VkaXRpbmc6IGZhbHNlLFxyXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wcykge1xyXG4gICAgaWYgKG5leHRQcm9wcy52YWx1ZSAhPT0gdGhpcy5wcm9wcy52YWx1ZSkge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IG5leHRQcm9wcy52YWx1ZSB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpIHtcclxuICAgIGlmICghdGhpcy5zdGF0ZS5pc0VkaXRpbmcpIHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgIHt0aGlzLnByb3BzLnZhbHVlfVxyXG4gICAgICAgICAgPEljb25cclxuICAgICAgICAgICAgdHlwZT1cImVkaXRcIlxyXG4gICAgICAgICAgICBzdHlsZT17eyBtYXJnaW5MZWZ0OiAnMTBweCcsIGN1cnNvcjogJ3BvaW50ZXInIH19XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuZWRpdH1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICApXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgcmVmPXtyZWYgPT4geyB0aGlzLiRpbnB1dCA9IHJlZiB9fVxyXG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9XHJcbiAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IGUudGFyZ2V0LnZhbHVlIH0pfVxyXG4gICAgICAgICAgb25CbHVyPXt0aGlzLnJlc2V0fVxyXG4gICAgICAgICAgb25LZXlEb3duPXtlID0+IHtcclxuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHJldHVybiB0aGlzLnN1Ym1pdCgpXHJcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDI3KSByZXR1cm4gdGhpcy5yZXNldCgpXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIClcclxuICAgIH1cclxuICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcclxuaW1wb3J0IHsgTW9kYWwgfSBmcm9tICdhbnRkJ1xyXG5pbXBvcnQgeyBVbkNvbnRyb2xsZWQgYXMgQ29kZU1pcnJvciB9IGZyb20gJ3JlYWN0LWNvZGVtaXJyb3IyJ1xyXG5pbXBvcnQgJ2NvZGVtaXJyb3IvbGliL2NvZGVtaXJyb3InXHJcbmltcG9ydCAnY29kZW1pcnJvci9tb2RlL2phdmFzY3JpcHQvamF2YXNjcmlwdCdcclxuaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL2VkaXQvbWF0Y2hicmFja2V0cydcclxuaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL2VkaXQvY2xvc2VicmFja2V0cydcclxuaW1wb3J0ICdjb2RlbWlycm9yL2xpYi9jb2RlbWlycm9yLmNzcydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRUZXN0U3VpdGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XHJcbiAgICB2YWx1ZTogICAgUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG4gICAgb25DbG9zZTogIFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgICB2aXNpYmxlOiAgUHJvcFR5cGVzLmJvb2wsXHJcbiAgICB2YWxpZGF0ZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmNcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XHJcbiAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgIHZhbGlkYXRlOiAoKSA9PiB0cnVlLFxyXG4gICAgb25DaGFuZ2U6ICgpID0+IHt9XHJcbiAgfVxyXG5cclxuICBzdGF0ZSA9IHtcclxuICAgIHZhbHVlOiAnJyxcclxuICAgIHZhbHVlTW9kaWZpZWQ6IG51bGwsXHJcbiAgICBlcnJNc2c6IG51bGwsXHJcbiAgfVxyXG5cclxuICBvblNhdmUgPSAoKSA9PiB7XHJcbiAgICBsZXQgZXJyTXNnID0gbnVsbFxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMucHJvcHMudmFsaWRhdGUodGhpcy5zdGF0ZS52YWx1ZU1vZGlmaWVkKVxyXG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHRoaXMuc3RhdGUudmFsdWVNb2RpZmllZClcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgZXJyTXNnID0gZS5tZXNzYWdlXHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXJyTXNnIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXHJcbiAgICAgIHZhbHVlTW9kaWZpZWQ6IHRoaXMucHJvcHMudmFsdWVcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcclxuICAgIGlmIChuZXh0UHJvcHMudmFsdWUgIT09IHRoaXMucHJvcHMudmFsdWUpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgdmFsdWU6IG5leHRQcm9wcy52YWx1ZSxcclxuICAgICAgICB2YWx1ZU1vZGlmaWVkOiBuZXh0UHJvcHMudmFsdWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8TW9kYWxcclxuICAgICAgICB2aXNpYmxlPXt0aGlzLnByb3BzLnZpc2libGV9XHJcbiAgICAgICAgb2tUZXh0PVwiU2F2ZVwiXHJcbiAgICAgICAgb25Paz17dGhpcy5vblNhdmV9XHJcbiAgICAgICAgb25DYW5jZWw9e3RoaXMucHJvcHMub25DbG9zZX1cclxuICAgICAgICB3aWR0aD1cIjgwJVwiXHJcbiAgICAgID5cclxuICAgICAgICA8cHJlIHN0eWxlPXt7IGNvbG9yOiAncmVkJywgbGluZUhlaWdodDogJzE4cHgnLCBtYXJnaW5Cb3R0b206ICcxMHB4J319Pnt0aGlzLnN0YXRlLmVyck1zZ308L3ByZT5cclxuICAgICAgICB7LypcclxuICAgICAgICAgIE5vdGU6IGhhdmUgdG8gdXNlIFVuQ29udHJvbGxlZCBDb2RlTWlycm9yLCBhbmQgdGh1cyBoYXZlIHRvIHVzZSB0d28gc3RhdGUgOlxyXG4gICAgICAgICAgICAgICAgc291cmNlVGV4dCBhbmQgc291cmNlVGV4dE1vZGlmaWVkXHJcbiAgICAgICAgKi99XHJcbiAgICAgICAgPENvZGVNaXJyb3JcclxuICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5zdGF0ZS5zb3VyY2VFcnJNc2cgPyAnaGFzLWVycm9yJyA6ICduby1lcnJvcid9XHJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX1cclxuICAgICAgICAgIG9uQ2hhbmdlPXsoZWRpdG9yLCBkYXRhLCB0ZXh0KSA9PiB0aGlzLnNldFN0YXRlKHsgdmFsdWVNb2RpZmllZDogdGV4dCB9KX1cclxuICAgICAgICAgIG9wdGlvbnM9e3tcclxuICAgICAgICAgICAgbW9kZTogeyBuYW1lOiAnamF2YXNjcmlwdCcsIGpzb246IHRydWUgfSxcclxuICAgICAgICAgICAgbGluZU51bWJlcnM6IHRydWUsXHJcbiAgICAgICAgICAgIG1hdGNoQnJhY2tldHM6IHRydWUsXHJcbiAgICAgICAgICAgIGF1dG9DbG9zZUJyYWNrZXRzOiB0cnVlXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvTW9kYWw+XHJcbiAgICApXHJcbiAgfVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXHJcbmltcG9ydCB7IElucHV0LCBJY29uIH0gZnJvbSAnYW50ZCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRhYmxlVGV4dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcclxuICAgIHZhbHVlOiAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcclxuICAgIGlzRWRpdGluZzogICAgUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBvbkNoYW5nZTogICAgIFByb3BUeXBlcy5mdW5jLFxyXG4gICAgaW5wdXRQcm9wczogICBQcm9wVHlwZXMub2JqZWN0LFxyXG4gICAgdGV4dFByb3BzOiAgICBQcm9wVHlwZXMub2JqZWN0LFxyXG4gICAgY2xhc3NOYW1lOiAgICBQcm9wVHlwZXMuYW55LFxyXG4gICAgY2xpY2tUb0VkaXQ6ICBQcm9wVHlwZXMuYm9vbFxyXG4gIH1cclxuXHJcbiAgc3RhdGUgPSB7XHJcbiAgICBpc0VkaXRpbmc6IGZhbHNlXHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSA9IChlKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgdmFsdWU6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgb25LZXlEb3duID0gKGUpID0+IHtcclxuICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgIHRoaXMuc3VibWl0KClcclxuICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAyNykge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZVxyXG4gICAgICB9LCB0aGlzLnN1Ym1pdClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uQmx1ciA9IChlKSA9PiB7XHJcbiAgICB0aGlzLnN1Ym1pdCgpXHJcbiAgfVxyXG5cclxuICBvbkNsaWNrVGV4dCA9ICgpID0+IHtcclxuICAgIGlmICh0aGlzLnByb3BzLmNsaWNrVG9FZGl0KSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0VkaXRpbmc6IHRydWUgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN1Ym1pdCA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBpc0VkaXRpbmc6IGZhbHNlXHJcbiAgICB9KVxyXG5cclxuICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UodGhpcy5zdGF0ZS52YWx1ZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBpc0VkaXRpbmc6ICB0aGlzLnByb3BzLmlzRWRpdGluZyxcclxuICAgICAgdmFsdWU6ICAgICAgdGhpcy5wcm9wcy52YWx1ZVxyXG4gICAgfSlcclxuXHJcbiAgICBpZiAodGhpcy5wcm9wcy5pc0VkaXRpbmcpIHtcclxuICAgICAgdGhpcy5mb2N1c09uSW5wdXQoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XHJcbiAgICBjb25zdCBuZXh0U3RhdGUgPSB7fVxyXG5cclxuICAgIGlmICh0aGlzLnByb3BzLmlzRWRpdGluZyAhPT0gbmV4dFByb3BzLmlzRWRpdGluZykge1xyXG4gICAgICBuZXh0U3RhdGUuaXNFZGl0aW5nID0gbmV4dFByb3BzLmlzRWRpdGluZ1xyXG5cclxuICAgICAgaWYgKG5leHRTdGF0ZS5pc0VkaXRpbmcpIHtcclxuICAgICAgICB0aGlzLmZvY3VzT25JbnB1dCgpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XHJcbiAgICAgIG5leHRTdGF0ZS52YWx1ZSA9IG5leHRQcm9wcy52YWx1ZVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlKVxyXG4gIH1cclxuXHJcbiAgZm9jdXNPbklucHV0ICgpIHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBjb25zdCAkaW5wdXQgPSB0aGlzLmlucHV0LnJlZnMuaW5wdXRcclxuXHJcbiAgICAgIGlmICgkaW5wdXQpIHtcclxuICAgICAgICAkaW5wdXQuZm9jdXMoKVxyXG4gICAgICAgICRpbnB1dC5zZWxlY3Rpb25TdGFydCA9IDBcclxuICAgICAgICAkaW5wdXQuc2VsZWN0aW9uRW5kICAgPSAkaW5wdXQudmFsdWUubGVuZ3RoXHJcbiAgICAgIH1cclxuICAgIH0sIDIwMClcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICBjb25zdCB7IGlzRWRpdGluZywgdmFsdWUgfSA9IHRoaXMuc3RhdGVcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9PlxyXG4gICAgICAgIHtpc0VkaXRpbmcgPyAoXHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX1cclxuICAgICAgICAgICAgb25CbHVyPXt0aGlzLm9uQmx1cn1cclxuICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLm9uS2V5RG93bn1cclxuICAgICAgICAgICAgcmVmPXtyZWYgPT4geyB0aGlzLmlucHV0ID0gcmVmIH19XHJcbiAgICAgICAgICAgIHsuLi4odGhpcy5wcm9wcy5pbnB1dFByb3BzIHx8IHt9KX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgKSA6IChcclxuICAgICAgICAgIDxzcGFuIG9uQ2xpY2s9e3RoaXMub25DbGlja1RleHR9PlxyXG4gICAgICAgICAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxyXG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5jbGlja1RvRWRpdCA/IChcclxuICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwiZWRpdFwiIHN0eWxlPXt7IG1hcmdpbkxlZnQ6ICcxMHB4JyB9fSAvPlxyXG4gICAgICAgICAgICApIDogbnVsbH1cclxuICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICApfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4J1xyXG5pbXBvcnQgeyB3aXRoUm91dGVyLCBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcclxuaW1wb3J0IHsgQnV0dG9uLCBDaGVja2JveCwgRHJvcGRvd24sIE1lbnUsIEljb24sIE1vZGFsLCBSb3csIENvbCwgRm9ybSwgUmFkaW8sIElucHV0LCBTZWxlY3QsIFRhYnMsIG1lc3NhZ2UgfSBmcm9tICdhbnRkJ1xyXG5cclxuaW1wb3J0ICcuL2hlYWRlci5zY3NzJ1xyXG5pbXBvcnQgeyBnZXRQbGF5ZXIsIFBsYXllciB9IGZyb20gJy4uL2NvbW1vbi9wbGF5ZXInXHJcbmltcG9ydCB7IGhhc1Vuc2F2ZWRNYWNybyB9IGZyb20gJy4uL3JlY29tcHV0ZWQnXHJcbmltcG9ydCBnZXRTYXZlVGVzdENhc2UgZnJvbSAnLi9zYXZlX3Rlc3RfY2FzZSdcclxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi9hY3Rpb25zJ1xyXG5pbXBvcnQgKiBhcyBDIGZyb20gJy4uL2NvbW1vbi9jb25zdGFudCdcclxuaW1wb3J0IHsgcmFuZ2UgfSBmcm9tICcuLi9jb21tb24vdXRpbHMnO1xyXG5cclxuY2xhc3MgSGVhZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBzdGF0ZSA9IHtcclxuICAgIHNob3dQbGF5TG9vcHM6IGZhbHNlLFxyXG4gICAgbG9vcHNTdGFydDogMSxcclxuICAgIGxvb3BzRW5kOiAzLFxyXG5cclxuICAgIHNob3dSZXBsYXlTZXR0aW5nczogZmFsc2VcclxuICB9XHJcblxyXG4gIGdldFBsYXllciA9IChuYW1lKSA9PiB7XHJcbiAgICBpZiAobmFtZSkgcmV0dXJuIGdldFBsYXllcih7IG5hbWUgfSlcclxuXHJcbiAgICBzd2l0Y2ggKHRoaXMucHJvcHMucGxheWVyLm1vZGUpIHtcclxuICAgICAgY2FzZSBDLlBMQVlFUl9NT0RFLlRFU1RfQ0FTRTpcclxuICAgICAgICByZXR1cm4gZ2V0UGxheWVyKHsgbmFtZTogJ3Rlc3RDYXNlJyB9KVxyXG5cclxuICAgICAgY2FzZSBDLlBMQVlFUl9NT0RFLlRFU1RfU1VJVEU6XHJcbiAgICAgICAgcmV0dXJuIGdldFBsYXllcih7IG5hbWU6ICd0ZXN0U3VpdGUnIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRUZXN0Q2FzZU5hbWUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHNyYyB9ID0gdGhpcy5wcm9wcy5lZGl0aW5nLm1ldGFcclxuICAgIHJldHVybiBzcmMgJiYgc3JjLm5hbWUgJiYgc3JjLm5hbWUubGVuZ3RoID8gc3JjLm5hbWUgOiAnVW50aXRsZWQnXHJcbiAgfVxyXG5cclxuICB0b2dnbGVQbGF5TG9vcHNNb2RhbCA9ICh0b1Nob3cpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBzaG93UGxheUxvb3BzOiB0b1Nob3dcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBvblRvZ2dsZVJlY29yZCA9ICgpID0+IHtcclxuICAgIGlmICh0aGlzLnByb3BzLnN0YXR1cyA9PT0gQy5BUFBfU1RBVFVTLlJFQ09SREVSKSB7XHJcbiAgICAgIHRoaXMucHJvcHMuc3RvcFJlY29yZGluZygpXHJcbiAgICAgIC8vIE5vdGU6IHJlbW92ZSB0YXJnZXRPcHRpb25zIGZyb20gYWxsIGNvbW1hbmRzXHJcbiAgICAgIHRoaXMucHJvcHMubm9ybWFsaXplQ29tbWFuZHMoKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5wcm9wcy5zdGFydFJlY29yZGluZygpXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGxhc3RPcGVyYXRpb246ICdyZWNvcmQnIH0pXHJcbiAgfVxyXG5cclxuICAvLyBQbGF5IGxvb3BzIHJlbGF0aXZlXHJcbiAgb25DbGlja1BsYXlMb29wcyA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgbG9vcHNTdGFydCwgbG9vcHNFbmQgfSA9IHRoaXMuc3RhdGVcclxuXHJcbiAgICBpZiAobG9vcHNTdGFydCA8IDApIHtcclxuICAgICAgcmV0dXJuIG1lc3NhZ2UuZXJyb3IoJ1N0YXJ0IHZhbHVlIG11c3QgYmUgbm8gbGVzcyB0aGFuIHplcm8nLCAxLjUpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGxvb3BzRW5kIDwgbG9vcHNTdGFydCkge1xyXG4gICAgICByZXR1cm4gbWVzc2FnZS5lcnJvcignTWF4IHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIHN0YXJ0IHZhbHVlJywgMS41KVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHBsYXllciA9IHRoaXMuZ2V0UGxheWVyKClcclxuICAgIGNvbnN0IHsgY29tbWFuZHMgfSA9IHRoaXMucHJvcHMuZWRpdGluZ1xyXG4gICAgY29uc3QgeyBzcmMgfSA9IHRoaXMucHJvcHMuZWRpdGluZy5tZXRhXHJcbiAgICBjb25zdCBvcGVuVGMgID0gY29tbWFuZHMuZmluZCh0YyA9PiB0Yy5jbWQudG9Mb3dlckNhc2UoKSA9PT0gJ29wZW4nKVxyXG5cclxuICAgIHRoaXMucHJvcHMucGxheWVyUGxheSh7XHJcbiAgICAgIGxvb3BzRW5kLFxyXG4gICAgICBsb29wc1N0YXJ0LFxyXG4gICAgICB0aXRsZTogdGhpcy5nZXRUZXN0Q2FzZU5hbWUoKSxcclxuICAgICAgZXh0cmE6IHtcclxuICAgICAgICBpZDogc3JjICYmIHNyYy5pZFxyXG4gICAgICB9LFxyXG4gICAgICBtb2RlOiBwbGF5ZXIuQy5NT0RFLkxPT1AsXHJcbiAgICAgIHN0YXJ0SW5kZXg6IDAsXHJcbiAgICAgIHN0YXJ0VXJsOiBvcGVuVGMgPyBvcGVuVGMudGFyZ2V0IDogbnVsbCxcclxuICAgICAgcmVzb3VyY2VzOiB0aGlzLnByb3BzLmVkaXRpbmcuY29tbWFuZHMsXHJcbiAgICAgIHBvc3REZWxheTogdGhpcy5wcm9wcy5jb25maWcucGxheUNvbW1hbmRJbnRlcnZhbCAqIDEwMDBcclxuICAgIH0pXHJcblxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGxhc3RPcGVyYXRpb246ICdwbGF5JyB9KVxyXG4gICAgdGhpcy50b2dnbGVQbGF5TG9vcHNNb2RhbChmYWxzZSlcclxuICB9XHJcblxyXG4gIG9uQ2FuY2VsUGxheUxvb3BzID0gKCkgPT4ge1xyXG4gICAgdGhpcy50b2dnbGVQbGF5TG9vcHNNb2RhbChmYWxzZSlcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBsb29wc1RvUGxheTogMlxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIG9uQ2hhbmdlUGxheUxvb3BzID0gKGZpZWxkLCB2YWx1ZSkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIFtmaWVsZF06IHBhcnNlSW50KHZhbHVlLCAxMClcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBvbkNsaWNrU2F2ZSA9ICgpID0+IHtcclxuICAgIHJldHVybiBnZXRTYXZlVGVzdENhc2UoKS5zYXZlKClcclxuICB9XHJcblxyXG4gIHBsYXlDdXJyZW50TWFjcm8gPSAoaXNTdGVwKSA9PiB7XHJcbiAgICBjb25zdCB7IGNvbW1hbmRzIH0gPSB0aGlzLnByb3BzLmVkaXRpbmdcclxuICAgIGNvbnN0IHsgc3JjIH0gPSB0aGlzLnByb3BzLmVkaXRpbmcubWV0YVxyXG4gICAgY29uc3Qgb3BlblRjICA9IGNvbW1hbmRzLmZpbmQodGMgPT4gdGMuY21kLnRvTG93ZXJDYXNlKCkgPT09ICdvcGVuJylcclxuXHJcbiAgICB0aGlzLnNldFN0YXRlKHsgbGFzdE9wZXJhdGlvbjogJ3BsYXknIH0pXHJcblxyXG4gICAgdGhpcy5wcm9wcy5wbGF5ZXJQbGF5KHtcclxuICAgICAgdGl0bGU6IHRoaXMuZ2V0VGVzdENhc2VOYW1lKCksXHJcbiAgICAgIGV4dHJhOiB7XHJcbiAgICAgICAgaWQ6IHNyYyAmJiBzcmMuaWRcclxuICAgICAgfSxcclxuICAgICAgbW9kZTogZ2V0UGxheWVyKCkuQy5NT0RFLlNUUkFJR0hULFxyXG4gICAgICBzdGFydEluZGV4OiAwLFxyXG4gICAgICBzdGFydFVybDogb3BlblRjID8gb3BlblRjLnRhcmdldCA6IG51bGwsXHJcbiAgICAgIHJlc291cmNlczogY29tbWFuZHMsXHJcbiAgICAgIHBvc3REZWxheTogdGhpcy5wcm9wcy5jb25maWcucGxheUNvbW1hbmRJbnRlcnZhbCAqIDEwMDAsXHJcbiAgICAgIGlzU3RlcDogaXNTdGVwXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcGxheUN1cnJlbnRMaW5lID0gKCkgPT4ge1xyXG4gICAgY29uc3QgeyBjb21tYW5kcyB9ICA9IHRoaXMucHJvcHMuZWRpdGluZ1xyXG4gICAgY29uc3QgeyBzcmMsIHNlbGVjdGVkSW5kZXggfSA9IHRoaXMucHJvcHMuZWRpdGluZy5tZXRhXHJcbiAgICBjb25zdCBjb21tYW5kSW5kZXggPSBzZWxlY3RlZEluZGV4ID09PSAtMSA/IDAgOiAoc2VsZWN0ZWRJbmRleCB8fCAwKVxyXG5cclxuICAgIHJldHVybiB0aGlzLnByb3BzLnBsYXllclBsYXkoe1xyXG4gICAgICB0aXRsZTogdGhpcy5nZXRUZXN0Q2FzZU5hbWUoKSxcclxuICAgICAgZXh0cmE6IHtcclxuICAgICAgICBpZDogc3JjICYmIHNyYy5pZFxyXG4gICAgICB9LFxyXG4gICAgICBtb2RlOiBQbGF5ZXIuQy5NT0RFLlNJTkdMRSxcclxuICAgICAgc3RhcnRJbmRleDogY29tbWFuZEluZGV4LFxyXG4gICAgICBzdGFydFVybDogbnVsbCxcclxuICAgICAgcmVzb3VyY2VzOiBjb21tYW5kcyxcclxuICAgICAgcG9zdERlbGF5OiB0aGlzLnByb3BzLmNvbmZpZy5wbGF5Q29tbWFuZEludGVydmFsICogMTAwMCxcclxuICAgICAgY2FsbGJhY2s6IChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgIGlmIChlcnIpICByZXR1cm5cclxuXHJcbiAgICAgICAgLy8gTm90ZTogYXV0byBzZWxlY3QgbmV4dCBjb21tYW5kXHJcbiAgICAgICAgaWYgKGNvbW1hbmRJbmRleCArIDEgPCBjb21tYW5kcy5sZW5ndGgpIHtcclxuICAgICAgICAgIHRoaXMucHJvcHMuc2VsZWN0Q29tbWFuZChjb21tYW5kSW5kZXggKyAxLCB0cnVlKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgIGNvbnN0IHsgaGlzdG9yeSB9ID0gdGhpcy5wcm9wc1xyXG5cclxuICAgIHRoaXMucHJvcHMuc2V0Um91dGUoaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcclxuICAgIHRoaXMucHJvcHMuaGlzdG9yeS5saXN0ZW4oKGxvY2F0aW9uLCBhY3Rpb24pID0+IHtcclxuICAgICAgdGhpcy5wcm9wcy5zZXRSb3V0ZShoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHJlbmRlclBsYXlMb29wTW9kYWwgKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPE1vZGFsXHJcbiAgICAgICAgdGl0bGU9XCJIb3cgbWFueSBsb29wcyB0byBwbGF5P1wiXHJcbiAgICAgICAgb2tUZXh0PVwiUGxheVwiXHJcbiAgICAgICAgY2FuY2VsVGV4dD1cIkNhbmNlbFwiXHJcbiAgICAgICAgY2xhc3NOYW1lPVwicGxheS1sb29wLW1vZGFsXCJcclxuICAgICAgICB2aXNpYmxlPXt0aGlzLnN0YXRlLnNob3dQbGF5TG9vcHN9XHJcbiAgICAgICAgb25Paz17dGhpcy5vbkNsaWNrUGxheUxvb3BzfVxyXG4gICAgICAgIG9uQ2FuY2VsPXt0aGlzLm9uQ2FuY2VsUGxheUxvb3BzfVxyXG4gICAgICA+XHJcbiAgICAgICAgPFJvdz5cclxuICAgICAgICAgIDxDb2wgc3Bhbj17MTB9PlxyXG4gICAgICAgICAgICA8Rm9ybS5JdGVtIGxhYmVsPVwiU3RhcnQgdmFsdWVcIj5cclxuICAgICAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgbWluPVwiMFwiXHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5sb29wc1N0YXJ0fVxyXG4gICAgICAgICAgICAgICAgb25LZXlEb3duPXtlID0+IHsgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHRoaXMub25DbGlja1BsYXlMb29wcygpIH19XHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB0aGlzLm9uQ2hhbmdlUGxheUxvb3BzKCdsb29wc1N0YXJ0JywgZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvRm9ybS5JdGVtPlxyXG4gICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICA8Q29sIHNwYW49ezEwfSBvZmZzZXQ9ezJ9PlxyXG4gICAgICAgICAgICA8Rm9ybS5JdGVtIGxhYmVsPVwiTWF4XCI+XHJcbiAgICAgICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgIG1pbj1cIjBcIlxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUubG9vcHNFbmR9XHJcbiAgICAgICAgICAgICAgICBvbktleURvd249e2UgPT4geyBpZiAoZS5rZXlDb2RlID09PSAxMykgdGhpcy5vbkNsaWNrUGxheUxvb3BzKCkgfX1cclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMub25DaGFuZ2VQbGF5TG9vcHMoJ2xvb3BzRW5kJywgZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvRm9ybS5JdGVtPlxyXG4gICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgPC9Sb3c+XHJcblxyXG4gICAgICAgIDxwPlxyXG4gICAgICAgICAgVGhlIHZhbHVlIG9mIHRoZSBsb29wIGNvdW50ZXIgaXMgYXZhaWxhYmxlIGluICR7J3snfSFMT09Qeyd9J30gdmFyaWFibGVcclxuICAgICAgICA8L3A+XHJcbiAgICAgIDwvTW9kYWw+XHJcbiAgICApXHJcbiAgfVxyXG5cclxuICByZW5kZXJTZXR0aW5nTW9kYWwgKCkge1xyXG4gICAgY29uc3Qgb25Db25maWdDaGFuZ2UgPSAoa2V5LCB2YWwpID0+IHtcclxuICAgICAgdGhpcy5wcm9wcy51cGRhdGVDb25maWcoeyBba2V5XTogdmFsIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGlzcGxheUNvbmZpZyA9IHtcclxuICAgICAgbGFiZWxDb2w6IHsgc3BhbjogOCB9LFxyXG4gICAgICB3cmFwcGVyQ29sOiB7IHNwYW4gOiAxNiB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPE1vZGFsXHJcbiAgICAgICAgdGl0bGU9XCJTZXR0aW5nc1wiXHJcbiAgICAgICAgY2xhc3NOYW1lPVwic2V0dGluZ3MtbW9kYWxcIlxyXG4gICAgICAgIHdpZHRoPXs2NTB9XHJcbiAgICAgICAgZm9vdGVyPXtudWxsfVxyXG4gICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUuc2hvd1JlcGxheVNldHRpbmdzfVxyXG4gICAgICAgIG9uQ2FuY2VsPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgc2hvd1JlcGxheVNldHRpbmdzOiBmYWxzZSB9KX1cclxuICAgICAgPlxyXG4gICAgICAgIDxUYWJzPlxyXG4gICAgICAgICAgPFRhYnMuVGFiUGFuZSB0YWI9XCJSZXBsYXlcIiBrZXk9XCJyZXBsYXlcIj5cclxuICAgICAgICAgICAgPEZvcm0+XHJcbiAgICAgICAgICAgICAgPEZvcm0uSXRlbSBsYWJlbD1cIlJlcGxheSBIZWxwZXJcIiB7Li4uZGlzcGxheUNvbmZpZ30+XHJcbiAgICAgICAgICAgICAgICA8Q2hlY2tib3hcclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNvbmZpZ0NoYW5nZSgncGxheVNjcm9sbEVsZW1lbnRzSW50b1ZpZXcnLCBlLnRhcmdldC5jaGVja2VkKX1cclxuICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5wcm9wcy5jb25maWcucGxheVNjcm9sbEVsZW1lbnRzSW50b1ZpZXd9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIFNjcm9sbCBlbGVtZW50cyBpbnRvIHZpZXcgZHVyaW5nIHJlcGxheVxyXG4gICAgICAgICAgICAgICAgPC9DaGVja2JveD5cclxuXHJcbiAgICAgICAgICAgICAgICA8Q2hlY2tib3hcclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNvbmZpZ0NoYW5nZSgncGxheUhpZ2hsaWdodEVsZW1lbnRzJywgZS50YXJnZXQuY2hlY2tlZCl9XHJcbiAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuY29uZmlnLnBsYXlIaWdobGlnaHRFbGVtZW50c31cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgSGlnaGxpZ2h0IGVsZW1lbnRzIGR1cmluZyByZXBsYXlcclxuICAgICAgICAgICAgICAgIDwvQ2hlY2tib3g+XHJcbiAgICAgICAgICAgICAgPC9Gb3JtLkl0ZW0+XHJcblxyXG4gICAgICAgICAgICAgIDxGb3JtLkl0ZW1cclxuICAgICAgICAgICAgICAgIGxhYmVsPXs8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9hOXQ5LmNvbS94L2lkZWhlbHA/aGVscD1jb21tYW5kX2ludGVydmFsXCI+Q29tbWFuZCBJbnRlcnZhbDwvYT59XHJcbiAgICAgICAgICAgICAgICB7Li4uZGlzcGxheUNvbmZpZ31cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMjAwcHgnIH19XHJcbiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiaW50ZXJ2YWxcIlxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17JycgKyB0aGlzLnByb3BzLmNvbmZpZy5wbGF5Q29tbWFuZEludGVydmFsfVxyXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dmFsID0+IG9uQ29uZmlnQ2hhbmdlKCdwbGF5Q29tbWFuZEludGVydmFsJywgdmFsKX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgPFNlbGVjdC5PcHRpb24gdmFsdWU9eycwJ30+XHJcbiAgICAgICAgICAgICAgICAgICAgRmFzdCAobm8gZGVsYXkpXHJcbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0Lk9wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgPFNlbGVjdC5PcHRpb24gdmFsdWU9eycwLjMnfT5cclxuICAgICAgICAgICAgICAgICAgICBNZWRpdW0gKDAuM3MgZGVsYXkpXHJcbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0Lk9wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgPFNlbGVjdC5PcHRpb24gdmFsdWU9eycyJ30+XHJcbiAgICAgICAgICAgICAgICAgICAgU2xvdyAoMnMgZGVsYXkpXHJcbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0Lk9wdGlvbj5cclxuICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxyXG4gICAgICAgICAgICAgIDwvRm9ybS5JdGVtPlxyXG5cclxuICAgICAgICAgICAgICA8Rm9ybS5JdGVtXHJcbiAgICAgICAgICAgICAgICBsYWJlbD17PGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vYTl0OS5jb20veC9pZGVoZWxwP2hlbHA9dGltZW91dF9wYWdlbG9hZFwiPiFUSU1FT1VUX1BBR0VMT0FEPC9hPn1cclxuICAgICAgICAgICAgICAgIHsuLi5kaXNwbGF5Q29uZmlnfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgbWluPVwiMFwiXHJcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnNzBweCcgfX1cclxuICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuY29uZmlnLnRpbWVvdXRQYWdlTG9hZH1cclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNvbmZpZ0NoYW5nZSgndGltZW91dFBhZ2VMb2FkJywgZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImluIHNlY29uZHNcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRpcFwiPlxyXG4gICAgICAgICAgICAgICAgICBNYXguIHRpbWUgZm9yIG5ldyBwYWdlIGxvYWRcclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L0Zvcm0uSXRlbT5cclxuXHJcbiAgICAgICAgICAgICAgPEZvcm0uSXRlbVxyXG4gICAgICAgICAgICAgICAgbGFiZWw9ezxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2E5dDkuY29tL3gvaWRlaGVscD9oZWxwPXRpbWVvdXRfd2FpdFwiPiFUSU1FT1VUX1dBSVQ8L2E+fVxyXG4gICAgICAgICAgICAgICAgey4uLmRpc3BsYXlDb25maWd9XHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICBtaW49XCIwXCJcclxuICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICc3MHB4JyB9fVxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5jb25maWcudGltZW91dEVsZW1lbnR9XHJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25Db25maWdDaGFuZ2UoJ3RpbWVvdXRFbGVtZW50JywgZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImluIHNlY29uZHNcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRpcFwiPlxyXG4gICAgICAgICAgICAgICAgICBNYXguIHRpbWUgcGVyIHN0ZXBcclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L0Zvcm0uSXRlbT5cclxuXHJcbiAgICAgICAgICAgICAgPEZvcm0uSXRlbVxyXG4gICAgICAgICAgICAgICAgbGFiZWw9ezxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2E5dDkuY29tL3gvaWRlaGVscD9oZWxwPXRpbWVvdXRfbWFjcm9cIj4hVElNRU9VVF9NQUNSTzwvYT59XHJcbiAgICAgICAgICAgICAgICB7Li4uZGlzcGxheUNvbmZpZ31cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgIG1pbj1cIjBcIlxyXG4gICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzcwcHgnIH19XHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmNvbmZpZy50aW1lb3V0TWFjcm99XHJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25Db25maWdDaGFuZ2UoJ3RpbWVvdXRNYWNybycsIGUudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJpbiBzZWNvbmRzXCJcclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0aXBcIj5cclxuICAgICAgICAgICAgICAgICAgTWF4LiBvdmVyYWxsIG1hY3JvIHJ1bnRpbWVcclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L0Zvcm0uSXRlbT5cclxuXHJcbiAgICAgICAgICAgICAgPEZvcm0uSXRlbVxyXG4gICAgICAgICAgICAgICAgbGFiZWw9ezxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2E5dDkuY29tL3gvaWRlaGVscD9oZWxwPXRpbWVvdXRfZG93bmxvYWRcIj4hVElNRU9VVF9ET1dOTE9BRDwvYT59XHJcbiAgICAgICAgICAgICAgICB7Li4uZGlzcGxheUNvbmZpZ31cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgIG1pbj1cIjBcIlxyXG4gICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzcwcHgnIH19XHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmNvbmZpZy50aW1lb3V0RG93bmxvYWR9XHJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25Db25maWdDaGFuZ2UoJ3RpbWVvdXREb3dubG9hZCcsIGUudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJpbiBzZWNvbmRzXCJcclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0aXBcIj5cclxuICAgICAgICAgICAgICAgICAgTWF4LiBhbGxvd2VkIHRpbWUgZm9yIGZpbGVcclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L0Zvcm0uSXRlbT5cclxuXHJcbiAgICAgICAgICAgICAgPEZvcm0uSXRlbSBsYWJlbD1cIklmIGVycm9yIGhhcHBlbnMgaW4gbG9vcFwiIHsuLi5kaXNwbGF5Q29uZmlnfT5cclxuICAgICAgICAgICAgICAgIDxSYWRpby5Hcm91cFxyXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IG9uQ29uZmlnQ2hhbmdlKCdvbkVycm9ySW5Mb29wJywgZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5jb25maWcub25FcnJvckluTG9vcH1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgPFJhZGlvIHZhbHVlPVwiY29udGludWVfbmV4dF9sb29wXCI+Q29udGludWUgbmV4dCBsb29wPC9SYWRpbz5cclxuICAgICAgICAgICAgICAgICAgPFJhZGlvIHZhbHVlPVwic3RvcFwiPlN0b3A8L1JhZGlvPlxyXG4gICAgICAgICAgICAgICAgPC9SYWRpby5Hcm91cD5cclxuICAgICAgICAgICAgICA8L0Zvcm0uSXRlbT5cclxuXHJcbiAgICAgICAgICAgICAgPEZvcm0uSXRlbSBsYWJlbD1cIkRlZmF1bHQgVmlzaW9uIFNlYXJjaCBDb25maWRlbmNlXCIgey4uLmRpc3BsYXlDb25maWd9PlxyXG4gICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzIwMHB4JyB9fVxyXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImludGVydmFsXCJcclxuICAgICAgICAgICAgICAgICAgdmFsdWU9eycnICsgdGhpcy5wcm9wcy5jb25maWcuZGVmYXVsdFZpc2lvblNlYXJjaENvbmZpZGVuY2V9XHJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt2YWwgPT4gb25Db25maWdDaGFuZ2UoJ2RlZmF1bHRWaXNpb25TZWFyY2hDb25maWRlbmNlJywgcGFyc2VGbG9hdCh2YWwpKX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAge3JhbmdlKDEsIDExLCAxKS5tYXAobiA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdC5PcHRpb24ga2V5PXtufSB2YWx1ZT17JycgKyAoMC4xICogbikudG9GaXhlZCgxKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7KDAuMSAqIG4pLnRvRml4ZWQoMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3QuT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxyXG4gICAgICAgICAgICAgIDwvRm9ybS5JdGVtPlxyXG5cclxuICAgICAgICAgICAgICA8Rm9ybS5JdGVtIGxhYmVsPXs8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9hOXQ5LmNvbS94L2lkZWhlbHA/aGVscD1jbWRsaW5lXCI+QWxsb3cgQ29tbWFuZCBMaW5lPC9hPn0gey4uLmRpc3BsYXlDb25maWd9PlxyXG4gICAgICAgICAgICAgICAgPENoZWNrYm94XHJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25Db25maWdDaGFuZ2UoJ2FsbG93UnVuRnJvbUJvb2ttYXJrJywgZS50YXJnZXQuY2hlY2tlZCl9XHJcbiAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuY29uZmlnLmFsbG93UnVuRnJvbUJvb2ttYXJrfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICBSdW4gbWFjcm8gYW5kIHRlc3Qgc3VpdGUgc2hvcnRjdXRzIGZyb20gSmF2YXNjcmlwdCBCb29rbWFya2xldHNcclxuICAgICAgICAgICAgICAgIDwvQ2hlY2tib3g+XHJcbiAgICAgICAgICAgICAgICA8Q2hlY2tib3hcclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNvbmZpZ0NoYW5nZSgnYWxsb3dSdW5Gcm9tRmlsZVNjaGVtYScsIGUudGFyZ2V0LmNoZWNrZWQpfVxyXG4gICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLmNvbmZpZy5hbGxvd1J1bkZyb21GaWxlU2NoZW1hfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICBSdW4gZW1iZWRkZWQgbWFjcm9zIGZyb20gbG9jYWwgZmlsZXNcclxuICAgICAgICAgICAgICAgIDwvQ2hlY2tib3g+XHJcbiAgICAgICAgICAgICAgICA8Q2hlY2tib3hcclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNvbmZpZ0NoYW5nZSgnYWxsb3dSdW5Gcm9tSHR0cFNjaGVtYScsIGUudGFyZ2V0LmNoZWNrZWQpfVxyXG4gICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLmNvbmZpZy5hbGxvd1J1bkZyb21IdHRwU2NoZW1hfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICBSdW4gZW1iZWRkZWQgbWFjcm9zIGZyb20gcHVibGljIHdlYnNpdGVzXHJcbiAgICAgICAgICAgICAgICA8L0NoZWNrYm94PlxyXG5cclxuICAgICAgICAgICAgICA8L0Zvcm0uSXRlbT5cclxuICAgICAgICAgICAgPC9Gb3JtPlxyXG4gICAgICAgICAgPC9UYWJzLlRhYlBhbmU+XHJcbiAgICAgICAgICA8VGFicy5UYWJQYW5lIHRhYj1cIlJlY29yZFwiIGtleT1cInJlY29yZFwiIGNsYXNzTmFtZT1cInJlY29yZC1wYW5lXCI+XHJcbiAgICAgICAgICAgIDxGb3JtPlxyXG4gICAgICAgICAgICAgIDxGb3JtLkl0ZW0gbGFiZWw9XCJOb3RpZmljYXRpb25cIiB7Li4uZGlzcGxheUNvbmZpZ30+XHJcbiAgICAgICAgICAgICAgICA8Q2hlY2tib3hcclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNvbmZpZ0NoYW5nZSgncmVjb3JkTm90aWZpY2F0aW9uJywgZS50YXJnZXQuY2hlY2tlZCl9XHJcbiAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuY29uZmlnLnJlY29yZE5vdGlmaWNhdGlvbn1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgU2hvdyBub3RpZmljYXRpb25zIHdoZW4gcmVjb3JkaW5nXHJcbiAgICAgICAgICAgICAgICA8L0NoZWNrYm94PlxyXG4gICAgICAgICAgICAgIDwvRm9ybS5JdGVtPlxyXG4gICAgICAgICAgICAgIDxGb3JtLkl0ZW0gbGFiZWw9XCJjbGljayAvIGNsaWNrQXRcIiB7Li4uZGlzcGxheUNvbmZpZ30+XHJcbiAgICAgICAgICAgICAgICA8UmFkaW8uR3JvdXBcclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNvbmZpZ0NoYW5nZSgncmVjb3JkQ2xpY2tUeXBlJywgZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5jb25maWcucmVjb3JkQ2xpY2tUeXBlfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICA8UmFkaW8gdmFsdWU9XCJjbGlja1wiPlJlY29yZCBjbGljazwvUmFkaW8+XHJcbiAgICAgICAgICAgICAgICAgIDxSYWRpbyB2YWx1ZT1cImNsaWNrQXRcIj5SZWNvcmQgY2xpY2tBdDwvUmFkaW8+XHJcbiAgICAgICAgICAgICAgICA8L1JhZGlvLkdyb3VwPlxyXG4gICAgICAgICAgICAgIDwvRm9ybS5JdGVtPlxyXG4gICAgICAgICAgICA8L0Zvcm0+XHJcbiAgICAgICAgICA8L1RhYnMuVGFiUGFuZT5cclxuICAgICAgICAgIDxUYWJzLlRhYlBhbmUgdGFiPVwiQmFja3VwXCIga2V5PVwiYmFja3VwXCIgY2xhc3NOYW1lPVwiYmFja3VwLXBhbmVcIj5cclxuICAgICAgICAgICAgPGg0PkF1dG9tYXRpYyBCYWNrdXA8L2g0PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgIDxDaGVja2JveFxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNvbmZpZ0NoYW5nZSgnZW5hYmxlQXV0b0JhY2t1cCcsIGUudGFyZ2V0LmNoZWNrZWQpfVxyXG4gICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5wcm9wcy5jb25maWcuZW5hYmxlQXV0b0JhY2t1cH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDxzcGFuPlNob3cgYmFja3VwIHJlbWluZGVyIGV2ZXJ5PC9zcGFuPlxyXG4gICAgICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICBtaW49ezF9XHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17IXRoaXMucHJvcHMuY29uZmlnLmVuYWJsZUF1dG9CYWNrdXB9XHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5jb25maWcuYXV0b0JhY2t1cEludGVydmFsfVxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNvbmZpZ0NoYW5nZSgnYXV0b0JhY2t1cEludGVydmFsJywgZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICc0MHB4JyB9fVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgPHNwYW4+IGRheXM8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgPHA+QmFja3VwIGluY2x1ZGVzPC9wPlxyXG4gICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPENoZWNrYm94XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IG9uQ29uZmlnQ2hhbmdlKCdhdXRvQmFja3VwVGVzdENhc2VzJywgZS50YXJnZXQuY2hlY2tlZCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLmNvbmZpZy5hdXRvQmFja3VwVGVzdENhc2VzfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+TWFjcm9zPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPENoZWNrYm94XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IG9uQ29uZmlnQ2hhbmdlKCdhdXRvQmFja3VwVGVzdFN1aXRlcycsIGUudGFyZ2V0LmNoZWNrZWQpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5wcm9wcy5jb25maWcuYXV0b0JhY2t1cFRlc3RTdWl0ZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UZXN0IHN1aXRlczwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDaGVja2JveFxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNvbmZpZ0NoYW5nZSgnYXV0b0JhY2t1cFNjcmVlbnNob3RzJywgZS50YXJnZXQuY2hlY2tlZCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLmNvbmZpZy5hdXRvQmFja3VwU2NyZWVuc2hvdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TY3JlZW5zaG90czwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDaGVja2JveFxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNvbmZpZ0NoYW5nZSgnYXV0b0JhY2t1cENTVkZpbGVzJywgZS50YXJnZXQuY2hlY2tlZCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLmNvbmZpZy5hdXRvQmFja3VwQ1NWRmlsZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DU1YgZmlsZXM8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICA8Q2hlY2tib3hcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25Db25maWdDaGFuZ2UoJ2F1dG9CYWNrdXBWaXNpb25JbWFnZXMnLCBlLnRhcmdldC5jaGVja2VkKX1cclxuICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuY29uZmlnLmF1dG9CYWNrdXBWaXNpb25JbWFnZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5WaXN1YWwgVUkgVGVzdCBpbWFnZXM8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICA8c3Bhbj5BbmQgeW91IGNhbiBhbHNvIDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLnJ1bkJhY2t1cCgpfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIFJ1biBiYWNrdXAgbm93XHJcbiAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9UYWJzLlRhYlBhbmU+XHJcblxyXG4gICAgICAgICAgPFRhYnMuVGFiUGFuZSB0YWI9XCJTZWN1cml0eVwiIGtleT1cInNlY3VyaXR5XCIgY2xhc3NOYW1lPVwic2VjdXJpdHktcGFuZVwiPlxyXG4gICAgICAgICAgICA8aDQ+TWFzdGVyIHBhc3N3b3JkIGZvciBQYXNzd29yZCBFbmNyeXB0aW9uPC9oND5cclxuICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgQSBtYXN0ZXIgcGFzc3dvcmQgaXMgdXNlZCB0byBlbmNyeXB0IGFuZCBkZWNyeXB0IGFsbCBzdG9yZWQgd2Vic2l0ZSBwYXNzd29yZHMuIFRoZSB3ZWJzaXRlcyBwYXNzd29yZHMgYXJlIGVuY3J5cHRlZCB1c2luZyBzdHJvbmcgZW5jcnlwdGlvbi4mbmJzcDsmbmJzcDtcclxuICAgICAgICAgICAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9hOXQ5LmNvbS94L2lkZWhlbHA/aGVscD1lbmNyeXB0aW9uXCI+TW9yZSBpbmZvICZndDsmZ3Q7PC9hPlxyXG4gICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgPFJhZGlvLkdyb3VwXHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IG9uQ29uZmlnQ2hhbmdlKCdzaG91bGRFbmNyeXB0UGFzc3dvcmQnLCBlLnRhcmdldC52YWx1ZSl9XHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5jb25maWcuc2hvdWxkRW5jcnlwdFBhc3N3b3JkfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxSYWRpbyB2YWx1ZT1cIm5vXCI+RG8gbm90IGVuY3J5cHQgcGFzc3dvcmRzPC9SYWRpbz5cclxuICAgICAgICAgICAgICAgIDxSYWRpbyB2YWx1ZT1cIm1hc3Rlcl9wYXNzd29yZFwiPkVudGVyIG1hc3RlciBwYXNzd29yZCBoZXJlIHRvIHN0b3JlIGl0PC9SYWRpbz5cclxuICAgICAgICAgICAgICA8L1JhZGlvLkdyb3VwPlxyXG5cclxuICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jb25maWcuc2hvdWxkRW5jcnlwdFBhc3N3b3JkID09PSAnbWFzdGVyX3Bhc3N3b3JkJyA/IChcclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxsYWJlbD5NYXN0ZXIgcGFzc3dvcmQ6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzIwMHB4JyB9fVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmNvbmZpZy5tYXN0ZXJQYXNzd29yZH1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IG9uQ29uZmlnQ2hhbmdlKCdtYXN0ZXJQYXNzd29yZCcsIGUudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICkgOiBudWxsfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvVGFicy5UYWJQYW5lPlxyXG4gICAgICAgIDwvVGFicz5cclxuICAgICAgPC9Nb2RhbD5cclxuICAgIClcclxuICB9XHJcblxyXG4gIHJlbmRlck1haW5NZW51ICgpIHtcclxuICAgIGNvbnN0IHsgaHRtbFVyaSwganNvblVyaSB9ICA9IHRoaXMuc3RhdGVcclxuICAgIGNvbnN0IHsgc3RhdHVzLCBlZGl0aW5nIH0gICA9IHRoaXMucHJvcHNcclxuICAgIGNvbnN0IHsgY29tbWFuZHMsIG1ldGEgfSAgICA9IGVkaXRpbmdcclxuICAgIGNvbnN0IHsgc3JjIH0gICAgICAgICAgICAgICA9IG1ldGFcclxuICAgIGNvbnN0IGNhblBsYXkgICAgICAgICAgICAgICA9IHRoaXMucHJvcHMucGxheWVyLnN0YXR1cyA9PT0gQy5QTEFZRVJfU1RBVFVTLlNUT1BQRURcclxuICAgIGNvbnN0IGRvd25sb2FkTmFtZVByZWZpeCAgICA9IHNyYyA/IHNyYy5uYW1lIDogJ1VudGl0bGVkJ1xyXG5cclxuICAgIGNvbnN0IG9uQ2xpY2tNZW51SXRlbSA9ICh7IGtleSB9KSA9PiB7XHJcbiAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgY2FzZSAncGxheV9zZXR0aW5ncyc6IHtcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93UmVwbGF5U2V0dGluZ3M6IHRydWUgfSlcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPE1lbnUgb25DbGljaz17b25DbGlja01lbnVJdGVtfSBzZWxlY3RhYmxlPXtmYWxzZX0+XHJcbiAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJwbGF5X3NldHRpbmdzXCIgZGlzYWJsZWQ9eyFjYW5QbGF5fT5cclxuICAgICAgICAgIFJlcGxheSBzZXR0aW5ncy4uXHJcbiAgICAgICAgPC9NZW51Lkl0ZW0+XHJcbiAgICAgIDwvTWVudT5cclxuICAgIClcclxuICB9XHJcblxyXG4gIHJlbmRlclN0YXR1cyAoKSB7XHJcbiAgICBjb25zdCB7IHN0YXR1cywgcGxheWVyIH0gPSB0aGlzLnByb3BzXHJcbiAgICBjb25zdCByZW5kZXJJbm5lciA9ICgpID0+IHtcclxuICAgICAgc3dpdGNoIChzdGF0dXMpIHtcclxuICAgICAgICBjYXNlIEMuQVBQX1NUQVRVUy5SRUNPUkRFUjpcclxuICAgICAgICAgIHJldHVybiAnUmVjb3JkaW5nJ1xyXG5cclxuICAgICAgICBjYXNlIEMuQVBQX1NUQVRVUy5QTEFZRVI6IHtcclxuICAgICAgICAgIHN3aXRjaCAocGxheWVyLnN0YXR1cykge1xyXG4gICAgICAgICAgICBjYXNlIEMuUExBWUVSX1NUQVRVUy5QTEFZSU5HOiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgeyBuZXh0Q29tbWFuZEluZGV4LCBsb29wcywgY3VycmVudExvb3AsIHRpbWVvdXRTdGF0dXMgfSA9IHBsYXllclxyXG5cclxuICAgICAgICAgICAgICBpZiAobmV4dENvbW1hbmRJbmRleCA9PT0gbnVsbCB8fFxyXG4gICAgICAgICAgICAgICAgICBsb29wcyA9PT0gbnVsbCB8fCBjdXJyZW50TG9vcCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnXHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBjb25zdCBwYXJ0cyA9IFtcclxuICAgICAgICAgICAgICAgIGBMaW5lICR7bmV4dENvbW1hbmRJbmRleCArIDF9YCxcclxuICAgICAgICAgICAgICAgIGBSb3VuZCAke2N1cnJlbnRMb29wfS8ke2xvb3BzfWBcclxuICAgICAgICAgICAgICBdXHJcblxyXG4gICAgICAgICAgICAgIGlmICh0aW1lb3V0U3RhdHVzICYmIHRpbWVvdXRTdGF0dXMudHlwZSAmJiB0aW1lb3V0U3RhdHVzLnRvdGFsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHR5cGUsIHRvdGFsLCBwYXN0IH0gPSB0aW1lb3V0U3RhdHVzXHJcbiAgICAgICAgICAgICAgICBwYXJ0cy51bnNoaWZ0KGAke3R5cGV9ICR7cGFzdCAvIDEwMDB9cyAoJHt0b3RhbCAvIDEwMDB9KWApXHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gcGFydHMuam9pbignIHwgJylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2FzZSBDLlBMQVlFUl9TVEFUVVMuUEFVU0VEOlxyXG4gICAgICAgICAgICAgIHJldHVybiAnUGxheWVyIHBhdXNlZCdcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgcmV0dXJuICcnXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgcmV0dXJuICcnXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdGF0dXNcIj57cmVuZGVySW5uZXIoKX08L2Rpdj5cclxuICB9XHJcblxyXG4gIHJlbmRlckFjdGlvbnMgKCkge1xyXG4gICAgY29uc3QgeyB0ZXN0Q2FzZXMsIGVkaXRpbmcsIHBsYXllciwgc3RhdHVzIH0gPSB0aGlzLnByb3BzXHJcblxyXG4gICAgY29uc3Qgb25DbGlja01lbnVJdGVtID0gKHtrZXl9KSA9PiB7XHJcbiAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgY2FzZSAncGxheV9sb29wJzoge1xyXG4gICAgICAgICAgdGhpcy50b2dnbGVQbGF5TG9vcHNNb2RhbCh0cnVlKVxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwbGF5TWVudSA9IChcclxuICAgICAgPE1lbnUgb25DbGljaz17b25DbGlja01lbnVJdGVtfSBzZWxlY3RhYmxlPXtmYWxzZX0+XHJcbiAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJwbGF5X2xvb3BcIiBkaXNhYmxlZD17ZmFsc2V9PlxyXG4gICAgICAgICAgUGxheSBsb29wLi5cclxuICAgICAgICA8L01lbnUuSXRlbT5cclxuICAgICAgPC9NZW51PlxyXG4gICAgKVxyXG5cclxuICAgIGlmIChzdGF0dXMgPT09IEMuQVBQX1NUQVRVUy5SRUNPUkRFUikge1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWN0aW9uc1wiPlxyXG4gICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uVG9nZ2xlUmVjb3JkfVxyXG4gICAgICAgICAgICBzdHlsZT17eyBjb2xvcjogJyNmZjAwMDAnIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxzcGFuPlN0b3AgUmVjb3JkPC9zcGFuPlxyXG4gICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBzd2l0Y2ggKHBsYXllci5zdGF0dXMpIHtcclxuICAgICAgY2FzZSBDLlBMQVlFUl9TVEFUVVMuUExBWUlORzoge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbnNcIj5cclxuICAgICAgICAgICAgPEJ1dHRvbi5Hcm91cD5cclxuICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMuZ2V0UGxheWVyKCkuc3RvcCgpfT5cclxuICAgICAgICAgICAgICAgIDxzcGFuPlN0b3A8L3NwYW4+XHJcbiAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmdldFBsYXllcigndGVzdENhc2UnKS5wYXVzZSgpfT5cclxuICAgICAgICAgICAgICAgIDxzcGFuPlBhdXNlPC9zcGFuPlxyXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8L0J1dHRvbi5Hcm91cD5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgICAgfVxyXG5cclxuICAgICAgY2FzZSBDLlBMQVlFUl9TVEFUVVMuUEFVU0VEOiB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWN0aW9uc1wiPlxyXG4gICAgICAgICAgICA8QnV0dG9uLkdyb3VwPlxyXG4gICAgICAgICAgICAgIHt0aGlzLnByb3BzLnBsYXllci5tb2RlID09PSBDLlBMQVlFUl9NT0RFLlRFU1RfQ0FTRSA/IChcclxuICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5nZXRQbGF5ZXIoJ3Rlc3RDYXNlJykucmVzdW1lKHRydWUpfT5TdGVwPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgKSA6IG51bGx9XHJcbiAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmdldFBsYXllcigpLnN0b3AoKX0+U3RvcDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5nZXRQbGF5ZXIoJ3Rlc3RDYXNlJykucmVzdW1lKCl9PlJlc3VtZTwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8L0J1dHRvbi5Hcm91cD5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgICAgfVxyXG5cclxuICAgICAgY2FzZSBDLlBMQVlFUl9TVEFUVVMuU1RPUFBFRDoge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbnNcIj5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Ub2dnbGVSZWNvcmR9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8c3Bhbj5SZWNvcmQ8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgPEJ1dHRvbi5Hcm91cCBjbGFzc05hbWU9XCJwbGF5LWFjdGlvbnNcIj5cclxuICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMucGxheUN1cnJlbnRNYWNybyh0cnVlKX0+U3RlcDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgIDxEcm9wZG93bi5CdXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5wbGF5Q3VycmVudE1hY3JvKGZhbHNlKX0gb3ZlcmxheT17cGxheU1lbnV9PlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+UGxheSBNYWNybzwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L0Ryb3Bkb3duLkJ1dHRvbj5cclxuICAgICAgICAgICAgPC9CdXR0b24uR3JvdXA+XHJcblxyXG4gICAgICAgICAgICA8QnV0dG9uIHNoYXBlPVwiY2lyY2xlXCIgb25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IHNob3dSZXBsYXlTZXR0aW5nczogdHJ1ZSB9KX0+XHJcbiAgICAgICAgICAgICAgPEljb24gdHlwZT1cInNldHRpbmdcIiAvPlxyXG4gICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyTWFjcm8gKCkge1xyXG4gICAgY29uc3QgeyB0ZXN0Q2FzZXMsIGVkaXRpbmcsIHBsYXllciwgaGFzVW5zYXZlZCB9ID0gdGhpcy5wcm9wc1xyXG4gICAgY29uc3QgeyBzcmMgfSA9IGVkaXRpbmcubWV0YVxyXG4gICAgY29uc3QgaXNQbGF5ZXJTdG9wcGVkID0gcGxheWVyLnN0YXR1cyA9PT0gQy5QTEFZRVJfU1RBVFVTLlNUT1BQRURcclxuICAgIGNvbnN0IGtsYXNzID0gaGFzVW5zYXZlZCA/ICd1bnNhdmVkJyA6ICcnXHJcblxyXG4gICAgY29uc3Qgc2F2ZUJ0blN0YXRlICAgID0ge1xyXG4gICAgICB0ZXh0OiBzcmMgPyAnU2F2ZScgOiAnU2F2ZS4uJyxcclxuICAgICAgZGlzYWJsZWQ6ICFoYXNVbnNhdmVkXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWxlY3QtY2FzZVwiPlxyXG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17J3Rlc3QtY2FzZS1uYW1lICcgKyBrbGFzc30+e3NyYyA/IHNyYy5uYW1lIDogJ1VudGl0bGVkJ308L3NwYW4+XHJcblxyXG4gICAgICAgIHshaXNQbGF5ZXJTdG9wcGVkID8gbnVsbCA6IChcclxuICAgICAgICAgIDxCdXR0b24gZGlzYWJsZWQ9e3NhdmVCdG5TdGF0ZS5kaXNhYmxlZH0gb25DbGljaz17dGhpcy5vbkNsaWNrU2F2ZX0+XHJcbiAgICAgICAgICAgIDxzcGFuPntzYXZlQnRuU3RhdGUudGV4dH08L3NwYW4+XHJcbiAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICApfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICBjb25zdCB7IHRlc3RDYXNlcywgcGxheWVyIH0gPSB0aGlzLnByb3BzXHJcbiAgICBjb25zdCBpc1BsYXllclN0b3BwZWQgPSBwbGF5ZXIuc3RhdHVzID09PSBDLlBMQVlFUl9TVEFUVVMuU1RPUFBFRFxyXG5cclxuICAgIHRlc3RDYXNlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIGNvbnN0IG5hbWVBID0gYS5uYW1lLnRvTG93ZXJDYXNlKClcclxuICAgICAgY29uc3QgbmFtZUIgPSBiLm5hbWUudG9Mb3dlckNhc2UoKVxyXG5cclxuICAgICAgaWYgKG5hbWVBIDwgbmFtZUIpIHJldHVybiAtMVxyXG4gICAgICBpZiAobmFtZUEgPT09IG5hbWVCKSAgcmV0dXJuIDBcclxuICAgICAgcmV0dXJuIDFcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9eydoZWFkZXIgJyArIHRoaXMucHJvcHMuc3RhdHVzLnRvTG93ZXJDYXNlKCl9PlxyXG4gICAgICAgIHt0aGlzLnJlbmRlck1hY3JvKCl9XHJcbiAgICAgICAge3RoaXMucmVuZGVyU3RhdHVzKCl9XHJcbiAgICAgICAge3RoaXMucmVuZGVyQWN0aW9ucygpfVxyXG4gICAgICAgIHt0aGlzLnJlbmRlclBsYXlMb29wTW9kYWwoKX1cclxuICAgICAgICB7dGhpcy5yZW5kZXJTZXR0aW5nTW9kYWwoKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxyXG4gIHN0YXRlID0+ICh7XHJcbiAgICBoYXNVbnNhdmVkOiBoYXNVbnNhdmVkTWFjcm8oc3RhdGUpLFxyXG4gICAgcm91dGU6IHN0YXRlLnJvdXRlLFxyXG4gICAgdGVzdENhc2VzOiBbLi4uc3RhdGUuZWRpdG9yLnRlc3RDYXNlc10sXHJcbiAgICBlZGl0aW5nOiBzdGF0ZS5lZGl0b3IuZWRpdGluZyxcclxuICAgIHBsYXllcjogc3RhdGUucGxheWVyLFxyXG4gICAgc3RhdHVzOiBzdGF0ZS5zdGF0dXMsXHJcbiAgICBjb25maWc6IHN0YXRlLmNvbmZpZ1xyXG4gIH0pLFxyXG4gIGRpc3BhdGNoICA9PiBiaW5kQWN0aW9uQ3JlYXRvcnMoey4uLmFjdGlvbnN9LCBkaXNwYXRjaClcclxuKSh3aXRoUm91dGVyKEhlYWRlcikpXHJcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vaGVhZGVyLnNjc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIFByZXBhcmUgY3NzVHJhbnNmb3JtYXRpb25cbnZhciB0cmFuc2Zvcm07XG5cbnZhciBvcHRpb25zID0ge31cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9oZWFkZXIuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2hlYWRlci5zY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nXHJcbmltcG9ydCB7IE1vZGFsLCBtZXNzYWdlLCBJbnB1dCB9IGZyb20gJ2FudGQnXHJcbmltcG9ydCB7IHNhdmVFZGl0aW5nQXNFeGlzdGVkLCBzYXZlRWRpdGluZ0FzTmV3IH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCdcclxuaW1wb3J0IHsgaGFzVW5zYXZlZE1hY3JvIH0gZnJvbSAnLi4vcmVjb21wdXRlZCdcclxuXHJcbmNsYXNzIFNhdmVBc01vZGFsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBzdGF0ZSA9IHtcclxuICAgIG5hbWU6IG51bGxcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgIGlmICh0aGlzLnByb3BzLm5hbWUpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG5hbWU6IHRoaXMucHJvcHMubmFtZSB9KVxyXG4gICAgfVxyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnB1dCA9IHRoaXMuaW5wdXRTYXZlVGVzdENhc2UucmVmcy5pbnB1dFxyXG4gICAgICBpbnB1dC5mb2N1cygpXHJcbiAgICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gaW5wdXQuc2VsZWN0aW9uRW5kID0gaW5wdXQudmFsdWUubGVuZ3RoO1xyXG4gICAgfSwgMTAwKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxNb2RhbFxyXG4gICAgICAgIHRpdGxlPVwiU2F2ZSBtYWNybyBhcy4uXCJcclxuICAgICAgICBva1RleHQ9XCJTYXZlXCJcclxuICAgICAgICBjYW5jZWxUZXh0PVwiQ2FuY2VsXCJcclxuICAgICAgICB2aXNpYmxlPXt0cnVlfVxyXG4gICAgICAgIG9uT2s9eygpID0+IHRoaXMucHJvcHMub25Payh0aGlzLnN0YXRlLm5hbWUpfVxyXG4gICAgICAgIG9uQ2FuY2VsPXt0aGlzLnByb3BzLm9uQ2FuY2VsfVxyXG4gICAgICAgIGNsYXNzTmFtZT1cInNhdmUtbW9kYWxcIlxyXG4gICAgICA+XHJcbiAgICAgICAgPElucHV0XHJcbiAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICBvbktleURvd249e2UgPT4geyBpZiAoZS5rZXlDb2RlID09PSAxMykgdGhpcy5wcm9wcy5vbk9rKHRoaXMuc3RhdGUubmFtZSkgfX1cclxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMuc2V0U3RhdGUoeyBuYW1lOiBlLnRhcmdldC52YWx1ZSB9KX1cclxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm5hbWUgfHwgJyd9XHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIm1hY3JvIG5hbWVcIlxyXG4gICAgICAgICAgcmVmPXtlbCA9PiB7IHRoaXMuaW5wdXRTYXZlVGVzdENhc2UgPSBlbCB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvTW9kYWw+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBnZXRDb250YWluZXIgPSAoKSA9PiB7XHJcbiAgY29uc3QgaWQgPSAnc2F2ZV90ZXN0X2Nhc2VfY29udGFpbmVyJ1xyXG4gIGNvbnN0ICRlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKVxyXG5cclxuICBpZiAoJGVsKSAgcmV0dXJuICRlbFxyXG5cclxuICBjb25zdCAkbmV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICAkbmV3LmlkID0gaWRcclxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCRuZXcpXHJcbiAgcmV0dXJuICRuZXdcclxufVxyXG5cclxuY29uc3QgZ2V0VGVzdENhc2VOYW1lID0gKHN0YXRlKSA9PiB7XHJcbiAgY29uc3QgeyBzcmMgfSA9IHN0YXRlLmVkaXRvci5lZGl0aW5nLm1ldGFcclxuICByZXR1cm4gc3JjICYmIHNyYy5uYW1lICYmIHNyYy5uYW1lLmxlbmd0aCA/IHNyYy5uYW1lIDogJ1VudGl0bGVkJ1xyXG59XHJcblxyXG5jb25zdCB0cnlUb1NhdmUgPSAoc3RvcmUsIHRlc3RDYXNlTmFtZSkgPT4ge1xyXG4gIGNvbnN0ICRjb250YWluZXIgID0gZ2V0Q29udGFpbmVyKClcclxuICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKClcclxuICBjb25zdCBleGlzdGVkID0gISFzdGF0ZS5lZGl0b3IuZWRpdGluZy5tZXRhLnNyY1xyXG5cclxuICBpZiAoZXhpc3RlZCkge1xyXG4gICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKHNhdmVFZGl0aW5nQXNFeGlzdGVkKCkpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgY29uc3Qgb25TYXZlID0gKG5hbWUpID0+IHtcclxuICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKHNhdmVFZGl0aW5nQXNOZXcobmFtZSkpXHJcbiAgICAgIC50aGVuKFxyXG4gICAgICAgICgpID0+IG1lc3NhZ2Uuc3VjY2Vzcygnc3VjY2Vzc2Z1bGx5IHNhdmVkIScsIDEuNSksXHJcbiAgICAgICAgZSAgPT4gbWVzc2FnZS5lcnJvcihlLm1lc3NhZ2UsIDEuNSlcclxuICAgICAgKVxyXG4gICAgICAudGhlbihyZXNvbHZlLCByZWplY3QpXHJcbiAgICB9XHJcblxyXG4gICAgUmVhY3RET00ucmVuZGVyKFxyXG4gICAgICA8U2F2ZUFzTW9kYWxcclxuICAgICAgICBuYW1lPXt0ZXN0Q2FzZU5hbWV9XHJcbiAgICAgICAgb25Paz17b25TYXZlfVxyXG4gICAgICAgIG9uQ2FuY2VsPXtyZXNvbHZlfVxyXG4gICAgICAvPixcclxuICAgICAgJGNvbnRhaW5lclxyXG4gICAgKVxyXG4gICAgLy8gVE9ET1xyXG4gIH0pXHJcbiAgLnRoZW4oKCkgPT4ge1xyXG4gICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSgkY29udGFpbmVyKVxyXG4gIH0pXHJcbiAgLmNhdGNoKGUgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpXHJcbiAgfSlcclxufVxyXG5cclxuY29uc3QgZmFjdG9yeSA9IChzdG9yZSkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBzYXZlT3JOb3Q6ICgpID0+IHtcclxuICAgICAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpXHJcbiAgICAgIGNvbnN0IGhhc1Vuc2F2ZWQgPSBoYXNVbnNhdmVkTWFjcm8oc3RhdGUpXHJcblxyXG4gICAgICBpZiAoIWhhc1Vuc2F2ZWQpICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcclxuXHJcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgTW9kYWwuY29uZmlybSh7XHJcbiAgICAgICAgICB0aXRsZTogYFVuc2F2ZWQgY2hhbmdlcyBpbiBtYWNybyBcIiR7Z2V0VGVzdENhc2VOYW1lKHN0YXRlKX1cImAsXHJcbiAgICAgICAgICBjb250ZW50OiAnRG8geW91IHdhbnQgdG8gZGlzY2FyZCBvciBzYXZlIHRoZXNlIGNoYW5nZXM/JyxcclxuICAgICAgICAgIG9rVGV4dDogJ1NhdmUnLFxyXG4gICAgICAgICAgY2FuY2VsVGV4dDogJ0Rpc2NhcmQnLFxyXG4gICAgICAgICAgb25PazogKCkgPT4ge1xyXG4gICAgICAgICAgICB0cnlUb1NhdmUoc3RvcmUpLnRoZW4ocmVzb2x2ZSlcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBzYXZlOiAoZGVmYXVsdE5hbWUpID0+IHtcclxuICAgICAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpXHJcbiAgICAgIGNvbnN0IGhhc1Vuc2F2ZWQgPSBoYXNVbnNhdmVkTWFjcm8oc3RhdGUpXHJcblxyXG4gICAgICBpZiAoIWhhc1Vuc2F2ZWQpICByZXR1cm5cclxuICAgICAgcmV0dXJuIHRyeVRvU2F2ZShzdG9yZSwgZGVmYXVsdE5hbWUpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5sZXQgYXBpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTYXZlVGVzdENhc2UgKHN0b3JlKSB7XHJcbiAgaWYgKGFwaSkgcmV0dXJuIGFwaVxyXG4gIGlmICghc3RvcmUpIHRocm93IG5ldyBFcnJvcignbXVzdCBwcm92aWRlIHN0b3JlJylcclxuXHJcbiAgYXBpID0gZmFjdG9yeShzdG9yZSlcclxuICByZXR1cm4gYXBpXHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBJbnB1dCwgSWNvbiB9IGZyb20gJ2FudGQnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hCb3ggZXh0ZW5kcyBJbnB1dCB7XHJcbiAgcmVuZGVyICgpIHtcclxuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMucHJvcHMuaW5wdXRQcm9wcyB8fCB7fVxyXG4gICAgY29uc3QgY2FuQ2xlYXIgID0gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS5sZW5ndGggPiAwXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPHNwYW5cclxuICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfVxyXG4gICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAuLi4odGhpcy5wcm9wcy5zdHlsZSB8fCB7fSksXHJcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xyXG4gICAgICAgIH19XHJcbiAgICAgID5cclxuICAgICAgICA8SW5wdXQgey4uLih0aGlzLnByb3BzLmlucHV0UHJvcHMgfHwge30pfSAvPlxyXG4gICAgICAgIDxJY29uXHJcbiAgICAgICAgICB0eXBlPXtjYW5DbGVhciA/ICdjbG9zZScgOiAnc2VhcmNoJ31cclxuICAgICAgICAgIG9uQ2xpY2s9e2UgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWNhbkNsZWFyKSAgcmV0dXJuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5pbnB1dFByb3BzIHx8ICF0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UpICByZXR1cm5cclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKHsgdGFyZ2V0OiB7IHZhbHVlOiAnJyB9IH0pXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgcG9zaXRpb246ICAgJ2Fic29sdXRlJyxcclxuICAgICAgICAgICAgcmlnaHQ6ICAgICAgJzEwcHgnLFxyXG4gICAgICAgICAgICB0b3A6ICAgICAgICAnNTAlJyxcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiAgJ3RyYW5zbGF0ZVkoLTUwJSknLFxyXG4gICAgICAgICAgICBjdXJzb3I6ICAgICBjYW5DbGVhciA/ICdwb2ludGVyJyA6ICdhdXRvJ1xyXG4gICAgICAgICAgfX1cclxuICAgICAgICAvPlxyXG4gICAgICA8L3NwYW4+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IHtcclxuRGVtb0F1dG9maWxsOiB7XHJcbiAgXCJDcmVhdGlvbkRhdGVcIjogXCIyMDE4LTAyLTE4XCIsXHJcbiAgXCJDb21tYW5kc1wiOiBbXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZmFzdFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIXJlcGxheXNwZWVkXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiMTVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIiFUSU1FT1VUX1dBSVRcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCI2MFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIVRJTUVPVVRfUEFHRUxPQURcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwib3BlblwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2Zvcm1zL2QvZS8xRkFJcFFMU2NQWFJNdFlJX0tZTDhKNmZpdkhVVjBoUUtCN2oxUnRxVHJCQlV0RXI4Vk1teUNxdy92aWV3Zm9ybVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiY3NzPXNwYW4uZG9jc3NoYXJlZFdpelRvZ2dsZUxhYmVsZWRMYWJlbFRleHQuZXhwb3J0TGFiZWwuZnJlZWJpcmRGb3Jtdmlld2VyVmlld0l0ZW1zUmFkaW9MYWJlbFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiY3NzPWRpdi5xdWFudHVtV2l6VG9nZ2xlUGFwZXJyYWRpb0VsLmRvY3NzaGFyZWRXaXpUb2dnbGVMYWJlbGVkQ29udHJvbC5mcmVlYmlyZFRoZW1lZFJhZGlvLmZyZWViaXJkVGhlbWVkUmFkaW9EYXJrZXJEaXNhYmxlZC5mcmVlYmlyZEZvcm12aWV3ZXJWaWV3SXRlbXNSYWRpb0NvbnRyb2xcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImNzcz1kaXYucXVhbnR1bVdpelRvZ2dsZVBhcGVyY2hlY2tib3hJbm5lckJveC5leHBvcnRJbm5lckJveFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiLy8qW0BpZD1cXFwibUc2MUhkXFxcIl0vZGl2L2RpdlsyXS9kaXZbMl0vZGl2WzJdL2RpdlsyXS9kaXZbMl0vZGl2L2xhYmVsL2Rpdi9kaXZbMV0vZGl2WzJdXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIvLypbQGlkPVxcXCJtRzYxSGRcXFwiXS9kaXYvZGl2WzJdL2RpdlsyXS9kaXZbMl0vZGl2WzJdL2RpdlszXS9kaXYvbGFiZWwvZGl2L2RpdlsxXS9kaXZbMl1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImNzcz1jb250ZW50LnF1YW50dW1XaXpNZW51UGFwZXJzZWxlY3RDb250ZW50LmV4cG9ydENvbnRlbnRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcIm1HNjFIZFxcXCJdL2Rpdi9kaXZbMl0vZGl2WzJdL2RpdlszXS9kaXZbMl0vZGl2WzJdL2Rpdls0XS9jb250ZW50XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2FwdHVyZVNjcmVlbnNob3RcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJBdXRvRmlsbDFzdFBhZ2UkeyFMT09QfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrQW5kV2FpdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImNzcz1zcGFuLnF1YW50dW1XaXpCdXR0b25QYXBlcmJ1dHRvbkxhYmVsLmV4cG9ydExhYmVsXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJuYW1lPWVudHJ5LjE1NzIzODY0MThcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ0eXBlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwibmFtZT1lbnRyeS4xNTcyMzg2NDE4XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJUaGlzIGlzIGEgc2luZ2xlIGxpbmUgdGVzdC4uLlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9ZW50cnkuMTU2OTU0MjQxMVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInR5cGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJuYW1lPWVudHJ5LjE1Njk1NDI0MTFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIi4uLmFuZCB0aGlzIGEgbXVsdGlsaW5lIHRlc3Q6XFxuTGluZTJcXG5MaW5lM1wiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjYXB0dXJlU2NyZWVuc2hvdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkF1dG9GaWxsMm5kUGFnZSR7IUxPT1B9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwicGF1c2VcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIxMDAwXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tBbmRXYWl0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiLy8qW0BpZD1cXFwibUc2MUhkXFxcIl0vZGl2L2RpdlsyXS9kaXZbM10vZGl2WzFdL2RpdlsxXS9kaXZbMl0vZGl2WzJdXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2FwdHVyZVNjcmVlbnNob3RcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJBdXRvRmlsbDNyZFBhZ2UkeyFMT09QfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJEZW1vQXV0b2ZpbGwgbWFjcm8gY29tcGxldGVkIChzaG93biBhcyBub3RpZmNhdGlvbiBiZWNhdXNlIG9mICNzaG93bm90aWZpY2F0aW9uIGluIHRoZSAzcmQgY29sdW1uKVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiI3Nob3dub3RpZmljYXRpb25cIlxyXG4gICAgfVxyXG4gIF1cclxufSxcclxuRGVtb0NhbnZhczpcclxue1xyXG4gIFwiQ3JlYXRpb25EYXRlXCI6IFwiMjAxOC02LTI2XCIsXHJcbiAgXCJDb21tYW5kc1wiOiAgW1xyXG4gICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJmYXN0XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIhcmVwbGF5c3BlZWRcIlxyXG4gICAgfSwgXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcIm9wZW5cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJodHRwczovL2E5dDkuY29tL2thbnR1L2RlbW8vY2FudmFzXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tBbmRXYWl0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwibGluaz1MaXRlcmFsbHlDYW52YXNcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiRmlyc3QgYSBzaW1wbGUgY2xpY2tBdCBkZW1vICgzIGRvdHMpXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tBdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcImxpdGVyYWxseS1jYW52YXNcXFwiXS9kaXZbMV0vZGl2WzFdL2NhbnZhc1syXVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiMjgsMjhcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tBdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcImxpdGVyYWxseS1jYW52YXNcXFwiXS9kaXZbMV0vZGl2WzFdL2NhbnZhc1syXVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiNTgsMjhcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tBdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcImxpdGVyYWxseS1jYW52YXNcXFwiXS9kaXZbMV0vZGl2WzFdL2NhbnZhc1syXVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiODgsMjhcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkp1c3QgaW1hZ2Ugc2VhcmNoIHRoZSBjYW52YXMhXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCI4OCwyOFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ2aXNpb25MaW1pdFNlYXJjaEFyZWFcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJlbGVtZW50Oi8vKltAaWQ9XFxcImxpdGVyYWxseS1jYW52YXNcXFwiXS9kaXZbMV0vZGl2WzFdL2NhbnZhc1syXVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInZpc3VhbFZlcmlmeVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImNhbnZhc18zZG90c192ZXJpZnlfZHBpXzk2LnBuZ1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcIm9wZW5cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJodHRwczovL2E5dDkuY29tL2thbnR1L2RlbW8vY2FudmFzXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tBbmRXYWl0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwibGluaz1NYXBib3hcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiVGVzdDogRW1iZWRkZWQgbWFwIChNYXBib3gpXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic2VsZWN0RnJhbWVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJpZD1kZW1vXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidmlzaW9uTGltaXRTZWFyY2hBcmVhXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwidmlld3BvcnRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ2aXN1YWxBc3NlcnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJjYW52YXNfd3lvbWluZ19kcGlfOTYucG5nQDAuNjBcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja0F0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiI2VmcFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNvbW1lbnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJOb3cgdmVyaWZ5IHRoYXQgdGhlIGNsaWNrICg9IHRoZSBtYXApIHdvcmtzIGFzIGV4cGVjdGVkXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidmlzdWFsVmVyaWZ5XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiY2FudmFzX3d5b21pbmdfdmVyaWZ5X2RwaV85Ni5wbmdAMC41XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlRlc3QgR29vZ2xlIE1hcHM6IEZpbmQgJiBjbGljayBIeWRlIHBhcmssIGFuZCBjaGVjayB0aGF0IGl0cyBpbmZvIGJ1YmJsZSBzaG93cy5cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJvcGVuXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaHR0cHM6Ly9hOXQ5LmNvbS9rYW50dS9kZW1vL2NhbnZhcyNtYXBzXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInZpc2lvbkxpbWl0U2VhcmNoQXJlYVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInZpZXdwb3J0XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidmlzdWFsQXNzZXJ0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiY2FudmFzX2h5ZGVwYXJrX2RwaV85Ni5wbmdAMC43MFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInNlbGVjdEZyYW1lXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaW5kZXg9MFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrQXRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIjZWZwXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIk5vdyB2ZXJpZnkgdGhhdCB0aGUgY2xpY2sgKD0gdGhlIG1hcCkgd29ya3MgYXMgZXhwZWN0ZWRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ2aXN1YWxWZXJpZnlcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJjYW52YXNfaHlkZXBhcmtfdmVyaWZ5X2RwaV85Ni5wbmdAMC43MFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH1cdFxyXG4gIF1cclxufSxcclxuRGVtb0NvbXB1dGVyVmlzaW9uOiBcclxue1xyXG4gIFwiQ3JlYXRpb25EYXRlXCI6IFwiMjAxOC01LTMxXCIsXHJcbiAgXCJDb21tYW5kc1wiOiBbXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcIm9wZW5cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJodHRwczovL29jci5zcGFjZS9cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiT0NSLnNwYWNlIGlzIG91ciBvd24gT0NSIEFQSSBzZXJ2aWNlLCB0aGlzIGRlbW8gaXMgYSB0ZXN0IHRoYXQgb3VyIFFBIHVzZXMgaW50ZXJuYWxseSwgdG9vIDotKVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNvbW1lbnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJWZXJpZnkgdGhlIDNyZCBwYXJ0eSBcXFwiU2hhcmVcXFwiIGJhbm5lciBzaG93c1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwidHJ1ZVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIWVycm9yaWdub3JlXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInZpc3VhbFNlYXJjaFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImRlbW9jdl9zaGFyZS5wbmdAMC41MFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwibWF0Y2hlc1wiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJpZlwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIiR7bWF0Y2hlc30gPT0gMFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJCcm93c2VyIHdpZHRoIHRvbyBzbWFsbCBmb3IgXFxcInNoYXJlXFxcIiBiYW5uZXIgdG8gc2hvd1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiYmx1ZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlbmRpZlwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZmFsc2VcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIiFlcnJvcmlnbm9yZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ0eXBlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaWQ9aW1hZ2VVcmxcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImh0dHBzOi8vYTl0OS5jb20vQ29udGVudC9JbWFnZXMva2FudHUtY2hyb21lLWxvb3AucG5nXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInNlbGVjdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPW9jckxhbmd1YWdlXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJsYWJlbD1FbmdsaXNoXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNvbW1lbnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJ2aWV3cG9ydCBpcyBkZWZhdWx0LCBidXQgd2UgYWRkIGl0IGhlcmUgZm9yIHRlc3QuIFRyeSBcXFwiZnVsbFxcXCIgdG8gc2VlIHRoZSBkaWZmZXJlbmNcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImxhYmVsPUVuZ2xpc2hcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidmlzaW9uTGltaXRTZWFyY2hBcmVhXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwidmlld3BvcnRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwid2UgY291bGQgdXNlIFxcXCJjbGljayBsaW5rPVN0YXJ0IE9DUiFcXFwiIGJ1dCB3ZSB1c2UgdGhlIGltYWdlIG9mIHRoZSBidXR0b24gaW5zdGVhZFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInZpc3VhbEFzc2VydFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImRlbW9jdl9zdGFydG9jci5wbmdAMC42MFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNvbW1lbnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIjZWZwIGlzIHNob3J0IGZvciBcXFwiI0VsZW1lbnRGcm9tUG9pbnQgKCR7aW1hZ2VYfSwoJHtpbWFnZVl9KVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiI2VmcFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNvbW1lbnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJXYWl0IGZvciBPQ1IgdG8gYmUgY29tcGxldGVkXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIzMFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIXRpbWVvdXRfd2FpdFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ2aXN1YWxBc3NlcnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJkZW1vY3Zfb2NyZG9uZS5wbmdcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIjEwXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIhdGltZW91dF93YWl0XCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwibGluaz1TaG93IE92ZXJsYXlcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiVmlzdWFsbHkgdmVyaWZ5IHRoYXQgdGhlIG92ZXJsYXkgaXMgY29ycmVjdFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInZpc3VhbEFzc2VydFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImRlbW9jdl9jaGVja292ZXJsYXkucG5nQDAuNjBcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9XHJcbiAgXVxyXG59LFxyXG5EZW1vRGlhbG9nYm94ZXM6IHtcclxuICBcIkNyZWF0aW9uRGF0ZVwiOiBcIjIwMTgtMDItMTVcIixcclxuICBcIkNvbW1hbmRzXCI6IFtcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwib3BlblwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImh0dHBzOi8vYTl0OS5jb20va2FudHUvZGVtby9zdG9yZWV2YWxcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ0eXBlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaWQ9c29tZXRleHRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlN0YXJ0Li4uXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiLy8qW0BpZD1cXFwiY29udGVudFxcXCJdL2RpdlsyXS9kaXYvcFszXS9idXR0b25bMV1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiS2FudHUgSURFIGNsb3NlcyBkaWFsb2cgYm94ZXMgYXV0b21hdGlhbGx5LiBZb3UgbmVlZCBhc3NlcnRBbGVydCAoZXRjKSBvbmx5IHRvIHZlcmlmeSBleHBlY3RlZCB0ZXh0cy5cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJhc3NlcnRBbGVydFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkhlbGxvXFxcXG5Ib3cgYXJlIHlvdT9cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcImNvbnRlbnRcXFwiXS9kaXZbMl0vZGl2L3BbM10vYnV0dG9uWzJdXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiYXNzZXJ0Q29uZmlybWF0aW9uXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiUHJlc3MgYSBidXR0b24hXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiYW5zd2VyT25OZXh0UHJvbXB0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiSSBhbSBLYW50dSBmb3IgQ2hyb21lLi4uXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIvLypbQGlkPVxcXCJjb250ZW50XFxcIl0vZGl2WzJdL2Rpdi9wWzNdL2J1dHRvblszXVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImFzc2VydFByb21wdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlBsZWFzZSBlbnRlciB5b3VyIG5hbWVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ0eXBlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaWQ9c29tZXRleHRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIkRvbmUhXCJcclxuICAgIH1cclxuICBdXHJcbn0sXHJcbkRlbW9EcmFnRHJvcDoge1xyXG4gIFwiQ3JlYXRpb25EYXRlXCI6IFwiMjAxNy0xMC0xOFwiLFxyXG4gIFwiQ29tbWFuZHNcIjogW1xyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJvcGVuXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaHR0cHM6Ly9hOXQ5LmNvbS9kZW1vL3dlYnRlc3QvZHJhZ2Ryb3AvXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlJlZHVjZSByZXBsYXkgc3BlZWQgc28gd2UgY2FuIGJldHRlciBzZWUgd2hhdCBpcyBnb2luZyBvbi4uLlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwibWVkaXVtXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIhcmVwbGF5c3BlZWRcIlxyXG4gICAgfSxcdFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJkcmFnQW5kRHJvcFRvT2JqZWN0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaWQ9b25lXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJpZD1iaW5cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZHJhZ0FuZERyb3BUb09iamVjdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPXR3b1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiaWQ9YmluXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImRyYWdBbmREcm9wVG9PYmplY3RcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJpZD10aHJlZVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiaWQ9YmluXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImRyYWdBbmREcm9wVG9PYmplY3RcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJpZD1mb3VyXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJpZD1iaW5cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZHJhZ0FuZERyb3BUb09iamVjdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPWZpdmVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImlkPWJpblwiXHJcbiAgICB9XHJcbiAgXVxyXG59LFxyXG5EZW1vRG93bmxvYWQ6IHtcclxuICBcIkNyZWF0aW9uRGF0ZVwiOiBcIjIwMTgtMi0yNVwiLFxyXG4gIFwiQ29tbWFuZHNcIjogW1xyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIjIwMFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIXRpbWVvdXRfZG93bmxvYWRcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIxMFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIXRpbWVvdXRfd2FpdFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZUV2YWxcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJ2YXIgZD1uZXcgRGF0ZSgpOyBkLmdldEZ1bGxZZWFyKCkgKyAnLScgKygoZC5nZXRNb250aCgpKzEpKSsnLScgK2QuZ2V0RGF0ZSgpO1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwidG9kYXlkYXRlXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJUb2RheSBpcyAke3RvZGF5ZGF0ZX1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJvcGVuXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaHR0cHM6Ly9hOXQ5LmNvbS9rYW50dS9kZW1vL2ZpbGVkb3dubG9hZFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcIm9uRG93bmxvYWRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJLYW50dVRlc3QxXyR7dG9kYXlkYXRlfS5leGVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcInRydWVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIkeyFydW50aW1lfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwic3RhcnR0aW1lXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwibGluaz1VU0EgKEVhc3QgY29hc3QpKlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlRXZhbFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInBhcnNlRmxvYXQoXFxcIiR7IXJ1bnRpbWV9XFxcIiktcGFyc2VGbG9hdChcXFwiJHtzdGFydHRpbWV9XFxcIilcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImRvd25sb2FkdGltZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiRG93bmxvYWQxIChVU0EpIHRvb2sgJHtkb3dubG9hZHRpbWV9IHNlY29uZHNcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImJsdWVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwib25Eb3dubG9hZFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkthbnR1VGVzdDJfJHt0b2RheWRhdGV9LmV4ZVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwidHJ1ZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIiR7IXJ1bnRpbWV9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJzdGFydHRpbWVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJsaW5rPSpBc2lhKlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlRXZhbFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInBhcnNlRmxvYXQoXFxcIiR7IXJ1bnRpbWV9XFxcIiktcGFyc2VGbG9hdChcXFwiJHtzdGFydHRpbWV9XFxcIilcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImRvd25sb2FkdGltZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiRG93bmxvYWQyIChBc2lhKSB0b29rICR7ZG93bmxvYWR0aW1lfSBzZWNvbmRzXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJncmVlblwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiQWxsIGRvbmUuLi5cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja0FuZFdhaXRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJsaW5rPU9uRG93bmxvYWQgY29tbWFuZFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH1cclxuICBdXHJcbiB9LCBcclxuRGVtb0V4dHJhY3Q6IHtcclxuICBcIkNyZWF0aW9uRGF0ZVwiOiBcIjIwMTgtMDUtMjhcIixcclxuICBcIkNvbW1hbmRzXCI6IFtcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJmYXN0XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIhcmVwbGF5c3BlZWRcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwib3BlblwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImh0dHBzOi8vYTl0OS5jb20va2FudHUvZGVtby9zdG9yZWV2YWxcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiQ3VycmVudCBwYWdlIFVSTCA9ICR7IVVSTH1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiQ3VycmVudCBsb29wIHZhbHVlID0gJHshTE9PUH1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiVGhpcyBtYWNybyBzaG93cyB2YXJpb3VzIG1ldGhvZHMgdG8gZXh0cmFjdCBhbmQgc2F2ZSBkYXRhIGZyb20gYSB3ZWJzaXRlXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVBdHRyaWJ1dGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJjc3M9aW1nLnJlc3BvbnNpdmUtaW1nQHNyY1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwibXlsaW5rXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJocmVmPSR7bXlsaW5rfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlQXR0cmlidXRlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiY3NzPWltZy5yZXNwb25zaXZlLWltZ0BhbHRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIm15YWx0dGV4dFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiYWx0IHRleHQgPSAke215YWx0dGV4dH1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZUF0dHJpYnV0ZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vaW5wdXRbQGlkPSdzb21ldGV4dCddQHNpemVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImJveHNpemVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlucHV0IGJveCBzaXplID0ke2JveHNpemV9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPXNvbWV0ZXh0XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJUaGlzIGJveCBpcyAke2JveHNpemV9IGNoYXJzIHdpZGVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVFdmFsXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZG9jdW1lbnQudGl0bGUgPSAke2JveHNpemV9O1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImFzc2VydFRpdGxlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiNzBcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcImNvbnRlbnRcXFwiXS9kaXZbMl0vZGl2L2gyWzNdXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVUZXh0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiLy8qW0BpZD1cXFwiY29udGVudFxcXCJdL2RpdlsyXS9kaXYvaDJbM11cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIm15aGVhZGVyXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJoZWFkZXIgPSAke215aGVhZGVyfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlVGl0bGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIm15dGl0bGVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInBhZ2UgdGl0bGUgPSAke215dGl0bGV9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInBhZ2UgdGl0bGUgPSAke215dGl0bGV9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInBhZ2UgdGl0bGUgPSAke215dGl0bGV9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInBhZ2UgdGl0bGUgPSAke215dGl0bGV9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIk5vdyB0ZXN0IHNvbWUgZXh0cmFjdGlvbiB3aXRoIHN0b3JlVmFsdWVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVZhbHVlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaWQ9c29tZXRleHRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIm15dGV4dFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJpZD10ZXNsYVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwibGFiZWw9TW9kZWwgWVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVZhbHVlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaWQ9dGVzbGFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIm15dGVzbGFcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlRoZSB0ZXh0IGJveCBjb250YWlucyBbJHtteXRleHR9XSBhbmQgdGhlIHNlbGVjdCBib3ggaGFzIHRoZSB2YWx1ZSBbJHtteXRlc2xhfV0gc2VsZWN0ZWRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ2ZXJpZnlWYWx1ZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPXRlc2xhXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJ5XCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlQ2hlY2tlZFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9dmVoaWNsZVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiaGFzYmlrZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZUNoZWNrZWRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJ4cGF0aD0oLy9pbnB1dFtAbmFtZT0ndmVoaWNsZSddKVsyXVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiaGFzY2FyXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlQ2hlY2tlZFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInhwYXRoPSgvL2lucHV0W0BuYW1lPSd2ZWhpY2xlJ10pWzNdXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJoYXNib2F0XCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJVc2VyIGhhcyBiaWtlOiR7aGFzYmlrZX0sIGNhcjoke2hhc2Nhcn0sIGJvYXQ6JHtoYXNib2F0fVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiZ3JlZW5cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlNlYXJjaCBhbmQgZXh0cmFjdCBkaXJlY3RseSBmcm9tIHRoZSBwYWdlIFNPVVJDRVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwieVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzb3VyY2VFeHRyYWN0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwicmVnZXg9W1xcXFwkXFxcXMKjXFxcXOKCrF0oXFxcXGQrKD86XFxcXC5cXFxcZHsxLDJ9KT8pXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJtYXRjaDFcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic291cmNlRXh0cmFjdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInJlZ2V4PVtcXFxcJFxcXFzCo1xcXFzigqxdKFxcXFxkKyg/OlxcXFwuXFxcXGR7MSwyfSk/KUAyXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJtYXRjaDJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIllvdSBjYW4gYWxzbyBleHRyYWN0IHdpdGhvdXQgcmVnZXggd2l0aCB0aGUgKiBzeW1ib2xcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIm1hdGNoMmJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic291cmNlRXh0cmFjdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIiQqPFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwibWF0Y2gyYlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiQ29mZmVlIGNvc3RzICR7bWF0Y2gxfSBhbmQgdGVhICR7bWF0Y2gyfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiYmx1ZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzb3VyY2VFeHRyYWN0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwicmVnZXg9X3dpZHRoOiAoXFxcXGQrKVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwibWF0Y2gxXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInNvdXJjZUV4dHJhY3RcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJyZWdleD1fd2lkdGg6IChcXFxcZCspQDEsMVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwibWF0Y2gxZ3JvdXAxXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInNvdXJjZUV4dHJhY3RcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJyZWdleD1fd2lkdGg6IChcXFxcZCspQDJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIm1hdGNoMlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzb3VyY2VFeHRyYWN0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwicmVnZXg9X3dpZHRoOiAoXFxcXGQrKUAyLDFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIm1hdGNoMmdyb3VwMVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwibWF0Y2gxID0gWyR7TUFUQ0gxfV0gKGdyb3VwMSA9IFske21hdGNoMWdyb3VwMX1dKSBtYXRjaDIgPSAgWyR7TUFUQ0gyfV0gIChncm91cDEgPSBbJHtNQVRDSDJHUk9VUDF9XSlcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImJsdWVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkV4dHJhY3QgR29vZ2xlIEFuYWx5dGljcyBJRFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInNvdXJjZUV4dHJhY3RcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJVQS0qLFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiZ2Ffb3B0aW9uMVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzb3VyY2VFeHRyYWN0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwicmVnZXg9VUEtWzAtOV0rLVswLTldK1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiZ2Ffb3B0aW9uMlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiR29vZ2xlIEFuYWx5dGljcyBJRCA9ICR7Z2Ffb3B0aW9uMn1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcInBpbmtcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlNvbWUgYXNzZXJ0aW9uIHRlc3QgZm9yIFFBXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiaWZcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIke21hdGNoMmdyb3VwMX0gIT0gMjJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ0aHJvd0Vycm9yXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiUmVnZXggRXh0cmFjdGlvbiBmYWlsZWQgZm9yIE1hdGNoMigxKTogICR7bWF0Y2gyZ3JvdXAxfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVuZGlmXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkxhc3QgYnV0IG5vdCBsZWFzdCwgdGFraW5nIGEgc2NyZWVuc2hvdCBpcyBhbm90aGVyIHdheSB0byBleHRyYWN0IGRhdGFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjYXB0dXJlU2NyZWVuc2hvdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm15c2NyZWVuc2hvdF8ke215dGl0bGV9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVJbWFnZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcInBhZ2UtaGVhZGVyXFxcIl0vZGl2L2Rpdi9oMVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwicGFnZXRpdGxlLnBuZ1wiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiRXhwb3J0IGltYWdlcyB0byBkb3dubG9hZCBmb2xkZXJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJsb2NhbFN0b3JhZ2VFeHBvcnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJteXNjcmVlbnNob3RfJHtteXRpdGxlfS5wbmdcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJsb2NhbFN0b3JhZ2VFeHBvcnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJwYWdldGl0bGUucG5nXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfVx0XHJcbiAgXVxyXG59LFxyXG5EZW1vRnJhbWVzOiB7XHJcbiAgXCJDcmVhdGlvbkRhdGVcIjogXCIyMDE3LTEwLTE2XCIsXHJcbiAgXCJDb21tYW5kc1wiOiBbXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcIm9wZW5cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJodHRwczovL2E5dDkuY29tL2RlbW8vd2VidGVzdC9mcmFtZXMvXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlJlZHVjZSByZXBsYXkgc3BlZWQgc28gd2UgY2FuIGJldHRlciBzZWUgd2hhdCBpcyBnb2luZyBvbi4uLlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwibWVkaXVtXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIhcmVwbGF5c3BlZWRcIlxyXG4gICAgfSxcdFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RGcmFtZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImluZGV4PTBcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9bXl0ZXh0MVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInR5cGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJuYW1lPW15dGV4dDFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIkZyYW1lMSAoaW5kZXg9MClcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic2VsZWN0RnJhbWVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJyZWxhdGl2ZT10b3BcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RGcmFtZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImluZGV4PTFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9bXl0ZXh0MlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInR5cGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJuYW1lPW15dGV4dDJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIkZyYW1lMiAoaW5kZXg9MSlcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic2VsZWN0RnJhbWVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJyZWxhdGl2ZT10b3BcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RGcmFtZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImluZGV4PTJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9bXl0ZXh0M1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInR5cGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJuYW1lPW15dGV4dDNcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIkZyYW1lMyAoaW5kZXg9MilcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic2VsZWN0RnJhbWVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJyZWxhdGl2ZT10b3BcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RGcmFtZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImluZGV4PTNcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9bXl0ZXh0NFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInR5cGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJuYW1lPW15dGV4dDRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIkZyYW1lNCAoaW5kZXg9MylcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic2VsZWN0RnJhbWVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJyZWxhdGl2ZT10b3BcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RGcmFtZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImluZGV4PTRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9bXl0ZXh0NVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInR5cGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJuYW1lPW15dGV4dDVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIkZyYW1lNSAoaW5kZXg9NClcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic2VsZWN0RnJhbWVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJyZWxhdGl2ZT10b3BcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RGcmFtZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImluZGV4PTJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ0eXBlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwibmFtZT1teXRleHQzXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJub3cgdGVzdGluZyBpZnJhbWUgaW5zaWRlIHRoaXMgZnJhbWVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic2VsZWN0RnJhbWVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJpbmRleD0wXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIvLypbQGlkPVxcXCJtRzYxSGRcXFwiXS9kaXYvZGl2WzJdL2RpdlsyXS9kaXZbMV0vZGl2WzJdL2Rpdi9jb250ZW50L2Rpdi9kaXYvbGFiZWwvZGl2L2RpdlsxXS9kaXZbM10vZGl2XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJjc3M9aW5wdXQucXVhbnR1bVdpelRleHRpbnB1dFNpbXBsZWlucHV0SW5wdXQuZXhwb3J0SW5wdXRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ0eXBlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiY3NzPWlucHV0LnF1YW50dW1XaXpUZXh0aW5wdXRTaW1wbGVpbnB1dElucHV0LmV4cG9ydElucHV0XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJpZnJhbWUgaW4gZnJhbWU6IHdvcmtzIVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RGcmFtZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInJlbGF0aXZlPXRvcFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInNlbGVjdEZyYW1lXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaW5kZXg9MlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInR5cGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJuYW1lPW15dGV4dDNcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlRlc3QgY29tcGxldGVkIVwiXHJcbiAgICB9XHJcbiAgXVxyXG59LFxyXG5cclxuRGVtb1Rha2VTY3JlZW5zaG90czoge1xyXG4gIFwiQ3JlYXRpb25EYXRlXCI6IFwiMjAxOC0xLTI1XCIsXHJcbiAgXCJDb21tYW5kc1wiOiBbXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcIm9wZW5cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJodHRwczovL2E5dDkuY29tL2Jsb2cvXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2FwdHVyZUVudGlyZVBhZ2VTY3JlZW5zaG90XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiYTl0OWJsb2dcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja0FuZFdhaXRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJsaW5rPXJlYWQgbW9yZUBQT1M9MVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNhcHR1cmVFbnRpcmVQYWdlU2NyZWVuc2hvdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImFydGljbGUxXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwib3BlblwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImh0dHBzOi8vYTl0OS5jb20vYmxvZy9cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja0FuZFdhaXRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJsaW5rPXJlYWQgbW9yZUBQT1M9MlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNhcHR1cmVFbnRpcmVQYWdlU2NyZWVuc2hvdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImFydGljbGUyXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2FwdHVyZVNjcmVlbnNob3RcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJhcnRpY2xlMl9qdXN0X3ZpZXdwb3J0XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInRha2Ugc2NyZWVuc2hvdCBvZiBhbiBfZWxlbWVudF8gd2l0aCBzdG9yZUltYWdlXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVJbWFnZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImxpbms9VGhlIEF1dG9ub21vdXMgVGVjaG5vbG9neSAoQTlUOSkgQmxvZ1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiYmxvZ3RpdGxlXCJcclxuICAgIH1cdFxyXG4gIF1cclxufSxcclxuRGVtb0lmRWxzZToge1xyXG4gIFwiQ3JlYXRpb25EYXRlXCI6IFwiMjAxOC00LTI4XCIsXHJcbiAgXCJDb21tYW5kc1wiOiBbXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZmFzdFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIXJlcGxheXNwZWVkXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcIm9wZW5cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJodHRwczovL2E5dDkuY29tL2thbnR1L2RlbW8vc3RvcmVldmFsXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkhvdyB0byB1c2UgZ290b0lmIGFuZCBsYWJlbChzKSBmb3IgZmxvdyBjb250cm9sLiBGb3IgYSB3aGlsZS9lbmRXaGlsZSBkZW1vLCBzZWUgdGhlIERlbW9TYXZlQ1NWIG1hY3JvLlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlRXZhbFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIihuZXcgRGF0ZSgpLmdldEhvdXJzKCkpXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJteXRpbWVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm15dGltZSA9ICR7bXl0aW1lfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImlmXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiJHtteXRpbWV9ICA+IDE2XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkdvb2QgYWZ0ZXJub29uIVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVsc2VcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiR29vZCBtb3JuaW5nIVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVuZGlmXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJ0cnVlXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIhZXJyb3JpZ25vcmVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVBdHRyaWJ1dGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIvL2lucHV0W0BpZD0nc29tZXRleHQtV1JPTkctSUQtVEVTVCddQHNpemVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImJveHNpemVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiaWZcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIkeyFMYXN0Q29tbWFuZE9LfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJCb3hzaXplIGlzICR7Ym94c2l6ZX1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlbHNlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVBdHRyaWJ1dGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIvL2lucHV0W0BpZD0nc29tZXRleHQnXUBzaXplXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJib3hzaXplXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJPbGQgSUQgbm90IGZvdW5kLCB3aXRoIG5ldyBJRCB3ZSBoYXZlOiBCb3hzaXplID0gJHtib3hzaXplfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVuZGlmXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJmYWxzZVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIWVycm9yaWdub3JlXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJpbnB1dCBib3ggc2l6ZSA9JHtib3hzaXplfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImdvdG9JZlwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIiR7Ym94c2l6ZX0gPiA3MFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiQk9YLVRPTy1CSUdcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPXNvbWV0ZXh0XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJUaGlzIGJveCBpcyAke2JveHNpemV9IGNoYXJzIHdpZGVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVFdmFsXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZG9jdW1lbnQudGl0bGUgPSAke2JveHNpemV9O1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImdvdG9MYWJlbFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkVORFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImxhYmVsXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiQk9YLVRPTy1CSUdcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiSW5wdXQgYm94IHRvbyBiaWcuIFRoaXMgaXMganVzdCBhIHRlc3Qgb2YgZ290b0lmXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVFdmFsXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZG9jdW1lbnQudGl0bGUgPSBcXFwiSnVzdCBhIGdvdG9JZiB0ZXN0LiBUaGlzIGxpbmUgc2hvdWxkIG5vdCBiZSByZWFjaGVkIHVubGVzcyB5b3UgZWRpdCB0aGUgbWFjcm9cXFwiXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwibGFiZWxcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJFTkRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwidGVzdCBjYXNlIGNvbXBsZXRlZFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNvbW1lbnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJvbkVycm9yXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiI2dvdG9cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImZpeGVycm9yXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInR5cGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJpZD1zb21ldGV4dFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwidGhpcyBsaW5lIHdvcmtzXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInR5cGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJpZD1zb21ldGV4dFhYWFhYXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJ0aGlzIGxpbmUgaGFzIHRoZSB3cm9uZyBJRC4uLlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwidGhpcyBsaW5lIGlzIG5ldmVyIHJlYWNoZWQsIGJlY2F1c2Ugb2YgdGhlIGVycm9yIGFib3ZlXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJibHVlXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImdvdG9MYWJlbFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImVuZC1wYXJ0MlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImxhYmVsXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZml4ZXJyb3JcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaGVyZSB3ZSBjYW4gaGF2ZSBjb2RlIHRoYXQgaGFuZGxlcyB0aGUgZXJyb3IuLlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiZ3JlZW5cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPXNvbWV0ZXh0XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJGaXggRXJyb3IgU2VjdGlvbjogVGhpcyBjb21tYW5kIHdvcmtzLlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJsYWJlbFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImVuZC1wYXJ0MlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH1cclxuICBdIFxyXG59LFxyXG5EZW1vSWZyYW1lOntcclxuICBcIkNyZWF0aW9uRGF0ZVwiOiBcIjIwMTgtNC0yOFwiLFxyXG4gIFwiQ29tbWFuZHNcIjogW1xyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJvcGVuXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaHR0cHM6Ly9hOXQ5LmNvbS9rYW50dS9kZW1vL2lmcmFtZXNcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcImNvbnRlbnRcXFwiXS9kaXZbMl0vZGl2L3BbMV1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcImNvbnRlbnRcXFwiXS9kaXZbMl0vZGl2L2gyWzFdXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkZpcnN0IGlmcmFtZTogRW1iZWRkZWQgR29vZ2xlIERvY1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInNlbGVjdEZyYW1lXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaW5kZXg9MFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiLy8qW0BpZD1cXFwibUc2MUhkXFxcIl0vZGl2L2RpdlsyXS9kaXZbMl0vZGl2WzFdL2RpdlsyXS9kaXYvY29udGVudC9kaXYvZGl2L2xhYmVsL2Rpdi9kaXZbMV0vZGl2WzNdL2RpdlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiY3NzPWlucHV0LnF1YW50dW1XaXpUZXh0aW5wdXRTaW1wbGVpbnB1dElucHV0LmV4cG9ydElucHV0XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImNzcz1pbnB1dC5xdWFudHVtV2l6VGV4dGlucHV0U2ltcGxlaW5wdXRJbnB1dC5leHBvcnRJbnB1dFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiaGVsbG8gaWZyYW1lXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiY3NzPWRpdi5xdWFudHVtV2l6VG9nZ2xlUGFwZXJjaGVja2JveElubmVyQm94LmV4cG9ydElubmVyQm94XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIvLypbQGlkPVxcXCJtRzYxSGRcXFwiXS9kaXYvZGl2WzJdL2RpdlsyXS9kaXZbMl0vZGl2WzJdL2RpdlsyXS9kaXYvbGFiZWwvZGl2L2RpdlsxXS9kaXZbMl1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcIm1HNjFIZFxcXCJdL2Rpdi9kaXZbMl0vZGl2WzJdL2RpdlsyXS9kaXZbMl0vZGl2WzNdL2Rpdi9sYWJlbC9kaXYvZGl2WzFdL2RpdlsyXVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInNlbGVjdEZyYW1lXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwicmVsYXRpdmU9dG9wXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlNlY29uZCBpZnJhbWU6IEVtYmVkZGVkIFlvdXR1YmUgVmlkZW9cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RGcmFtZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImluZGV4PTFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImNzcz1idXR0b24ueXRwLWxhcmdlLXBsYXktYnV0dG9uLnl0cC1idXR0b25cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RGcmFtZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInJlbGF0aXZlPXRvcFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNvbW1lbnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJUaGlyZCBpZnJhbWU6IEVtYmVkZGVkIFR3aXR0ZXIgKyBjbGljayBsaW5rcyB0aGF0IG9wZW4gbmV3IHRhYnMsIHRoZW4gc3dpdGNoIHRvIHRoZW1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RGcmFtZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPXR3aXR0ZXItd2lkZ2V0LTBcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImxpbms9QEE5VDlfY29tXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwicGF1c2VcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIyMDAwXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic2VsZWN0V2luZG93XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwidGFiPTFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImxpbms9YTl0OS5jb21cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiV2FpdCBmb3IgdGFiIHRvIG9wZW5cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJwYXVzZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIjIwMDBcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RXaW5kb3dcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJ0YWI9MlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNsaWNrQW5kV2FpdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImxpbms9S2FudHUgU2VsLiBJREUgLSBEb2NzXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfVxyXG4gIF1cclxufSxcclxuRGVtb0ltcGxpY2l0V2FpdGluZzoge1xyXG4gIFwiQ3JlYXRpb25EYXRlXCI6IFwiMjAxOC00LTI4XCIsXHJcbiAgXCJDb21tYW5kc1wiOiBbXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNvbW1lbnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJXYWl0Rm9yVmlzaWJsZSBpcyBub3QgcGFydCBvZiBpbXBsaWNpdCB3YWl0aW5nXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwib3BlblwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImh0dHBzOi8vYTl0OS5jb20va2FudHUvZGVtby93YWl0Zm9ydmlzaWJsZVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcIndhaXRGb3JWaXNpYmxlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiY3NzPSNkaXYxID4gaDFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImNzcz0jZGl2MSA+IGgxXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIyMFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIXRpbWVvdXRfd2FpdFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ3YWl0Rm9yVmlzaWJsZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImNzcz0jZGl2MiA+IGgxXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJjc3M9I2RpdjIgPiBoMVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNvbW1lbnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJJbXBsaWNpdCB3YWl0aW5nOiBXYWl0IGZvciBlbGVtZW50cyB0byBiZSBsb2FkZWQgIG9yIDx0aW1lb3V0X3dhaXQ+IGlzIHJlYWNoZWRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJvcGVuXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaHR0cHM6Ly9hOXQ5LmNvbS9kZW1vL3dlYnRlc3QvaW1wbGljaXR3YWl0aW5nL1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiMTVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIiFUSU1FT1VUX1dBSVRcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiYXNzZXJ0VGV4dFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi9odG1sL2JvZHkvaGVhZGVyL2NlbnRlci9wWzJdXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJVc2UgdGhlIHNlbGVjdCBib3ggdG8gc3RhcnQgdGhlIHRpbWVyLi4uXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInNlbGVjdFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPW1pbnV0ZXNTZWxlY3RcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImxhYmVsPTUgU2Vjb25kc1wiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiVGhlIG5leHQgZWxlbWVudCAodGFyZ2V0KSBpcyBub3QgYXZhaWxhYmxlIHlldC4uLiBLYW50dSB3YWl0cyBmb3IgaXQgdXAgdG8gJHshVElNRU9VVF9XQUlUfSBzZWNvbmRzIHRvIGFwcGVhci5cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcImJsdWVcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIvaHRtbC9ib2R5L2hlYWRlci9jZW50ZXIvaW1nXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfVxyXG4gIF1cdFxyXG59LFxyXG5EZW1vQ3N2UmVhZFdpdGhMb29wOiB7XHJcbiAgXCJDcmVhdGlvbkRhdGVcIjogXCIyMDE3LTExLTIzXCIsXHJcbiAgXCJDb21tYW5kc1wiOiBbXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZmFzdFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIXJlcGxheXNwZWVkXCJcclxuICAgIH0sICBcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlRoZSBmaWxlIFJlYWRDU1ZUZXN0RGF0YS5jc3YgaXMgcHJlLWluc3RhbGxlZCB3aXRoIEthbnR1LlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNzdlJlYWRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJSZWFkQ1NWVGVzdERhdGEuY3N2XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwib3BlblwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2Zvcm1zL2QvZS8xRkFJcFFMU2NHV1ZqZXhIMkZOekpxUEFDenV6QkxsVFdNSkhnTFVIanhlaHRVLTJjSnh0dTZWUS92aWV3Zm9ybVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInR5cGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJuYW1lPWVudHJ5LjkzMzQzNDQ4OVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiJHshQ09MMX1cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9ZW50cnkuMjAwNDEwNTcxN1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiJHshQ09MMn1cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9ZW50cnkuMTM4MjU3ODY2NFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiJHshQ09MM31cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tBbmRXYWl0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiLy8qW0BpZD1cXFwibUc2MUhkXFxcIl0vZGl2L2RpdlsyXS9kaXZbM10vZGl2WzFdL2Rpdi9kaXYvY29udGVudC9zcGFuXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfVxyXG4gIF1cclxufSxcclxuRGVtb0NzdlJlYWRXaXRoV2hpbGU6IHtcclxuICBcIkNyZWF0aW9uRGF0ZVwiOiBcIjIwMTgtMS0yNVwiLFxyXG4gIFwiQ29tbWFuZHNcIjogW1xyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIjE4MFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIXRpbWVvdXRfbWFjcm9cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJmYXN0XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIhcmVwbGF5c3BlZWRcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlRoZSBmaWxlIFJlYWRDU1ZUZXN0RGF0YS5jc3YgaXMgcHJlLWluc3RhbGxlZCB3aXRoIEthbnR1LlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNzdlJlYWRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJSZWFkQ1NWVGVzdERhdGEuY3N2XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlN0YXR1cyA9ICR7IWNzdlJlYWRTdGF0dXN9LCBsaW5lID0gJHshY3N2UmVhZExpbmVOdW1iZXJ9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwid2hpbGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJcXFwiJHshY3N2UmVhZFN0YXR1c31cXFwiID09IFxcXCJPS1xcXCJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwic3RhdHVzID0gJHshY3N2UmVhZFN0YXR1c30sIGxpbmUgPSAkeyFjc3ZSZWFkTGluZU51bWJlcn1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJvcGVuXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZm9ybXMvZC9lLzFGQUlwUUxTY0dXVmpleEgyRk56SnFQQUN6dXpCTGxUV01KSGdMVUhqeGVodFUtMmNKeHR1NlZRL3ZpZXdmb3JtXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9ZW50cnkuOTMzNDM0NDg5XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIkeyFDT0wxfV8keyFjc3ZSZWFkTGluZU51bWJlcn1cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9ZW50cnkuMjAwNDEwNTcxN1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiJHshQ09MMn1cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5hbWU9ZW50cnkuMTM4MjU3ODY2NFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiJHshQ09MM31cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY2xpY2tBbmRXYWl0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiLy8qW0BpZD1cXFwibUc2MUhkXFxcIl0vZGl2L2RpdlsyXS9kaXZbM10vZGl2WzFdL2Rpdi9kaXYvY29udGVudC9zcGFuXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVFdmFsXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiJHshY3N2UmVhZExpbmVOdW1iZXJ9KzFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIiFjc3ZSZWFkTGluZU51bWJlclwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInRydWVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIiFlcnJvcklnbm9yZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiUmVhZGluZyBDU1YgbGluZSBOby4gICR7IWNzdlJlYWRMaW5lTnVtYmVyfSBcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIiFlcnJvcklnbm9yZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjc3ZSZWFkXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiUmVhZENTVlRlc3REYXRhLmNzdlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZmFsc2VcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIiFlcnJvcklnbm9yZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlbmRXaGlsZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH1cclxuICBdXHJcbn0sIFxyXG5EZW1vQ3N2U2F2ZToge1xyXG4gIFwiQ3JlYXRpb25EYXRlXCI6IFwiMjAxOC0wNi0wMVwiLFxyXG4gIFwiQ29tbWFuZHNcIjogW1xyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImZhc3RcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIiFyZXBsYXlzcGVlZFwiXHJcbiAgICB9LCAgXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcIm9wZW5cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJodHRwczovL2E5dDkuY29tL2thbnR1L2RlbW8vY3N2c2F2ZVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlRXZhbFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIm5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKStcXFwiLVxcXCIrKG5ldyBEYXRlKCkuZ2V0TW9udGgoKSsxKStcXFwiLVxcXCIrbmV3IERhdGUoKS5nZXREYXRlKCkrXFxcIiBcXFwiKyBuZXcgRGF0ZSgpLmdldEhvdXJzKCkrXFxcIjpcXFwiICsgbmV3IERhdGUoKS5nZXRNaW51dGVzKCkgKyBcXFwiOlxcXCIgKyBuZXcgRGF0ZSgpLmdldFNlY29uZHMoKVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwidGltZXN0YW1wXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiJHt0aW1lc3RhbXB9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIhY3N2TGluZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiRmlyc3QgY29sdW1uIGluIHRoZSBDU1YgaXMgdGltZSAoJHt0aW1lc3RhbXB9KVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJTZXQgaSA9IDEgYXMgd2Ugc3RhcnQgdGhlIGV4dHJhY3Rpb24gd2l0aCB0aGUgMm5kIHRhYmxlIGNlbGwuXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIxXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJpXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcIndoaWxlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiKCR7aX0gPCA4KVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlRXZhbFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIiR7aX0rMVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiaVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiQ3VycmVudCB2YWx1ZSBvZiBpID0gJHtpfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiaVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVRleHRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIvLypbQGlkPVxcXCJnY3dfbWFpbkZOR1A1WFN1NlxcXCJdL2RpdlsyXS90YWJsZS90Ym9keS90clsyXS90ZFske2l9XS9hXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJjMlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIiR7YzJ9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIhY3N2TGluZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiRXh0cmFjdGVkIFZhbHVlIGZvciBpPSR7aX0gaXMgZXhjaGFuZ2UgcmF0ZSA9ICR7YzJ9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZW5kV2hpbGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiJHshY3N2TGluZX1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiQXBwZW5kIGNvbnRlbnQgb2YgIWNzdkxpbmUgdG8gQ1NWIGZpbGUgKG9yIGNyZWF0ZSBmaWxlIGlmIG5vbmUgZXhpc3RzKVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNzdlNhdmVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJDdXJyZW5jeUNvbnZlcnRlckRhdGFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiSWYgbmVlZGVkLCB5b3UgY2FuIGRvd25sb2FkIChzYXZlKSB0aGUgQ1NWIGRhdGEgZnJvbSB0aGUgQ1NWIHRhYiB0byB0aGUgdGhlIGRvd25sb2FkIGZvbGRlclwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImxvY2FsU3RvcmFnZUV4cG9ydFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImN1cnJlbmN5Y29udmVydGVyZGF0YS5jc3ZcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9XHJcbiAgXVxyXG59LFxyXG5EZW1vU3RvcmVFdmFsOiAge1xyXG4gIFwiQ3JlYXRpb25EYXRlXCI6IFwiMjAxOC00LTI4XCIsXHJcbiAgXCJDb21tYW5kc1wiOiBbXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZmFzdFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiIXJlcGxheXNwZWVkXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcIm9wZW5cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJodHRwczovL2E5dDkuY29tL2thbnR1L2RlbW8vc3RvcmVldmFsXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiYXNzZXJ0VGV4dFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcImNvbnRlbnRcXFwiXS9kaXZbMl0vZGl2L2gyWzFdXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJJbnB1dCBib3ggdG8gZGlzcGxheSBzb21lIHJlc3VsdHNcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidmVyaWZ5VGV4dFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIi8vKltAaWQ9XFxcImNvbnRlbnRcXFwiXS9kaXZbMl0vZGl2L2gyWzFdXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJJbnB1dCBib3ggdG8gZGlzcGxheSBzb21lIHJlc3VsdHNcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidmVyaWZ5VGl0bGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJTZWxlbml1bSBJREUgc3RvcmUsIHN0b3JlRXZhbCwgRGVtbyBQYWdlXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiYXNzZXJ0VGl0bGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJTZWxlbml1bSBJREUgc3RvcmUsIHN0b3JlRXZhbCwgRGVtbyBQYWdlXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInN0b3JlRVZBTCBjYW4gcnVuIEphdmFzY3JpcHQuLi4gYW5kIHN0b3JlIHRoZSByZXN1bHQgaW4gYSB2YXJpYWJsZSAob3B0aW9uYWwpXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVFdmFsXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZG9jdW1lbnQudGl0bGUgPSBcXFwiMTIzXFxcIjtcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJhc3NlcnRUaXRsZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIjEyM1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNvbW1lbnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJVc2Ugc291cmNlU2VhcmNoIHRvIGFzc2VydCB3ZSBoYXZlIHRoZSByaWdodCBHb29nbGUgQW5hbHl0aWNzIENvZGVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzb3VyY2VTZWFyY2hcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJVQS04NjE5NTg0Mi0xXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJtYXRjaGVzXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImlmXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiJHttYXRjaGVzfSA9PSAwXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidGhyb3dFcnJvclwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkdvb2dsZSBBbmFseXRpY3MgSUQgaXMgd3JvbmchXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZW5kaWZcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiRmlyc3Qgc29tZSBiYXNpYyBjYWxjdWxhdGlvbnMgd2l0aCBTVE9SRVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiMTVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIkFBQVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIjEwXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJCQkJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVFdmFsXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwic3RvcmVkVmFyc1snQUFBJ10tc3RvcmVkVmFyc1snQkJCJ11cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIkNDQ1wiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiJHtDQ0N9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVFdmFsXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiZG9jdW1lbnQudGl0bGUgPSBcXFwiJHtDQ0N9XFxcIjtcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJhc3NlcnRUaXRsZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIjVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwic3RvcmVkVmFycyBnaXZlcyBhY2Nlc3MgdG8gVkFSSUFCTEUsICR7Li4ufSB0byBWQUxVRVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiU0VMZW5pdW0gSURlXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJBQUFcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVFdmFsXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwic3RvcmVkVmFyc1snQUFBJ10udG9VcHBlckNhc2UoKVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiQ0NDXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIke0NDQ31cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ0eXBlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaWQ9c29tZXRleHRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIiR7Q0NDfVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiR2VuZXJhdGUgVE9EQVlzIGRhdGUgaW4gaW4gWVlZWS1NTS1ERCBmb3JtYXQgXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic3RvcmVFdmFsXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwidmFyIGQ9IG5ldyBEYXRlKCk7IHZhciBtPSgoZC5nZXRNb250aCgpKzEpPDEwKT8nMCcrKGQuZ2V0TW9udGgoKSsxKTooZC5nZXRNb250aCgpKzEpOyBkLmdldEZ1bGxZZWFyKCkrXFxcIi1cXFwiK20rXFxcIi1cXFwiK2QuZ2V0RGF0ZSgpO1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwibXlkYXRlXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJUb2RheSBpcyAke215ZGF0ZX1cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiUGljayBhIHJhbmRvbSBpdGVtIGZyb20gYSBsaXN0LCB1c2VmdWwgZm9yIGRhdGEtZHJpdmVuIHRlc3RpbmdcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZUV2YWxcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJuZXcgQXJyYXkgKCdjYXQnLCdkb2cnLCdmaXNoJywnZG9nJywnPz8nLCdmcm9nJywnPycsJ2RvZycsJz8/JywnaG9yc2UnLCc/P2VsZXBoYW50JylcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIm5hbWVzXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlRXZhbFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInN0b3JlZFZhcnNbJ25hbWVzJ10ubGVuZ3RoXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJsZW5ndGhcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImFycmF5IGxlbmd0aCA9ICR7bGVuZ3RofVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlRXZhbFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIk1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpzdG9yZWRWYXJzWydsZW5ndGgnXSlcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIm51bVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlY2hvXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwibnVtPSR7bnVtfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJUaGUgbmV4dCBjb21tYW5kIHBpY2tzIHRoZSByYW5kb20gaXRlbVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlRXZhbFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInN0b3JlZFZhcnNbJ25hbWVzJ11bJHtudW19XVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwibXlyYW5kb21uYW1lXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiVG9kYXkgaXMgJHtteWRhdGV9LCBhbmQgd2UgZHJhdyBhICR7bXlyYW5kb21uYW1lfVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwib3V0cHV0XCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVjaG9cIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJUbyBpcyAke215ZGF0ZX0sIGFuZCB3ZSBkcmF3IGEgJHtteXJhbmRvbW5hbWV9XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIke291dHB1dH1cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPXNvbWV0ZXh0XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCIke291dHB1dH1cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiaWZcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJwYXJzZUZsb2F0KFxcXCIkeyFydW50aW1lfVxcXCIpID4gMTVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ0aHJvd0Vycm9yXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiUnVudGltZSB0b28gc2xvdywgdGVzdCBmYWlsZWRcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJlbHNlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZWNob1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlJ1bnRpbWUgT2ssIHRlc3QgcGFzc2VkIVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiZ3JlZW5cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiZW5kaWZcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiV2l0aCBAUE9TIHlvdSBjbGljayBvbiB0aGUgKGluIHRoaXMgY2FzZSkgM3JkIGxpbmsgd2l0aCB0aGUgc2FtZSBuYW1lLiBHcmVhdCBmb3IgbG9vcGluZyBvdmVyIGEgbGlzdCBvZiBsaW5rcyB3aXRoIHRoZSBzYW1lIG5hbWUuXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJncmVlblwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja0FuZFdhaXRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJsaW5rPVRoaXMgbGlua0BQT1M9M1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgXVxyXG59LFxyXG5EZW1vVGFiczoge1xyXG4gIFwiQ3JlYXRpb25EYXRlXCI6IFwiMjAxNy0xMC0xNVwiLFxyXG4gIFwiQ29tbWFuZHNcIjogW1xyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJvcGVuXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaHR0cHM6Ly9hOXQ5LmNvbS9rYW50dS9kZW1vL3RhYnNcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImxpbms9T3BlbiBuZXcgd2ViIHBhZ2UgaW4gbmV3IGJyb3dzZXIgdGFiXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwic2VsZWN0V2luZG93XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwidGFiPTFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJhc3NlcnRUaXRsZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIioxKiBUQUIxXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPXNvbWV0ZXh0MVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwidGhpcyBpcyB0YWIgMVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjbGlja1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImxpbms9T3BlbiB5ZXQgYW5vdGhlciB3ZWIgcGFnZSBpbiBhIG5ldyBicm93c2VyIHRhYlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInNlbGVjdFdpbmRvd1wiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInRhYj0yXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiYXNzZXJ0VGl0bGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIqMiogVEFCMlwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInR5cGVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJpZD1zb21ldGV4dDJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIkFuZCB0aGlzIGlzIHRhYiAyIVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RXaW5kb3dcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJ0YWI9MVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImFzc2VydFRpdGxlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiKjEqIFRBQjFcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ0eXBlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaWQ9c29tZXRleHQxXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJOb3cgYmFjayBpbiB0YWIgMSAtIHRlc3QgZG9uZSFcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIldlIGNhbiBhbHNvIG9wZW4gbmV3IHRhYnNcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RXaW5kb3dcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJ0YWI9b3BlblwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiaHR0cHM6Ly9hOXQ5LmNvbVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzZWxlY3RXaW5kb3dcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJ0YWI9b3BlblwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiaHR0cHM6Ly9vY3Iuc3BhY2VcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidHlwZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcImlkPWltYWdlVXJsXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJLYW50dSBUYWIgVGVzdCBkb25lXCJcclxuICAgIH1cclxuICBdXHJcbn0sXHJcbkRlbW9WaXN1YWxVSVRlc3Q6XHJcbntcclxuICBcIkNyZWF0aW9uRGF0ZVwiOiBcIjIwMTgtNi0yNlwiLFxyXG4gIFwiQ29tbWFuZHNcIjogW1xyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJvcGVuXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiaHR0cHM6Ly9hOXQ5LmNvbS9cIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJyZXNpemVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIxMDI0QDc2OFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInZpc3VhbFZlcmlmeVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInVpdGVzdF9sb2dvX3dpZGVfZHBpXzk2LnBuZ0AwLjcwXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidmlzdWFsQXNzZXJ0XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwidWl0ZXN0X2Rvd25sb2FkX2RwaV85Ni5wbmdAMC43MFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInZpc3VhbFZlcmlmeVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInVpdGVzdF9zaGFyZV9kcGlfOTYucG5nQDAuNzBcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiUmVzaXplIHRvIGlQaG9uZTYgc2NyZWVuIHNpemVcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJyZXNpemVcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIzNzVANzY4XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidmlzdWFsVmVyaWZ5XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwidWl0ZXN0X2xvZ29fbW9iaWxlX2RwaV85Ni5wbmdcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiTWlzc2luZyBtZW51IGlzIGNyaXRpY2FsLCBzbyB3ZSB1c2UgQVNTRVJUIChpbnN0ZWFkIG9mIGp1c3QgVkVSSUZZKVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInZpc3VhbEFzc2VydFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcInVpdGVzdF9oYW1idXJnZXJfZHBpXzk2LnBuZ1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImNvbW1lbnRcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCJDaGVjayB0aGF0IFNoYXJlIGJ1dHRvbnMgZG8gbm90IHNob3dcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJjb21tZW50XCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiQXQgdGhpcyBwb2ludCwgcGFnZSBpcyBzdXJlbHkgbG9hZGVkID0+IHJlZHVjZSB3YWl0IGZvciAobm9ybWFsbHkgbWlzc2luZykgaW1hZ2VcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJzdG9yZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIjJcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIiF0aW1lb3V0X3dhaXRcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwidmlzdWFsU2VhcmNoXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwidWl0ZXN0X3NoYXJlX2RwaV85Ni5wbmdAMC43MFwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiY291bnRcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiaWZcIixcclxuICAgICAgXCJUYXJnZXRcIjogXCIke2NvdW50fSA+IDBcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIkNvbW1hbmRcIjogXCJ0aHJvd0Vycm9yXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiU2hhcmUgYnV0dG9ucyBzaG91bGQgTk9UIHNob3cgb24gbW9iaWxlIHBob25lc1wiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcImVuZGlmXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiXCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIlJlc3RvcmUgZGVmYXVsdCB3YWl0IChub3QgcmVhbGx5IG5lZWRlZCBoZXJlLCBzaW5jZSBtYWNybyBzdG9wcyBub3cgYW55d2F5KVwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInN0b3JlXCIsXHJcbiAgICAgIFwiVGFyZ2V0XCI6IFwiMTBcIixcclxuICAgICAgXCJWYWx1ZVwiOiBcIiF0aW1lb3V0X3dhaXRcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJDb21tYW5kXCI6IFwiY29tbWVudFwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIkRvbmUsIGVubGFyZ2UgYnJvd3NlciBhZ2FpblwiLFxyXG4gICAgICBcIlZhbHVlXCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiQ29tbWFuZFwiOiBcInJlc2l6ZVwiLFxyXG4gICAgICBcIlRhcmdldFwiOiBcIjEwMjRANzY4XCIsXHJcbiAgICAgIFwiVmFsdWVcIjogXCJcIlxyXG4gICAgfVxyXG4gIF1cclxufVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IFtcclxuICB7XHJcbiAgICBcImNyZWF0aW9uRGF0ZVwiOiBcIjIwMTgtMDUtMTJcIixcclxuICAgIFwibmFtZVwiOiBcIkRlbW9Mb29wc0luc2lkZVRlc3RTdWl0ZVwiLFxyXG4gICAgXCJmb2xkXCI6IHRydWUsXHJcbiAgICBcIm1hY3Jvc1wiOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBcIm1hY3JvXCI6IFwiRGVtb0RyYWdEcm9wXCIsXHJcbiAgICAgICAgXCJsb29wc1wiOiAzXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBcIm1hY3JvXCI6IFwiRGVtb0lmRWxzZVwiLFxyXG4gICAgICAgIFwibG9vcHNcIjogM1xyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgXCJtYWNyb1wiOiBcIkRlbW9TdG9yZUV2YWxcIixcclxuICAgICAgICBcImxvb3BzXCI6IDNcclxuICAgICAgfVxyXG4gICAgXVxyXG4gIH0sXHJcbiAge1xyXG4gIFwiY3JlYXRpb25EYXRlXCI6IFwiMjAxOC0wNS0zMVwiLFxyXG4gIFwibmFtZVwiOiBcIkRlbW9UZXN0U3VpdGVcIixcclxuICBcImZvbGRcIjogdHJ1ZSxcclxuICBcIm1hY3Jvc1wiOiBbXHJcbiAgICB7XHJcbiAgICAgIFwibWFjcm9cIjogXCJEZW1vQXV0b2ZpbGxcIixcclxuICAgICAgXCJsb29wc1wiOiAxXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm1hY3JvXCI6IFwiRGVtb0NhbnZhc1wiLFxyXG4gICAgICBcImxvb3BzXCI6IDFcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibWFjcm9cIjogXCJEZW1vQ29tcHV0ZXJWaXNpb25cIixcclxuICAgICAgXCJsb29wc1wiOiAxXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm1hY3JvXCI6IFwiRGVtb0NzdlJlYWRXaXRoTG9vcFwiLFxyXG4gICAgICBcImxvb3BzXCI6IDNcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibWFjcm9cIjogXCJEZW1vQ3N2UmVhZFdpdGhXaGlsZVwiLFxyXG4gICAgICBcImxvb3BzXCI6IDFcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibWFjcm9cIjogXCJEZW1vQ3N2U2F2ZVwiLFxyXG4gICAgICBcImxvb3BzXCI6IDFcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibWFjcm9cIjogXCJEZW1vRGlhbG9nYm94ZXNcIixcclxuICAgICAgXCJsb29wc1wiOiAxXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm1hY3JvXCI6IFwiRGVtb0Rvd25sb2FkXCIsXHJcbiAgICAgIFwibG9vcHNcIjogMVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJtYWNyb1wiOiBcIkRlbW9EcmFnRHJvcFwiLFxyXG4gICAgICBcImxvb3BzXCI6IDFcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibWFjcm9cIjogXCJEZW1vRXh0cmFjdFwiLFxyXG4gICAgICBcImxvb3BzXCI6IDFcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibWFjcm9cIjogXCJEZW1vRnJhbWVzXCIsXHJcbiAgICAgIFwibG9vcHNcIjogMVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJtYWNyb1wiOiBcIkRlbW9UYWtlU2NyZWVuc2hvdHNcIixcclxuICAgICAgXCJsb29wc1wiOiAxXHJcbiAgICB9LFx0XHJcbiAgICB7XHJcbiAgICAgIFwibWFjcm9cIjogXCJEZW1vSWZFbHNlXCIsXHJcbiAgICAgIFwibG9vcHNcIjogMVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJtYWNyb1wiOiBcIkRlbW9JZnJhbWVcIixcclxuICAgICAgXCJsb29wc1wiOiAxXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm1hY3JvXCI6IFwiRGVtb0ltcGxpY2l0V2FpdGluZ1wiLFxyXG4gICAgICBcImxvb3BzXCI6IDFcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibWFjcm9cIjogXCJEZW1vU3RvcmVFdmFsXCIsXHJcbiAgICAgIFwibG9vcHNcIjogMVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJtYWNyb1wiOiBcIkRlbW9UYWJzXCIsXHJcbiAgICAgIFwibG9vcHNcIjogMVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJtYWNyb1wiOiBcIkRlbW9WaXN1YWxVSVRlc3RcIixcclxuICAgICAgXCJsb29wc1wiOiAxXHJcbiAgICB9XHJcbiAgXVxyXG59ICBcclxuXSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSAgZnJvbSAncmVkdXgnXHJcbmltcG9ydCB7XHJcbiAgQnV0dG9uLCBEcm9wZG93biwgTWVudSwgSW5wdXQsIEljb24sIFRhYmxlLCBDaGVja2JveCxcclxuICBGb3JtLCBTZWxlY3QsIE1vZGFsLCBtZXNzYWdlLCBSb3csIENvbCwgVGFicywgUG9wY29uZmlybVxyXG59IGZyb20gJ2FudGQnXHJcbmltcG9ydCBKU1ppcCBmcm9tICdqc3ppcCdcclxuXHJcbmltcG9ydCBFeHQgZnJvbSAnLi4vLi4vY29tbW9uL3dlYl9leHRlbnNpb24nXHJcbmltcG9ydCBsb2cgZnJvbSAnLi4vLi4vY29tbW9uL2xvZydcclxuaW1wb3J0IEZpbGVTYXZlciBmcm9tICcuLi8uLi9jb21tb24vbGliL2ZpbGVfc2F2ZXInXHJcbmltcG9ydCB7IGdldFZhcnNJbnN0YW5jZSwgY3JlYXRlVmFyc0ZpbHRlciB9IGZyb20gJy4uLy4uL2NvbW1vbi92YXJpYWJsZXMnXHJcbmltcG9ydCB7IGNuLCBzZXRJbiwgZGF0YVVSSXRvQmxvYiwgdW5pcXVlTmFtZSwgZW5zdXJlRXh0TmFtZSwgc2FuaXRpemVGaWxlTmFtZSB9IGZyb20gJy4uLy4uL2NvbW1vbi91dGlscydcclxuaW1wb3J0IHsgZ2V0Q1NWTWFuIH0gZnJvbSAnLi4vLi4vY29tbW9uL2Nzdl9tYW4nXHJcbmltcG9ydCB7IGdldFZpc2lvbk1hbiB9IGZyb20gJy4uLy4uL2NvbW1vbi92aXNpb25fbWFuJ1xyXG5pbXBvcnQgeyByZW5kZXJMb2dUeXBlIH0gZnJvbSAnLi4vLi4vY29tbW9uL21hY3JvX2xvZydcclxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi8uLi9hY3Rpb25zJ1xyXG5pbXBvcnQgKiBhcyBDIGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudCdcclxuaW1wb3J0IEVkaXRJblBsYWNlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZWRpdF9pbl9wbGFjZSdcclxuaW1wb3J0IGlwYyBmcm9tICcuLi8uLi9jb21tb24vaXBjL2lwY19jcydcclxuaW1wb3J0IHsgZWRpdG9yU2VsZWN0ZWRDb21tYW5kIH0gZnJvbSAnLi4vLi4vcmVjb21wdXRlZCdcclxuXHJcbmNsYXNzIERhc2hib2FyZEJvdHRvbSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICBhY3RpdmVUYWJGb3JMb2dTY3JlZW5zaG90OiAnTG9ncycsXHJcblxyXG4gICAgc2hvd0NTVk1vZGFsOiBmYWxzZSxcclxuICAgIGNzdlRleHQ6ICcnLFxyXG4gICAgY3N2RmlsZTogJycsXHJcblxyXG4gICAgZHJhZzoge1xyXG4gICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcclxuICAgICAgLy8gQ2hlY2sgb3V0IHRoZSBub3RlIG9uIGBzY3JlZW5YYCBpbiBgb25SZXNpemVEcmFnRW5kYCBldmVudFxyXG4gICAgICBzdGFydFk6IDAsXHJcbiAgICAgIGxhc3RIZWlnaHQ6IDIyMCxcclxuICAgICAgY3VycmVudE1pbkhlaWdodDogMjIwXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRCb3R0b21NaW5IZWlnaHQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGlzRHJhZ2dpbmcsIGxhc3RIZWlnaHQsIGN1cnJlbnRNaW5IZWlnaHQgfSA9IHRoaXMuc3RhdGUuZHJhZ1xyXG4gICAgcmV0dXJuIChpc0RyYWdnaW5nID8gY3VycmVudE1pbkhlaWdodCA6IGxhc3RIZWlnaHQpICsgJ3B4J1xyXG4gIH1cclxuXHJcbiAgb25SZXNpemVEcmFnU3RhcnQgPSAoZSkgPT4ge1xyXG4gICAgLy8gTm90ZTogRmlyZWZveCByZXF1aXJlcyB1cyB0byBzZXQgc29tZXRoaW5nIHRvIERhdGFUcmFuc2Zlciwgb3RoZXJ3aXNlIGRyYWcgYW5kIGRyYWdFbmQgd29uJ3QgYmUgdHJpZ2dlcmVkXHJcbiAgICAvLyByZWZlciB0byBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMzQzNDI3NS9maXJlZm94LW9uLWRyYWctZW5kLWlzLW5vdC1jYWxsZWQtaW4tYS1yZWFjdC1jb21wb25lbnRcclxuICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQnLCAnJylcclxuXHJcbiAgICBjb25zdCBzdHlsZSAgID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy4kZG9tKVxyXG4gICAgY29uc3QgaGVpZ2h0ICA9IHBhcnNlSW50KHN0eWxlLmhlaWdodClcclxuXHJcbiAgICB0aGlzLnNldFN0YXRlKFxyXG4gICAgICBzZXRJbihbJ2RyYWcnXSwge1xyXG4gICAgICAgIGlzRHJhZ2dpbmc6IHRydWUsXHJcbiAgICAgICAgc3RhcnRZOiBlLnNjcmVlblksXHJcbiAgICAgICAgbGFzdEhlaWdodDogaGVpZ2h0LFxyXG4gICAgICAgIGN1cnJlbnRIZWlnaHQ6IGhlaWdodFxyXG4gICAgICB9LCB0aGlzLnN0YXRlKVxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgb25SZXNpemVEcmFnRW5kID0gKGUpID0+IHtcclxuICAgIC8vIE5vdGU6IHVzZSBgc2NyZWVuWWAgaW5zdGVhZCBvZiBgY2xpZW50WWAsIGJlY2F1c2UgYGNsaWVudFlgIG9mIGRyYWdFbmQgZXZlbnRzIGluIEZpcmVmb3hcclxuICAgIC8vIGlzIGFsd2F5cyBzZXQgdG8gMCwgd2hpbGUgYHNjcmVlbllgIGlzIGx1Y2tpbHkgc3RpbGwgYXZhaWxhYmxlLiBBbmQgc2luY2Ugd2Ugb25seSBtYWtlIHVzZSBvZlxyXG4gICAgLy8gZGlmZmVyZW5jZSBvZiBYIGNvb3JkaW5hdGUuIGBzY3JlZW5ZYCBhbmQgYGNsaWVudFlgIGJvdGggd29yayBmb3IgdXMuXHJcbiAgICAvL1xyXG4gICAgLy8gcmVmZXJlbmNlOlxyXG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTA1NTIxXHJcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvZHJhZ2VuZFxyXG4gICAgY29uc3QgZGlmZiAgICA9IGUuc2NyZWVuWSAtIHRoaXMuc3RhdGUuZHJhZy5zdGFydFlcclxuICAgIGNvbnN0IGhlaWdodCAgPSB0aGlzLnN0YXRlLmRyYWcubGFzdEhlaWdodCAtIGRpZmZcclxuXHJcbiAgICB0aGlzLnNldFN0YXRlKFxyXG4gICAgICBzZXRJbihbJ2RyYWcnXSwge1xyXG4gICAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxyXG4gICAgICAgIHN0YXJ0WTogMCxcclxuICAgICAgICBsYXN0SGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgY3VycmVudE1pbkhlaWdodDogaGVpZ2h0XHJcbiAgICAgIH0pXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICBvbkZpbGVDaGFuZ2UgPSAoZSkgPT4ge1xyXG4gICAgY29uc3QgY3N2TWFuICA9IGdldENTVk1hbigpXHJcbiAgICBjb25zdCBmaWxlcyAgID0gW10uc2xpY2UuY2FsbChlLnRhcmdldC5maWxlcylcclxuICAgIGlmICghZmlsZXMgfHwgIWZpbGVzLmxlbmd0aCkgIHJldHVyblxyXG5cclxuICAgIGNvbnN0IHJlYWQgPSAoZmlsZSkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlYWRlciAgPSBuZXcgRmlsZVJlYWRlcigpXHJcblxyXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSAocmVhZGVyRXZlbnQpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHRleHQgID0gcmVhZGVyRXZlbnQudGFyZ2V0LnJlc3VsdFxyXG4gICAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgIHRleHQsXHJcbiAgICAgICAgICAgIGZpbGVOYW1lOiBmaWxlLm5hbWVcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIFByb21pc2UuYWxsKGZpbGVzLm1hcChyZWFkKSlcclxuICAgIC50aGVuKGxpc3QgPT4ge1xyXG4gICAgICBjb25zdCBuYW1lcyA9IGxpc3QubWFwKGl0ZW0gPT4gaXRlbS5maWxlTmFtZSlcclxuICAgICAgY29uc3QgcHMgICAgPSBsaXN0Lm1hcChmaWxlSXRlbSA9PiBjc3ZNYW4ud3JpdGUoc2FuaXRpemVGaWxlTmFtZShmaWxlSXRlbS5maWxlTmFtZSksIGZpbGVJdGVtLnRleHQpKVxyXG5cclxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHBzKS50aGVuKCgpID0+IHRoaXMucHJvcHMubGlzdENTVigpKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgbWVzc2FnZS5pbmZvKGAke2xpc3QubGVuZ3RofSBjc3YgZmlsZXMgaW1wb3J0ZWRgKVxyXG4gICAgICAgIHRoaXMucHJvcHMuYWRkTG9nKCdpbmZvJywgYCR7bGlzdC5sZW5ndGh9IGNzdiBmaWxlcyBpbXBvcnRlZDogJHtuYW1lcy5qb2luKCcsICcpfWApXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICB0aGlzLnByb3BzLmFkZExvZygnZXJyb3InLCBlLm1lc3NhZ2UpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcmVtb3ZlQ1NWID0gKGNzdikgPT4ge1xyXG4gICAgY29uc3QgY3N2TWFuICA9IGdldENTVk1hbigpXHJcblxyXG4gICAgY3N2TWFuLnJlbW92ZShjc3YubmFtZSlcclxuICAgIC50aGVuKCgpID0+IHRoaXMucHJvcHMubGlzdENTVigpKVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICBtZXNzYWdlLnN1Y2Nlc3MoYHN1Y2Nlc3NmdWxseSBkZWxldGVkYClcclxuICAgICAgdGhpcy5wcm9wcy5hZGRMb2coJ2luZm8nLCBgJHtjc3YubmFtZX0gZGVsZXRlZGApXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdmlld0NTViA9IChjc3YpID0+IHtcclxuICAgIHdpbmRvdy5vcGVuKGAuL2Nzdl9lZGl0b3IuaHRtbD9jc3Y9JHtjc3YubmFtZX1gLCAnJywgJ3dpZHRoPTYwMCxoZWlnaHQ9NTAwLHNjcm9sbGJhcnM9dHJ1ZScpXHJcbiAgfVxyXG5cclxuICBvbkltYWdlRmlsZUNoYW5nZSA9IChlKSA9PiB7XHJcbiAgICBjb25zdCBmaWxlcyA9IFtdLnNsaWNlLmNhbGwoZS50YXJnZXQuZmlsZXMpXHJcbiAgICBpZiAoIWZpbGVzIHx8ICFmaWxlcy5sZW5ndGgpICByZXR1cm5cclxuXHJcbiAgICBjb25zdCByZWFkID0gKGZpbGUpID0+IHtcclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBjb25zdCByZWFkZXIgID0gbmV3IEZpbGVSZWFkZXIoKVxyXG5cclxuICAgICAgICByZWFkZXIub25sb2FkID0gKHJlYWRlckV2ZW50KSA9PiB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhVXJsICAgPSByZWFkZXJFdmVudC50YXJnZXQucmVzdWx0XHJcbiAgICAgICAgICAgIGNvbnN0IG9iaiAgICAgICA9IHN0b3JlSW1hZ2UoeyBkYXRhVXJsLCBuYW1lOiBmaWxlLm5hbWUgfSlcclxuICAgICAgICAgICAgcmVzb2x2ZShvYmopXHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoeyBlcnI6IGUsIGZpbGVOYW1lOiBmaWxlLm5hbWUgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3RvcmVJbWFnZSA9ICh7IGRhdGFVcmwsIG5hbWUgfSkgPT4ge1xyXG4gICAgICByZXR1cm4gdW5pcXVlTmFtZShuYW1lLCB7XHJcbiAgICAgICAgY2hlY2s6IChuYW1lKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gZ2V0VmlzaW9uTWFuKCkuZXhpc3RzKG5hbWUpLnRoZW4ocmVzdWx0ID0+ICFyZXN1bHQpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihmaWxlTmFtZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGdldFZpc2lvbk1hbigpLndyaXRlKHNhbml0aXplRmlsZU5hbWUoZmlsZU5hbWUpLCBkYXRhVVJJdG9CbG9iKGRhdGFVcmwpKVxyXG4gICAgICAgIC50aGVuKCgpID0+IGZpbGVOYW1lKVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgbG9nLmVycm9yKGUuc3RhY2spXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgUHJvbWlzZS5hbGwoZmlsZXMubWFwKHJlYWQpKVxyXG4gICAgLnRoZW4oZmlsZU5hbWVzID0+IHtcclxuICAgICAgbWVzc2FnZS5zdWNjZXNzKGAke2ZpbGVOYW1lcy5sZW5ndGh9IGltYWdlIGZpbGVzIGltcG9ydGVkIGludG8gVmlzaW9uIHRhYmApXHJcbiAgICAgIHRoaXMucHJvcHMuYWRkTG9nKCdpbmZvJywgYCR7ZmlsZU5hbWVzLmxlbmd0aH0gaW1hZ2UgZmlsZXMgaW1wb3J0ZWQ6ICR7ZmlsZU5hbWVzLmpvaW4oJywgJyl9YClcclxuICAgICAgdGhpcy5wcm9wcy5saXN0VmlzaW9ucygpXHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICBsb2cuZXJyb3IoZS5zdGFjaylcclxuICAgICAgdGhpcy5wcm9wcy5hZGRMb2coJ2Vycm9yJywgZS5tZXNzYWdlKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHRha2VTY3JlZW5zaG90ID0gKCkgPT4ge1xyXG4gICAgaXBjLmFzaygnUEFORUxfU0VMRUNUX0FSRUFfT05fQ1VSUkVOVF9QQUdFJylcclxuICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgbWVzc2FnZS5lcnJvcihlLm1lc3NhZ2UpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdmlld1Zpc2lvbiA9IChmaWxlTmFtZSkgPT4ge1xyXG4gICAgd2luZG93Lm9wZW4oYC4vdmlzaW9uX2VkaXRvci5odG1sP3Zpc2lvbj0ke2ZpbGVOYW1lfWAsICcnLCAnd2lkdGg9NjAwLGhlaWdodD01MDAsc2Nyb2xsYmFycz10cnVlJylcclxuICB9XHJcblxyXG4gIGFkZFZpc2lvbk5hbWVUb1RhcmdldEJveCA9IChmaWxlTmFtZSkgPT4ge1xyXG4gICAgY29uc3QgeyBzZWxlY3RlZENvbW1hbmQgfSA9IHRoaXMucHJvcHNcclxuXHJcbiAgICBpZiAoIXNlbGVjdGVkQ29tbWFuZCB8fCBbJ3Zpc2lvbkZpbmQnLCAndmlzdWFsU2VhcmNoJ10uaW5kZXhPZihzZWxlY3RlZENvbW1hbmQuY21kKSA9PT0gLTEpIHtcclxuICAgICAgcmV0dXJuIG1lc3NhZ2UuZXJyb3IoYEltYWdlIG5hbWVzIGNhbiBvbmx5IGJlIGFkZGVkIHRvIHRoZSB0YXJnZXQgYm94IGlmIGEgJ3Zpc3VhbFNlYXJjaCcgY29tbWFuZCBpcyBzZWxlY3RlZGApXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wcm9wcy51cGRhdGVTZWxlY3RlZENvbW1hbmQoeyB0YXJnZXQ6IGZpbGVOYW1lIH0pXHJcbiAgfVxyXG5cclxuICBleHBvcnRBbGxWaXNpb25zID0gKCkgPT4ge1xyXG4gICAgY29uc3QgemlwID0gbmV3IEpTWmlwKClcclxuICAgIGNvbnN0IG1hbiA9IGdldFZpc2lvbk1hbigpXHJcblxyXG4gICAgbWFuLmxpc3QoKVxyXG4gICAgLnRoZW4odmlzaW9ucyA9PiB7XHJcbiAgICAgIGlmICh2aXNpb25zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBtZXNzYWdlLmVycm9yKCdObyB2aXNpb24gdG8gZXhwb3J0JylcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgcHMgPSB2aXNpb25zLm1hcChzcyA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG1hbi5yZWFkKHNzLmZpbGVOYW1lKVxyXG4gICAgICAgIC50aGVuKGJ1ZmZlciA9PiB7XHJcbiAgICAgICAgICB6aXAuZmlsZShzcy5maWxlTmFtZSwgYnVmZmVyLCB7IGJpbmFyeTogdHJ1ZSB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHMpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICB6aXAuZ2VuZXJhdGVBc3luYyh7IHR5cGU6ICdibG9iJyB9KVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChibG9iKSB7XHJcbiAgICAgICAgICBGaWxlU2F2ZXIuc2F2ZUFzKGJsb2IsICd2aXNpb24taW1hZ2VzLWV4cG9ydC56aXAnKTtcclxuICAgICAgICB9KVxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wcykge1xyXG4gICAgaWYgKG5leHRQcm9wcy5sb2dzLmxlbmd0aCAhPT0gdGhpcy5wcm9wcy5sb2dzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCAkbG9nQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dzLXNjcmVlbnNob3RzIC5hbnQtdGFicy1jb250ZW50JylcclxuICAgICAgY29uc3QgaXRlbUhlaWdodCAgPSA1MFxyXG5cclxuICAgICAgaWYgKCEkbG9nQ29udGVudCkgcmV0dXJuXHJcblxyXG4gICAgICAvLyBOb3RlOiBzZXQgc2Nyb2xsIHRvcCB0byBhIG51bWJlciBsYXJnZSBlbm91Z2ggc28gdGhhdCBpdCB3aWxsIHNjcm9sbCB0byBib3R0b21cclxuICAgICAgLy8gc2V0VGltZW91dCAxMDBtcyB0byBlbnN1cmUgY29udGVudCBoYXMgYmVlbiByZW5kZXJlZCBiZWZvcmUgc2Nyb2xsXHJcbiAgICAgIHNldFRpbWVvdXQoXHJcbiAgICAgICAgKCkgPT4geyAkbG9nQ29udGVudC5zY3JvbGxUb3AgPSBpdGVtSGVpZ2h0ICogbmV4dFByb3BzLmxvZ3MubGVuZ3RoICogMiB9LFxyXG4gICAgICAgIDEwMFxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5leHRQcm9wcy52aXNpb25zLmxlbmd0aCA+IHRoaXMucHJvcHMudmlzaW9ucy5sZW5ndGgpIHtcclxuICAgICAgY29uc3QgZGlmZiA9IG5leHRQcm9wcy52aXNpb25zLmZpbHRlcihpdGVtID0+ICF0aGlzLnByb3BzLnZpc2lvbnMuZmluZCh2ID0+IHYubmFtZSA9PT0gaXRlbS5uYW1lKSlcclxuXHJcbiAgICAgIGlmIChkaWZmLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICBkaWZmLnNvcnQoKGEsIGIpID0+IGEuY3JlYXRlVGltZSA+IGIuY3JlYXRlVGltZSlcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdG9Gb2N1cyA9IGRpZmZbMF1cclxuXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0ICRkb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0b0ZvY3VzLm5hbWUpXHJcbiAgICAgICAgaWYgKCEkZG9tKSAgcmV0dXJuXHJcbiAgICAgICAgJGRvbS5zY3JvbGxJbnRvVmlldyh7IGJsb2NrOiAnY2VudGVyJywgYmVoYXZpb3I6ICdzbW9vdGgnIH0pXHJcbiAgICAgIH0sIDEwMClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxvZ1N0eWxlIChsb2cpIHtcclxuICAgIGlmIChsb2cub3B0aW9ucyAmJiBsb2cub3B0aW9ucy5jb2xvcikge1xyXG4gICAgICByZXR1cm4geyBjb2xvcjogbG9nLm9wdGlvbnMuY29sb3IgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChsb2cub3B0aW9ucyAmJiBsb2cub3B0aW9ucy5pZ25vcmVkKSB7XHJcbiAgICAgIHJldHVybiB7IGNvbG9yOiAnb3JhbmdlJyB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXJDU1ZNb2RhbCAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8TW9kYWxcclxuICAgICAgICB0aXRsZT17YFByZXZpZXcgLSAke3RoaXMuc3RhdGUuY3N2RmlsZX1gfVxyXG4gICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUuc2hvd0NTVk1vZGFsfVxyXG4gICAgICAgIG9uQ2FuY2VsPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgc2hvd0NTVk1vZGFsOiBmYWxzZSwgY3N2VGV4dDogJycsIGNzdkZpbGU6ICcnIH0pfVxyXG4gICAgICAgIGNsYXNzTmFtZT1cImNzdi1wcmV2aWV3LW1vZGFsXCJcclxuICAgICAgICBmb290ZXI9e251bGx9XHJcbiAgICAgID5cclxuICAgICAgICA8SW5wdXQuVGV4dEFyZWFcclxuICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX1cclxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmNzdlRleHR9XHJcbiAgICAgICAgICByZWFkT25seT17dHJ1ZX1cclxuICAgICAgICAgIHJvd3M9ezEwfVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvTW9kYWw+XHJcbiAgICApXHJcbiAgfVxyXG5cclxuICByZW5kZXJDU1ZUYWJsZSAoKSB7XHJcbiAgICBjb25zdCBjc3ZNYW4gID0gZ2V0Q1NWTWFuKClcclxuICAgIGNvbnN0IGNvbHVtbnMgPSBbXHJcbiAgICAgIHsgdGl0bGU6ICdOYW1lJywgICAgICAgICAgICBkYXRhSW5kZXg6ICduYW1lJywgICAgICBrZXk6ICduYW1lJyB9LFxyXG4gICAgICB7IHRpdGxlOiAnU2l6ZScsICAgICAgICAgICAgZGF0YUluZGV4OiAnc2l6ZScsICAgICAga2V5OiAnc2l6ZScgfSxcclxuICAgICAge1xyXG4gICAgICAgIHRpdGxlOidMYXN0IE1vZGlmaWVkJyxcclxuICAgICAgICBkYXRhSW5kZXg6ICdjcmVhdGVUaW1lJyxcclxuICAgICAgICBrZXk6ICdjcmVhdGVUaW1lJyxcclxuICAgICAgICByZW5kZXI6IChkKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBwYWQgPSBuID0+IG4gPj0gMTAgPyAoJycgKyBuKSA6ICgnMCcgKyBuKVxyXG4gICAgICAgICAgcmV0dXJuIGAke2QuZ2V0RnVsbFllYXIoKX0vJHtwYWQoZC5nZXRNb250aCgpICsgMSl9LyR7cGFkKGQuZ2V0RGF0ZSgpKX0gJHtwYWQoZC5nZXRIb3VycygpKX06JHtwYWQoZC5nZXRNaW51dGVzKCkpfToke3BhZChkLmdldFNlY29uZHMoKSl9YFxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHRpdGxlOiAnQWN0aW9uJyxcclxuICAgICAgICBrZXk6ICdvcHMnLFxyXG4gICAgICAgIHdpZHRoOiAxMDAsXHJcbiAgICAgICAgcmVuZGVyOiAodGV4dCwgY3N2LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgdHlwZT1cImRlZmF1bHRcIlxyXG4gICAgICAgICAgICAgICAgc2hhcGU9XCJjaXJjbGVcIlxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHsgdGhpcy52aWV3Q1NWKGNzdikgfX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwiZXllLW9cIiAvPlxyXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgICA8YSBocmVmPXtjc3YudXJsfSBkb3dubG9hZD17Y3N2Lm5hbWV9PlxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgIHNoYXBlPVwiY2lyY2xlXCJcclxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHsgZS5zdG9wUHJvcGFnYXRpb24oKSB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwiZG93bmxvYWRcIiAvPlxyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgPC9hPlxyXG5cclxuICAgICAgICAgICAgICA8UG9wY29uZmlybVxyXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJTdXJlIHRvIGRlbGV0ZT9cIlxyXG4gICAgICAgICAgICAgICAgb2tUZXh0PVwiRGVsZXRlXCJcclxuICAgICAgICAgICAgICAgIG9uQ29uZmlybT17KCkgPT4geyB0aGlzLnJlbW92ZUNTVihjc3YpIH19XHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiZGFuZ2VyXCJcclxuICAgICAgICAgICAgICAgICAgc2hhcGU9XCJjaXJjbGVcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwiY2xvc2VcIiAvPlxyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgPC9Qb3Bjb25maXJtPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIF1cclxuXHJcbiAgICBjb25zdCB0YWJsZUNvbmZpZyA9IHtcclxuICAgICAgY29sdW1ucyxcclxuICAgICAgZGF0YVNvdXJjZTogdGhpcy5wcm9wcy5jc3ZzLFxyXG4gICAgICBwYWdpbmF0aW9uOiBmYWxzZSxcclxuICAgICAgYm9yZGVyZWQ6IHRydWUsXHJcbiAgICAgIHNpemU6ICdtaWRkbGUnLFxyXG4gICAgICByb3dLZXk6ICdmaWxlTmFtZScsXHJcbiAgICAgIG9uUm93Q2xpY2s6IChyZWNvcmQsIGluZGV4LCBlKSA9PiB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZ1xyXG4gICAgICB9LFxyXG4gICAgICByb3dDbGFzc05hbWU6IChyZWNvcmQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuICcnXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gPFRhYmxlIHsuLi50YWJsZUNvbmZpZ30gLz5cclxuICB9XHJcblxyXG4gIHJlbmRlclZpc2lvblRhYmxlICgpIHtcclxuICAgIGNvbnN0IGNvbHVtbnMgPSBbXHJcbiAgICAgIHtcclxuICAgICAgICB0aXRsZTogJ0ltYWdlJyxcclxuICAgICAgICBkYXRhSW5kZXg6ICd1cmwnLFxyXG4gICAgICAgIGtleTogJ3VybCcsXHJcbiAgICAgICAgd2lkdGg6IDExNixcclxuICAgICAgICByZW5kZXI6ICh1cmwpID0+IHtcclxuICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ2aXNpb24taW1hZ2VcIlxyXG4gICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHt1cmx9KWAsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICdjZW50ZXInXHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0aXRsZTogJ05hbWUnLFxyXG4gICAgICAgIGRhdGFJbmRleDogJ25hbWUnLFxyXG4gICAgICAgIGtleTogJ25hbWUnLFxyXG4gICAgICAgIHJlbmRlcjogKG5hbWUsIHZpc2lvbikgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aXNpb24tbmFtZS0xXCIgaWQ9e25hbWV9PlxyXG4gICAgICAgICAgICAgIDxFZGl0SW5QbGFjZVxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e3Zpc2lvbi5uYW1lfVxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e25hbWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBnZXRWaXNpb25NYW4oKS5yZW5hbWUodmlzaW9uLm5hbWUsIGVuc3VyZUV4dE5hbWUoJy5wbmcnLCBuYW1lKSlcclxuICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3VjY2VzcygnU3VjY2Vzc2Z1bGx5IHJlbmFtZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMubGlzdFZpc2lvbnMoKVxyXG4gICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKGUuc3RhY2spXHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgY2hlY2tWYWx1ZT17bmFtZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRWaXNpb25NYW4oKS5leGlzdHMobmFtZSlcclxuICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yKGAnJHtuYW1lfScgYWxyZWFkc3kgZXhpc3RzYClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFyZXN1bHRcclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICBnZXRTZWxlY3Rpb249eyhuYW1lLCAkaW5wdXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgcmVnICAgICAgID0gLyg/Ol9kcGlfXFxkKyk/XFwucG5nJC9pXHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCAgICA9IHJlZy5leGVjKG5hbWUpXHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZEluZGV4ICA9IHJlc3VsdC5pbmRleFxyXG5cclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiAgICBlbmRJbmRleFxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHRpdGxlOiAnQWN0aW9uJyxcclxuICAgICAgICBrZXk6ICdvcHMnLFxyXG4gICAgICAgIHdpZHRoOiAxMDAsXHJcbiAgICAgICAgcmVuZGVyOiAodGV4dCwgdmlzaW9uLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aXNpb24tYWN0aW9uc1wiPlxyXG4gICAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICB0eXBlPVwiZGVmYXVsdFwiXHJcbiAgICAgICAgICAgICAgICBzaGFwZT1cImNpcmNsZVwiXHJcbiAgICAgICAgICAgICAgICB0aXRsZT1cIkFkZCBuYW1lIHRvIHRhcmdldCBib3hcIlxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5hZGRWaXNpb25OYW1lVG9UYXJnZXRCb3godmlzaW9uLm5hbWUpfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJwbHVzXCIgLz5cclxuICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuXHJcbiAgICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcclxuICAgICAgICAgICAgICAgIHR5cGU9XCJkZWZhdWx0XCJcclxuICAgICAgICAgICAgICAgIHNoYXBlPVwiY2lyY2xlXCJcclxuICAgICAgICAgICAgICAgIHRpdGxlPVwiVmlldyBpbWFnZVwiXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnZpZXdWaXNpb24odmlzaW9uLm5hbWUpfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJleWUtb1wiIC8+XHJcbiAgICAgICAgICAgICAgPC9CdXR0b24+XHJcblxyXG4gICAgICAgICAgICAgIDxQb3Bjb25maXJtXHJcbiAgICAgICAgICAgICAgICB0aXRsZT1cIlN1cmUgdG8gZGVsZXRlP1wiXHJcbiAgICAgICAgICAgICAgICBva1RleHQ9XCJEZWxldGVcIlxyXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJEZWxldGUgaW1hZ2VcIlxyXG4gICAgICAgICAgICAgICAgb25Db25maXJtPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGdldFZpc2lvbk1hbigpLnJlbW92ZSh2aXNpb24ubmFtZSlcclxuICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3VjY2VzcygnU3VjY2Vzc2Z1bGx5IGRlbGV0ZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMubGlzdFZpc2lvbnMoKVxyXG4gICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKGUuc3RhY2spXHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcclxuICAgICAgICAgICAgICAgICAgdHlwZT1cImRhbmdlclwiXHJcbiAgICAgICAgICAgICAgICAgIHNoYXBlPVwiY2lyY2xlXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cImNsb3NlXCIgLz5cclxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgIDwvUG9wY29uZmlybT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBdXHJcblxyXG4gICAgY29uc3QgdGFibGVDb25maWcgPSB7XHJcbiAgICAgIGNvbHVtbnMsXHJcbiAgICAgIGRhdGFTb3VyY2U6IHRoaXMucHJvcHMudmlzaW9ucyxcclxuICAgICAgcGFnaW5hdGlvbjogZmFsc2UsXHJcbiAgICAgIGJvcmRlcmVkOiB0cnVlLFxyXG4gICAgICBzaXplOiAnbWlkZGxlJyxcclxuICAgICAgcm93S2V5OiAnZmlsZU5hbWUnLFxyXG4gICAgICBvblJvd0NsaWNrOiAocmVjb3JkLCBpbmRleCwgZSkgPT4ge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmdcclxuICAgICAgfSxcclxuICAgICAgcm93Q2xhc3NOYW1lOiAocmVjb3JkLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIHJldHVybiAnJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIDxUYWJsZSB7Li4udGFibGVDb25maWd9IC8+XHJcbiAgfVxyXG5cclxuICByZW5kZXJWYXJpYWJsZVRhYmxlICgpIHtcclxuICAgIGNvbnN0IGNvbHVtbnMgPSBbXHJcbiAgICAgIHsgdGl0bGU6ICdOYW1lJywgICAgZGF0YUluZGV4OiAna2V5JywgICAgICBrZXk6ICdrZXknLCAgICB3aWR0aDogJzQwJScgfSxcclxuICAgICAgeyB0aXRsZTogJ1ZhbHVlJywgICBkYXRhSW5kZXg6ICd2YWx1ZScsICAgIGtleTogJ3ZhbHVlJywgIHJlbmRlcjogKHZhbCkgPT4gSlNPTi5zdHJpbmdpZnkodmFsKSB8fCAndW5kZWZpbmVkJyB9XHJcbiAgICBdXHJcbiAgICBjb25zdCB7IHNob3dDb21tb25JbnRlcm5hbFZhcmlhYmxlcywgc2hvd0FkdmFuY2VkSW50ZXJuYWxWYXJpYWJsZXMgfSA9IHRoaXMucHJvcHMuY29uZmlnXHJcbiAgICBjb25zdCBmaWx0ZXIgPSBjcmVhdGVWYXJzRmlsdGVyKHtcclxuICAgICAgd2l0aENvbW1vbkludGVybmFsOiAgIHNob3dDb21tb25JbnRlcm5hbFZhcmlhYmxlcyxcclxuICAgICAgd2l0aEFkdmFuY2VkSW50ZXJuYWw6IHNob3dBZHZhbmNlZEludGVybmFsVmFyaWFibGVzXHJcbiAgICB9KVxyXG4gICAgY29uc3QgdmFyaWFibGVzID0gdGhpcy5wcm9wcy52YXJpYWJsZXMuZmlsdGVyKHZhcmlhYmxlID0+IGZpbHRlcih2YXJpYWJsZS5rZXkpKVxyXG5cclxuICAgIGNvbnN0IHRhYmxlQ29uZmlnID0ge1xyXG4gICAgICBjb2x1bW5zLFxyXG4gICAgICBkYXRhU291cmNlOiB2YXJpYWJsZXMsXHJcbiAgICAgIHBhZ2luYXRpb246IGZhbHNlLFxyXG4gICAgICBib3JkZXJlZDogdHJ1ZSxcclxuICAgICAgc2l6ZTogJ21pZGRsZScsXHJcbiAgICAgIHJvd0tleTogJ2tleScsXHJcbiAgICAgIG9uUm93Q2xpY2s6IChyZWNvcmQsIGluZGV4LCBlKSA9PiB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZ1xyXG4gICAgICB9LFxyXG4gICAgICByb3dDbGFzc05hbWU6IChyZWNvcmQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdmFycyA9IGdldFZhcnNJbnN0YW5jZSgpXHJcbiAgICAgICAgaWYgKCF2YXJzKSAgcmV0dXJuICcnXHJcbiAgICAgICAgcmV0dXJuIHZhcnMuaXNSZWFkT25seShyZWNvcmQua2V5KSA/ICdyZWFkLW9ubHknIDogJydcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiA8VGFibGUgey4uLnRhYmxlQ29uZmlnfSAvPlxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpIHtcclxuICAgIGNvbnN0IHsgYWN0aXZlVGFiRm9yTG9nU2NyZWVuc2hvdCB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgZmlsdGVycyA9IHtcclxuICAgICAgJ0FsbCc6ICAgICgpID0+IHRydWUsXHJcbiAgICAgICdFY2hvJzogICAoaXRlbSkgPT4gaXRlbS50eXBlID09PSAnZWNobycgfHwgaXRlbS50eXBlID09PSAnZXJyb3InIHx8IGl0ZW0udHlwZSA9PT0gJ3dhcm5pbmcnIHx8IGl0ZW0udHlwZSA9PT0gJ3N0YXR1cycsXHJcbiAgICAgIC8vICdJbmZvJzogICAoaXRlbSkgPT4gaXRlbS50eXBlID09PSAnaW5mbycgfHwgaXRlbS50eXBlID09PSAnZWNobycgfHwgaXRlbS50eXBlID09PSAncmVmbGVjdCcgfHwgaXRlbS50eXBlID09PSAnc3RhdHVzJyxcclxuICAgICAgJ0Vycm9yJzogIChpdGVtKSA9PiBpdGVtLnR5cGUgPT09ICdlcnJvcicsXHJcbiAgICAgICdOb25lJzogICAoKSA9PiBmYWxzZVxyXG4gICAgfVxyXG4gICAgY29uc3QgbG9nRmlsdGVyID0gdGhpcy5wcm9wcy5jb25maWcubG9nRmlsdGVyIHx8ICdBbGwnXHJcbiAgICBjb25zdCBsb2dzICAgICAgPSB0aGlzLnByb3BzLmxvZ3MuZmlsdGVyKGZpbHRlcnNbbG9nRmlsdGVyXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdlxyXG4gICAgICAgIGNsYXNzTmFtZT1cImxvZ3Mtc2NyZWVuc2hvdHNcIlxyXG4gICAgICAgIHJlZj17ZWwgPT4geyB0aGlzLiRkb20gPSBlbCB9fVxyXG4gICAgICAgIHN0eWxlPXt7IGhlaWdodDogdGhpcy5nZXRCb3R0b21NaW5IZWlnaHQoKSB9fVxyXG4gICAgICA+XHJcbiAgICAgICAge3RoaXMucmVuZGVyQ1NWTW9kYWwoKX1cclxuXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY2xhc3NOYW1lPXtjbigncmVzaXplLWhhbmRsZXInLCB7IGZvY3VzZWQ6IHRoaXMuc3RhdGUuZHJhZy5pc0RyYWdnaW5nIH0pfVxyXG4gICAgICAgICAgZHJhZ2dhYmxlPVwidHJ1ZVwiXHJcbiAgICAgICAgICBvbkRyYWdTdGFydD17dGhpcy5vblJlc2l6ZURyYWdTdGFydH1cclxuICAgICAgICAgIG9uRHJhZ0VuZD17dGhpcy5vblJlc2l6ZURyYWdFbmR9XHJcbiAgICAgICAgICBvbk1vdXNlRG93bj17KCkgPT4gdGhpcy5zZXRTdGF0ZShzZXRJbihbJ2RyYWcnLCAnaXNEcmFnZ2luZyddLCB0cnVlLCB0aGlzLnN0YXRlKSl9XHJcbiAgICAgICAgLz5cclxuXHJcbiAgICAgICAgPFRhYnNcclxuICAgICAgICAgIHR5cGU9XCJjYXJkXCJcclxuICAgICAgICAgIG9uQ2hhbmdlPXtrZXkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlVGFiRm9yTG9nU2NyZWVuc2hvdDoga2V5IH0pXHJcblxyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnU2NyZWVuc2hvdHMnKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5saXN0U2NyZWVuc2hvdHMoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxUYWJzLlRhYlBhbmUgdGFiPVwiTG9nc1wiIGtleT1cIkxvZ3NcIj5cclxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxvZy1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAge2xvZ3MubWFwKChsb2csIGkpID0+IChcclxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9e2xvZy50eXBlfSBrZXk9e2xvZy5pZH0gc3R5bGU9e3RoaXMubG9nU3R5bGUobG9nKX0+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImxvZy10eXBlXCI+e3JlbmRlckxvZ1R5cGUobG9nKX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDxwcmUgY2xhc3NOYW1lPVwibG9nLWRldGFpbFwiPntsb2cudGV4dH08L3ByZT5cclxuICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L1RhYnMuVGFiUGFuZT5cclxuICAgICAgICAgIDxUYWJzLlRhYlBhbmUgdGFiPVwiVmFyaWFibGVzXCIga2V5PVwiVmFyaWFibGVzXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmFyaWFibGUtY29udGVudFwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmFyaWFibGUtb3B0aW9uc1wiPlxyXG4gICAgICAgICAgICAgICAgPENoZWNrYm94XHJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMucHJvcHMudXBkYXRlQ29uZmlnKHsgc2hvd0NvbW1vbkludGVybmFsVmFyaWFibGVzOiBlLnRhcmdldC5jaGVja2VkIH0pfVxyXG4gICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLmNvbmZpZy5zaG93Q29tbW9uSW50ZXJuYWxWYXJpYWJsZXN9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIFNob3cgbW9zdCBjb21tb24gPGEgaHJlZj1cImh0dHBzOi8vYTl0OS5jb20veC9pZGVoZWxwP2hlbHA9aW50ZXJuYWx2YXJzXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aW50ZXJuYWwgdmFyaWFibGVzPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9DaGVja2JveD5cclxuICAgICAgICAgICAgICAgIDxDaGVja2JveFxyXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB0aGlzLnByb3BzLnVwZGF0ZUNvbmZpZyh7IHNob3dBZHZhbmNlZEludGVybmFsVmFyaWFibGVzOiBlLnRhcmdldC5jaGVja2VkIH0pfVxyXG4gICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLmNvbmZpZy5zaG93QWR2YW5jZWRJbnRlcm5hbFZhcmlhYmxlc31cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgU2hvdyBhZHZhbmNlZCA8YSBocmVmPVwiaHR0cHM6Ly9hOXQ5LmNvbS94L2lkZWhlbHA/aGVscD1pbnRlcm5hbHZhcnNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5pbnRlcm5hbCB2YXJpYWJsZXM8L2E+XHJcbiAgICAgICAgICAgICAgICA8L0NoZWNrYm94PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIHt0aGlzLnJlbmRlclZhcmlhYmxlVGFibGUoKX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L1RhYnMuVGFiUGFuZT5cclxuICAgICAgICAgIDxUYWJzLlRhYlBhbmUgdGFiPVwiU2NyZWVuc2hvdHNcIiBrZXk9XCJTY3JlZW5zaG90c1wiPlxyXG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwic2NyZWVuc2hvdC1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAge3RoaXMucHJvcHMuc2NyZWVuc2hvdHMubWFwKChzcywgaSkgPT4gKFxyXG4gICAgICAgICAgICAgICAgPGxpIGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRpbWVzdGFtcFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIHtzcy5jcmVhdGVUaW1lICYmIHNzLmNyZWF0ZVRpbWUudG9Mb2NhbGVTdHJpbmcoKX0gLSA8c3BhbiBjbGFzc05hbWU9XCJmaWxlbmFtZVwiPntkZWNvZGVVUklDb21wb25lbnQoc3MubmFtZSl9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDxhXHJcbiAgICAgICAgICAgICAgICAgICAgZG93bmxvYWQ9e2RlY29kZVVSSUNvbXBvbmVudChzcy5uYW1lKX1cclxuICAgICAgICAgICAgICAgICAgICBocmVmPXtFeHQuaXNGaXJlZm94KCkgPyAnIycgOiBzcy51cmx9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIUV4dC5pc0ZpcmVmb3goKSkgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBmb3IgRmlyZWZveCwgYHNzLnVybGAgaXMgYSBkYXRhIHVybCBpbnN0ZWFkIG9mIGEgYGZpbGVzeXN0ZW06YCB1cmwgKGFzIGluIENocm9tZSlcclxuICAgICAgICAgICAgICAgICAgICAgIEZpbGVTYXZlci5zYXZlQXMoZGF0YVVSSXRvQmxvYihzcy51cmwpLCBzcy5uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c3MudXJsfSAvPlxyXG4gICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgPC9UYWJzLlRhYlBhbmU+XHJcbiAgICAgICAgICA8VGFicy5UYWJQYW5lIHRhYj1cIkNTVlwiIGtleT1cIkNTVlwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNzdi1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAge3RoaXMucmVuZGVyQ1NWVGFibGUoKX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L1RhYnMuVGFiUGFuZT5cclxuICAgICAgICAgIDxUYWJzLlRhYlBhbmUgdGFiPVwi8J+RgSBWaXN1YWxcIiBrZXk9XCJWaXNpb25cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aXNpb24tY29udGVudFwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlzaW9uLXRvcC1hY3Rpb25zXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW4tYWN0aW9uc1wiPlxyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudGFrZVNjcmVlbnNob3R9XHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICBUYWtlIFNjcmVlbnNob3RcclxuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibG9hZC1pbWFnZS1idXR0b24gYW50LWJ0biBhbnQtYnRuLXByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzZWxlY3RfaW1hZ2VfZmlsZXNcIj5Mb2FkIEltYWdlPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlXHJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZmlsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQ9XCJpbWFnZS8qXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGlkPVwic2VsZWN0X2ltYWdlX2ZpbGVzXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uSW1hZ2VGaWxlQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgcmVmPXtyZWYgPT4geyB0aGlzLmltYWdlRmlsZUlucHV0ID0gcmVmIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e2Rpc3BsYXk6ICdub25lJ319XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5leHBvcnRBbGxWaXNpb25zfVxyXG4gICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgRXhwb3J0IEFsbFxyXG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibW9yZS1pbmZvXCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vYTl0OS5jb20veC9pZGVoZWxwP2hlbHA9dmlzdWFsXCI+TW9yZSBJbmZvPC9hPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIHt0aGlzLnJlbmRlclZpc2lvblRhYmxlKCl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9UYWJzLlRhYlBhbmU+XHJcbiAgICAgICAgPC9UYWJzPlxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxzLXRvb2xib3hcIj5cclxuICAgICAgICAgIHthY3RpdmVUYWJGb3JMb2dTY3JlZW5zaG90ID09PSAnTG9ncycgPyAoXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuY29uZmlnLmxvZ0ZpbHRlcn1cclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy51cGRhdGVDb25maWcoeyBsb2dGaWx0ZXI6IHZhbHVlIH0pXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICc3MHB4JywgbWFyZ2luUmlnaHQ6ICcxMHB4JyB9fVxyXG4gICAgICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0Lk9wdGlvbiB2YWx1ZT0nQWxsJz5BbGw8L1NlbGVjdC5PcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0Lk9wdGlvbiB2YWx1ZT0nRWNobyc+RWNobzwvU2VsZWN0Lk9wdGlvbj5cclxuICAgICAgICAgICAgICAgIDxTZWxlY3QuT3B0aW9uIHZhbHVlPSdFcnJvcic+RXJyb3I8L1NlbGVjdC5PcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0Lk9wdGlvbiB2YWx1ZT0nTm9uZSc+Tm8gbG9nPC9TZWxlY3QuT3B0aW9uPlxyXG4gICAgICAgICAgICAgIDwvU2VsZWN0PlxyXG5cclxuICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5jbGVhckxvZ3N9XHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgQ2xlYXJcclxuICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICApIDogbnVsbH1cclxuXHJcbiAgICAgICAgICB7YWN0aXZlVGFiRm9yTG9nU2NyZWVuc2hvdCA9PT0gJ1NjcmVlbnNob3RzJyA/IChcclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5jbGVhclNjcmVlbnNob3RzfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgQ2xlYXJcclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICApIDogbnVsbH1cclxuXHJcbiAgICAgICAgICB7YWN0aXZlVGFiRm9yTG9nU2NyZWVuc2hvdCA9PT0gJ0NTVicgPyAoXHJcbiAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuZmlsZUlucHV0LmNsaWNrKCl9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBJbXBvcnQgQ1NWXHJcbiAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICBtdWx0aXBsZVxyXG4gICAgICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxyXG4gICAgICAgICAgICAgICAgYWNjZXB0PVwiLmNzdlwiXHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkZpbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiAnbm9uZScgfX1cclxuICAgICAgICAgICAgICAgIHJlZj17cmVmID0+IHsgdGhpcy5maWxlSW5wdXQgPSByZWYgfX1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICkgOiBudWxsfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXHJcbiAgc3RhdGUgPT4gKHtcclxuICAgIGhhc1NlbGVjdGVkQ29tbWFuZDogc3RhdGUuZWRpdG9yLmVkaXRpbmcgJiYgc3RhdGUuZWRpdG9yLmVkaXRpbmcubWV0YSAmJiBzdGF0ZS5lZGl0b3IuZWRpdGluZy5tZXRhLnNlbGVjdGVkSW5kZXggIT09IC0xLFxyXG4gICAgc2VsZWN0ZWRDb21tYW5kOiBlZGl0b3JTZWxlY3RlZENvbW1hbmQoc3RhdGUpLFxyXG4gICAgc3RhdHVzOiBzdGF0ZS5zdGF0dXMsXHJcbiAgICBsb2dzOiBzdGF0ZS5sb2dzLFxyXG4gICAgc2NyZWVuc2hvdHM6IHN0YXRlLnNjcmVlbnNob3RzLFxyXG4gICAgdmFyaWFibGVzOiBzdGF0ZS52YXJpYWJsZXMsXHJcbiAgICBjc3ZzOiBzdGF0ZS5jc3ZzLFxyXG4gICAgdmlzaW9uczogc3RhdGUudmlzaW9ucyxcclxuICAgIGNvbmZpZzogc3RhdGUuY29uZmlnXHJcbiAgfSksXHJcbiAgZGlzcGF0Y2ggPT4gYmluZEFjdGlvbkNyZWF0b3JzKHsuLi5hY3Rpb25zfSwgZGlzcGF0Y2gpXHJcbikoRGFzaGJvYXJkQm90dG9tKVxyXG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2Rhc2hib2FyZC5zY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHt9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZGFzaGJvYXJkLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9kYXNoYm9hcmQuc2Nzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9ICBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHtcclxuICBCdXR0b24sIERyb3Bkb3duLCBNZW51LCBJbnB1dCwgSWNvbiwgVGFibGUsIENoZWNrYm94LFxyXG4gIEZvcm0sIFNlbGVjdCwgTW9kYWwsIG1lc3NhZ2UsIFJvdywgQ29sLCBUYWJzXHJcbn0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IFZpcnR1YWxMaXN0IGZyb20gJ3JlYWN0LXZpcnR1YWwtbGlzdCdcclxuaW1wb3J0IHsgVW5Db250cm9sbGVkIGFzIENvZGVNaXJyb3IgfSBmcm9tICdyZWFjdC1jb2RlbWlycm9yMidcclxuaW1wb3J0ICdjb2RlbWlycm9yL2xpYi9jb2RlbWlycm9yJ1xyXG5pbXBvcnQgJ2NvZGVtaXJyb3IvbW9kZS9qYXZhc2NyaXB0L2phdmFzY3JpcHQnXHJcbmltcG9ydCAnY29kZW1pcnJvci9hZGRvbi9lZGl0L21hdGNoYnJhY2tldHMnXHJcbmltcG9ydCAnY29kZW1pcnJvci9hZGRvbi9lZGl0L2Nsb3NlYnJhY2tldHMnXHJcbmltcG9ydCAnY29kZW1pcnJvci9saWIvY29kZW1pcnJvci5jc3MnXHJcblxyXG5pbXBvcnQgeyBzZXRJbiB9IGZyb20gJy4uLy4uL2NvbW1vbi91dGlscydcclxuaW1wb3J0IHsgZnJvbUpTT05TdHJpbmcsIHRvSlNPTlN0cmluZyB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb252ZXJ0X3V0aWxzJ1xyXG5pbXBvcnQgeyBnZXRWaXNpb25NYW4gfSBmcm9tICcuLi8uLi9jb21tb24vdmlzaW9uX21hbidcclxuaW1wb3J0IGluc3BlY3RvciBmcm9tICcuLi8uLi9jb21tb24vaW5zcGVjdG9yJ1xyXG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICcuLi8uLi9jb21tb24vcGxheWVyJ1xyXG5pbXBvcnQgY3NJcGMgZnJvbSAnLi4vLi4vY29tbW9uL2lwYy9pcGNfY3MnXHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vLi4vYWN0aW9ucydcclxuaW1wb3J0ICogYXMgQyBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnQnXHJcbmltcG9ydCBsb2cgZnJvbSAnLi4vLi4vY29tbW9uL2xvZydcclxuaW1wb3J0IHsgZWRpdG9yU2VsZWN0ZWRDb21tYW5kIH0gZnJvbSAnLi4vLi4vcmVjb21wdXRlZCdcclxuXHJcbmNvbnN0IGF2YWlsYWJsZUNvbW1hbmRzID0gW1xyXG4gICdvcGVuJyxcclxuICAnY2xpY2snLFxyXG4gICdjbGlja0FuZFdhaXQnLFxyXG4gICdzZWxlY3QnLFxyXG4gICdzZWxlY3RBbmRXYWl0JyxcclxuICAndHlwZScsXHJcbiAgJ3BhdXNlJyxcclxuICAnd2FpdEZvclBhZ2VUb0xvYWQnLFxyXG4gICdzZWxlY3RGcmFtZScsXHJcbiAgJ2Fzc2VydEFsZXJ0JyxcclxuICAnYXNzZXJ0Q29uZmlybWF0aW9uJyxcclxuICAnYXNzZXJ0UHJvbXB0JyxcclxuICAnYW5zd2VyT25OZXh0UHJvbXB0JyxcclxuICAnc3RvcmUnLFxyXG4gICdzdG9yZVRleHQnLFxyXG4gICdzdG9yZVRpdGxlJyxcclxuICAnc3RvcmVBdHRyaWJ1dGUnLFxyXG4gICdhc3NlcnRUZXh0JyxcclxuICAnYXNzZXJ0VGl0bGUnLFxyXG4gICdjbGlja0F0JyxcclxuICAnZWNobycsXHJcbiAgJ21vdXNlT3ZlcicsXHJcbiAgJ3N0b3JlRXZhbCcsXHJcbiAgJ3ZlcmlmeVRleHQnLFxyXG4gICd2ZXJpZnlUaXRsZScsXHJcbiAgJ3NlbmRLZXlzJyxcclxuICAnZHJhZ0FuZERyb3BUb09iamVjdCcsXHJcbiAgJ3NlbGVjdFdpbmRvdycsXHJcbiAgJ2NhcHR1cmVTY3JlZW5zaG90JyxcclxuICAncmVmcmVzaCcsXHJcbiAgJ3ZlcmlmeUVsZW1lbnRQcmVzZW50JyxcclxuICAnYXNzZXJ0RWxlbWVudFByZXNlbnQnLFxyXG4gICdkZWxldGVBbGxDb29raWVzJyxcclxuICAnbGFiZWwnLFxyXG4gICdnb3RvTGFiZWwnLFxyXG4gICdnb3RvSWYnLFxyXG4gICd3aGlsZScsXHJcbiAgJ2VuZFdoaWxlJyxcclxuICAnY3N2UmVhZCcsXHJcbiAgJ2NzdlNhdmUnLFxyXG4gICdpZicsXHJcbiAgJ2Vsc2UnLFxyXG4gICdlbmRpZicsXHJcbiAgJ3N0b3JlVmFsdWUnLFxyXG4gICdhc3NlcnRWYWx1ZScsXHJcbiAgJ3ZlcmlmeVZhbHVlJyxcclxuICAnc3RvcmVDaGVja2VkJyxcclxuICAnYXNzZXJ0Q2hlY2tlZCcsXHJcbiAgJ3ZlcmlmeUNoZWNrZWQnLFxyXG4gICdjYXB0dXJlRW50aXJlUGFnZVNjcmVlbnNob3QnLFxyXG4gICdvbkRvd25sb2FkJyxcclxuICAvLyAnYXNzZXJ0RXJyb3InLFxyXG4gIC8vICd2ZXJpZnlFcnJvcicsXHJcbiAgJ3Rocm93RXJyb3InLFxyXG4gICdjb21tZW50JyxcclxuICAnd2FpdEZvclZpc2libGUnLFxyXG4gICdvbkVycm9yJyxcclxuICAnc291cmNlU2VhcmNoJyxcclxuICAnc291cmNlRXh0cmFjdCcsXHJcbiAgJ3N0b3JlSW1hZ2UnLFxyXG4gICdsb2NhbFN0b3JhZ2VFeHBvcnQnLFxyXG4gIC8vICd2aXNpb25GaW5kJyxcclxuICAndmlzaW9uTGltaXRTZWFyY2hBcmVhJyxcclxuICAndmlzdWFsU2VhcmNoJyxcclxuICAndmlzdWFsVmVyaWZ5JyxcclxuICAndmlzdWFsQXNzZXJ0JyxcclxuICAnZWRpdENvbnRlbnQnLFxyXG4gICdicmluZ0Jyb3dzZXJUb0ZvcmVncm91bmQnLFxyXG4gICdyZXNpemUnXHJcbl1cclxuXHJcbmF2YWlsYWJsZUNvbW1hbmRzLnNvcnQoKVxyXG5cclxuY29uc3QgbmV3Q29tbWFuZCA9IHtcclxuICBjbWQ6ICcnLFxyXG4gIHRhcmdldDogJycsXHJcbiAgdmFsdWU6ICcnXHJcbn1cclxuXHJcbmNvbnN0IGRlZmF1bHREYXRhU291cmNlID0gW25ld0NvbW1hbmRdXHJcblxyXG5jbGFzcyBEYXNoYm9hcmRFZGl0b3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIHN0YXRlID0ge1xyXG4gICAgY3Vyc29yOiBudWxsLFxyXG5cclxuICAgIGNvbnRleHRNZW51OiB7XHJcbiAgICAgIHg6IG51bGwsXHJcbiAgICAgIHk6IG51bGwsXHJcbiAgICAgIGlzU2hvd246IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuICAgIHZpc2lvbkZpbmRQcmV2aWV3OiB7XHJcbiAgICAgIHZpc2libGU6IGZhbHNlLFxyXG4gICAgICB1cmw6IG51bGwsXHJcbiAgICAgIHRpbWVyOiBudWxsLFxyXG4gICAgICBsZWZ0OiAtOTk5OSxcclxuICAgICAgdG9wOiAtOTk5OVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzZXRTb3VyY2VDb2RlQ3Vyc29yID0gKHJlc2V0Q3Vyc29yKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi4ocmVzZXRDdXJzb3IgPyB7IGN1cnNvcjogeyBsaW5lOiAwLCBjaDogMCB9IH0gOiB7fSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uRGV0YWlsQ2hhbmdlID0gKGtleSwgdmFsdWUpID0+IHtcclxuICAgIHRoaXMucHJvcHMudXBkYXRlU2VsZWN0ZWRDb21tYW5kKHtba2V5XTogdmFsdWV9KVxyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2VDb21tYW5kc1ZpZXcgPSAodHlwZSkgPT4ge1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgIGNhc2UgJ3RhYmxlX3ZpZXcnOlxyXG4gICAgICBjYXNlICdzb3VyY2Vfdmlldyc6IHtcclxuICAgICAgICBjb25zdCBmb3JjZVR5cGUgPSB0aGlzLnByb3BzLnNvdXJjZUVyck1zZyA/ICdzb3VyY2VfdmlldycgOiB0eXBlXHJcblxyXG4gICAgICAgIHRoaXMucHJvcHMuc2V0RWRpdG9yQWN0aXZlVGFiKGZvcmNlVHlwZSlcclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzb3VyY2VfdmlldycgJiYgdGhpcy5jb2RlTWlycm9yICYmIHRoaXMuc3RhdGUuY3Vyc29yKSB7XHJcbiAgICAgICAgICAvLyBOb3RlOiBtdXN0IGRlbGF5IGEgd2hpbGUgc28gdGhhdCBmb2N1cyB3aWxsIHRha2UgZWZmZWN0XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb2RlTWlycm9yLnNldEN1cnNvcih0aGlzLnN0YXRlLmN1cnNvciwgdHJ1ZSwgdHJ1ZSlcclxuICAgICAgICAgIH0sIDIwMClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uU291cmNlQmx1ciA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgc291cmNlVGV4dE1vZGlmaWVkLCBzb3VyY2VUZXh0IH0gPSB0aGlzLnByb3BzXHJcbiAgICB0aGlzLnByb3BzLnNhdmVTb3VyY2VDb2RlVG9FZGl0aW5nKHNvdXJjZVRleHRNb2RpZmllZClcclxuICB9XHJcblxyXG4gIG9uQ2hhbmdlRWRpdFNvdXJjZSA9IChlZGl0b3IsIGRhdGEsIHRleHQpID0+IHtcclxuICAgIHRoaXMucHJvcHMuc2V0U291cmNlQ3VycmVudCh0ZXh0KVxyXG4gIH1cclxuXHJcbiAgb25DbGlja0ZpbmQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGxhc3RPcGVyYXRpb24gfSAgID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgeyBzZWxlY3RlZENvbW1hbmQgfSA9IHRoaXMucHJvcHNcclxuXHJcbiAgICBjb25zdCBwID0gWyd2aXNpb25GaW5kJywgJ3Zpc3VhbFNlYXJjaCcsICd2aXN1YWxBc3NlcnQnLCAndmlzdWFsVmVyaWZ5J10uaW5kZXhPZihzZWxlY3RlZENvbW1hbmQuY21kKSAhPT0gLTFcclxuICAgICAgICAgICAgICAgID8gKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRJbmRleCA9IHRoaXMucHJvcHMuZWRpdGluZy5tZXRhLnNlbGVjdGVkSW5kZXhcclxuICAgICAgICAgICAgICAgICAgLy8gTm90ZTogcnVuIHZpc2lvbkZpbmQvdmlzdWFsU2VhcmNoIGFzIHNpbmdsZSBsaW5lIGNvbW1hbmQsIGJ1dCB3aXRob3V0IHRpbWVvdXQgd2FpdGluZ1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnBsYXlMaW5lKHNlbGVjdGVkSW5kZXgsIHtcclxuICAgICAgICAgICAgICAgICAgICBvdmVycmlkZVNjb3BlOiB7JyFUSU1FT1VUX1dBSVQnOiAwfSxcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kRXh0cmE6IHsgdGhyb3dFcnJvcjogdHJ1ZSB9XHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSlcclxuICAgICAgICAgICAgICAgIH0pKClcclxuICAgICAgICAgICAgICAgIDogY3NJcGMuYXNrKCdQQU5FTF9ISUdITElHSFRfRE9NJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RPcGVyYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRvcjogc2VsZWN0ZWRDb21tYW5kLnRhcmdldFxyXG4gICAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgIHAuY2F0Y2goZSA9PiB7XHJcbiAgICAgIG1lc3NhZ2UuZXJyb3IoZS5tZXNzYWdlLCAxLjUpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgb25Ub2dnbGVJbnNwZWN0ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgeyBzZWxlY3RlZENvbW1hbmQgfSA9IHRoaXMucHJvcHNcclxuXHJcbiAgICBpZiAoWyd2aXNpb25GaW5kJywgJ3Zpc3VhbFNlYXJjaCcsICd2aXN1YWxBc3NlcnQnLCAndmlzdWFsVmVyaWZ5J10uaW5kZXhPZihzZWxlY3RlZENvbW1hbmQuY21kKSAhPT0gLTEpIHtcclxuICAgICAgcmV0dXJuIGNzSXBjLmFzaygnUEFORUxfU0VMRUNUX0FSRUFfT05fQ1VSUkVOVF9QQUdFJylcclxuICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZVNlbGVjdGVkQ29tbWFuZCh7IHRhcmdldDogcmVzLmZpbGVOYW1lIH0pXHJcbiAgICAgICAgbWVzc2FnZS5zdWNjZXNzKGBTYXZlZCB2aXNpb24gYXMgJHtyZXMuZmlsZU5hbWV9YClcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgIG1lc3NhZ2UuZXJyb3IoZS5tZXNzYWdlKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnByb3BzLnN0YXR1cyA9PT0gQy5BUFBfU1RBVFVTLklOU1BFQ1RPUikge1xyXG4gICAgICB0aGlzLnByb3BzLnN0b3BJbnNwZWN0aW5nKClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucHJvcHMuc3RhcnRJbnNwZWN0aW5nKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIE5vdGU6IHZpcnR1YWwtbGlzdCBlYXRzIHVwIGRvdWJsZSBjbGljayBldmVudHMuIHNvIGhhdmUgdG8gbWFudWFsbHkgdHJhY2sgY2xpY2sgZXZlbnQgaW5zdGVhZFxyXG4gIG9uRG91YmxlQ2xpY2sgPSAoKCkgPT4ge1xyXG4gICAgbGV0IGxhc3RTY3JlZW5YXHJcbiAgICBsZXQgbGFzdFNjcmVlbllcclxuICAgIGxldCBsYXN0VGltZVxyXG5cclxuICAgIHJldHVybiAoZSkgPT4ge1xyXG4gICAgICBjb25zdCBnbyA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCAkcm93ID0gaW5zcGVjdG9yLnBhcmVudFdpdGhDbGFzcygncmVhbC1jb21tYW5kJywgZS50YXJnZXQpXHJcbiAgICAgICAgaWYgKCEkcm93KSByZXR1cm5cclxuXHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludCgkcm93LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpKVxyXG4gICAgICAgIGlmIChpc05hTihpbmRleCkpIHJldHVyblxyXG5cclxuICAgICAgICB0aGlzLnBsYXlMaW5lKGluZGV4KVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpICogMVxyXG5cclxuICAgICAgaWYgKGxhc3RTY3JlZW5YID09PSBlLnNjcmVlblggJiYgbGFzdFNjcmVlblkgPT09IGUuc2NyZWVuWSAmJiBub3cgLSBsYXN0VGltZSA8IDMwMCkge1xyXG4gICAgICAgIGdvKClcclxuICAgICAgfVxyXG5cclxuICAgICAgbGFzdFNjcmVlblggPSBlLnNjcmVlblhcclxuICAgICAgbGFzdFNjcmVlblkgPSBlLnNjcmVlbllcclxuICAgICAgbGFzdFRpbWUgICAgPSBub3dcclxuICAgIH1cclxuICB9KSgpXHJcblxyXG4gIHNjaGVkdWxlSGlkZVZpc2lvbkZpbmRQcmV2aWV3ID0gKCkgPT4ge1xyXG4gICAgbG9nKCdzY2hlZHVsZUhpZGVWaXNpb25GaW5kUHJldmlldycpXHJcbiAgICBjb25zdCB7IHRpbWVyIH0gPSB0aGlzLnN0YXRlLnZpc2lvbkZpbmRQcmV2aWV3XHJcblxyXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKVxyXG5cclxuICAgIHJldHVybiBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY29uc3QgeyB2aXNpYmxlIH0gPSB0aGlzLnN0YXRlLnZpc2lvbkZpbmRQcmV2aWV3XHJcblxyXG4gICAgICBpZiAodmlzaWJsZSkge1xyXG4gICAgICAgIGxvZygndG8gaGlkZSBwcmV2aWV3JylcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICB2aXNpb25GaW5kUHJldmlldzoge1xyXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0sIDMwMDApXHJcbiAgfVxyXG5cclxuICBvbk1vdXNlRW50ZXJUYXJnZXQgPSAoZSwgY29tbWFuZCkgPT4ge1xyXG4gICAgbG9nKCdvbk1vdXNlT3ZlclRhcmdldCcpXHJcbiAgICBpZiAoWyd2aXNpb25GaW5kJywgJ3Zpc3VhbFNlYXJjaCcsICd2aXN1YWxBc3NlcnQnLCAndmlzdWFsVmVyaWZ5J10uaW5kZXhPZihjb21tYW5kLmNtZCkgPT09IC0xKSByZXR1cm5cclxuICAgIGlmICh0aGlzLnN0YXRlLnZpc2lvbkZpbmRQcmV2aWV3LnZpc2libGUpIHJldHVyblxyXG5cclxuICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YXRlLnZpc2lvbkZpbmRQcmV2aWV3LnRpbWVyKVxyXG5cclxuICAgIGNvbnN0IG1hbiAgICAgPSBnZXRWaXNpb25NYW4oKVxyXG4gICAgY29uc3QgcmVjdCAgICA9IGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXHJcbiAgICBjb25zdCBmaWxlICAgID0gY29tbWFuZC50YXJnZXQudHJpbSgpLnNwbGl0KCdAJylbMF1cclxuICAgIGNvbnN0IGNvbW1vbiAgPSB7XHJcbiAgICAgIHZpc2libGU6ICB0cnVlLFxyXG4gICAgICBsZWZ0OiAgICAgcmVjdC5sZWZ0LFxyXG4gICAgICB0b3A6ICAgICAgcmVjdC50b3AgKyByZWN0LmhlaWdodFxyXG4gICAgfVxyXG5cclxuICAgIG1hbi5leGlzdHMoZmlsZSlcclxuICAgIC50aGVuKGV4aXN0ZWQgPT4ge1xyXG4gICAgICBpZiAoIWV4aXN0ZWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICB2aXNpb25GaW5kUHJldmlldzoge1xyXG4gICAgICAgICAgICAuLi5jb21tb24sXHJcbiAgICAgICAgICAgIHVybDogJy4vaW1nL25vdF9mb3VuZC5wbmcnLFxyXG4gICAgICAgICAgICB0aW1lcjogdGhpcy5zY2hlZHVsZUhpZGVWaXNpb25GaW5kUHJldmlldygpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG1hbi5nZXRMaW5rKGZpbGUpXHJcbiAgICAgIC50aGVuKGxpbmsgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHZpc2lvbkZpbmRQcmV2aWV3OiB7XHJcbiAgICAgICAgICAgIC4uLmNvbW1vbixcclxuICAgICAgICAgICAgdXJsOiBsaW5rLFxyXG4gICAgICAgICAgICB0aW1lcjogdGhpcy5zY2hlZHVsZUhpZGVWaXNpb25GaW5kUHJldmlldygpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBvbk1vdXNlTGVhdmVUYXJnZXQgPSAoZSwgY29tbWFuZCkgPT4ge1xyXG4gICAgbG9nKCdvbk1vdXNlT3V0VGFyZ2V0JylcclxuICAgIGlmIChbJ3Zpc2lvbkZpbmQnLCAndmlzdWFsU2VhcmNoJywgJ3Zpc3VhbEFzc2VydCcsICd2aXN1YWxWZXJpZnknXS5pbmRleE9mKGNvbW1hbmQuY21kKSA9PT0gLTEpIHJldHVyblxyXG4gICAgaWYgKCF0aGlzLnN0YXRlLnZpc2lvbkZpbmRQcmV2aWV3LnZpc2libGUpIHJldHVyblxyXG5cclxuICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YXRlLnZpc2lvbkZpbmRQcmV2aWV3LnRpbWVyKVxyXG5cclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICB2aXNpb25GaW5kUHJldmlldzoge1xyXG4gICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBqdW1wVG9Tb3VyY2VDb2RlID0gKGNvbW1hbmRJbmRleCkgPT4ge1xyXG4gICAgdGhpcy5wcm9wcy5zZXRFZGl0b3JBY3RpdmVUYWIoJ3NvdXJjZV92aWV3JylcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnN0YW5jZSAgPSB0aGlzLnN0YXRlLmNtRWR0aW9ySW5zdGFuY2VcclxuICAgICAgY29uc3QgbGluZSAgICAgID0gMyArIGNvbW1hbmRJbmRleCAqIDVcclxuICAgICAgY29uc3QgZW5kTGluZSAgID0gbGluZSArIDVcclxuICAgICAgY29uc3QgY2ggICAgICAgID0gMFxyXG5cclxuICAgICAgY29uc3QgJHRhYiAgICAgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNvdXJjZS12aWV3JylcclxuICAgICAgY29uc3QgdGFiSGVpZ2h0ID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoJHRhYikuaGVpZ2h0LCAxMClcclxuICAgICAgY29uc3QgbWFyZ2luICAgID0gKHRhYkhlaWdodCAtIDYwKSAvIDJcclxuXHJcbiAgICAgIGxvZygnbWFyZ2luJywgbWFyZ2luLCB0YWJIZWlnaHQpXHJcbiAgICAgIGluc3RhbmNlLnNjcm9sbEludG9WaWV3KHsgbGluZSwgY2ggfSwgbWFyZ2luKVxyXG4gICAgICBpbnN0YW5jZS5zZXRTZWxlY3Rpb24oXHJcbiAgICAgICAgeyBjaCwgbGluZSB9LFxyXG4gICAgICAgIHsgY2gsIGxpbmU6IGVuZExpbmUgfSxcclxuICAgICAgICB7IHNjcm9sbDogZmFsc2UgfVxyXG4gICAgICApXHJcbiAgICB9LCAxMDApXHJcbiAgfVxyXG5cclxuICBjb21tYW5kQ2xhc3NOYW1lID0gKHJlY29yZCwgaW5kZXgpID0+IHtcclxuICAgIGNvbnN0IHsgZWRpdGluZywgcGxheWVyIH0gPSB0aGlzLnByb3BzXHJcbiAgICBjb25zdCB7IG5leHRDb21tYW5kSW5kZXgsIGVycm9yQ29tbWFuZEluZGljZXMsIGRvbmVDb21tYW5kSW5kaWNlcywgYnJlYWtwb2ludEluZGljZXMgfSA9IHBsYXllclxyXG4gICAgY29uc3QgeyBjb21tYW5kcyB9ICA9IGVkaXRpbmdcclxuICAgIGNvbnN0IGNsYXNzTmFtZXMgICAgPSBbXVxyXG5cclxuICAgIGlmIChicmVha3BvaW50SW5kaWNlcy5pbmRleE9mKGluZGV4KSAhPT0gLTEpIHtcclxuICAgICAgY2xhc3NOYW1lcy5wdXNoKCdicmVha3BvaW50LWNvbW1hbmQnKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZWNvcmQuY21kID09PSAnY29tbWVudCcpIHtcclxuICAgICAgY2xhc3NOYW1lcy5wdXNoKCdjb21tZW50LWNvbW1hbmQnKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpbmRleCA9PT0gZWRpdGluZy5tZXRhLnNlbGVjdGVkSW5kZXgpIHtcclxuICAgICAgY2xhc3NOYW1lcy5wdXNoKCdzZWxlY3RlZC1jb21tYW5kJylcclxuICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IG5leHRDb21tYW5kSW5kZXgpIHtcclxuICAgICAgY2xhc3NOYW1lcy5wdXNoKCdydW5uaW5nLWNvbW1hbmQnKVxyXG4gICAgfSBlbHNlIGlmIChlcnJvckNvbW1hbmRJbmRpY2VzLmluZGV4T2YoaW5kZXgpICE9PSAtMSkge1xyXG4gICAgICBjbGFzc05hbWVzLnB1c2goJ2Vycm9yLWNvbW1hbmQnKVxyXG4gICAgfSBlbHNlIGlmIChkb25lQ29tbWFuZEluZGljZXMuaW5kZXhPZihpbmRleCkgIT09IC0xKSB7XHJcbiAgICAgIGNsYXNzTmFtZXMucHVzaCgnZG9uZS1jb21tYW5kJylcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2xhc3NOYW1lcy5qb2luKCcgJylcclxuICB9XHJcblxyXG4gIG5lZWRWaXJ0dWFsTGlzdCA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgY29tbWFuZHMgPSBbXSB9ID0gdGhpcy5wcm9wcy5lZGl0aW5nXHJcbiAgICBjb25zdCB0aHJlc2hvbGQgPSAwXHJcblxyXG4gICAgcmV0dXJuIGNvbW1hbmRzLmxlbmd0aCA+PSB0aHJlc2hvbGRcclxuICB9XHJcblxyXG4gIHZpcnR1YWxDb21tbWFuZExpc3QgPSAoeyB2aXJ0dWFsLCBpdGVtSGVpZ2h0IH0pID0+IHtcclxuICAgIGNvbnN0IHsgY29tbWFuZHMgfSAgPSB0aGlzLnByb3BzLmVkaXRpbmdcclxuICAgIGNvbnN0IGVkaXRhYmxlICAgICAgPSB0aGlzLmlzUGxheWVyU3RvcHBlZCgpXHJcbiAgICBjb25zdCByZW5kZXJJdGVtICAgID0gKGl0ZW0pID0+IHtcclxuICAgICAgaWYgKGl0ZW0uaGVhZGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29tbWFuZC1yb3cgaGVhZGVyLXJvd1wiIGtleT1cImhlYWRlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdy1jb2wgY29tbWFuZC1jb2xcIj5cclxuICAgICAgICAgICAgICBDb21tYW5kXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdy1jb2wgdGFyZ2V0LWNvbFwiPlxyXG4gICAgICAgICAgICAgIFRhcmdldFxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3ctY29sIHZhbHVlLWNvbFwiPlxyXG4gICAgICAgICAgICAgIFZhbHVlXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdy1jb2wgb3AtY29sXCI+XHJcbiAgICAgICAgICAgICAgT3BzXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXRlbS5mb290ZXIpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21tYW5kLXJvdyBmb290ZXItcm93XCIga2V5PVwiZm9vdGVyXCIgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5pbnNlcnRDb21tYW5kKG5ld0NvbW1hbmQsIGNvbW1hbmRzLmxlbmd0aCl9PlxyXG4gICAgICAgICAgICBBZGRcclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICBrZXk9e2l0ZW0ua2V5fVxyXG4gICAgICAgICAgc3R5bGU9e3sgaGVpZ2h0OiBpdGVtSGVpZ2h0ICsgJ3B4JyB9fVxyXG4gICAgICAgICAgY2xhc3NOYW1lPXtgY29tbWFuZC1yb3cgcmVhbC1jb21tYW5kIGAgKyB0aGlzLmNvbW1hbmRDbGFzc05hbWUoaXRlbSwgaXRlbS5yZWFsSW5kZXgpfVxyXG4gICAgICAgICAgZGF0YS1pbmRleD17JycgKyBpdGVtLnJlYWxJbmRleH1cclxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMuc2VsZWN0Q29tbWFuZChpdGVtLnJlYWxJbmRleCl9XHJcbiAgICAgICAgICBvbkNvbnRleHRNZW51PXtlID0+IHRoaXMub25Db250ZXh0TWVudShlLCBpdGVtLnJlYWxJbmRleCl9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3ctY29sIGNvbW1hbmQtY29sXCIgdGl0bGU9e2l0ZW0uY21kfT5cclxuICAgICAgICAgICAge2l0ZW0uY21kfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInJvdy1jb2wgdGFyZ2V0LWNvbFwiXHJcbiAgICAgICAgICAgIHRpdGxlPXtpdGVtLnRhcmdldH1cclxuICAgICAgICAgICAgb25Nb3VzZUVudGVyPXsoZSkgPT4gdGhpcy5vbk1vdXNlRW50ZXJUYXJnZXQoZSwgaXRlbSl9XHJcbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17KGUpID0+IHRoaXMub25Nb3VzZUxlYXZlVGFyZ2V0KGUsIGl0ZW0pfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICB7aXRlbS50YXJnZXR9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93LWNvbCB2YWx1ZS1jb2xcIiB0aXRsZT17aXRlbS52YWx1ZX0+XHJcbiAgICAgICAgICAgIHtpdGVtLnZhbHVlfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdy1jb2wgb3AtY29sXCI+XHJcbiAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICBkaXNhYmxlZD17IWVkaXRhYmxlfVxyXG4gICAgICAgICAgICAgIHNoYXBlPVwiY2lyY2xlXCJcclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4geyB0aGlzLnByb3BzLnJlbW92ZUNvbW1hbmQoaXRlbS5yZWFsSW5kZXgpOyBlLnN0b3BQcm9wYWdhdGlvbigpIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwibWludXNcIiAvPlxyXG4gICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIGRpc2FibGVkPXshZWRpdGFibGV9XHJcbiAgICAgICAgICAgICAgc2hhcGU9XCJjaXJjbGVcIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7IHRoaXMucHJvcHMuZHVwbGljYXRlQ29tbWFuZChpdGVtLnJlYWxJbmRleCk7IGUuc3RvcFByb3BhZ2F0aW9uKCkgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJwbHVzXCIgLz5cclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgc3R5bGU9e3ZpcnR1YWwuc3R5bGV9PlxyXG4gICAgICAgIHt2aXJ0dWFsLml0ZW1zLm1hcChyZW5kZXJJdGVtKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25IaWRlTWVudSlcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkRvdWJsZUNsaWNrKVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XHJcbiAgICAvLyBOb3RlOiB1cGRhdGUgc291cmNlVGV4dCB3aGVuZXZlciBlZGl0aW5nIGNoYW5nZWRcclxuICAgIGlmIChuZXh0UHJvcHMuZWRpdGluZy5tZXRhLnNyYyAhPT0gdGhpcy5wcm9wcy5lZGl0aW5nLm1ldGEuc3JjIHx8XHJcbiAgICAgICAgbmV4dFByb3BzLmVkaXRpbmcuY29tbWFuZHMgIT09IHRoaXMucHJvcHMuZWRpdGluZy5jb21tYW5kcykge1xyXG4gICAgICBjb25zdCByZXNldEN1cnNvciA9IG5leHRQcm9wcy5lZGl0aW5nLm1ldGEuc3JjICE9PSB0aGlzLnByb3BzLmVkaXRpbmcubWV0YS5zcmNcclxuXHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoXHJcbiAgICAgICAgdGhpcy5yZXNldFNvdXJjZUNvZGVDdXJzb3IocmVzZXRDdXJzb3IpXHJcbiAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmV4dFByb3BzLnN0YXR1cyA9PT0gQy5BUFBfU1RBVFVTLlBMQVlFUiAmJlxyXG4gICAgICAgIG5leHRQcm9wcy5wbGF5ZXIubmV4dENvbW1hbmRJbmRleCAhPT0gdGhpcy5wcm9wcy5wbGF5ZXIubmV4dENvbW1hbmRJbmRleCkge1xyXG4gICAgICBjb25zdCAkdGFibGVCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhYmxlLXdyYXBwZXInKVxyXG4gICAgICBjb25zdCBpdGVtSGVpZ2h0ID0gNDVcclxuXHJcbiAgICAgIGlmICghJHRhYmxlQm9keSkgcmV0dXJuXHJcblxyXG4gICAgICAkdGFibGVCb2R5LnNjcm9sbFRvcCA9IGl0ZW1IZWlnaHQgKiBuZXh0UHJvcHMucGxheWVyLm5leHRDb21tYW5kSW5kZXhcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmV4dFByb3BzLnN0YXR1cyA9PT0gQy5BUFBfU1RBVFVTLlJFQ09SREVSICYmXHJcbiAgICAgICAgbmV4dFByb3BzLmVkaXRpbmcuY29tbWFuZHMubGVuZ3RoID4gdGhpcy5wcm9wcy5lZGl0aW5nLmNvbW1hbmRzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCAkdGFibGVCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhYmxlLXdyYXBwZXInKVxyXG4gICAgICBjb25zdCBpdGVtSGVpZ2h0ID0gNDVcclxuXHJcbiAgICAgIGlmICghJHRhYmxlQm9keSkgcmV0dXJuXHJcblxyXG4gICAgICBzZXRUaW1lb3V0KFxyXG4gICAgICAgICgpID0+IHsgJHRhYmxlQm9keS5zY3JvbGxUb3AgPSBpdGVtSGVpZ2h0ICogbmV4dFByb3BzLmVkaXRpbmcuY29tbWFuZHMubGVuZ3RoICogMiB9LFxyXG4gICAgICAgIDEwMFxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc1BsYXllclN0b3BwZWQgKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucHJvcHMucGxheWVyLnN0YXR1cyA9PT0gQy5QTEFZRVJfU1RBVFVTLlNUT1BQRURcclxuICB9XHJcblxyXG4gIG9uQ29udGV4dE1lbnUgPSAoZSwgaW5kZXgpID0+IHtcclxuICAgIGxvZygnb25Db250ZXh0TWVudScpXHJcblxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGNvbnRleHRNZW51OiB7XHJcbiAgICAgICAgeDogZS5jbGllbnRYLFxyXG4gICAgICAgIHk6IGUuY2xpZW50WSxcclxuICAgICAgICBpc1Nob3duOiB0cnVlLFxyXG4gICAgICAgIGNvbW1hbmRJbmRleDogaW5kZXhcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLnByb3BzLnNlbGVjdENvbW1hbmQoaW5kZXgsIHRydWUpXHJcbiAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcclxuICB9XHJcblxyXG4gIG9uSGlkZU1lbnUgPSAoZSkgPT4ge1xyXG4gICAgaWYgKGUuYnV0dG9uICE9PSAwKSByZXR1cm5cclxuXHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgY29udGV4dE1lbnU6IHtcclxuICAgICAgICAuLi50aGlzLnN0YXRlLmNvbnRleHRNZW51LFxyXG4gICAgICAgIGlzU2hvd246IGZhbHNlXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBnZXRUZXN0Q2FzZU5hbWUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHNyYyB9ID0gdGhpcy5wcm9wcy5lZGl0aW5nLm1ldGFcclxuICAgIHJldHVybiBzcmMgJiYgc3JjLm5hbWUgJiYgc3JjLm5hbWUubGVuZ3RoID8gc3JjLm5hbWUgOiAnVW50aXRsZWQnXHJcbiAgfVxyXG5cclxuICBwbGF5TGluZSA9IChjb21tYW5kSW5kZXgsIGV4dHJhT3B0aW9ucyA9IHt9KSA9PiB7XHJcbiAgICBjb25zdCB7IGNvbW1hbmRzIH0gID0gdGhpcy5wcm9wcy5lZGl0aW5nXHJcbiAgICBjb25zdCB7IHNyYyB9ICAgICAgID0gdGhpcy5wcm9wcy5lZGl0aW5nLm1ldGFcclxuXHJcbiAgICB0aGlzLnNldFN0YXRlKHsgbGFzdE9wZXJhdGlvbjogJ3BsYXknIH0pXHJcblxyXG4gICAgcmV0dXJuIHRoaXMucHJvcHMucGxheWVyUGxheSh7XHJcbiAgICAgIHRpdGxlOiB0aGlzLmdldFRlc3RDYXNlTmFtZSgpLFxyXG4gICAgICBleHRyYToge1xyXG4gICAgICAgIGlkOiBzcmMgJiYgc3JjLmlkXHJcbiAgICAgIH0sXHJcbiAgICAgIG1vZGU6IFBsYXllci5DLk1PREUuU0lOR0xFLFxyXG4gICAgICBzdGFydEluZGV4OiBjb21tYW5kSW5kZXgsXHJcbiAgICAgIHN0YXJ0VXJsOiBudWxsLFxyXG4gICAgICByZXNvdXJjZXM6IGNvbW1hbmRzLFxyXG4gICAgICBwb3N0RGVsYXk6IHRoaXMucHJvcHMuY29uZmlnLnBsYXlDb21tYW5kSW50ZXJ2YWwgKiAxMDAwLFxyXG4gICAgICAuLi5leHRyYU9wdGlvbnNcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICByZW5kZXJWaXNpb25GaW5kUHJldmlldyAoKSB7XHJcbiAgICBjb25zdCB7IHZpc2libGUsIHVybCwgbGVmdCwgdG9wIH0gPSB0aGlzLnN0YXRlLnZpc2lvbkZpbmRQcmV2aWV3XHJcbiAgICBpZiAoIXZpc2libGUpIHJldHVybiBudWxsXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBzdHlsZT17e1xyXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgIHdpZHRoOiAnMTAwcHgnLFxyXG4gICAgICAgIGhlaWdodDogJzEwMHB4JyxcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgI2NjYycsXHJcbiAgICAgICAgbGVmdDogbGVmdCArICdweCcsXHJcbiAgICAgICAgdG9wOiB0b3AgKyAncHgnLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNlZWUnLFxyXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3VybH0pYCxcclxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxyXG4gICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxyXG4gICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlcidcclxuICAgICAgfX0+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyQ29udGV4dE1lbnUgKCkge1xyXG4gICAgY29uc3QgeyBjbGlwYm9hcmQgfSAgID0gdGhpcy5wcm9wc1xyXG4gICAgY29uc3QgeyBjb250ZXh0TWVudSB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgZHcgID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoXHJcbiAgICBjb25zdCBkaCAgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XHJcbiAgICBjb25zdCBtdyAgPSAyNDBcclxuICAgIGxldCB4ICAgICA9IGNvbnRleHRNZW51LnggKyB3aW5kb3cuc2Nyb2xsWFxyXG4gICAgbGV0IHkgICAgID0gY29udGV4dE1lbnUueSArIHdpbmRvdy5zY3JvbGxZXHJcblxyXG4gICAgaWYgKHggKyBtdyA+IGR3KSAgIHggLT0gbXdcclxuXHJcbiAgICBjb25zdCBzdHlsZSA9IHtcclxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgIHRvcDogeSxcclxuICAgICAgbGVmdDogeCxcclxuICAgICAgZGlzcGxheTogY29udGV4dE1lbnUuaXNTaG93biA/ICdibG9jaycgOiAnbm9uZSdcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtZW51U3R5bGUgPSB7XHJcbiAgICAgIHdpZHRoOiBtdyArICdweCdcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IGNvbW1hbmRJbmRleCB9ICAgICAgPSBjb250ZXh0TWVudVxyXG4gICAgY29uc3QgeyBicmVha3BvaW50SW5kaWNlcyB9ID0gdGhpcy5wcm9wcy5wbGF5ZXJcclxuICAgIGNvbnN0IGlzQnJlYWtwb2ludCAgICAgICAgICA9IGJyZWFrcG9pbnRJbmRpY2VzLmluZGV4T2YoY29tbWFuZEluZGV4KVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNsaWNrID0gKGUpID0+IHtcclxuICAgICAgc3dpdGNoIChlLmtleSkge1xyXG4gICAgICAgIGNhc2UgJ2N1dCc6XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jdXRDb21tYW5kKGNvbW1hbmRJbmRleClcclxuICAgICAgICBjYXNlICdjb3B5JzpcclxuICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNvcHlDb21tYW5kKGNvbW1hbmRJbmRleClcclxuICAgICAgICBjYXNlICdwYXN0ZSc6XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5wYXN0ZUNvbW1hbmQoY29tbWFuZEluZGV4KVxyXG4gICAgICAgIGNhc2UgJ2luc2VydCc6XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pbnNlcnRDb21tYW5kKG5ld0NvbW1hbmQsIGNvbW1hbmRJbmRleCArIDEpXHJcbiAgICAgICAgY2FzZSAncnVuX2xpbmUnOiB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5wbGF5TGluZShjb21tYW5kSW5kZXgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgJ3J1bl9mcm9tX2hlcmUnOiB7XHJcbiAgICAgICAgICBjb25zdCB7IGNvbW1hbmRzIH0gID0gdGhpcy5wcm9wcy5lZGl0aW5nXHJcbiAgICAgICAgICBjb25zdCB7IHNyYyB9ICAgICAgID0gdGhpcy5wcm9wcy5lZGl0aW5nLm1ldGFcclxuXHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbGFzdE9wZXJhdGlvbjogJ3BsYXknIH0pXHJcblxyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMucGxheWVyUGxheSh7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmdldFRlc3RDYXNlTmFtZSgpLFxyXG4gICAgICAgICAgICBleHRyYToge1xyXG4gICAgICAgICAgICAgIGlkOiBzcmMgJiYgc3JjLmlkXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vZGU6IFBsYXllci5DLk1PREUuU1RSQUlHSFQsXHJcbiAgICAgICAgICAgIHN0YXJ0SW5kZXg6IGNvbW1hbmRJbmRleCxcclxuICAgICAgICAgICAgc3RhcnRVcmw6IG51bGwsXHJcbiAgICAgICAgICAgIHJlc291cmNlczogY29tbWFuZHMsXHJcbiAgICAgICAgICAgIHBvc3REZWxheTogdGhpcy5wcm9wcy5jb25maWcucGxheUNvbW1hbmRJbnRlcnZhbCAqIDEwMDBcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgJ2FkZF9icmVha3BvaW50Jzoge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuYWRkQnJlYWtwb2ludChjb21tYW5kSW5kZXgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgJ3JlbW92ZV9icmVha3BvaW50Jzoge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMucmVtb3ZlQnJlYWtwb2ludChjb21tYW5kSW5kZXgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgJ2p1bXBfdG9fc291cmNlX2NvZGUnOiB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5qdW1wVG9Tb3VyY2VDb2RlKGNvbW1hbmRJbmRleClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZX0gaWQ9XCJjb250ZXh0X21lbnVcIj5cclxuICAgICAgICA8TWVudSBvbkNsaWNrPXtoYW5kbGVDbGlja30gc3R5bGU9e21lbnVTdHlsZX0gbW9kZT1cInZlcnRpY2FsXCIgc2VsZWN0YWJsZT17ZmFsc2V9PlxyXG4gICAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJjdXRcIj5DdXQ8L01lbnUuSXRlbT5cclxuICAgICAgICAgIDxNZW51Lkl0ZW0ga2V5PVwiY29weVwiPkNvcHk8L01lbnUuSXRlbT5cclxuICAgICAgICAgIDxNZW51Lkl0ZW0ga2V5PVwicGFzdGVcIiBkaXNhYmxlZD17Y2xpcGJvYXJkLmNvbW1hbmRzLmxlbmd0aCA9PT0gMH0+UGFzdGU8L01lbnUuSXRlbT5cclxuICAgICAgICAgIDxNZW51LkRpdmlkZXIgLz5cclxuICAgICAgICAgIDxNZW51Lkl0ZW0ga2V5PVwiaW5zZXJ0XCI+SW5zZXJ0IG5ldyBsaW5lPC9NZW51Lkl0ZW0+XHJcbiAgICAgICAgICA8TWVudS5EaXZpZGVyIC8+XHJcbiAgICAgICAgICA8TWVudS5JdGVtIGtleT1cImp1bXBfdG9fc291cmNlX2NvZGVcIj5KdW1wIHRvIHNvdXJjZSBjb2RlPC9NZW51Lkl0ZW0+XHJcbiAgICAgICAgICA8TWVudS5JdGVtIGtleT17aXNCcmVha3BvaW50ID8gJ2FkZF9icmVha3BvaW50JyA6ICdyZW1vdmVfYnJlYWtwb2ludCd9PlxyXG4gICAgICAgICAgICB7aXNCcmVha3BvaW50ID8gJ0FkZCBicmVha3BvaW50JyA6ICdSZW1vdmUgYnJlYWtwb2ludCd9XHJcbiAgICAgICAgICA8L01lbnUuSXRlbT5cclxuICAgICAgICAgIDxNZW51LkRpdmlkZXIgLz5cclxuICAgICAgICAgIDxNZW51Lkl0ZW0ga2V5PVwicnVuX2xpbmVcIj5FeGVjdXRlIHRoaXMgY29tbWFuZDwvTWVudS5JdGVtPlxyXG4gICAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJydW5fZnJvbV9oZXJlXCI+UnVuIGZyb20gaGVyZTwvTWVudS5JdGVtPlxyXG4gICAgICAgIDwvTWVudT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG5cclxuICByZW5kZXJUYWJsZSAoKSB7XHJcbiAgICBjb25zdCB7IGVkaXRpbmcsIHBsYXllciB9ID0gdGhpcy5wcm9wc1xyXG4gICAgY29uc3QgeyBjb21tYW5kcyB9ICA9IGVkaXRpbmdcclxuICAgIGNvbnN0IGRhdGFTb3VyY2UgPSAoY29tbWFuZHMgJiYgY29tbWFuZHMubGVuZ3RoID8gY29tbWFuZHMgOiBkZWZhdWx0RGF0YVNvdXJjZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGNvbW1hbmQsIGkpID0+ICh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmNvbW1hbmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogTWF0aC5yYW5kb20oKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhbEluZGV4OiBpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcclxuXHJcbiAgICByZXR1cm4gdGhpcy5uZWVkVmlydHVhbExpc3QoKSA/IHRoaXMucmVuZGVyVmlydHVhbFRhYmxlKGRhdGFTb3VyY2UpIDogdGhpcy5yZW5kZXJOb3JtYWxUYWJsZShkYXRhU291cmNlKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyVmlydHVhbFRhYmxlIChkYXRhU291cmNlKSB7XHJcbiAgICBjb25zdCBDb21tYW5kVmlydHVhbExpc3QgPSBWaXJ0dWFsTGlzdCh7IGNvbnRhaW5lcjogdGhpcy5saXN0Q29udGFpbmVyIH0pKHRoaXMudmlydHVhbENvbW1tYW5kTGlzdCk7XHJcbiAgICBjb25zdCBwYWRkZWREYXRhU291cmNlID0gW1xyXG4gICAgICB7IGhlYWRlcjogdHJ1ZSB9LFxyXG4gICAgICAuLi5kYXRhU291cmNlLFxyXG4gICAgICB7IGZvb3RlcjogdHJ1ZSB9XHJcbiAgICBdXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0LWJvZHlcIj5cclxuICAgICAgICB7IXRoaXMubGlzdENvbnRhaW5lciA/IG51bGwgOiAoXHJcbiAgICAgICAgICA8Q29tbWFuZFZpcnR1YWxMaXN0IGl0ZW1IZWlnaHQ9ezQ1fSBpdGVtcz17cGFkZGVkRGF0YVNvdXJjZX0gLz5cclxuICAgICAgICApfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcblxyXG4gIHJlbmRlck5vcm1hbFRhYmxlIChkYXRhU291cmNlKSB7XHJcbiAgICBjb25zdCB7IGVkaXRpbmcsIHBsYXllciB9ID0gdGhpcy5wcm9wc1xyXG4gICAgY29uc3QgeyBuZXh0Q29tbWFuZEluZGV4LCBlcnJvckNvbW1hbmRJbmRpY2VzLCBkb25lQ29tbWFuZEluZGljZXMgfSA9IHBsYXllclxyXG4gICAgY29uc3QgeyBjb21tYW5kcyB9ICA9IGVkaXRpbmdcclxuICAgIGNvbnN0IGVkaXRhYmxlICAgICAgPSB0aGlzLmlzUGxheWVyU3RvcHBlZCgpXHJcblxyXG4gICAgY29uc3QgY29sdW1ucyA9IFtcclxuICAgICAgeyB0aXRsZTogJ0NvbW1hbmQnLCAgZGF0YUluZGV4OiAnY21kJywgICAgICBrZXk6ICdjbWQnLCAgICAgd2lkdGg6IDEzMCB9LFxyXG4gICAgICB7IHRpdGxlOiAnVGFyZ2V0JywgICBkYXRhSW5kZXg6ICd0YXJnZXQnLCAgIGtleTogJ3RhcmdldCcsICB3aWR0aDogMTkwIH0sXHJcbiAgICAgIHsgdGl0bGU6ICdWYWx1ZScsICAgIGRhdGFJbmRleDogJ3ZhbHVlJywgICAga2V5OiAndmFsdWUnIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0aXRsZTogJ09wcycsXHJcbiAgICAgICAga2V5OiAnb3BzJyxcclxuICAgICAgICB3aWR0aDogODAsXHJcbiAgICAgICAgcmVuZGVyOiAodGV4dCwgcmVjb3JkLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWVkaXRhYmxlfVxyXG4gICAgICAgICAgICAgICAgc2hhcGU9XCJjaXJjbGVcIlxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHsgdGhpcy5wcm9wcy5yZW1vdmVDb21tYW5kKGluZGV4KTsgZS5zdG9wUHJvcGFnYXRpb24oKSB9fVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJtaW51c1wiIC8+XHJcbiAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFlZGl0YWJsZX1cclxuICAgICAgICAgICAgICAgIHNoYXBlPVwiY2lyY2xlXCJcclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7IHRoaXMucHJvcHMuZHVwbGljYXRlQ29tbWFuZChpbmRleCk7IGUuc3RvcFByb3BhZ2F0aW9uKCkgfX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwicGx1c1wiIC8+XHJcbiAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgXVxyXG5cclxuICAgIGNvbnN0IHRhYmxlQ29uZmlnID0ge1xyXG4gICAgICBkYXRhU291cmNlLFxyXG4gICAgICBjb2x1bW5zLFxyXG4gICAgICBwYWdpbmF0aW9uOiBmYWxzZSxcclxuICAgICAgZm9vdGVyOiAoKSA9PiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YWJsZS1mb290ZXJcIiBvbkNsaWNrPXsoZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wcm9wcy5pbnNlcnRDb21tYW5kKG5ld0NvbW1hbmQsIGNvbW1hbmRzLmxlbmd0aClcclxuICAgICAgICB9fT5cclxuICAgICAgICAgIEFkZFxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApLFxyXG4gICAgICBvblJvd0NsaWNrOiAocmVjb3JkLCBpbmRleCwgZSkgPT4ge1xyXG4gICAgICAgIHRoaXMucHJvcHMuc2VsZWN0Q29tbWFuZChpbmRleClcclxuICAgICAgfSxcclxuICAgICAgcm93Q2xhc3NOYW1lOiB0aGlzLmNvbW1hbmRDbGFzc05hbWVcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gPFRhYmxlIHsuLi50YWJsZUNvbmZpZ30gLz5cclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICBjb25zdCB7IHN0YXR1cywgZWRpdGluZyB9ICAgPSB0aGlzLnByb3BzXHJcbiAgICBjb25zdCB7IGNvbW1hbmRzLCBtZXRhIH0gICAgPSBlZGl0aW5nXHJcbiAgICBjb25zdCB7IHNlbGVjdGVkSW5kZXggfSAgICAgPSBtZXRhXHJcblxyXG4gICAgY29uc3QgaXNQbGF5ZXJTdG9wcGVkID0gdGhpcy5pc1BsYXllclN0b3BwZWQoKVxyXG4gICAgY29uc3QgZGF0YVNvdXJjZSAgICA9IGNvbW1hbmRzICYmIGNvbW1hbmRzLmxlbmd0aCA/IGNvbW1hbmRzIDogZGVmYXVsdERhdGFTb3VyY2VcclxuICAgIGNvbnN0IHNlbGVjdGVkQ21kICAgPSBkYXRhU291cmNlW3NlbGVjdGVkSW5kZXhdXHJcbiAgICBjb25zdCBpc0NtZEVkaXRhYmxlID0gaXNQbGF5ZXJTdG9wcGVkICYmICEhc2VsZWN0ZWRDbWRcclxuICAgIGNvbnN0IGlzSW5zcGVjdGluZyAgPSBzdGF0dXMgPT09IEMuQVBQX1NUQVRVUy5JTlNQRUNUT1JcclxuXHJcbiAgICBjb25zdCBzZWxlY3RlZENtZElzVmlzdWFsU2VhcmNoID0gc2VsZWN0ZWRDbWQgJiYgWyd2aXNpb25GaW5kJywgJ3Zpc3VhbFNlYXJjaCcsICd2aXN1YWxBc3NlcnQnLCAndmlzdWFsVmVyaWZ5J10uaW5kZXhPZihzZWxlY3RlZENtZC5jbWQpICE9PSAtMVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yLXdyYXBwZXJcIj5cclxuICAgICAgICA8VGFic1xyXG4gICAgICAgICAgdHlwZT1cImNhcmRcIlxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiY29tbWFuZHMtdmlld1wiXHJcbiAgICAgICAgICBhY3RpdmVLZXk9e3RoaXMucHJvcHMuZWRpdG9yLmFjdGl2ZVRhYn1cclxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlQ29tbWFuZHNWaWV3fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxUYWJzLlRhYlBhbmUgdGFiPVwiVGFibGUgVmlld1wiIGtleT1cInRhYmxlX3ZpZXdcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwIHRhYmxlLXdyYXBwZXJcIiBzdHlsZT17eyBtYXJnaW5Cb3R0b206IDAgfX0gcmVmPXtyZWYgPT4geyB0aGlzLmxpc3RDb250YWluZXIgPSByZWYgfX0+XHJcbiAgICAgICAgICAgICAge3RoaXMucmVuZGVyVGFibGUoKX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXAgZmllbGRzLXdyYXBwZXJcIiBzdHlsZT17eyBtYXJnaW5Cb3R0b206IDAgfX0+XHJcbiAgICAgICAgICAgICAgPEZvcm0+XHJcbiAgICAgICAgICAgICAgICA8Rm9ybS5JdGVtIGxhYmVsPVwiQ29tbWFuZFwiIGxhYmVsQ29sPXt7IHNwYW46IDQgfX0gd3JhcHBlckNvbD17eyBzcGFuOiAyMCB9fT5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgIHNob3dTZWFyY2hcclxuICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkZpbHRlclByb3A9XCJjaGlsZHJlblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImNvbW1hbmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFpc0NtZEVkaXRhYmxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3NlbGVjdGVkQ21kICYmIHNlbGVjdGVkQ21kLmNtZH1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWUpID0+IHRoaXMub25EZXRhaWxDaGFuZ2UoJ2NtZCcsIHZhbHVlKX1cclxuICAgICAgICAgICAgICAgICAgICAgIGZpbHRlck9wdGlvbj17KGlucHV0LCB7a2V5fSkgPT4ga2V5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpbnB1dC50b0xvd2VyQ2FzZSgpKSA9PT0gMH1cclxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGZsZXg6IDEsIG1heFdpZHRoOiAnNjAlJywgbWFyZ2luUmlnaHQ6ICcxMHB4JyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cImRlZmF1bHRcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIHthdmFpbGFibGVDb21tYW5kcy5tYXAoY21kID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdC5PcHRpb24gdmFsdWU9e2NtZH0ga2V5PXtjbWR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtjbWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0Lk9wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgIHtzZWxlY3RlZENtZCAmJiBzZWxlY3RlZENtZC5jbWQgPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtgaHR0cHM6Ly9hOXQ5LmNvbS94L2lkZWhlbHA/Y21kPSR7c2VsZWN0ZWRDbWQuY21kLnRvTG93ZXJDYXNlKCl9YH0gdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEluZm8gZm9yIHRoaXMgY29tbWFuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICkgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvRm9ybS5JdGVtPlxyXG4gICAgICAgICAgICAgICAgPEZvcm0uSXRlbSBsYWJlbD1cIlRhcmdldFwiIGxhYmVsQ29sPXt7IHNwYW46IDQgfX0gd3JhcHBlckNvbD17eyBzcGFuOiAyMCB9fT5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIHshc2VsZWN0ZWRDbWQgfHwgIXNlbGVjdGVkQ21kLnRhcmdldE9wdGlvbnMgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICFzZWxlY3RlZENtZC50YXJnZXRPcHRpb25zLmxlbmd0aCA/IChcclxuICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBmbGV4OiAxLCBtYXhXaWR0aDogJzYwJScsIG1hcmdpblJpZ2h0OiAnMTBweCcgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ0YXJnZXRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWlzQ21kRWRpdGFibGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtzZWxlY3RlZENtZCAmJiBzZWxlY3RlZENtZC50YXJnZXR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5vbkRldGFpbENoYW5nZSgndGFyZ2V0JywgZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwiZGVmYXVsdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICkgOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGZsZXg6IDEsIG1heFdpZHRoOiAnNjAlJywgbWFyZ2luUmlnaHQ6ICcxMHB4JyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInRhcmdldFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshaXNDbWRFZGl0YWJsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3NlbGVjdGVkQ21kLnRhcmdldH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2YWwpID0+IHRoaXMub25EZXRhaWxDaGFuZ2UoJ3RhcmdldCcsIHZhbCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJkZWZhdWx0XCJcclxuICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3NlbGVjdGVkQ21kLnRhcmdldE9wdGlvbnMubWFwKG9wdGlvbiA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdC5PcHRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17b3B0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e29wdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b3B0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0Lk9wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpblJpZ2h0OiAnMTBweCcgfX1cclxuICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshaXNDbWRFZGl0YWJsZX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Ub2dnbGVJbnNwZWN0fVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIHtpc0luc3BlY3RpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoPHNwYW4+eyhzZWxlY3RlZENtZElzVmlzdWFsU2VhcmNoID8gJ/CfkYEnIDogJycpICsgJ0NhbmNlbCd9PC9zcGFuPilcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoPHNwYW4+eyhzZWxlY3RlZENtZElzVmlzdWFsU2VhcmNoID8gJ/CfkYEnIDogJycpICsgJ1NlbGVjdCd9PC9zcGFuPilcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWlzQ21kRWRpdGFibGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2tGaW5kfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIHsoc2VsZWN0ZWRDbWRJc1Zpc3VhbFNlYXJjaCA/ICfwn5GBJyA6ICcnKSArICdGaW5kJ31cclxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L0Zvcm0uSXRlbT5cclxuICAgICAgICAgICAgICAgIDxGb3JtLkl0ZW0gbGFiZWw9XCJWYWx1ZVwiIGxhYmVsQ29sPXt7IHNwYW46IDQgfX0gd3JhcHBlckNvbD17eyBzcGFuOiAyMCB9fSBzdHlsZT17eyBtYXJnaW5Cb3R0b206IDAgfX0+XHJcbiAgICAgICAgICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshaXNDbWRFZGl0YWJsZX1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17c2VsZWN0ZWRDbWQgJiYgc2VsZWN0ZWRDbWQudmFsdWV9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLm9uRGV0YWlsQ2hhbmdlKCd2YWx1ZScsIGUudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ2YWx1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZT1cImRlZmF1bHRcIlxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9Gb3JtLkl0ZW0+XHJcbiAgICAgICAgICAgICAgPC9Gb3JtPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvVGFicy5UYWJQYW5lPlxyXG4gICAgICAgICAgPFRhYnMuVGFiUGFuZSB0YWI9XCJTb3VyY2UgVmlldyAoSlNPTilcIiBrZXk9XCJzb3VyY2Vfdmlld1wiIGNsYXNzTmFtZT1cInNvdXJjZS12aWV3XCI+XHJcbiAgICAgICAgICAgIDxwcmUgY2xhc3NOYW1lPVwic291cmNlLWVycm9yXCI+e3RoaXMucHJvcHMuc291cmNlRXJyTXNnfTwvcHJlPlxyXG4gICAgICAgICAgICB7LypcclxuICAgICAgICAgICAgICBOb3RlOiBoYXZlIHRvIHVzZSBVbkNvbnRyb2xsZWQgQ29kZU1pcnJvciwgYW5kIHRodXMgaGF2ZSB0byB1c2UgdHdvIHN0YXRlIDpcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VUZXh0IGFuZCBzb3VyY2VUZXh0TW9kaWZpZWRcclxuICAgICAgICAgICAgKi99XHJcbiAgICAgICAgICAgIDxDb2RlTWlycm9yXHJcbiAgICAgICAgICAgICAgcmVmPXtlbCA9PiB7IHRoaXMuY29kZU1pcnJvciA9IGVsIH19XHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnByb3BzLnNvdXJjZUVyck1zZyA/ICdoYXMtZXJyb3InIDogJ25vLWVycm9yJ31cclxuICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5zb3VyY2VUZXh0fVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlRWRpdFNvdXJjZX1cclxuICAgICAgICAgICAgICBvbkJsdXI9e3RoaXMub25Tb3VyY2VCbHVyfVxyXG4gICAgICAgICAgICAgIG9uQ3Vyc29yPXsoZWRpdG9yLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgY21FZHRpb3JJbnN0YW5jZTogZWRpdG9yIH0pXHJcbiAgICAgICAgICAgICAgICAvLyBOb3RlOiB3aGVuIHZhbHVlIHVwZGF0ZWQsIGNvZGUgbWlycm9yIHdpbGwgYXV0b21hdGljYWxseSBlbWl0IG9uQ3Vyc29yIHdpdGggY3Vyc29yIGF0IGJvdHRvbVxyXG4gICAgICAgICAgICAgICAgLy8gSXQgY2FuIGJlIHRlbGwgd2l0aCBgc3RpY2t5YCBhcyBudWxsXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdGlja3kpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnNvcjogeyBsaW5lOiBkYXRhLmxpbmUsIGNoOiBkYXRhLmNoIH0gfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgIG9wdGlvbnM9e3tcclxuICAgICAgICAgICAgICAgIG1vZGU6IHsgbmFtZTogJ2phdmFzY3JpcHQnLCBqc29uOiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG1hdGNoQnJhY2tldHM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBhdXRvQ2xvc2VCcmFja2V0czogdHJ1ZVxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L1RhYnMuVGFiUGFuZT5cclxuICAgICAgICA8L1RhYnM+XHJcblxyXG4gICAgICAgIHt0aGlzLnJlbmRlckNvbnRleHRNZW51KCl9XHJcbiAgICAgICAge3RoaXMucmVuZGVyVmlzaW9uRmluZFByZXZpZXcoKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxyXG4gIHN0YXRlID0+ICh7XHJcbiAgICBzdGF0dXM6IHN0YXRlLnN0YXR1cyxcclxuICAgIGVkaXRvcjogc3RhdGUuZWRpdG9yLFxyXG4gICAgZWRpdGluZzogc3RhdGUuZWRpdG9yLmVkaXRpbmcsXHJcbiAgICBjbGlwYm9hcmQ6IHN0YXRlLmVkaXRvci5jbGlwYm9hcmQsXHJcbiAgICBwbGF5ZXI6IHN0YXRlLnBsYXllcixcclxuICAgIGNvbmZpZzogc3RhdGUuY29uZmlnLFxyXG4gICAgc291cmNlRXJyTXNnOiBzdGF0ZS5lZGl0b3IuZWRpdGluZ1NvdXJjZS5lcnJvcixcclxuICAgIHNvdXJjZVRleHQ6IHN0YXRlLmVkaXRvci5lZGl0aW5nU291cmNlLnB1cmUsXHJcbiAgICBzb3VyY2VUZXh0TW9kaWZpZWQ6IHN0YXRlLmVkaXRvci5lZGl0aW5nU291cmNlLmN1cnJlbnQsXHJcbiAgICBzZWxlY3RlZENvbW1hbmQ6IGVkaXRvclNlbGVjdGVkQ29tbWFuZChzdGF0ZSlcclxuICB9KSxcclxuICBkaXNwYXRjaCA9PiBiaW5kQWN0aW9uQ3JlYXRvcnMoey4uLmFjdGlvbnN9LCBkaXNwYXRjaClcclxuKShEYXNoYm9hcmRFZGl0b3IpXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSAgZnJvbSAncmVkdXgnXHJcblxyXG5pbXBvcnQgJy4vZGFzaGJvYXJkLnNjc3MnXHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vLi4vYWN0aW9ucydcclxuXHJcbmltcG9ydCBEYXNoYm9hcmRFZGl0b3IgZnJvbSAnLi9lZGl0b3InXHJcbmltcG9ydCBEYXNoYm9hcmRCb3R0b20gZnJvbSAnLi9ib3R0b20nXHJcblxyXG5jbGFzcyBEYXNoYm9hcmQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIHJlbmRlciAoKSB7XHJcbiAgICBjb25zdCBpc1dpbmRvd3MgPSAvd2luZG93cy9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYXNoYm9hcmRcIj5cclxuICAgICAgICA8RGFzaGJvYXJkRWRpdG9yIC8+XHJcbiAgICAgICAgPERhc2hib2FyZEJvdHRvbSAvPlxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9ubGluZS1oZWxwXCI+XHJcbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHZpc2liaWxpdHk6IGlzV2luZG93cyA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nIH19PlxyXG4gICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9hOXQ5LmNvbS94L2lkZWhlbHA/aGVscD12aXN1YWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj48L2E+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIEthbnR1IGZvciBDaHJvbWUvRmlyZWZveDpcclxuICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vYTl0OS5jb20veC9pZGVoZWxwP2hlbHA9Zm9ydW1cIiB0YXJnZXQ9XCJfYmxhbmtcIj4gVXNlciBGb3J1bTwvYT4gLVxyXG4gICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9hOXQ5LmNvbS94L2lkZWhlbHA/aGVscD1kb2NzXCIgdGFyZ2V0PVwiX2JsYW5rXCI+IE9ubGluZSBIZWxwPC9hPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcclxuICBzdGF0ZSA9PiAoe30pLFxyXG4gIGRpc3BhdGNoID0+IGJpbmRBY3Rpb25DcmVhdG9ycyh7Li4uYWN0aW9uc30sIGRpc3BhdGNoKVxyXG4pKERhc2hib2FyZClcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycywgY29tcG9zZSB9ICBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHsgTW9kYWwsIFRhYnMsIEljb24sIFNlbGVjdCwgSW5wdXQsIEJ1dHRvbiwgTWVudSwgRHJvcGRvd24sIEFsZXJ0LCBtZXNzYWdlIH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IENsaWNrT3V0c2lkZSBmcm9tICdyZWFjdC1jbGljay1vdXRzaWRlJ1xyXG5cclxuaW1wb3J0ICcuL3NpZGViYXIuc2NzcydcclxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi8uLi9hY3Rpb25zJ1xyXG5pbXBvcnQgeyBzZXRJbiwgdXBkYXRlSW4sIGNuIH0gZnJvbSAnLi4vLi4vY29tbW9uL3V0aWxzJ1xyXG5pbXBvcnQgU2lkZWJhclRlc3RTdWl0ZXMgZnJvbSAnLi90ZXN0X3N1aXRlcydcclxuaW1wb3J0IFNpZGViYXJUZXN0Q2FzZXMgZnJvbSAnLi90ZXN0X2Nhc2VzJ1xyXG5cclxuY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICBkcmFnOiB7XHJcbiAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxyXG4gICAgICBzdGFydFg6IDAsXHJcbiAgICAgIG1vdmluZ1g6IDAsXHJcbiAgICAgIGxhc3RXaWR0aDogMjYwLFxyXG4gICAgICBjdXJyZW50TWluV2lkdGg6IDI2MFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0U2lkZUJhck1pbldpZHRoID0gKCkgPT4ge1xyXG4gICAgY29uc3QgeyBpc0RyYWdnaW5nLCBsYXN0V2lkdGgsIGN1cnJlbnRNaW5XaWR0aCB9ID0gdGhpcy5zdGF0ZS5kcmFnXHJcbiAgICByZXR1cm4gKGlzRHJhZ2dpbmcgPyBjdXJyZW50TWluV2lkdGggOiBsYXN0V2lkdGgpICsgJ3B4J1xyXG4gIH1cclxuXHJcbiAgb25SZXNpemVEcmFnU3RhcnQgPSAoZSkgPT4ge1xyXG4gICAgLy8gTm90ZTogRmlyZWZveCByZXF1aXJlcyB1cyB0byBzZXQgc29tZXRoaW5nIHRvIERhdGFUcmFuc2Zlciwgb3RoZXJ3aXNlIGRyYWcgYW5kIGRyYWdFbmQgd29uJ3QgYmUgdHJpZ2dlcmVkXHJcbiAgICAvLyByZWZlciB0byBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMzQzNDI3NS9maXJlZm94LW9uLWRyYWctZW5kLWlzLW5vdC1jYWxsZWQtaW4tYS1yZWFjdC1jb21wb25lbnRcclxuICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQnLCAnJylcclxuXHJcbiAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuJGRvbSlcclxuICAgIGNvbnN0IHdpZHRoID0gcGFyc2VJbnQoc3R5bGUud2lkdGgpXHJcblxyXG4gICAgdGhpcy5zZXRTdGF0ZShcclxuICAgICAgc2V0SW4oWydkcmFnJ10sIHtcclxuICAgICAgICBpc0RyYWdnaW5nOiB0cnVlLFxyXG4gICAgICAgIC8vIENoZWNrIG91dCB0aGUgbm90ZSBvbiBgc2NyZWVuWGAgaW4gYG9uUmVzaXplRHJhZ0VuZGAgZXZlbnRcclxuICAgICAgICBzdGFydFg6IGUuc2NyZWVuWCxcclxuICAgICAgICBsYXN0V2lkdGg6IHdpZHRoLFxyXG4gICAgICAgIGN1cnJlbnRXaWR0aDogd2lkdGhcclxuICAgICAgfSwgdGhpcy5zdGF0ZSlcclxuICAgIClcclxuICB9XHJcblxyXG4gIG9uUmVzaXplRHJhZ0VuZCA9IChlKSA9PiB7XHJcbiAgICAvLyBOb3RlOiB1c2UgYHNjcmVlblhgIGluc3RlYWQgb2YgYGNsaWVudFhgLCBiZWNhdXNlIGBjbGllbnRYYCBvZiBkcmFnRW5kIGV2ZW50cyBpbiBGaXJlZm94XHJcbiAgICAvLyBpcyBhbHdheXMgc2V0IHRvIDAsIHdoaWxlIGBzY3JlZW5YYCBpcyBsdWNraWx5IHN0aWxsIGF2YWlsYWJsZS4gQW5kIHNpbmNlIHdlIG9ubHkgbWFrZSB1c2Ugb2ZcclxuICAgIC8vIGRpZmZlcmVuY2Ugb2YgWCBjb29yZGluYXRlLiBgc2NyZWVuWGAgYW5kIGBjbGllbnRYYCBib3RoIHdvcmsgZm9yIHVzLlxyXG4gICAgLy9cclxuICAgIC8vIHJlZmVyZW5jZTpcclxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTUwNTUyMVxyXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL2RyYWdlbmRcclxuICAgIGNvbnN0IGRpZmYgID0gZS5zY3JlZW5YIC0gdGhpcy5zdGF0ZS5kcmFnLnN0YXJ0WFxyXG4gICAgY29uc3Qgd2lkdGggPSBkaWZmICsgdGhpcy5zdGF0ZS5kcmFnLmxhc3RXaWR0aFxyXG5cclxuICAgIHRoaXMuc2V0U3RhdGUoXHJcbiAgICAgIHNldEluKFsnZHJhZyddLCB7XHJcbiAgICAgICAgaXNEcmFnZ2luZzogZmFsc2UsXHJcbiAgICAgICAgc3RhcnRYOiAwLFxyXG4gICAgICAgIGxhc3RXaWR0aDogd2lkdGgsXHJcbiAgICAgICAgY3VycmVudE1pbldpZHRoOiB3aWR0aFxyXG4gICAgICB9KVxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzc05hbWU9XCJzaWRlYmFyXCJcclxuICAgICAgICByZWY9e2VsID0+IHsgdGhpcy4kZG9tID0gZWwgfX1cclxuICAgICAgICBzdHlsZT17eyBtaW5XaWR0aDogdGhpcy5nZXRTaWRlQmFyTWluV2lkdGgoKSB9fVxyXG4gICAgICA+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlYmFyLWlubmVyXCI+XHJcbiAgICAgICAgICA8VGFic1xyXG4gICAgICAgICAgICBkZWZhdWx0QWN0aXZlS2V5PVwibWFjcm9zXCJcclxuICAgICAgICAgICAgYWN0aXZlS2V5PXt0aGlzLnByb3BzLnVpLnNpZGViYXJUYWIgfHwgJ21hY3Jvcyd9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXthY3RpdmVLZXkgPT4gdGhpcy5wcm9wcy51cGRhdGVVSSh7IHNpZGViYXJUYWI6IGFjdGl2ZUtleSB9KX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPFRhYnMuVGFiUGFuZSB0YWI9XCJNYWNyb3NcIiBrZXk9XCJtYWNyb3NcIj5cclxuICAgICAgICAgICAgICA8U2lkZWJhclRlc3RDYXNlcyAvPlxyXG4gICAgICAgICAgICA8L1RhYnMuVGFiUGFuZT5cclxuICAgICAgICAgICAgPFRhYnMuVGFiUGFuZSB0YWI9XCJUZXN0IFN1aXRlc1wiIGtleT1cInRlc3Rfc3VpdGVzXCI+XHJcbiAgICAgICAgICAgICAgPFNpZGViYXJUZXN0U3VpdGVzIC8+XHJcbiAgICAgICAgICAgIDwvVGFicy5UYWJQYW5lPlxyXG4gICAgICAgICAgPC9UYWJzPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICBjbGFzc05hbWU9e2NuKCdyZXNpemUtaGFuZGxlcicsIHsgZm9jdXNlZDogdGhpcy5zdGF0ZS5kcmFnLmlzRHJhZ2dpbmcgfSl9XHJcbiAgICAgICAgICBkcmFnZ2FibGU9XCJ0cnVlXCJcclxuICAgICAgICAgIG9uRHJhZ1N0YXJ0PXt0aGlzLm9uUmVzaXplRHJhZ1N0YXJ0fVxyXG4gICAgICAgICAgb25EcmFnRW5kPXt0aGlzLm9uUmVzaXplRHJhZ0VuZH1cclxuICAgICAgICAgIG9uTW91c2VEb3duPXsoKSA9PiB0aGlzLnNldFN0YXRlKHNldEluKFsnZHJhZycsICdpc0RyYWdnaW5nJ10sIHRydWUsIHRoaXMuc3RhdGUpKX1cclxuICAgICAgICAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXHJcbiAgc3RhdGUgPT4gKHtcclxuICAgIHN0YXR1czogc3RhdGUuc3RhdHVzLFxyXG4gICAgdGVzdENhc2VzOiBzdGF0ZS5lZGl0b3IudGVzdENhc2VzLFxyXG4gICAgdGVzdFN1aXRlczogc3RhdGUuZWRpdG9yLnRlc3RTdWl0ZXMsXHJcbiAgICBlZGl0aW5nOiBzdGF0ZS5lZGl0b3IuZWRpdGluZyxcclxuICAgIHBsYXllcjogc3RhdGUucGxheWVyLFxyXG4gICAgY29uZmlnOiBzdGF0ZS5jb25maWcsXHJcbiAgICB1aTogc3RhdGUudWlcclxuICB9KSxcclxuICBkaXNwYXRjaCA9PiBiaW5kQWN0aW9uQ3JlYXRvcnMoey4uLmFjdGlvbnN9LCBkaXNwYXRjaClcclxuKShTaWRlYmFyKVxyXG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3NpZGViYXIuc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gUHJlcGFyZSBjc3NUcmFuc2Zvcm1hdGlvblxudmFyIHRyYW5zZm9ybTtcblxudmFyIG9wdGlvbnMgPSB7fVxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3NpZGViYXIuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3NpZGViYXIuc2Nzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycywgY29tcG9zZSB9ICBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHsgTW9kYWwsIFRhYnMsIEljb24sIFNlbGVjdCwgSW5wdXQsIEJ1dHRvbiwgTWVudSwgRHJvcGRvd24sIEFsZXJ0LCBtZXNzYWdlIH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IENsaWNrT3V0c2lkZSBmcm9tICdyZWFjdC1jbGljay1vdXRzaWRlJ1xyXG5pbXBvcnQgSlNaaXAgZnJvbSAnanN6aXAnXHJcblxyXG5pbXBvcnQgRmlsZVNhdmVyIGZyb20gJy4uLy4uL2NvbW1vbi9saWIvZmlsZV9zYXZlcidcclxuaW1wb3J0IFNlYXJjaEJveCBmcm9tICcuLi8uLi9jb21wb25lbnRzL3NlYXJjaF9ib3gnXHJcbmltcG9ydCBnZXRTYXZlVGVzdENhc2UgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9zYXZlX3Rlc3RfY2FzZSdcclxuaW1wb3J0IHsgZ2V0UGxheWVyIH0gZnJvbSAnLi4vLi4vY29tbW9uL3BsYXllcidcclxuaW1wb3J0IHsgc2V0SW4sIHVwZGF0ZUluLCBjbiwgZm9ybWF0RGF0ZSwgbmFtZUZhY3RvcnksIHBpY2sgfSBmcm9tICcuLi8uLi9jb21tb24vdXRpbHMnXHJcbmltcG9ydCB7IGNyZWF0ZUJvb2ttYXJrT25CYXIgfSBmcm9tICcuLi8uLi9jb21tb24vYm9va21hcmsnXHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vLi4vYWN0aW9ucydcclxuaW1wb3J0ICogYXMgQyBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnQnXHJcbmltcG9ydCB7XHJcbiAgdG9KU09OU3RyaW5nLFxyXG4gIHRvSlNPTkRhdGFVcmksXHJcbiAgdG9IdG1sRGF0YVVyaSxcclxuICB0b0h0bWwsXHJcbiAgZnJvbUh0bWwsXHJcbiAgZnJvbUpTT05TdHJpbmcsXHJcbiAgdG9Cb29rbWFya0RhdGFcclxufSBmcm9tICcuLi8uLi9jb21tb24vY29udmVydF91dGlscydcclxuXHJcbmNvbnN0IGRvd25sb2FkVGVzdENhc2VBc0pTT04gPSAodGMpID0+IHtcclxuICBjb25zdCBzdHIgPSB0b0pTT05TdHJpbmcoeyBuYW1lOiB0Yy5uYW1lLCBjb21tYW5kczogdGMuZGF0YS5jb21tYW5kcyB9KVxyXG4gIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbc3RyXSwgeyB0eXBlOiAndGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04JyB9KVxyXG5cclxuICBGaWxlU2F2ZXIuc2F2ZUFzKGJsb2IsIGAke3RjLm5hbWV9Lmpzb25gKVxyXG59XHJcblxyXG5jb25zdCBkb3dubG9hZFRlc3RDYXNlQXNIVE1MID0gKHRjKSA9PiB7XHJcbiAgY29uc3Qgc3RyID0gdG9IdG1sKHsgbmFtZTogdGMubmFtZSwgY29tbWFuZHM6IHRjLmRhdGEuY29tbWFuZHMgfSlcclxuICBjb25zdCBibG9iID0gbmV3IEJsb2IoW3N0cl0sIHsgdHlwZTogJ3RleHQvcGxhaW47Y2hhcnNldD11dGYtOCcgfSlcclxuXHJcbiAgRmlsZVNhdmVyLnNhdmVBcyhibG9iLCBgJHt0Yy5uYW1lfS5odG1sYClcclxufVxyXG5cclxuY2xhc3MgU2lkZWJhclRlc3RDYXNlcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICBzZWFyY2hUZXh0OiAnJyxcclxuXHJcbiAgICBzaG93RHVwbGljYXRlOiBmYWxzZSxcclxuICAgIGR1cGxpY2F0ZU5hbWU6ICcnLFxyXG5cclxuICAgIHNob3dSZW5hbWU6IGZhbHNlLFxyXG4gICAgcmVuYW1lOiAnJyxcclxuXHJcbiAgICB0Y0NvbnRleHRNZW51OiB7XHJcbiAgICAgIHg6IG51bGwsXHJcbiAgICAgIHk6IG51bGwsXHJcbiAgICAgIGlzU2hvd246IGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBSZW5hbWUgcmVsYXRpdmVcclxuICBvbkNsaWNrUmVuYW1lID0gKCkgPT4ge1xyXG4gICAgdGhpcy5wcm9wcy5yZW5hbWVUZXN0Q2FzZSh0aGlzLnN0YXRlLnJlbmFtZSwgdGhpcy5zdGF0ZS5yZW5hbWVUY0lkKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgbWVzc2FnZS5zdWNjZXNzKCdzdWNjZXNzZnVsbHkgcmVuYW1lZCEnLCAxLjUpXHJcbiAgICAgICAgdGhpcy50b2dnbGVSZW5hbWVNb2RhbChmYWxzZSlcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlKSA9PiB7XHJcbiAgICAgICAgbWVzc2FnZS5lcnJvcihlLm1lc3NhZ2UsIDEuNSlcclxuICAgICAgfSlcclxuICB9XHJcblxyXG4gIG9uQ2FuY2VsUmVuYW1lID0gKCkgPT4ge1xyXG4gICAgdGhpcy50b2dnbGVSZW5hbWVNb2RhbChmYWxzZSlcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICByZW5hbWU6IG51bGxcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZVJlbmFtZSA9IChlKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgcmVuYW1lOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8vIER1cGxpY2F0ZSByZWxhdGl2ZVxyXG4gIG9uQ2xpY2tEdXBsaWNhdGUgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnByb3BzLmR1cGxpY2F0ZVRlc3RDYXNlKHRoaXMuc3RhdGUuZHVwbGljYXRlTmFtZSwgdGhpcy5zdGF0ZS5kdXBsaWNhdGVUY0lkKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgbWVzc2FnZS5zdWNjZXNzKCdzdWNjZXNzZnVsbHkgZHVwbGljYXRlZCEnLCAxLjUpXHJcbiAgICAgIH0pXHJcbiAgICB0aGlzLnRvZ2dsZUR1cGxpY2F0ZU1vZGFsKGZhbHNlKVxyXG4gIH1cclxuXHJcbiAgb25DYW5jZWxEdXBsaWNhdGUgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnRvZ2dsZUR1cGxpY2F0ZU1vZGFsKGZhbHNlKVxyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2VEdXBsaWNhdGUgPSAoZSkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGR1cGxpY2F0ZU5hbWU6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlRHVwbGljYXRlTW9kYWwgPSAodG9TaG93LCB0YykgPT4ge1xyXG4gICAgbGV0IGR1cGxpY2F0ZU5hbWUgPSB0YyA/ICh0Yy5uYW1lICsgJ19uZXcnKSA6ICcnXHJcblxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHNob3dEdXBsaWNhdGU6IHRvU2hvdyxcclxuICAgICAgZHVwbGljYXRlVGNJZDogdGMgJiYgdGMuaWQsXHJcbiAgICAgIGR1cGxpY2F0ZU5hbWVcclxuICAgIH0pXHJcblxyXG4gICAgaWYgKHRvU2hvdykge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBjb25zdCBpbnB1dCA9IHRoaXMuaW5wdXREdXBsaWNhdGVUZXN0Q2FzZS5yZWZzLmlucHV0XHJcbiAgICAgICAgaW5wdXQuZm9jdXMoKVxyXG4gICAgICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gaW5wdXQuc2VsZWN0aW9uRW5kID0gaW5wdXQudmFsdWUubGVuZ3RoO1xyXG4gICAgICB9LCAxMDApXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0b2dnbGVSZW5hbWVNb2RhbCA9ICh0b1Nob3csIHRjKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgc2hvd1JlbmFtZTogdG9TaG93LFxyXG4gICAgICByZW5hbWVUY0lkOiB0YyAmJiB0Yy5pZFxyXG4gICAgfSlcclxuXHJcbiAgICBpZiAodG9TaG93KSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5pbnB1dFJlbmFtZVRlc3RDYXNlLnJlZnMuaW5wdXRcclxuICAgICAgICBpbnB1dC5mb2N1cygpXHJcbiAgICAgICAgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBpbnB1dC5zZWxlY3Rpb25FbmQgPSBpbnB1dC52YWx1ZS5sZW5ndGg7XHJcbiAgICAgIH0sIDEwMClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEl0ZW1LbGFzcyA9ICh0YykgPT4ge1xyXG4gICAgY29uc3Qgc3JjID0gdGhpcy5wcm9wcy5lZGl0aW5nLm1ldGEuc3JjXHJcbiAgICBjb25zdCBrbGFzc2VzID0gW11cclxuXHJcbiAgICBpZiAoc3JjICYmIChzcmMuaWQgPT09IHRjLmlkKSkgICAgICAgICAgICAgICAgICAgICAgICBrbGFzc2VzLnB1c2goJ3NlbGVjdGVkJylcclxuXHJcbiAgICBpZiAodGMuc3RhdHVzID09PSBDLlRFU1RfQ0FTRV9TVEFUVVMuU1VDQ0VTUykgICAgICAgICBrbGFzc2VzLnB1c2goJ3N1Y2Nlc3MnKVxyXG4gICAgZWxzZSBpZiAodGMuc3RhdHVzID09PSBDLlRFU1RfQ0FTRV9TVEFUVVMuRVJST1IpICAgICAga2xhc3Nlcy5wdXNoKCdlcnJvcicpXHJcbiAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrbGFzc2VzLnB1c2goJ25vcm1hbCcpXHJcblxyXG4gICAgaWYgKHRoaXMucHJvcHMuc3RhdHVzICE9PSBDLkFQUF9TVEFUVVMuTk9STUFMKSB7XHJcbiAgICAgIGtsYXNzZXMucHVzaCgnZGlzYWJsZWQnKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBrbGFzc2VzLmpvaW4oJyAnKVxyXG4gIH1cclxuXHJcbiAgY2hhbmdlVGVzdENhc2UgPSAoaWQpID0+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5wcm9wcy5zdGF0dXMgIT09IEMuQVBQX1NUQVRVUy5OT1JNQUwpICByZXR1cm4gcmVzb2x2ZShmYWxzZSlcclxuICAgICAgaWYgKHRoaXMucHJvcHMuZWRpdGluZy5tZXRhLnNyYyAmJiB0aGlzLnByb3BzLmVkaXRpbmcubWV0YS5zcmMuaWQgPT09IGlkKSByZXR1cm4gcmVzb2x2ZSh0cnVlKVxyXG5cclxuICAgICAgY29uc3QgZ28gPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5lZGl0VGVzdENhc2UoaWQpXHJcbiAgICAgICAgcmVzb2x2ZSh0cnVlKVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZ2V0U2F2ZVRlc3RDYXNlKCkuc2F2ZU9yTm90KCkudGhlbihnbylcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBwbGF5VGVzdENhc2UgPSAoaWQpID0+IHtcclxuICAgIGlmICh0aGlzLnByb3BzLnN0YXR1cyAhPT0gQy5BUFBfU1RBVFVTLk5PUk1BTCkgIHJldHVyblxyXG5cclxuICAgIHRoaXMuY2hhbmdlVGVzdENhc2UoaWQpXHJcbiAgICAudGhlbihzaG91bGRQbGF5ID0+IHtcclxuICAgICAgaWYgKCFzaG91bGRQbGF5KSAgcmV0dXJuXHJcblxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBjb25zdCB7IGNvbW1hbmRzIH0gPSB0aGlzLnByb3BzLmVkaXRpbmdcclxuICAgICAgICBjb25zdCBvcGVuVGMgID0gY29tbWFuZHMuZmluZCh0YyA9PiB0Yy5jbWQudG9Mb3dlckNhc2UoKSA9PT0gJ29wZW4nKVxyXG4gICAgICAgIGNvbnN0IHsgc3JjIH0gPSB0aGlzLnByb3BzLmVkaXRpbmcubWV0YVxyXG4gICAgICAgIGNvbnN0IGdldFRlc3RDYXNlTmFtZSA9ICgpID0+IHtcclxuICAgICAgICAgIHJldHVybiBzcmMgJiYgc3JjLm5hbWUgJiYgc3JjLm5hbWUubGVuZ3RoID8gc3JjLm5hbWUgOiAnVW50aXRsZWQnXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnByb3BzLnBsYXllclBsYXkoe1xyXG4gICAgICAgICAgdGl0bGU6IGdldFRlc3RDYXNlTmFtZSgpLFxyXG4gICAgICAgICAgZXh0cmE6IHtcclxuICAgICAgICAgICAgaWQ6IHNyYyAmJiBzcmMuaWRcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBtb2RlOiBnZXRQbGF5ZXIoKS5DLk1PREUuU1RSQUlHSFQsXHJcbiAgICAgICAgICBzdGFydEluZGV4OiAwLFxyXG4gICAgICAgICAgc3RhcnRVcmw6IG9wZW5UYyA/IG9wZW5UYy50YXJnZXQgOiBudWxsLFxyXG4gICAgICAgICAgcmVzb3VyY2VzOiBjb21tYW5kcyxcclxuICAgICAgICAgIHBvc3REZWxheTogdGhpcy5wcm9wcy5wbGF5ZXIucGxheUludGVydmFsICogMTAwMFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sIDUwMClcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBvblJlYWRGaWxlID0gKHByb2Nlc3MpID0+IChlKSA9PiB7XHJcbiAgICBjb25zdCBmaWxlcyA9IFtdLnNsaWNlLmNhbGwoZS50YXJnZXQuZmlsZXMpXHJcbiAgICBpZiAoIWZpbGVzIHx8ICFmaWxlcy5sZW5ndGgpICByZXR1cm5cclxuXHJcbiAgICBjb25zdCByZWFkID0gKGZpbGUpID0+IHtcclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBjb25zdCByZWFkZXIgID0gbmV3IEZpbGVSZWFkZXIoKVxyXG5cclxuICAgICAgICByZWFkZXIub25sb2FkID0gKHJlYWRlckV2ZW50KSA9PiB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0ICA9IHJlYWRlckV2ZW50LnRhcmdldC5yZXN1bHRcclxuICAgICAgICAgICAgY29uc3Qgb2JqICAgPSBwcm9jZXNzKHRleHQsIGZpbGUubmFtZSlcclxuICAgICAgICAgICAgcmVzb2x2ZSh7IGRhdGE6IG9iaiB9KVxyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXNvbHZlKHsgZXJyOiBlLCBmaWxlTmFtZTogZmlsZS5uYW1lIH0pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIFByb21pc2UuYWxsKGZpbGVzLm1hcChyZWFkKSlcclxuICAgIC50aGVuKGxpc3QgPT4ge1xyXG4gICAgICBjb25zdCBkb25lTGlzdCA9IGxpc3QuZmlsdGVyKHggPT4geC5kYXRhKVxyXG4gICAgICBjb25zdCBmYWlsTGlzdCA9IGxpc3QuZmlsdGVyKHggPT4geC5lcnIpXHJcblxyXG4gICAgICB0aGlzLnByb3BzLmFkZFRlc3RDYXNlcyhkb25lTGlzdC5tYXAoeCA9PiB4LmRhdGEpKVxyXG4gICAgICAgIC50aGVuKCh7IHBhc3NDb3VudCwgZmFpbENvdW50LCBmYWlsVGNzIH0pID0+IHtcclxuICAgICAgICAgIG1lc3NhZ2UuaW5mbyhcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgIGAke3Bhc3NDb3VudH0gbWFjcm8ke3Bhc3NDb3VudCA+IDEgPyAncycgOiAnJ30gaW1wb3J0ZWQhYCxcclxuICAgICAgICAgICAgICBgJHtmYWlsTGlzdC5sZW5ndGggKyBmYWlsQ291bnR9IG1hY3JvJHsoZmFpbExpc3QubGVuZ3RoICsgZmFpbENvdW50KSA+IDEgPyAncycgOiAnJ30gZmFpbGVkIWBcclxuICAgICAgICAgICAgXS5qb2luKCcsICcpLFxyXG4gICAgICAgICAgICAzXHJcbiAgICAgICAgICApXHJcblxyXG4gICAgICAgICAgZmFpbExpc3QuZm9yRWFjaChmYWlsID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5hZGRMb2coJ2Vycm9yJywgYGluIHBhcnNpbmcgJHtmYWlsLmZpbGVOYW1lfTogJHtmYWlsLmVyci5tZXNzYWdlfWApXHJcbiAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgIGZhaWxUY3MuZm9yRWFjaChmYWlsID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5hZGRMb2coJ2Vycm9yJywgYGR1cGxpY2F0ZWQgbWFjcm8gbmFtZTogJHtmYWlsLm5hbWV9YClcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBvbkhUTUxGaWxlQ2hhbmdlID0gKGUpID0+IHtcclxuICAgIC8vIE5vdGU6IGNsZWFyIGZpbGUgaW5wdXQsIHNvIHRoYXQgd2UgY2FuIGZpcmUgb25GaWxlQ2hhbmdlIHdoZW4gdXNlcnMgc2VsZWN0cyB0aGUgc2FtZSBmaWxlIG5leHQgdGltZVxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuaHRtbEZpbGVJbnB1dC52YWx1ZSA9IG51bGxcclxuICAgIH0sIDUwMClcclxuICAgIHJldHVybiB0aGlzLm9uUmVhZEZpbGUoZnJvbUh0bWwpKGUpXHJcbiAgfVxyXG5cclxuICBvbkpTT05GaWxlQ2hhbmdlID0gKGUpID0+IHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0aGlzLmpzb25GaWxlSW5wdXQudmFsdWUgPSBudWxsXHJcbiAgICB9LCA1MDApXHJcbiAgICByZXR1cm4gdGhpcy5vblJlYWRGaWxlKGZyb21KU09OU3RyaW5nKShlKVxyXG4gIH1cclxuXHJcbiAgYWRkVGVzdENhc2UgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHNyYyB9ID0gdGhpcy5wcm9wcy5lZGl0aW5nLm1ldGFcclxuICAgIGNvbnN0IGdvID0gKCkgPT4ge1xyXG4gICAgICB0aGlzLnByb3BzLmVkaXROZXdUZXN0Q2FzZSgpXHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBnZXRTYXZlVGVzdENhc2UoKS5zYXZlT3JOb3QoKS50aGVuKGdvKVxyXG4gIH1cclxuXHJcbiAgb25DbGlja1Rlc3RDYXNlTW9yZSA9IChlLCB0YywgdGNJbmRleCkgPT4ge1xyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcblxyXG4gICAgY29uc3QgdXBkYXRlZCA9IHtcclxuICAgICAgdGNDb250ZXh0TWVudToge1xyXG4gICAgICAgIHg6IGUuY2xpZW50WCxcclxuICAgICAgICB5OiBlLmNsaWVudFksXHJcbiAgICAgICAgaXNTaG93bjogdHJ1ZSxcclxuICAgICAgICB0YyxcclxuICAgICAgICB0Y0luZGV4XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBOb3RlOiB0byBtYWtlIGl0IHdvcmsgaW4gRmlyZWZveCwgaGF2ZSB0byBkZWxheSB0aGlzIG5ldyBzdGF0ZSBhIGxpdHRsZSBiaXRcclxuICAgIC8vIEJlY2F1c2UgaGlkZVRjQ29udGV4dE1lbnUgY291bGQgYmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB2aWEgY2xpY2tPdXRzaWRlXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2V0U3RhdGUodXBkYXRlZCksIDIwKVxyXG4gIH1cclxuXHJcbiAgaGlkZVRjQ29udGV4dE1lbnUgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgdGNDb250ZXh0TWVudToge1xyXG4gICAgICAgIC4uLnRoaXMuc3RhdGUudGNDb250ZXh0TWVudSxcclxuICAgICAgICBpc1Nob3duOiBmYWxzZVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgb25UY01lbnVDbGljayA9ICh7IGtleSB9LCB0YywgdGNJbmRleCkgPT4ge1xyXG4gICAgdGhpcy5oaWRlVGNDb250ZXh0TWVudSgpXHJcblxyXG4gICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgY2FzZSAncGxheSc6IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wbGF5VGVzdENhc2UodGMuaWQpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgJ3JlbmFtZSc6IHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHJlbmFtZTogdGMubmFtZVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy50b2dnbGVSZW5hbWVNb2RhbCh0cnVlLCB0YylcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjYXNlICdkZWxldGUnOiB7XHJcbiAgICAgICAgY29uc3QgZ28gPSAoKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5yZW1vdmVUZXN0Q2FzZSh0Yy5pZClcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgIG1lc3NhZ2Uuc3VjY2Vzcygnc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQhJywgMS41KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgTW9kYWwud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0ZhaWxlZCB0byBkZWxldGUnLFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogZS5tZXNzYWdlXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBNb2RhbC5jb25maXJtKHtcclxuICAgICAgICAgIHRpdGxlOiAnU3VyZSB0byBkZWxldGU/JyxcclxuICAgICAgICAgIGNvbnRlbnQ6IGBEbyB5b3UgcmVhbGx5IHdhbnQgdG8gZGVsZXRlIFwiJHt0Yy5uYW1lfVwiP2AsXHJcbiAgICAgICAgICBva1RleHQ6ICdEZWxldGUnLFxyXG4gICAgICAgICAgY2FuY2VsVGV4dDogJ0NhbmNlbCcsXHJcbiAgICAgICAgICBvbk9rOiBnbyxcclxuICAgICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB7fVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgJ2R1cGxpY2F0ZSc6IHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b2dnbGVEdXBsaWNhdGVNb2RhbCh0cnVlLCB0YylcclxuICAgICAgfVxyXG5cclxuICAgICAgY2FzZSAnZXhwb3J0X2h0bWwnOiB7XHJcbiAgICAgICAgcmV0dXJuIGRvd25sb2FkVGVzdENhc2VBc0hUTUwodGMpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgJ2V4cG9ydF9qc29uJzoge1xyXG4gICAgICAgIHJldHVybiBkb3dubG9hZFRlc3RDYXNlQXNKU09OKHRjKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjYXNlICdjcmVhdGVfYm9va21hcmsnOiB7XHJcbiAgICAgICAgY29uc3QgYm9va21hcmtUaXRsZSA9IHByb21wdCgnVGl0bGUgZm9yIHRoaXMgYm9va21hcmsnLCBgIyR7dGMubmFtZX0ua2FudHVgKVxyXG4gICAgICAgIGlmIChib29rbWFya1RpdGxlID09PSBudWxsKSByZXR1cm5cclxuXHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJvb2ttYXJrT25CYXIodG9Cb29rbWFya0RhdGEoe1xyXG4gICAgICAgICAgYm9va21hcmtUaXRsZSxcclxuICAgICAgICAgIG5hbWU6IHRjLm5hbWVcclxuICAgICAgICB9KSlcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MoJ3N1Y2Nlc3NmdWxseSBjcmVhdGVkIGJvb2ttYXJrIScsIDEuNSlcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXJUZXN0Q2FzZXMgKCkge1xyXG4gICAgY29uc3QgaXNFZGl0aW5nVW50aXRsZWQgPSAhdGhpcy5wcm9wcy5lZGl0aW5nLm1ldGEuc3JjXHJcbiAgICBjb25zdCB7IHRlc3RDYXNlcyB9ICAgICA9IHRoaXMucHJvcHNcclxuICAgIGNvbnN0IHsgc2VhcmNoVGV4dCB9ICAgID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgdHJpbVNlYXJjaFRleHQgICAgPSBzZWFyY2hUZXh0LnRyaW0oKS50b0xvd2VyQ2FzZSgpXHJcbiAgICBjb25zdCBtYXRjaFRleHQgICAgICAgICA9IHRyaW1TZWFyY2hUZXh0Lmxlbmd0aCA9PT0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB4ID0+IHhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogeCA9PiB4Lm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRyaW1TZWFyY2hUZXh0KSAhPT0gLTFcclxuICAgIGNvbnN0IGNhbmRpZGF0ZXMgICAgICAgID0gdGVzdENhc2VzLmZpbHRlcihtYXRjaFRleHQpXHJcblxyXG4gICAgY2FuZGlkYXRlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIGNvbnN0IG5hbWVBID0gYS5uYW1lLnRvTG93ZXJDYXNlKClcclxuICAgICAgY29uc3QgbmFtZUIgPSBiLm5hbWUudG9Mb3dlckNhc2UoKVxyXG5cclxuICAgICAgaWYgKG5hbWVBIDwgbmFtZUIpIHJldHVybiAtMVxyXG4gICAgICBpZiAobmFtZUEgPT09IG5hbWVCKSAgcmV0dXJuIDBcclxuICAgICAgcmV0dXJuIDFcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPHVsIGNsYXNzTmFtZT1cInNpZGViYXItdGVzdC1jYXNlc1wiPlxyXG4gICAgICAgIHtpc0VkaXRpbmdVbnRpdGxlZCA/IChcclxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJzZWxlY3RlZFwiPlVudGl0bGVkPC9saT5cclxuICAgICAgICApIDogbnVsbH1cclxuICAgICAgICB7Y2FuZGlkYXRlcy5tYXAoKHRjLCB0Y0luZGV4KSA9PiAoXHJcbiAgICAgICAgICA8bGlcclxuICAgICAgICAgICAga2V5PXt0Yy5pZH1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLmdldEl0ZW1LbGFzcyh0Yyl9XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuY2hhbmdlVGVzdENhc2UodGMuaWQpfVxyXG4gICAgICAgICAgICBvbkRvdWJsZUNsaWNrPXsoKSA9PiB0aGlzLnBsYXlUZXN0Q2FzZSh0Yy5pZCl9XHJcbiAgICAgICAgICAgIG9uQ29udGV4dE1lbnU9eyhlKSA9PiB0aGlzLm9uQ2xpY2tUZXN0Q2FzZU1vcmUoZSwgdGMsIHRjSW5kZXgpfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXN0LWNhc2UtbmFtZVwiPnt0Yy5uYW1lfTwvc3Bhbj5cclxuICAgICAgICAgICAgPEljb25cclxuICAgICAgICAgICAgICB0eXBlPVwiYmFyc1wiXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibW9yZS1idXR0b25cIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLm9uQ2xpY2tUZXN0Q2FzZU1vcmUoZSwgdGMsIHRjSW5kZXgpfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICApKX1cclxuICAgICAgPC91bD5cclxuICAgIClcclxuICB9XHJcblxyXG4gIGdldFBvcnRhbENvbnRhaW5lciAoKSB7XHJcbiAgICBjb25zdCBpZCA9ICdfX2NvbnRleHRfbWVudV9jb250YWluZXJfXydcclxuICAgIGNvbnN0ICRlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKVxyXG4gICAgaWYgKCRlbCkgIHJldHVybiAkZWxcclxuXHJcbiAgICBjb25zdCAkbmV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICAgICRuZXcuaWQgPSBpZFxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCgkbmV3KVxyXG4gICAgcmV0dXJuICRuZXdcclxuICB9XHJcblxyXG4gIHJlbmRlclRlc3RDYXNlQ29udGV4dE1lbnUgKCkge1xyXG4gICAgY29uc3QgY29udGV4dE1lbnUgPSB0aGlzLnN0YXRlLnRjQ29udGV4dE1lbnVcclxuICAgIGNvbnN0IG13ICAgID0gMjMwXHJcbiAgICBsZXQgeCAgICAgICA9IGNvbnRleHRNZW51LnggKyB3aW5kb3cuc2Nyb2xsWFxyXG4gICAgbGV0IHkgICAgICAgPSBjb250ZXh0TWVudS55ICsgd2luZG93LnNjcm9sbFlcclxuICAgIGNvbnN0ICRib3ggID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZGViYXItaW5uZXInKVxyXG5cclxuICAgIGlmICgkYm94ICYmIHkgKyAyMjAgPiAkYm94LmNsaWVudEhlaWdodCkgIHkgLT0gMjIwXHJcblxyXG4gICAgaWYgKHggLSBtdyA+IDApICAgIHggLT0gbXdcclxuXHJcbiAgICBjb25zdCBzdHlsZSA9IHtcclxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgIHRvcDogeSxcclxuICAgICAgbGVmdDogeCxcclxuICAgICAgZGlzcGxheTogY29udGV4dE1lbnUuaXNTaG93biA/ICdibG9jaycgOiAnbm9uZSdcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtZW51U3R5bGUgPSB7XHJcbiAgICAgIHdpZHRoOiBtdyArICdweCdcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gKFxyXG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZX0gY2xhc3NOYW1lPVwiY29udGV4dC1tZW51XCI+XHJcbiAgICAgICAgPENsaWNrT3V0c2lkZSBvbkNsaWNrT3V0c2lkZT17dGhpcy5oaWRlVGNDb250ZXh0TWVudX0+XHJcbiAgICAgICAgICA8TWVudVxyXG4gICAgICAgICAgICBvbkNsaWNrPXtlID0+IHRoaXMub25UY01lbnVDbGljayhlLCBjb250ZXh0TWVudS50YywgY29udGV4dE1lbnUudGNJbmRleCl9XHJcbiAgICAgICAgICAgIHN0eWxlPXttZW51U3R5bGV9XHJcbiAgICAgICAgICAgIG1vZGU9XCJ2ZXJ0aWNhbFwiXHJcbiAgICAgICAgICAgIHNlbGVjdGFibGU9e2ZhbHNlfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8TWVudS5JdGVtIGtleT1cInBsYXlcIj5QbGF5PC9NZW51Lkl0ZW0+XHJcbiAgICAgICAgICAgIDxNZW51Lkl0ZW0ga2V5PVwicmVuYW1lXCI+UmVuYW1lLi48L01lbnUuSXRlbT5cclxuICAgICAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJkdXBsaWNhdGVcIj5EdXBsaWNhdGUuLjwvTWVudS5JdGVtPlxyXG4gICAgICAgICAgICA8TWVudS5JdGVtIGtleT1cImV4cG9ydF9qc29uXCI+RXhwb3J0IGFzIEpTT048L01lbnUuSXRlbT5cclxuICAgICAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJleHBvcnRfaHRtbFwiPkV4cG9ydCBhcyBIVE1MIChwbHVzIGF1dG9ydW4pPC9NZW51Lkl0ZW0+XHJcbiAgICAgICAgICAgIDxNZW51Lkl0ZW0ga2V5PVwiY3JlYXRlX2Jvb2ttYXJrXCI+QWRkIHNob3J0Y3V0IHRvIGJvb2ttYXJrcyBiYXI8L01lbnUuSXRlbT5cclxuICAgICAgICAgICAgPE1lbnUuRGl2aWRlcj48L01lbnUuRGl2aWRlcj5cclxuICAgICAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJkZWxldGVcIj5EZWxldGU8L01lbnUuSXRlbT5cclxuICAgICAgICAgIDwvTWVudT5cclxuICAgICAgICA8L0NsaWNrT3V0c2lkZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcblxyXG4gICAgcmV0dXJuIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChjb250ZW50LCB0aGlzLmdldFBvcnRhbENvbnRhaW5lcigpKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyVGVzdENhc2VNZW51ICgpIHtcclxuICAgIGNvbnN0IG9uQ2xpY2tNZW51SXRlbSA9ICh7IGtleSB9KSA9PiB7XHJcbiAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgY2FzZSAnZXhwb3J0X2FsbF9qc29uJzoge1xyXG4gICAgICAgICAgY29uc3QgemlwID0gbmV3IEpTWmlwKClcclxuXHJcbiAgICAgICAgICBpZiAodGhpcy5wcm9wcy50ZXN0Q2FzZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlLmVycm9yKCdObyBzYXZlZCBtYWNyb3MgdG8gZXhwb3J0JywgMS41KVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMucHJvcHMudGVzdENhc2VzLmZvckVhY2godGMgPT4ge1xyXG4gICAgICAgICAgICB6aXAuZmlsZShgJHt0Yy5uYW1lfS5qc29uYCwgdG9KU09OU3RyaW5nKHtcclxuICAgICAgICAgICAgICBuYW1lOiB0Yy5uYW1lLFxyXG4gICAgICAgICAgICAgIGNvbW1hbmRzOiB0Yy5kYXRhLmNvbW1hbmRzXHJcbiAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICB6aXAuZ2VuZXJhdGVBc3luYyh7IHR5cGU6ICdibG9iJyB9KVxyXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGJsb2IpIHtcclxuICAgICAgICAgICAgRmlsZVNhdmVyLnNhdmVBcyhibG9iLCAnYWxsX3Rlc3RfY2FzZXMuemlwJyk7XHJcbiAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYXNlICdpbXBvcnQnOiB7XHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxNZW51IG9uQ2xpY2s9e29uQ2xpY2tNZW51SXRlbX0gc2VsZWN0YWJsZT17ZmFsc2V9PlxyXG4gICAgICAgIDxNZW51Lkl0ZW0ga2V5PVwiZXhwb3J0X2FsbF9qc29uXCI+RXhwb3J0IEFsbCAoSlNPTik8L01lbnUuSXRlbT5cclxuICAgICAgICA8TWVudS5JdGVtIGtleT1cImltcG9ydF9qc29uXCI+XHJcbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInNlbGVjdF9qc29uX2ZpbGVzX2Zvcl9tYWNyb3NcIj5JbXBvcnQgSlNPTjwvbGFiZWw+XHJcbiAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgbXVsdGlwbGVcclxuICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxyXG4gICAgICAgICAgICBhY2NlcHQ9XCIuanNvblwiXHJcbiAgICAgICAgICAgIGlkPVwic2VsZWN0X2pzb25fZmlsZXNfZm9yX21hY3Jvc1wiXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uSlNPTkZpbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIHJlZj17cmVmID0+IHsgdGhpcy5qc29uRmlsZUlucHV0ID0gcmVmIH19XHJcbiAgICAgICAgICAgIHN0eWxlPXt7ZGlzcGxheTogJ25vbmUnfX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9NZW51Lkl0ZW0+XHJcbiAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJpbXBvcnRfaHRtbFwiPlxyXG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzZWxlY3RfaHRtbF9maWxlc1wiPkltcG9ydCBIVE1MPC9sYWJlbD5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICBtdWx0aXBsZVxyXG4gICAgICAgICAgICB0eXBlPVwiZmlsZVwiXHJcbiAgICAgICAgICAgIGFjY2VwdD1cIi5odG1sLC5odG1cIlxyXG4gICAgICAgICAgICBpZD1cInNlbGVjdF9odG1sX2ZpbGVzXCJcclxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25IVE1MRmlsZUNoYW5nZX1cclxuICAgICAgICAgICAgcmVmPXtyZWYgPT4geyB0aGlzLmh0bWxGaWxlSW5wdXQgPSByZWYgfX1cclxuICAgICAgICAgICAgc3R5bGU9e3tkaXNwbGF5OiAnbm9uZSd9fVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L01lbnUuSXRlbT5cclxuICAgICAgPC9NZW51PlxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyRHVwbGljYXRlTW9kYWwgKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPE1vZGFsXHJcbiAgICAgICAgdGl0bGU9XCJEdXBsaWNhdGUgTWFjcm8uLlwiXHJcbiAgICAgICAgb2tUZXh0PVwiU2F2ZVwiXHJcbiAgICAgICAgY2FuY2VsVGV4dD1cIkNhbmNlbFwiXHJcbiAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS5zaG93RHVwbGljYXRlfVxyXG4gICAgICAgIG9uT2s9e3RoaXMub25DbGlja0R1cGxpY2F0ZX1cclxuICAgICAgICBvbkNhbmNlbD17dGhpcy5vbkNhbmNlbER1cGxpY2F0ZX1cclxuICAgICAgICBjbGFzc05hbWU9XCJkdXBsaWNhdGUtbW9kYWxcIlxyXG4gICAgICA+XHJcbiAgICAgICAgPElucHV0XHJcbiAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5kdXBsaWNhdGVOYW1lfVxyXG4gICAgICAgICAgb25LZXlEb3duPXtlID0+IHsgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHRoaXMub25DbGlja0R1cGxpY2F0ZSgpIH19XHJcbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZUR1cGxpY2F0ZX1cclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwibWFjcm8gbmFtZVwiXHJcbiAgICAgICAgICByZWY9e2VsID0+IHsgdGhpcy5pbnB1dER1cGxpY2F0ZVRlc3RDYXNlID0gZWwgfX1cclxuICAgICAgICAvPlxyXG4gICAgICA8L01vZGFsPlxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyUmVuYW1lTW9kYWwgKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPE1vZGFsXHJcbiAgICAgICAgdGl0bGU9XCJSZW5hbWUgdGhlIG1hY3JvIGFzLi5cIlxyXG4gICAgICAgIG9rVGV4dD1cIlNhdmVcIlxyXG4gICAgICAgIGNhbmNlbFRleHQ9XCJDYW5jZWxcIlxyXG4gICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUuc2hvd1JlbmFtZX1cclxuICAgICAgICBvbk9rPXt0aGlzLm9uQ2xpY2tSZW5hbWV9XHJcbiAgICAgICAgb25DYW5jZWw9e3RoaXMub25DYW5jZWxSZW5hbWV9XHJcbiAgICAgICAgY2xhc3NOYW1lPVwicmVuYW1lLW1vZGFsXCJcclxuICAgICAgPlxyXG4gICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fVxyXG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucmVuYW1lfVxyXG4gICAgICAgICAgb25LZXlEb3duPXtlID0+IHsgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHRoaXMub25DbGlja1JlbmFtZSgpIH19XHJcbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZVJlbmFtZX1cclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwibWFjcm8gbmFtZVwiXHJcbiAgICAgICAgICByZWY9e2VsID0+IHsgdGhpcy5pbnB1dFJlbmFtZVRlc3RDYXNlID0gZWwgfX1cclxuICAgICAgICAvPlxyXG4gICAgICA8L01vZGFsPlxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXN0LWNhc2UtYWN0aW9uc1wiPlxyXG4gICAgICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMuYWRkVGVzdENhc2V9PisgTWFjcm88L0J1dHRvbj5cclxuICAgICAgICAgIDxEcm9wZG93biBvdmVybGF5PXt0aGlzLnJlbmRlclRlc3RDYXNlTWVudSgpfSB0cmlnZ2VyPXtbJ2NsaWNrJ119PlxyXG4gICAgICAgICAgICA8QnV0dG9uIHNoYXBlPVwiY2lyY2xlXCI+XHJcbiAgICAgICAgICAgICAgPEljb24gdHlwZT1cInNldHRpbmdcIiAvPlxyXG4gICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgIDwvRHJvcGRvd24+XHJcbiAgICAgICAgICA8U2VhcmNoQm94XHJcbiAgICAgICAgICAgIHN0eWxlPXt7IGZsZXg6IDEgfX1cclxuICAgICAgICAgICAgaW5wdXRQcm9wcz17e1xyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnc2VhcmNoIG1hY3JvJyxcclxuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5zZWFyY2hUZXh0LFxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBlID0+IHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hUZXh0OiBlLnRhcmdldC52YWx1ZSB9KVxyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAge3RoaXMucmVuZGVyVGVzdENhc2VzKCl9XHJcbiAgICAgICAge3RoaXMucmVuZGVyVGVzdENhc2VDb250ZXh0TWVudSgpfVxyXG4gICAgICAgIHt0aGlzLnJlbmRlckR1cGxpY2F0ZU1vZGFsKCl9XHJcbiAgICAgICAge3RoaXMucmVuZGVyUmVuYW1lTW9kYWwoKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxyXG4gIHN0YXRlID0+ICh7XHJcbiAgICBzdGF0dXM6IHN0YXRlLnN0YXR1cyxcclxuICAgIHRlc3RDYXNlczogc3RhdGUuZWRpdG9yLnRlc3RDYXNlcyxcclxuICAgIHRlc3RTdWl0ZXM6IHN0YXRlLmVkaXRvci50ZXN0U3VpdGVzLFxyXG4gICAgZWRpdGluZzogc3RhdGUuZWRpdG9yLmVkaXRpbmcsXHJcbiAgICBwbGF5ZXI6IHN0YXRlLnBsYXllcixcclxuICAgIGNvbmZpZzogc3RhdGUuY29uZmlnXHJcbiAgfSksXHJcbiAgZGlzcGF0Y2ggPT4gYmluZEFjdGlvbkNyZWF0b3JzKHsuLi5hY3Rpb25zfSwgZGlzcGF0Y2gpXHJcbikoU2lkZWJhclRlc3RDYXNlcylcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycywgY29tcG9zZSB9ICBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHsgTW9kYWwsIFRhYnMsIEljb24sIFNlbGVjdCwgSW5wdXQsIEJ1dHRvbiwgTWVudSwgRHJvcGRvd24sIEFsZXJ0LCBtZXNzYWdlIH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IENsaWNrT3V0c2lkZSBmcm9tICdyZWFjdC1jbGljay1vdXRzaWRlJ1xyXG5pbXBvcnQgSlNaaXAgZnJvbSAnanN6aXAnXHJcblxyXG5pbXBvcnQgRmlsZVNhdmVyIGZyb20gJy4uLy4uL2NvbW1vbi9saWIvZmlsZV9zYXZlcidcclxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi8uLi9hY3Rpb25zJ1xyXG5pbXBvcnQgKiBhcyBDIGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudCdcclxuaW1wb3J0IGdldFNhdmVUZXN0Q2FzZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL3NhdmVfdGVzdF9jYXNlJ1xyXG5pbXBvcnQgeyBnZXRQbGF5ZXIgfSBmcm9tICcuLi8uLi9jb21tb24vcGxheWVyJ1xyXG5pbXBvcnQgeyBzZXRJbiwgdXBkYXRlSW4sIGNuLCBmb3JtYXREYXRlLCBuYW1lRmFjdG9yeSB9IGZyb20gJy4uLy4uL2NvbW1vbi91dGlscydcclxuaW1wb3J0IHsgc3RyaW5naWZ5VGVzdFN1aXRlLCBwYXJzZVRlc3RTdWl0ZSwgdmFsaWRhdGVUZXN0U3VpdGVUZXh0LCB0b0Jvb2ttYXJrRGF0YSwgdG9IdG1sIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnZlcnRfc3VpdGVfdXRpbHMnXHJcbmltcG9ydCB7IGNyZWF0ZUJvb2ttYXJrT25CYXIgfSBmcm9tICcuLi8uLi9jb21tb24vYm9va21hcmsnXHJcbmltcG9ydCBFZGl0VGVzdFN1aXRlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZWRpdF90ZXN0X3N1aXRlJ1xyXG5pbXBvcnQgRWRpdGFibGVUZXh0IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZWRpdGFibGVfdGV4dCdcclxuXHJcbmNvbnN0IGRvd25sb2FkVGVzdFN1aXRlID0gKHRzLCB0ZXN0Q2FzZXMpID0+IHtcclxuICBjb25zdCBzdHIgPSBzdHJpbmdpZnlUZXN0U3VpdGUoe1xyXG4gICAgbmFtZTogICB0cy5uYW1lLFxyXG4gICAgY2FzZXM6ICB0cy5jYXNlc1xyXG4gIH0sIHRlc3RDYXNlcylcclxuICBjb25zdCBibG9iID0gbmV3IEJsb2IoW3N0cl0sIHsgdHlwZTogJ3RleHQvcGxhaW47Y2hhcnNldD11dGYtOCcgfSlcclxuXHJcbiAgRmlsZVNhdmVyLnNhdmVBcyhibG9iLCBgc3VpdGVfJHt0cy5uYW1lfS5qc29uYClcclxufVxyXG5cclxuY29uc3QgZG93bmxvYWRUZXN0U3VpdGVBc0hUTUwgPSAodHMpID0+IHtcclxuICBjb25zdCBzdHIgPSB0b0h0bWwoeyBuYW1lOiB0cy5uYW1lIH0pXHJcbiAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtzdHJdLCB7IHR5cGU6ICd0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgnIH0pXHJcblxyXG4gIEZpbGVTYXZlci5zYXZlQXMoYmxvYiwgYCR7dHMubmFtZX0uaHRtbGApXHJcbn1cclxuXHJcbmNsYXNzIFNpZGViYXJUZXN0U3VpdGVzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBzdGF0ZSA9IHtcclxuICAgIHRzQ29udGV4dE1lbnU6IHtcclxuICAgICAgeDogbnVsbCxcclxuICAgICAgeTogbnVsbCxcclxuICAgICAgaXNTaG93bjogZmFsc2VcclxuICAgIH0sXHJcblxyXG4gICAgdHNjQ29udGV4dE1lbnU6IHtcclxuICAgICAgeDogbnVsbCxcclxuICAgICAgeTogbnVsbCxcclxuICAgICAgaXNTaG93bjogZmFsc2VcclxuICAgIH0sXHJcblxyXG4gICAgdHNFZGl0aW5nTmFtZUluZGV4OiAtMSxcclxuXHJcbiAgICBlZGl0VGVzdFN1aXRlU291cmNlOiB7XHJcbiAgICAgIHRzOiBudWxsLFxyXG4gICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkVGVzdFN1aXRlID0gKCkgPT4ge1xyXG4gICAgdGhpcy5wcm9wcy5hZGRUZXN0U3VpdGUoe1xyXG4gICAgICBuYW1lOiAnX19VbnRpdGxlZF9fJyxcclxuICAgICAgY2FzZXM6IFtdXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgYWRkVGVzdENhc2VUb1Rlc3RTdWl0ZSA9ICh0cykgPT4ge1xyXG4gICAgdGhpcy5wcm9wcy51cGRhdGVUZXN0U3VpdGUodHMuaWQsIHtcclxuICAgICAgY2FzZXM6IHRzLmNhc2VzLmNvbmNhdCh7XHJcbiAgICAgICAgdGVzdENhc2VJZDogdGhpcy5wcm9wcy50ZXN0Q2FzZXNbMF0gJiYgdGhpcy5wcm9wcy50ZXN0Q2FzZXNbMF0uaWQsXHJcbiAgICAgICAgbG9vcHM6IDFcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICByZW1vdmVUZXN0Q2FzZUZyb21UZXN0U3VpdGUgPSAodHMsIGluZGV4KSA9PiB7XHJcbiAgICB0cy5jYXNlcy5zcGxpY2UoaW5kZXgsIDEpXHJcblxyXG4gICAgdGhpcy5wcm9wcy51cGRhdGVUZXN0U3VpdGUodHMuaWQsIHtcclxuICAgICAgY2FzZXM6IHRzLmNhc2VzLFxyXG4gICAgICBwbGF5U3RhdHVzOiAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IHsgcGxheVN0YXR1cyA9IHt9IH0gPSB0c1xyXG4gICAgICAgIGNvbnN0IHsgZG9uZUluZGljZXMgPSBbXSwgZXJyb3JJbmRpY2VzID0gW10gfSA9IHBsYXlTdGF0dXNcclxuICAgICAgICBjb25zdCB1cGRhdGVJbmRleCA9IChuKSA9PiB7XHJcbiAgICAgICAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSAgcmV0dXJuIC0xXHJcbiAgICAgICAgICBpZiAobiA9PT0gaW5kZXgpICAgICAgcmV0dXJuIC0xXHJcbiAgICAgICAgICBpZiAobiA+IGluZGV4KSAgICAgICAgcmV0dXJuIG4gLSAxXHJcbiAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGVycm9ySW5kaWNlczogZXJyb3JJbmRpY2VzLm1hcCh1cGRhdGVJbmRleCkuZmlsdGVyKGkgPT4gaSAhPT0gLTEpLFxyXG4gICAgICAgICAgZG9uZUluZGljZXM6IGRvbmVJbmRpY2VzLm1hcCh1cGRhdGVJbmRleCkuZmlsdGVyKGkgPT4gaSAhPT0gLTEpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KSgpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlVGVzdFN1aXRlRm9sZCA9ICh0cykgPT4ge1xyXG4gICAgdGhpcy5wcm9wcy51cGRhdGVUZXN0U3VpdGUodHMuaWQsIHtcclxuICAgICAgZm9sZDogIXRzLmZvbGRcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBmb2xkQWxsVGVzdFN1aXRlcyA9ICgpID0+IHtcclxuICAgIHRoaXMucHJvcHMudGVzdFN1aXRlcy5mb3JFYWNoKHRzID0+IHtcclxuICAgICAgdGhpcy5wcm9wcy51cGRhdGVUZXN0U3VpdGUodHMuaWQsIHtcclxuICAgICAgICBmb2xkOiB0cnVlXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgb25DbGlja1Rlc3RTdWl0ZU1vcmUgPSAoZSwgdHMsIHRzSW5kZXgpID0+IHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG5cclxuICAgIGNvbnN0IHVwZGF0ZWQgPSB7XHJcbiAgICAgIHRzQ29udGV4dE1lbnU6IHtcclxuICAgICAgICB4OiBlLmNsaWVudFgsXHJcbiAgICAgICAgeTogZS5jbGllbnRZLFxyXG4gICAgICAgIGlzU2hvd246IHRydWUsXHJcbiAgICAgICAgdHMsXHJcbiAgICAgICAgdHNJbmRleFxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm90ZTogdG8gbWFrZSBpdCB3b3JrIGluIEZpcmVmb3gsIGhhdmUgdG8gZGVsYXkgdGhpcyBuZXcgc3RhdGUgYSBsaXR0bGUgYml0XHJcbiAgICAvLyBCZWNhdXNlIGhpZGVUY0NvbnRleHRNZW51IGNvdWxkIGJlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdmlhIGNsaWNrT3V0c2lkZVxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNldFN0YXRlKHVwZGF0ZWQpLCAyMClcclxuICB9XHJcblxyXG4gIG9uQ2xpY2tUc1Rlc3RDYXNlTW9yZSA9IChlLCB0YywgdGNJbmRleCwgdHMsIHRzSW5kZXgpID0+IHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG5cclxuICAgIGNvbnN0IHVwZGF0ZWQgPSB7XHJcbiAgICAgIHRzY0NvbnRleHRNZW51OiB7XHJcbiAgICAgICAgeDogZS5jbGllbnRYLFxyXG4gICAgICAgIHk6IGUuY2xpZW50WSxcclxuICAgICAgICBpc1Nob3duOiB0cnVlLFxyXG4gICAgICAgIHRjLFxyXG4gICAgICAgIHRzLFxyXG4gICAgICAgIHRjSW5kZXgsXHJcbiAgICAgICAgdHNJbmRleFxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm90ZTogdG8gbWFrZSBpdCB3b3JrIGluIEZpcmVmb3gsIGhhdmUgdG8gZGVsYXkgdGhpcyBuZXcgc3RhdGUgYSBsaXR0bGUgYml0XHJcbiAgICAvLyBCZWNhdXNlIGhpZGVUY0NvbnRleHRNZW51IGNvdWxkIGJlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdmlhIGNsaWNrT3V0c2lkZVxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNldFN0YXRlKHVwZGF0ZWQpLCAyMClcclxuICB9XHJcblxyXG4gIGhpZGVUc0NvbnRleHRNZW51ID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHRzQ29udGV4dE1lbnU6IHtcclxuICAgICAgICAuLi50aGlzLnN0YXRlLnRzQ29udGV4dE1lbnUsXHJcbiAgICAgICAgaXNTaG93bjogZmFsc2VcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGhpZGVUc2NDb250ZXh0TWVudSA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICB0c2NDb250ZXh0TWVudToge1xyXG4gICAgICAgIC4uLnRoaXMuc3RhdGUudHNjQ29udGV4dE1lbnUsXHJcbiAgICAgICAgaXNTaG93bjogZmFsc2VcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIG9uVHNNZW51Q2xpY2sgPSAoeyBrZXkgfSwgdHMsIHRzSW5kZXgpID0+IHtcclxuICAgIHRoaXMuaGlkZVRzQ29udGV4dE1lbnUoKVxyXG5cclxuICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgIGNhc2UgJ3BsYXknOlxyXG4gICAgICAgIGdldFBsYXllcih7IG5hbWU6ICd0ZXN0U3VpdGUnIH0pLnBsYXkoe1xyXG4gICAgICAgICAgdGl0bGU6IHRzLm5hbWUsXHJcbiAgICAgICAgICBleHRyYToge1xyXG4gICAgICAgICAgICBpZDogdHMuaWQsXHJcbiAgICAgICAgICAgIG5hbWU6IHRzLm5hbWVcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBtb2RlOiBnZXRQbGF5ZXIoKS5DLk1PREUuU1RSQUlHSFQsXHJcbiAgICAgICAgICBzdGFydEluZGV4OiAwLFxyXG4gICAgICAgICAgcmVzb3VyY2VzOiB0cy5jYXNlcy5tYXAoaXRlbSA9PiAoe1xyXG4gICAgICAgICAgICBpZDogICAgIGl0ZW0udGVzdENhc2VJZCxcclxuICAgICAgICAgICAgbG9vcHM6ICBpdGVtLmxvb3BzXHJcbiAgICAgICAgICB9KSlcclxuICAgICAgICB9KVxyXG4gICAgICAgIGJyZWFrXHJcblxyXG4gICAgICBjYXNlICdlZGl0X3NvdXJjZSc6XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBlZGl0VGVzdFN1aXRlU291cmNlOiB7XHJcbiAgICAgICAgICAgIHRzLFxyXG4gICAgICAgICAgICB2aXNpYmxlOiB0cnVlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICBicmVha1xyXG5cclxuICAgICAgY2FzZSAncmVuYW1lJzpcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHRzRWRpdGluZ05hbWVJbmRleDogdHNJbmRleFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgIGNhc2UgJ2V4cG9ydCc6XHJcbiAgICAgICAgZG93bmxvYWRUZXN0U3VpdGUodHMsIHRoaXMucHJvcHMudGVzdENhc2VzKVxyXG4gICAgICAgIGJyZWFrXHJcblxyXG4gICAgICBjYXNlICdjcmVhdGVfYm9va21hcmsnOiB7XHJcbiAgICAgICAgY29uc3QgYm9va21hcmtUaXRsZSA9IHByb21wdCgnVGl0bGUgZm9yIHRoaXMgYm9va21hcmsnLCBgIyR7dHMubmFtZX0ua2FudHVgKVxyXG4gICAgICAgIGlmIChib29rbWFya1RpdGxlID09PSBudWxsKSByZXR1cm5cclxuXHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJvb2ttYXJrT25CYXIodG9Cb29rbWFya0RhdGEoe1xyXG4gICAgICAgICAgYm9va21hcmtUaXRsZSxcclxuICAgICAgICAgIG5hbWU6IHRzLm5hbWVcclxuICAgICAgICB9KSlcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MoJ3N1Y2Nlc3NmdWxseSBjcmVhdGVkIGJvb2ttYXJrIScsIDEuNSlcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjYXNlICdleHBvcnRfaHRtbCc6IHtcclxuICAgICAgICByZXR1cm4gZG93bmxvYWRUZXN0U3VpdGVBc0hUTUwodHMpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgJ2RlbGV0ZSc6XHJcbiAgICAgICAgTW9kYWwuY29uZmlybSh7XHJcbiAgICAgICAgICB0aXRsZTogJ0FyZSB5b3VyIHN1cmUgdG8gZGVsZXRlIHRoaXMgdGVzdCBzdWl0ZT8nLFxyXG4gICAgICAgICAgb2tUZXh0OiAnQ29uZmlybScsXHJcbiAgICAgICAgICBvbk9rOiAoKSA9PiB0aGlzLnByb3BzLnJlbW92ZVRlc3RTdWl0ZSh0cy5pZClcclxuICAgICAgICB9KVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblRzY01lbnVDbGljayA9ICh7IGtleSB9LCB0YywgdGNJbmRleCwgdHMsIHRzSW5kZXgpID0+IHtcclxuICAgIHRoaXMuaGlkZVRzY0NvbnRleHRNZW51KClcclxuXHJcbiAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICBjYXNlICdwbGF5X2Zyb21faGVyZSc6XHJcbiAgICAgICAgZ2V0UGxheWVyKHsgbmFtZTogJ3Rlc3RTdWl0ZScgfSkucGxheSh7XHJcbiAgICAgICAgICB0aXRsZTogdHMubmFtZSxcclxuICAgICAgICAgIGV4dHJhOiB7XHJcbiAgICAgICAgICAgIGlkOiB0cy5pZCxcclxuICAgICAgICAgICAgbmFtZTogdHMubmFtZVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIG1vZGU6IGdldFBsYXllcigpLkMuTU9ERS5TVFJBSUdIVCxcclxuICAgICAgICAgIHN0YXJ0SW5kZXg6IHRjSW5kZXgsXHJcbiAgICAgICAgICByZXNvdXJjZXM6IHRzLmNhc2VzLm1hcChpdGVtID0+ICh7XHJcbiAgICAgICAgICAgIGlkOiAgICAgaXRlbS50ZXN0Q2FzZUlkLFxyXG4gICAgICAgICAgICBsb29wczogIGl0ZW0ubG9vcHNcclxuICAgICAgICAgIH0pKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgYnJlYWtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uQ2hhbmdlVHNOYW1lID0gKHZhbCwgdHMsIHRzSW5kZXgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICB0c0VkaXRpbmdOYW1lSW5kZXg6IC0xXHJcbiAgICB9KVxyXG5cclxuICAgIHRoaXMucHJvcHMudXBkYXRlVGVzdFN1aXRlKHRzLmlkLCB7XHJcbiAgICAgIG5hbWU6IHZhbFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIG9uQ2hhbmdlVHNDYXNlID0gKGtleSwgdmFsLCB0Y0luZGV4LCB0cywgdHNJbmRleCkgPT4ge1xyXG4gICAgdGhpcy5wcm9wcy51cGRhdGVUZXN0U3VpdGUodHMuaWQsIHtcclxuICAgICAgY2FzZXM6IHNldEluKFt0Y0luZGV4LCBrZXldLCB2YWwsIHRzLmNhc2VzKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGdldFRzVGVzdENhc2VDbGFzcyA9ICh0Y0luZGV4LCB0c1BsYXlTdGF0dXMpID0+IHtcclxuICAgIGlmICghdHNQbGF5U3RhdHVzKSAgcmV0dXJuICcnXHJcbiAgICBjb25zdCB7IGRvbmVJbmRpY2VzID0gW10sIGVycm9ySW5kaWNlcyA9IFtdLCBjdXJyZW50SW5kZXggfSA9IHRzUGxheVN0YXR1c1xyXG5cclxuICAgIGlmICh0Y0luZGV4ID09PSBjdXJyZW50SW5kZXgpIHtcclxuICAgICAgcmV0dXJuICdjdXJyZW50LXRjJ1xyXG4gICAgfSBlbHNlIGlmIChlcnJvckluZGljZXMuaW5kZXhPZih0Y0luZGV4KSAhPT0gLTEpIHtcclxuICAgICAgcmV0dXJuICdlcnJvci10YydcclxuICAgIH0gZWxzZSBpZiAoZG9uZUluZGljZXMuaW5kZXhPZih0Y0luZGV4KSAhPT0gLTEpIHtcclxuICAgICAgcmV0dXJuICdkb25lLXRjJ1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuICcnXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkpTT05GaWxlQ2hhbmdlID0gKGUpID0+IHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0aGlzLmpzb25GaWxlSW5wdXQudmFsdWUgPSBudWxsXHJcbiAgICB9LCA1MDApXHJcbiAgICByZXR1cm4gdGhpcy5vblJlYWRGaWxlKHN0ciA9PiBwYXJzZVRlc3RTdWl0ZShzdHIsIHRoaXMucHJvcHMudGVzdENhc2VzKSkoZSlcclxuICB9XHJcblxyXG4gIG9uUmVhZEZpbGUgPSAocHJvY2VzcykgPT4gKGUpID0+IHtcclxuICAgIGNvbnN0IGZpbGVzID0gW10uc2xpY2UuY2FsbChlLnRhcmdldC5maWxlcylcclxuICAgIGlmICghZmlsZXMgfHwgIWZpbGVzLmxlbmd0aCkgIHJldHVyblxyXG5cclxuICAgIGNvbnN0IHJlYWQgPSAoZmlsZSkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlYWRlciAgPSBuZXcgRmlsZVJlYWRlcigpXHJcblxyXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSAocmVhZGVyRXZlbnQpID0+IHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgID0gcmVhZGVyRXZlbnQudGFyZ2V0LnJlc3VsdFxyXG4gICAgICAgICAgICBjb25zdCBvYmogICA9IHByb2Nlc3ModGV4dCwgZmlsZS5uYW1lKVxyXG4gICAgICAgICAgICByZXNvbHZlKHsgZGF0YTogb2JqIH0pXHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoeyBlcnI6IGUsIGZpbGVOYW1lOiBmaWxlLm5hbWUgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgUHJvbWlzZS5hbGwoZmlsZXMubWFwKHJlYWQpKVxyXG4gICAgLnRoZW4obGlzdCA9PiB7XHJcbiAgICAgIGNvbnN0IGRvbmVMaXN0ID0gbGlzdC5maWx0ZXIoeCA9PiB4LmRhdGEpXHJcbiAgICAgIGNvbnN0IGZhaWxMaXN0ID0gbGlzdC5maWx0ZXIoeCA9PiB4LmVycilcclxuXHJcbiAgICAgIHRoaXMucHJvcHMuYWRkVGVzdFN1aXRlcyhkb25lTGlzdC5tYXAoeCA9PiB4LmRhdGEpKVxyXG4gICAgICAgIC50aGVuKCh7IHBhc3NDb3VudCwgZmFpbENvdW50LCBmYWlsVGNzIH0pID0+IHtcclxuICAgICAgICAgIG1lc3NhZ2UuaW5mbyhcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgIGAke3Bhc3NDb3VudH0gdGVzdCBzdWl0ZSR7cGFzc0NvdW50ID4gMSA/ICdzJyA6ICcnfSBpbXBvcnRlZCFgLFxyXG4gICAgICAgICAgICAgIGAke2ZhaWxMaXN0Lmxlbmd0aCArIGZhaWxDb3VudH0gdGVzdCBzdWl0ZSR7KGZhaWxMaXN0Lmxlbmd0aCArIGZhaWxDb3VudCkgPiAxID8gJ3MnIDogJyd9IGZhaWxlZCFgXHJcbiAgICAgICAgICAgIF0uam9pbignLCAnKSxcclxuICAgICAgICAgICAgM1xyXG4gICAgICAgICAgKVxyXG5cclxuICAgICAgICAgIGZhaWxMaXN0LmZvckVhY2goZmFpbCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuYWRkTG9nKCdlcnJvcicsIGBpbiBwYXJzaW5nICR7ZmFpbC5maWxlTmFtZX06ICR7ZmFpbC5lcnIubWVzc2FnZX1gKVxyXG4gICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICBmYWlsVGNzLmZvckVhY2goZmFpbCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuYWRkTG9nKCdlcnJvcicsIGBkdXBsaWNhdGVkIHRlc3Qgc3VpdGUgbmFtZTogJHtmYWlsLm5hbWV9YClcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBvbkNsb3NlUGxheVRlc3RTdWl0ZVRpcCA9ICgpID0+IHtcclxuICAgIHRoaXMucHJvcHMudXBkYXRlQ29uZmlnKHtcclxuICAgICAgaGlkZVBsYXlUZXN0U3VpdGVUaXA6IHRydWVcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBnZXRQb3J0YWxDb250YWluZXIgKCkge1xyXG4gICAgY29uc3QgaWQgPSAnX19jb250ZXh0X21lbnVfY29udGFpbmVyX18nXHJcbiAgICBjb25zdCAkZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZClcclxuICAgIGlmICgkZWwpICByZXR1cm4gJGVsXHJcblxyXG4gICAgY29uc3QgJG5ldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICAkbmV3LmlkID0gaWRcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoJG5ldylcclxuICAgIHJldHVybiAkbmV3XHJcbiAgfVxyXG5cclxuICByZW5kZXJUZXN0U3VpdGVDb250ZXh0TWVudSAoKSB7XHJcbiAgICBjb25zdCBjb250ZXh0TWVudSA9IHRoaXMuc3RhdGUudHNDb250ZXh0TWVudVxyXG4gICAgY29uc3QgbXcgID0gMjMwXHJcbiAgICBsZXQgeCAgICAgPSBjb250ZXh0TWVudS54ICsgd2luZG93LnNjcm9sbFhcclxuICAgIGxldCB5ICAgICA9IGNvbnRleHRNZW51LnkgKyB3aW5kb3cuc2Nyb2xsWVxyXG5cclxuICAgIGlmICh4IC0gbXcgPiAwKSAgICB4IC09IG13XHJcblxyXG4gICAgY29uc3Qgc3R5bGUgPSB7XHJcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICB0b3A6IHksXHJcbiAgICAgIGxlZnQ6IHgsXHJcbiAgICAgIGRpc3BsYXk6IGNvbnRleHRNZW51LmlzU2hvd24gPyAnYmxvY2snIDogJ25vbmUnXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbWVudVN0eWxlID0ge1xyXG4gICAgICB3aWR0aDogbXcgKyAncHgnXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29udGVudCA9IChcclxuICAgICAgPGRpdiBzdHlsZT17c3R5bGV9IGNsYXNzTmFtZT1cImNvbnRleHQtbWVudVwiPlxyXG4gICAgICAgIDxDbGlja091dHNpZGUgb25DbGlja091dHNpZGU9e3RoaXMuaGlkZVRzQ29udGV4dE1lbnV9PlxyXG4gICAgICAgICAgPE1lbnVcclxuICAgICAgICAgICAgb25DbGljaz17ZSA9PiB0aGlzLm9uVHNNZW51Q2xpY2soZSwgY29udGV4dE1lbnUudHMsIGNvbnRleHRNZW51LnRzSW5kZXgpfVxyXG4gICAgICAgICAgICBzdHlsZT17bWVudVN0eWxlfVxyXG4gICAgICAgICAgICBtb2RlPVwidmVydGljYWxcIlxyXG4gICAgICAgICAgICBzZWxlY3RhYmxlPXtmYWxzZX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJwbGF5XCI+UGxheTwvTWVudS5JdGVtPlxyXG4gICAgICAgICAgICA8TWVudS5JdGVtIGtleT1cImVkaXRfc291cmNlXCI+RWRpdCBzb3VyY2UuLjwvTWVudS5JdGVtPlxyXG4gICAgICAgICAgICA8TWVudS5JdGVtIGtleT1cInJlbmFtZVwiPlJlbmFtZS4uPC9NZW51Lkl0ZW0+XHJcbiAgICAgICAgICAgIDxNZW51Lkl0ZW0ga2V5PVwiZXhwb3J0XCI+RXhwb3J0PC9NZW51Lkl0ZW0+XHJcbiAgICAgICAgICAgIDxNZW51Lkl0ZW0ga2V5PVwiZXhwb3J0X2h0bWxcIj5DcmVhdGUgSFRNTCBhdXRvcnVuIHBhZ2U8L01lbnUuSXRlbT5cclxuICAgICAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJjcmVhdGVfYm9va21hcmtcIj5BZGQgdG8gQm9va21hcmtzPC9NZW51Lkl0ZW0+XHJcbiAgICAgICAgICAgIDxNZW51LkRpdmlkZXIgLz5cclxuICAgICAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJkZWxldGVcIj5EZWxldGU8L01lbnUuSXRlbT5cclxuICAgICAgICAgIDwvTWVudT5cclxuICAgICAgICA8L0NsaWNrT3V0c2lkZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcblxyXG4gICAgcmV0dXJuIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChjb250ZW50LCB0aGlzLmdldFBvcnRhbENvbnRhaW5lcigpKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyVGVzdFN1aXRlQ2FzZUNvbnRleHRNZW51ICgpIHtcclxuICAgIGNvbnN0IGNvbnRleHRNZW51ID0gdGhpcy5zdGF0ZS50c2NDb250ZXh0TWVudVxyXG4gICAgY29uc3QgbXcgID0gMTUwXHJcbiAgICBsZXQgeCAgICAgPSBjb250ZXh0TWVudS54ICsgd2luZG93LnNjcm9sbFhcclxuICAgIGxldCB5ICAgICA9IGNvbnRleHRNZW51LnkgKyB3aW5kb3cuc2Nyb2xsWVxyXG5cclxuICAgIGlmICh4IC0gbXcgPiAwKSAgICB4IC09IG13XHJcblxyXG4gICAgY29uc3Qgc3R5bGUgPSB7XHJcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICB0b3A6IHksXHJcbiAgICAgIGxlZnQ6IHgsXHJcbiAgICAgIGRpc3BsYXk6IGNvbnRleHRNZW51LmlzU2hvd24gPyAnYmxvY2snIDogJ25vbmUnXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbWVudVN0eWxlID0ge1xyXG4gICAgICB3aWR0aDogbXcgKyAncHgnXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29udGVudCA9IChcclxuICAgICAgPGRpdiBzdHlsZT17c3R5bGV9IGNsYXNzTmFtZT1cImNvbnRleHQtbWVudVwiPlxyXG4gICAgICAgIDxDbGlja091dHNpZGUgb25DbGlja091dHNpZGU9e3RoaXMuaGlkZVRzY0NvbnRleHRNZW51fT5cclxuICAgICAgICAgIDxNZW51XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2UgPT4gdGhpcy5vblRzY01lbnVDbGljayhlLCBjb250ZXh0TWVudS50YywgY29udGV4dE1lbnUudGNJbmRleCwgY29udGV4dE1lbnUudHMsIGNvbnRleHRNZW51LnRzSW5kZXgpfVxyXG4gICAgICAgICAgICBzdHlsZT17bWVudVN0eWxlfVxyXG4gICAgICAgICAgICBtb2RlPVwidmVydGljYWxcIlxyXG4gICAgICAgICAgICBzZWxlY3RhYmxlPXtmYWxzZX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPE1lbnUuSXRlbSBrZXk9XCJwbGF5X2Zyb21faGVyZVwiPlJlcGxheSBmcm9tIGhlcmU8L01lbnUuSXRlbT5cclxuICAgICAgICAgIDwvTWVudT5cclxuICAgICAgICA8L0NsaWNrT3V0c2lkZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcblxyXG4gICAgcmV0dXJuIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChjb250ZW50LCB0aGlzLmdldFBvcnRhbENvbnRhaW5lcigpKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyVGVzdFN1aXRlTWVudSAoKSB7XHJcbiAgICBjb25zdCBvbkNsaWNrTWVudUl0ZW0gPSAoeyBrZXkgfSkgPT4ge1xyXG4gICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgIGNhc2UgJ2V4cG9ydF9hbGwnOiB7XHJcbiAgICAgICAgICBjb25zdCB6aXAgPSBuZXcgSlNaaXAoKVxyXG5cclxuICAgICAgICAgIGlmICh0aGlzLnByb3BzLnRlc3RTdWl0ZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlLmVycm9yKCdObyBzYXZlZCB0ZXN0IHN1aXRlcyB0byBleHBvcnQnLCAxLjUpXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY29uc3QgZ2VuTmFtZSA9IG5hbWVGYWN0b3J5KClcclxuXHJcbiAgICAgICAgICB0aGlzLnByb3BzLnRlc3RTdWl0ZXMuZm9yRWFjaCh0cyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBnZW5OYW1lKHRzLm5hbWUpXHJcbiAgICAgICAgICAgIHppcC5maWxlKGAke25hbWV9Lmpzb25gLCBzdHJpbmdpZnlUZXN0U3VpdGUodHMsIHRoaXMucHJvcHMudGVzdENhc2VzKSlcclxuICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgemlwLmdlbmVyYXRlQXN5bmMoeyB0eXBlOiAnYmxvYicgfSlcclxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChibG9iKSB7XHJcbiAgICAgICAgICAgIEZpbGVTYXZlci5zYXZlQXMoYmxvYiwgJ2FsbF9zdWl0ZXMuemlwJyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FzZSAnaW1wb3J0Jzoge1xyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8TWVudSBvbkNsaWNrPXtvbkNsaWNrTWVudUl0ZW19IHNlbGVjdGFibGU9e2ZhbHNlfT5cclxuICAgICAgICA8TWVudS5JdGVtIGtleT1cImV4cG9ydF9hbGxcIj5FeHBvcnQgYWxsIChKU09OKTwvTWVudS5JdGVtPlxyXG4gICAgICAgIDxNZW51Lkl0ZW0ga2V5PVwiNFwiPlxyXG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzZWxlY3RfanNvbl9maWxlc19mb3JfdHNcIj5JbXBvcnQgSlNPTjwvbGFiZWw+XHJcbiAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgbXVsdGlwbGVcclxuICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxyXG4gICAgICAgICAgICBhY2NlcHQ9XCIuanNvblwiXHJcbiAgICAgICAgICAgIGlkPVwic2VsZWN0X2pzb25fZmlsZXNfZm9yX3RzXCJcclxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25KU09ORmlsZUNoYW5nZX1cclxuICAgICAgICAgICAgc3R5bGU9e3tkaXNwbGF5OiAnbm9uZSd9fVxyXG4gICAgICAgICAgICByZWY9e2VsID0+IHsgdGhpcy5qc29uRmlsZUlucHV0ID0gZWwgfX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9NZW51Lkl0ZW0+XHJcbiAgICAgIDwvTWVudT5cclxuICAgIClcclxuICB9XHJcblxyXG4gIHJlbmRlckVkaXRUZXN0U3VpdGVTb3VyY2UgKCkge1xyXG4gICAgaWYgKCF0aGlzLnN0YXRlLmVkaXRUZXN0U3VpdGVTb3VyY2UudmlzaWJsZSkgIHJldHVybiBudWxsXHJcbiAgICBjb25zdCB0cyA9IHRoaXMuc3RhdGUuZWRpdFRlc3RTdWl0ZVNvdXJjZS50c1xyXG4gICAgY29uc3Qgc291cmNlID0gc3RyaW5naWZ5VGVzdFN1aXRlKHRzLCB0aGlzLnByb3BzLnRlc3RDYXNlcylcclxuICAgIGNvbnN0IHRlc3RDYXNlcyA9IHRoaXMucHJvcHMudGVzdENhc2VzXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPEVkaXRUZXN0U3VpdGVcclxuICAgICAgICB2aXNpYmxlPXt0cnVlfVxyXG4gICAgICAgIHZhbHVlPXtzb3VyY2V9XHJcbiAgICAgICAgdmFsaWRhdGU9e3RleHQgPT4gdmFsaWRhdGVUZXN0U3VpdGVUZXh0KHRleHQsIHRlc3RDYXNlcyl9XHJcbiAgICAgICAgb25DbG9zZT17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGVkaXRUZXN0U3VpdGVTb3VyY2U6IHsgdmlzaWJsZTogZmFsc2UgfSB9KX1cclxuICAgICAgICBvbkNoYW5nZT17dGV4dCA9PiB7XHJcbiAgICAgICAgICBjb25zdCBuZXdUZXN0U3VpdGUgPSBwYXJzZVRlc3RTdWl0ZSh0ZXh0LCB0ZXN0Q2FzZXMpXHJcblxyXG4gICAgICAgICAgdGhpcy5wcm9wcy51cGRhdGVUZXN0U3VpdGUodHMuaWQsIG5ld1Rlc3RTdWl0ZSlcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0VGVzdFN1aXRlU291cmNlOiB7IHZpc2libGU6IGZhbHNlIH0gfSlcclxuICAgICAgICB9fVxyXG4gICAgICAvPlxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyVGVzdFN1aXRlcyAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGVzdC1zdWl0ZS1hY3Rpb25zXCI+XHJcbiAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJwcmltYXJ5XCIgb25DbGljaz17dGhpcy5hZGRUZXN0U3VpdGV9PisgVGVzdCBTdWl0ZTwvQnV0dG9uPlxyXG4gICAgICAgICAgPEJ1dHRvbiB0eXBlPVwiZGVmYXVsdFwiIG9uQ2xpY2s9e3RoaXMuZm9sZEFsbFRlc3RTdWl0ZXN9PkZvbGQ8L0J1dHRvbj5cclxuICAgICAgICAgIDxEcm9wZG93biBvdmVybGF5PXt0aGlzLnJlbmRlclRlc3RTdWl0ZU1lbnUoKX0gdHJpZ2dlcj17WydjbGljayddfT5cclxuICAgICAgICAgICAgPEJ1dHRvbiBzaGFwZT1cImNpcmNsZVwiPlxyXG4gICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJzZXR0aW5nXCIgLz5cclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICA8L0Ryb3Bkb3duPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIHshdGhpcy5wcm9wcy5jb25maWcuaGlkZVBsYXlUZXN0U3VpdGVUaXAgJiYgdGhpcy5wcm9wcy50ZXN0U3VpdGVzLmxlbmd0aCA+IDAgPyAoXHJcbiAgICAgICAgICA8QWxlcnRcclxuICAgICAgICAgICAgdHlwZT1cImluZm9cIlxyXG4gICAgICAgICAgICBtZXNzYWdlPVwiUmlnaHQgY2xpY2sgdG8gcGxheSB0ZXN0IHN1aXRlXCJcclxuICAgICAgICAgICAgb25DbG9zZT17dGhpcy5vbkNsb3NlUGxheVRlc3RTdWl0ZVRpcH1cclxuICAgICAgICAgICAgY2xvc2FibGVcclxuICAgICAgICAgICAgc2hvd0ljb25cclxuICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luOiAnMTBweCcsIHBhZGRpbmdSaWdodDogJzMwcHgnIH19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICkgOiBudWxsfVxyXG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJzaWRlYmFyLXRlc3Qtc3VpdGVzXCI+XHJcbiAgICAgICAgICB7dGhpcy5wcm9wcy50ZXN0U3VpdGVzLm1hcCgodHMsIHRzSW5kZXgpID0+IChcclxuICAgICAgICAgICAgPGxpXHJcbiAgICAgICAgICAgICAga2V5PXt0cy5pZH1cclxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKCd0ZXN0LXN1aXRlLWl0ZW0gJywge1xyXG4gICAgICAgICAgICAgICAgZm9sZDogICAgIHRzLmZvbGQsXHJcbiAgICAgICAgICAgICAgICBwbGF5aW5nOiAgdHMucGxheVN0YXR1cyAmJiB0cy5wbGF5U3RhdHVzLmlzUGxheWluZ1xyXG4gICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXN0LXN1aXRlLXJvd1wiXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnRvZ2dsZVRlc3RTdWl0ZUZvbGQodHMpfVxyXG4gICAgICAgICAgICAgICAgb25Db250ZXh0TWVudT17KGUpID0+IHRoaXMub25DbGlja1Rlc3RTdWl0ZU1vcmUoZSwgdHMsIHRzSW5kZXgpfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9e3RzLmZvbGQgPyAnZm9sZGVyJyA6ICdmb2xkZXItb3Blbid9IC8+XHJcbiAgICAgICAgICAgICAgICA8RWRpdGFibGVUZXh0XHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRlc3Qtc3VpdGUtdGl0bGVcIlxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17dHMubmFtZX1cclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3ZhbCA9PiB0aGlzLm9uQ2hhbmdlVHNOYW1lKHZhbCwgdHMsIHRzSW5kZXgpfVxyXG4gICAgICAgICAgICAgICAgICBpc0VkaXRpbmc9e3RzSW5kZXggPT09IHRoaXMuc3RhdGUudHNFZGl0aW5nTmFtZUluZGV4fVxyXG4gICAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogKGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCksXHJcbiAgICAgICAgICAgICAgICAgICAgb25Db250ZXh0TWVudTogKGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICB7dHNJbmRleCA9PT0gdGhpcy5zdGF0ZS50c0VkaXRpbmdOYW1lSW5kZXggPyBudWxsIDogKFxyXG4gICAgICAgICAgICAgICAgICA8SWNvblxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJiYXJzXCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtb3JlLWJ1dHRvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHRoaXMub25DbGlja1Rlc3RTdWl0ZU1vcmUoZSwgdHMsIHRzSW5kZXgpfVxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAge3RzLmNhc2VzLmxlbmd0aCA+IDAgPyAoXHJcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwidGVzdC1zdWl0ZS1jYXNlc1wiPlxyXG4gICAgICAgICAgICAgICAgICB7dHMuY2FzZXMubWFwKChpdGVtLCB0Y0luZGV4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGxpXHJcbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e3RjSW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuZ2V0VHNUZXN0Q2FzZUNsYXNzKHRjSW5kZXgsIHRzLnBsYXlTdGF0dXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25Db250ZXh0TWVudT17KGUpID0+IHRoaXMub25DbGlja1RzVGVzdENhc2VNb3JlKGUsIGl0ZW0sIHRjSW5kZXgsIHRzLCB0c0luZGV4KX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8SWNvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZmlsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpblJpZ2h0OiAnMTBweCcsIGN1cnNvcjogJ3BvaW50ZXInIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHNyYyB9ID0gdGhpcy5wcm9wcy5lZGl0aW5nLm1ldGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnbyA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZWRpdFRlc3RDYXNlKGl0ZW0udGVzdENhc2VJZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFNhdmVUZXN0Q2FzZSgpLnNhdmVPck5vdCgpLnRoZW4oZ28pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93U2VhcmNoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkZpbHRlclByb3A9XCJjaGlsZHJlblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpdGVtLnRlc3RDYXNlSWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt2YWwgPT4gdGhpcy5vbkNoYW5nZVRzQ2FzZSgndGVzdENhc2VJZCcsIHZhbCwgdGNJbmRleCwgdHMsIHRzSW5kZXgpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJPcHRpb249eyhpbnB1dCwgZGF0YSkgPT4gZGF0YS5wcm9wcy5jaGlsZHJlbi50b0xvd2VyQ2FzZSgpLmluZGV4T2YoaW5wdXQudG9Mb3dlckNhc2UoKSkgIT09IC0xfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBmbGV4OiAxLCBtYXJnaW5SaWdodDogJzEwcHgnLCBtYXhXaWR0aDogJzUwJScgfX1cclxuICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMudGVzdENhc2VzLm1hcCh0YyA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdC5PcHRpb24gdmFsdWU9e3RjLmlkfSBrZXk9e3RjLmlkfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0Yy5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0Lk9wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluPXsxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aXRlbS5sb29wc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gdGhpcy5vbkNoYW5nZVRzQ2FzZSgnbG9vcHMnLCBlLnRhcmdldC52YWx1ZS50cmltKCkubGVuZ3RoID09PSAwID8gJzEnIDogZS50YXJnZXQudmFsdWUsIHRjSW5kZXgsIHRzLCB0c0luZGV4KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICc0NXB4JywgbWFyZ2luUmlnaHQ6ICcxMHB4JyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDxJY29uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjbG9zZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGN1cnNvcjogJ3BvaW50ZXInIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMucmVtb3ZlVGVzdENhc2VGcm9tVGVzdFN1aXRlKHRzLCB0Y0luZGV4KX1cclxuICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICkgOiBudWxsfVxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRlc3Qtc3VpdGUtbW9yZS1hY3Rpb25zXCI+XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJkZWZhdWx0XCJcclxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5hZGRUZXN0Q2FzZVRvVGVzdFN1aXRlKHRzKX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgKyBNYWNyb1xyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICApKX1cclxuICAgICAgICA8L3VsPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIHt0aGlzLnJlbmRlclRlc3RTdWl0ZXMoKX1cclxuICAgICAgICB7dGhpcy5yZW5kZXJUZXN0U3VpdGVDb250ZXh0TWVudSgpfVxyXG4gICAgICAgIHt0aGlzLnJlbmRlclRlc3RTdWl0ZUNhc2VDb250ZXh0TWVudSgpfVxyXG4gICAgICAgIHt0aGlzLnJlbmRlckVkaXRUZXN0U3VpdGVTb3VyY2UoKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxyXG4gIHN0YXRlID0+ICh7XHJcbiAgICBzdGF0dXM6IHN0YXRlLnN0YXR1cyxcclxuICAgIHRlc3RDYXNlczogc3RhdGUuZWRpdG9yLnRlc3RDYXNlcyxcclxuICAgIHRlc3RTdWl0ZXM6IHN0YXRlLmVkaXRvci50ZXN0U3VpdGVzLFxyXG4gICAgZWRpdGluZzogc3RhdGUuZWRpdG9yLmVkaXRpbmcsXHJcbiAgICBwbGF5ZXI6IHN0YXRlLnBsYXllcixcclxuICAgIGNvbmZpZzogc3RhdGUuY29uZmlnXHJcbiAgfSksXHJcbiAgZGlzcGF0Y2ggPT4gYmluZEFjdGlvbkNyZWF0b3JzKHsuLi5hY3Rpb25zfSwgZGlzcGF0Y2gpXHJcbikoU2lkZWJhclRlc3RTdWl0ZXMpXHJcbiIsIi8qIGdsb2JhbCBQUkVJTlNUQUxMX0NTVl9MSVNUIFBSRUlOU1RBTExfVklTSU9OX0xJU1QgKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcclxuaW1wb3J0IHtIYXNoUm91dGVyfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5pbXBvcnQgeyBtZXNzYWdlLCBMb2NhbGVQcm92aWRlciB9IGZyb20gJ2FudGQnXHJcbmltcG9ydCBlblVTIGZyb20gJ2FudGQvbGliL2xvY2FsZS1wcm92aWRlci9lbl9VUydcclxuXHJcbmltcG9ydCBGaWxlU2F2ZXIgZnJvbSAnLi9jb21tb24vbGliL2ZpbGVfc2F2ZXInXHJcbmltcG9ydCBBcHAgZnJvbSAnLi9hcHAnXHJcbmltcG9ydCB7IFByb3ZpZGVyLCBjcmVhdGVTdG9yZSwgcmVkdWNlciB9IGZyb20gJy4vcmVkdXgnXHJcbmltcG9ydCB7IGluaXRQbGF5ZXIgfSBmcm9tICcuL2luaXRfcGxheWVyJ1xyXG5pbXBvcnQgRXh0IGZyb20gJy4vY29tbW9uL3dlYl9leHRlbnNpb24nXHJcbmltcG9ydCBjc0lwYyBmcm9tICcuL2NvbW1vbi9pcGMvaXBjX2NzJ1xyXG5pbXBvcnQgdGVzdENhc2VNb2RlbCwgeyBlbGltaW5hdGVCYXNlVXJsLCBjb21tYW5kV2l0aG91dEJhc2VVcmwgfSBmcm9tICcuL21vZGVscy90ZXN0X2Nhc2VfbW9kZWwnXHJcbmltcG9ydCB0ZXN0U3VpdGVNb2RlbCBmcm9tICcuL21vZGVscy90ZXN0X3N1aXRlX21vZGVsJ1xyXG5pbXBvcnQgc3RvcmFnZSBmcm9tICcuL2NvbW1vbi9zdG9yYWdlJ1xyXG5pbXBvcnQgeyBkZWxheSwgcmFuZG9tTmFtZSwgZGF0YVVSSXRvQmxvYiwgbG9hZENzdiwgbG9hZEltYWdlLCBnZXRTY3JlZW5EcGkgfSBmcm9tICcuL2NvbW1vbi91dGlscydcclxuaW1wb3J0IHsgZnJvbUpTT05TdHJpbmcsIGZyb21IdG1sIH0gZnJvbSAnLi9jb21tb24vY29udmVydF91dGlscydcclxuaW1wb3J0IHsgcGFyc2VUZXN0U3VpdGUgfSBmcm9tICcuL2NvbW1vbi9jb252ZXJ0X3N1aXRlX3V0aWxzJ1xyXG5pbXBvcnQgKiBhcyBDIGZyb20gJy4vY29tbW9uL2NvbnN0YW50J1xyXG5pbXBvcnQgbG9nIGZyb20gJy4vY29tbW9uL2xvZydcclxuaW1wb3J0IHsgcmVuZGVyTG9nIH0gZnJvbSAnLi9jb21tb24vbWFjcm9fbG9nJ1xyXG5pbXBvcnQgeyBnZXRDU1ZNYW4gfSBmcm9tICcuL2NvbW1vbi9jc3ZfbWFuJ1xyXG5pbXBvcnQgeyBnZXRTY3JlZW5zaG90TWFuIH0gZnJvbSAnLi9jb21tb24vc2NyZWVuc2hvdF9tYW4nXHJcbmltcG9ydCB7IGdldFZpc2lvbk1hbiB9IGZyb20gJy4vY29tbW9uL3Zpc2lvbl9tYW4nXHJcbmltcG9ydCB7IGdldFZhcnNJbnN0YW5jZSB9IGZyb20gJy4vY29tbW9uL3ZhcmlhYmxlcydcclxuaW1wb3J0IHsgUGxheWVyLCBnZXRQbGF5ZXIgfSBmcm9tICcuL2NvbW1vbi9wbGF5ZXInXHJcbmltcG9ydCBnZXRTYXZlVGVzdENhc2UgZnJvbSAnLi9jb21wb25lbnRzL3NhdmVfdGVzdF9jYXNlJ1xyXG5pbXBvcnQgcHJlVGNzIGZyb20gJy4vY29uZmlnL3ByZWluc3RhbGxfbWFjcm9zJ1xyXG5pbXBvcnQgcHJlVHNzIGZyb20gJy4vY29uZmlnL3ByZWluc3RhbGxfc3VpdGVzJ1xyXG5pbXBvcnQge1xyXG4gIGFkZFRlc3RDYXNlcyxcclxuICBzZXRUZXN0Q2FzZXMsXHJcbiAgc2V0VGVzdFN1aXRlcyxcclxuICBzZXRFZGl0aW5nLFxyXG4gIHNldFBsYXllclN0YXRlLFxyXG4gIHNldFRpbWVvdXRTdGF0dXMsXHJcbiAgdXBkYXRlQ29uZmlnLFxyXG4gIGFkZExvZyxcclxuICBhZGRTY3JlZW5zaG90LFxyXG4gIHN0YXJ0UGxheWluZyxcclxuICBzdG9wUGxheWluZyxcclxuICB1cGRhdGVUZXN0Q2FzZVBsYXlTdGF0dXMsXHJcbiAgYWRkUGxheWVyRXJyb3JDb21tYW5kSW5kZXgsXHJcbiAgZG9uZUluc3BlY3RpbmcsXHJcbiAgdXBkYXRlU2VsZWN0ZWRDb21tYW5kLFxyXG4gIGFwcGVuZENvbW1hbmQsXHJcbiAgbGlzdENTVixcclxuICBsaXN0U2NyZWVuc2hvdHMsXHJcbiAgbGlzdFZpc2lvbnMsXHJcbiAgYWRkVGVzdFN1aXRlcyxcclxuICBlZGl0VGVzdENhc2UsXHJcbiAgcGxheWVyUGxheSxcclxuICB1cHNlcnRUZXN0Q2FzZSxcclxuICBzZXRWYXJpYWJsZXMsXHJcbiAgdXBkYXRlVUlcclxufSBmcm9tICcuL2FjdGlvbnMnXHJcblxyXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxyXG4gIHJlZHVjZXIsXHJcbiAgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18oKVxyXG4pXHJcblxyXG5jb25zdCByb290RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xyXG5jb25zdCByZW5kZXIgPSBDb21wb25lbnQgPT5cclxuICBSZWFjdERPTS5yZW5kZXIoXHJcbiAgICA8TG9jYWxlUHJvdmlkZXIgbG9jYWxlPXtlblVTfT5cclxuICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPEhhc2hSb3V0ZXI+XHJcbiAgICAgICAgICA8QXBwIC8+XHJcbiAgICAgICAgPC9IYXNoUm91dGVyPlxyXG4gICAgICA8L1Byb3ZpZGVyPlxyXG4gICAgPC9Mb2NhbGVQcm92aWRlcj4sXHJcbiAgICByb290RWxcclxuICApO1xyXG5cclxuLy8gTm90ZTogbGlzdGVuIHRvIGFueSBkYiBjaGFuZ2VzIGFuZCByZXN0b3JlIGFsbCBkYXRhIGZyb20gZGIgdG8gcmVkdXggc3RvcmVcclxuLy8gQWxsIHRlc3QgY2FzZXMgYXJlIHN0b3JlZCBpbiBpbmRleGVkZGIgKGRleGllKVxyXG5jb25zdCBiaW5kREIgPSAoKSA9PiB7XHJcbiAgY29uc3QgcmVzdG9yZVRlc3RDYXNlcyA9ICgpID0+IHtcclxuICAgIHJldHVybiB0ZXN0Q2FzZU1vZGVsLmxpc3QoKVxyXG4gICAgICAudGhlbih0Y3MgPT4ge1xyXG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKFxyXG4gICAgICAgICAgc2V0VGVzdENhc2VzKHRjcy5tYXAoZWxpbWluYXRlQmFzZVVybCkpXHJcbiAgICAgICAgKVxyXG4gICAgICB9KVxyXG4gIH1cclxuXHJcbiAgY29uc3QgcmVzdG9yZVRlc3RTdWl0ZXMgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gdGVzdFN1aXRlTW9kZWwubGlzdCgpXHJcbiAgICAgIC50aGVuKHRzcyA9PiB7XHJcbiAgICAgICAgdHNzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGFuYW1lID0gYS5uYW1lLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAgIGNvbnN0IGJuYW1lID0gYi5uYW1lLnRvTG93ZXJDYXNlKClcclxuXHJcbiAgICAgICAgICBpZiAoYW5hbWUgPCBibmFtZSkgIHJldHVybiAtMVxyXG4gICAgICAgICAgaWYgKGFuYW1lID4gYm5hbWUpICByZXR1cm4gMVxyXG4gICAgICAgICAgaWYgKGFuYW1lID09PSBibmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYi51cGRhdGVUaW1lIC0gYS51cGRhdGVUaW1lXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goXHJcbiAgICAgICAgICBzZXRUZXN0U3VpdGVzKHRzcylcclxuICAgICAgICApXHJcbiAgICAgIH0pXHJcbiAgfVxyXG5cclxuICA7Wyd1cGRhdGluZycsICdjcmVhdGluZycsICdkZWxldGluZyddLmZvckVhY2goZXZlbnROYW1lID0+IHtcclxuICAgIHRlc3RDYXNlTW9kZWwudGFibGUuaG9vayhldmVudE5hbWUsICgpID0+IHtcclxuICAgICAgbG9nKCdldmVudE5hbWUnLCBldmVudE5hbWUpXHJcbiAgICAgIHNldFRpbWVvdXQocmVzdG9yZVRlc3RDYXNlcywgNTApXHJcbiAgICB9KVxyXG4gIH0pXHJcblxyXG4gIDtbJ3VwZGF0aW5nJywgJ2NyZWF0aW5nJywgJ2RlbGV0aW5nJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xyXG4gICAgdGVzdFN1aXRlTW9kZWwudGFibGUuaG9vayhldmVudE5hbWUsICgpID0+IHtcclxuICAgICAgbG9nKCdldmVudE5hbWUnLCBldmVudE5hbWUpXHJcbiAgICAgIHNldFRpbWVvdXQocmVzdG9yZVRlc3RTdWl0ZXMsIDUwKVxyXG4gICAgfSlcclxuICB9KVxyXG5cclxuICByZXN0b3JlVGVzdENhc2VzKClcclxuICByZXN0b3JlVGVzdFN1aXRlcygpXHJcbn1cclxuXHJcbi8vIE5vdGU6IGVkaXRpbmcgaXMgc3RvcmVkIGluIGxvY2Fsc3RvcmFnZVxyXG5jb25zdCByZXN0b3JlRWRpdGluZyA9ICgpID0+IHtcclxuICByZXR1cm4gc3RvcmFnZS5nZXQoJ2VkaXRpbmcnKVxyXG4gICAgLnRoZW4oZWRpdGluZyA9PiB7XHJcbiAgICAgIGxldCBmaW5hbEVkaXRpbmcgPSBlZGl0aW5nXHJcblxyXG4gICAgICBpZiAoZWRpdGluZy5iYXNlVXJsKSB7XHJcbiAgICAgICAgZmluYWxFZGl0aW5nID0gey4uLmVkaXRpbmd9XHJcbiAgICAgICAgZmluYWxFZGl0aW5nLmNvbW1hbmRzID0gZmluYWxFZGl0aW5nLmNvbW1hbmRzLm1hcChcclxuICAgICAgICAgIGNvbW1hbmRXaXRob3V0QmFzZVVybChlZGl0aW5nLmJhc2VVcmwpXHJcbiAgICAgICAgKVxyXG4gICAgICAgIGRlbGV0ZSBmaW5hbEVkaXRpbmcuYmFzZVVybFxyXG4gICAgICB9XHJcblxyXG4gICAgICBzdG9yZS5kaXNwYXRjaChcclxuICAgICAgICBzZXRFZGl0aW5nKGZpbmFsRWRpdGluZylcclxuICAgICAgKVxyXG4gICAgfSlcclxufVxyXG5cclxuY29uc3QgcmVzdG9yZUNvbmZpZyA9ICgpID0+IHtcclxuICByZXR1cm4gc3RvcmFnZS5nZXQoJ2NvbmZpZycpXHJcbiAgICAudGhlbihjb25maWcgPT4ge1xyXG4gICAgICBjb25zdCBjZmcgPSB7XHJcbiAgICAgICAgc2hvd1NpZGViYXI6IHRydWUsXHJcbiAgICAgICAgcGxheVNjcm9sbEVsZW1lbnRzSW50b1ZpZXc6IHRydWUsXHJcbiAgICAgICAgcGxheUhpZ2hsaWdodEVsZW1lbnRzOiB0cnVlLFxyXG4gICAgICAgIHBsYXlDb21tYW5kSW50ZXJ2YWw6IDAuMyxcclxuICAgICAgICByZWNvcmROb3RpZmljYXRpb246IHRydWUsXHJcbiAgICAgICAgcmVjb3JkQ2xpY2tUeXBlOiAnY2xpY2snLFxyXG4gICAgICAgIGxvZ0ZpbHRlcjogJ0FsbCcsXHJcbiAgICAgICAgb25FcnJvckluTG9vcDogJ2NvbnRpbnVlX25leHRfbG9vcCcsXHJcbiAgICAgICAgZGVmYXVsdFZpc2lvblNlYXJjaENvbmZpZGVuY2U6IDAuOCxcclxuICAgICAgICAvLyBSdW4gbWFjcm9zIGZyb20gb3V0c2lkZVxyXG4gICAgICAgIGFsbG93UnVuRnJvbUJvb2ttYXJrOiB0cnVlLFxyXG4gICAgICAgIGFsbG93UnVuRnJvbUZpbGVTY2hlbWE6IHRydWUsXHJcbiAgICAgICAgYWxsb3dSdW5Gcm9tSHR0cFNjaGVtYTogZmFsc2UsXHJcbiAgICAgICAgLy8gdGltZW91dCBpbiBzZWNvbmRzXHJcbiAgICAgICAgdGltZW91dFBhZ2VMb2FkOiA2MCxcclxuICAgICAgICB0aW1lb3V0RWxlbWVudDogMTAsXHJcbiAgICAgICAgdGltZW91dE1hY3JvOiA5MDAsXHJcbiAgICAgICAgdGltZW91dERvd25sb2FkOiA2MCxcclxuICAgICAgICAvLyBiYWNrdXAgcmVsYXRpdmVcclxuICAgICAgICBsYXN0QmFja3VwQWN0aW9uVGltZTogbmV3IERhdGUoKSAqIDEsXHJcbiAgICAgICAgZW5hYmxlQXV0b0JhY2t1cDogdHJ1ZSxcclxuICAgICAgICBhdXRvQmFja3VwSW50ZXJ2YWw6IDcsXHJcbiAgICAgICAgYXV0b0JhY2t1cFRlc3RDYXNlczogdHJ1ZSxcclxuICAgICAgICBhdXRvQmFja3VwVGVzdFN1aXRlczogdHJ1ZSxcclxuICAgICAgICBhdXRvQmFja3VwU2NyZWVuc2hvdHM6IHRydWUsXHJcbiAgICAgICAgYXV0b0JhY2t1cENTVkZpbGVzOiB0cnVlLFxyXG4gICAgICAgIGF1dG9CYWNrdXBWaXNpb25JbWFnZXM6IHRydWUsXHJcbiAgICAgICAgLy8gc2VjdXJpdHkgcmVsYXRpdmVcclxuICAgICAgICBzaG91bGRFbmNyeXB0UGFzc3dvcmQ6ICdubycsXHJcbiAgICAgICAgbWFzdGVyUGFzc3dvcmQ6ICcnLFxyXG4gICAgICAgIC8vIHZhcmlhYmxlIHJlbGF0aXZlXHJcbiAgICAgICAgc2hvd0NvbW1vbkludGVybmFsVmFyaWFibGVzOiB0cnVlLFxyXG4gICAgICAgIHNob3dBZHZhbmNlZEludGVybmFsVmFyaWFibGVzOiBmYWxzZSxcclxuICAgICAgICAuLi5jb25maWdcclxuICAgICAgfVxyXG4gICAgICBzdG9yZS5kaXNwYXRjaCh1cGRhdGVDb25maWcoY2ZnKSlcclxuICAgIH0pXHJcbn1cclxuXHJcbmNvbnN0IHJlc3RvcmVDU1YgPSAoKSA9PiB7XHJcbiAgZ2V0Q1NWTWFuKHsgYmFzZURpcjogJ3NwcmVhZHNoZWV0cycgfSlcclxuICBzdG9yZS5kaXNwYXRjaChsaXN0Q1NWKCkpXHJcbn1cclxuXHJcbmNvbnN0IHJlc3RvcmVTY3JlZW5zaG90cyA9ICgpID0+IHtcclxuICBnZXRTY3JlZW5zaG90TWFuKHsgYmFzZURpcjogJ3NjcmVlbnNob3RzJyB9KVxyXG4gIHN0b3JlLmRpc3BhdGNoKGxpc3RTY3JlZW5zaG90cygpKVxyXG59XHJcblxyXG5jb25zdCByZXN0b3JlVmlzaW9ucyA9ICgpID0+IHtcclxuICBnZXRWaXNpb25NYW4oeyBiYXNlRGlyOiAndmlzaW9ucycgfSlcclxuICBzdG9yZS5kaXNwYXRjaChsaXN0VmlzaW9ucygpKVxyXG59XHJcblxyXG5jb25zdCBkb3dubG9hZFRleHRGaWxlID0gKHRleHQsIGZpbGVOYW1lKSA9PiB7XHJcbiAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFt0ZXh0XSwgeyB0eXBlOiAndGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04JyB9KVxyXG4gIEZpbGVTYXZlci5zYXZlQXMoYmxvYiwgZmlsZU5hbWUpXHJcbn1cclxuXHJcbmNvbnN0IGdlblBsYXllclBsYXlDYWxsYmFjayA9ICh7IG9wdGlvbnMgfSkgPT4gKGVyciwgcmVhc29uKSA9PiB7XHJcbiAgaWYgKG9wdGlvbnMuc2F2ZWxvZykge1xyXG4gICAgY29uc3QgbG9ncyAgICAgICAgPSBzdG9yZS5nZXRTdGF0ZSgpLmxvZ3NcclxuICAgIGNvbnN0IGVycm9yTG9nICAgID0gbG9ncy5maW5kKGxvZyA9PiBsb2cudHlwZSA9PT0gJ2Vycm9yJyAmJiAhKGxvZy5vcHRpb25zICYmIGxvZy5vcHRpb25zLmlnbm9yZWQpKVxyXG4gICAgY29uc3QgZXJyb3IgICAgICAgPSBlcnIgfHwgKGVycm9yTG9nICYmIHsgbWVzc2FnZTogZXJyb3JMb2cudGV4dCB9KVxyXG4gICAgY29uc3QgbG9nVGl0bGUgICAgPSBlcnJvciA/IGBTdGF0dXM9RXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gIDogYFN0YXR1cz1PS2BcclxuICAgIGNvbnN0IGxvZ0NvbnRlbnQgID0gbG9ncy5tYXAocmVuZGVyTG9nKVxyXG4gICAgY29uc3QgdGV4dCAgICAgICAgPSBbbG9nVGl0bGUsICcjIyMnLCAuLi5sb2dDb250ZW50XS5qb2luKCdcXG4nKVxyXG4gICAgZG93bmxvYWRUZXh0RmlsZSh0ZXh0LCBkZWNvZGVVUklDb21wb25lbnQob3B0aW9ucy5zYXZlbG9nKSlcclxuICB9XHJcblxyXG4gIGlmIChvcHRpb25zLmNsb3NlKSB7XHJcbiAgICAvLyBDbG9zZSBhbGwgdGFicyBJZiBjbG9zZSBvcHRpb24gaXMgc2V0XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY3NJcGMuYXNrKCdQQU5FTF9DTE9TRV9BTExfV0lORE9XUycsIHt9KVxyXG4gICAgfSwgMTAwMClcclxuICB9XHJcblxyXG4gIGlmICghZXJyICYmIHJlYXNvbiA9PT0gUGxheWVyLkMuRU5EX1JFQVNPTi5DT01QTEVURSkge1xyXG4gICAgLy8gQ2xvc2Uga2FudHUgcGFuZWxcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB3aW5kb3cuY2xvc2UoKVxyXG4gICAgfSwgMTAwMClcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGJpbmRJcGNFdmVudCA9ICgpID0+IHtcclxuICBjc0lwYy5vbkFzaygoY21kLCBhcmdzKSA9PiB7XHJcbiAgICBsb2coY21kLCBhcmdzKVxyXG5cclxuICAgIHN3aXRjaCAoY21kKSB7XHJcbiAgICAgIGNhc2UgJ0lOU1BFQ1RfUkVTVUxUJzpcclxuICAgICAgICBzdG9yZS5kaXNwYXRjaChkb25lSW5zcGVjdGluZygpKVxyXG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHVwZGF0ZVNlbGVjdGVkQ29tbWFuZCh7XHJcbiAgICAgICAgICB0YXJnZXQ6IGFyZ3MubG9jYXRvckluZm8udGFyZ2V0LFxyXG4gICAgICAgICAgdGFyZ2V0T3B0aW9uczogYXJncy5sb2NhdG9ySW5mby50YXJnZXRPcHRpb25zXHJcbiAgICAgICAgfSkpXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuXHJcbiAgICAgIGNhc2UgJ1JFQ09SRF9BRERfQ09NTUFORCc6XHJcbiAgICAgICAgbG9nKCdnb3QgYWRkIGNvbW1hbmQnLCBjbWQsIGFyZ3MpXHJcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goYXBwZW5kQ29tbWFuZChhcmdzLCB0cnVlKSlcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG5cclxuICAgICAgY2FzZSAnVElNRU9VVF9TVEFUVVMnOlxyXG4gICAgICAgIGlmIChzdG9yZS5nZXRTdGF0ZSgpLnN0YXR1cyAhPT0gQy5BUFBfU1RBVFVTLlBMQVlFUikgIHJldHVybiBmYWxzZVxyXG5cclxuICAgICAgICBzdG9yZS5kaXNwYXRjaChzZXRUaW1lb3V0U3RhdHVzKGFyZ3MpKVxyXG4gICAgICAgIHJldHVybiB0cnVlXHJcblxyXG4gICAgICBjYXNlICdSVU5fVEVTVF9DQVNFJzoge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKVxyXG4gICAgICAgIGlmIChzdGF0ZS5zdGF0dXMgIT09IEMuQVBQX1NUQVRVUy5OT1JNQUwpIHtcclxuICAgICAgICAgIG1lc3NhZ2UuZXJyb3IoJ2NhbiBvbmx5IHJ1biBtYWNyb3Mgd2hlbiBpdCBpcyBub3QgcmVjb3JkaW5nIG9yIHBsYXlpbmcnKVxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB7IHRlc3RDYXNlLCBvcHRpb25zIH0gPSBhcmdzXHJcbiAgICAgICAgY29uc3QgdGMgPSBzdGF0ZS5lZGl0b3IudGVzdENhc2VzLmZpbmQodGMgPT4gdGMubmFtZSA9PT0gdGVzdENhc2UubmFtZSlcclxuICAgICAgICBpZiAoIXRjKSB7XHJcbiAgICAgICAgICBtZXNzYWdlLmVycm9yKGBubyBtYWNybyBmb3VuZCB3aXRoIG5hbWUgJyR7dGVzdENhc2UubmFtZX0nYClcclxuICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgb3BlblRjICA9IHRjLmRhdGEuY29tbWFuZHMuZmluZChpdGVtID0+IGl0ZW0uY21kLnRvTG93ZXJDYXNlKCkgPT09ICdvcGVuJylcclxuXHJcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goZWRpdFRlc3RDYXNlKHRjLmlkKSlcclxuICAgICAgICBzdG9yZS5kaXNwYXRjaChwbGF5ZXJQbGF5KHtcclxuICAgICAgICAgIHRpdGxlOiB0ZXN0Q2FzZS5uYW1lLFxyXG4gICAgICAgICAgZXh0cmE6IHtcclxuICAgICAgICAgICAgaWQ6IHRjICYmIHRjLmlkXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgbW9kZTogICAgICAgUGxheWVyLkMuTU9ERS5TVFJBSUdIVCxcclxuICAgICAgICAgIHN0YXJ0SW5kZXg6IDAsXHJcbiAgICAgICAgICBzdGFydFVybDogICBvcGVuVGMgPyBvcGVuVGMudGFyZ2V0IDogbnVsbCxcclxuICAgICAgICAgIHJlc291cmNlczogIHRjLmRhdGEuY29tbWFuZHMsXHJcbiAgICAgICAgICBwb3N0RGVsYXk6ICBzdGF0ZS5wbGF5ZXIucGxheUludGVydmFsICogMTAwMCxcclxuICAgICAgICAgIGNhbGxiYWNrOiAgIGdlblBsYXllclBsYXlDYWxsYmFjayh7IG9wdGlvbnMgfSlcclxuICAgICAgICB9KSlcclxuXHJcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2godXBkYXRlVUkoeyBzaWRlYmFyVGFiOiAnbWFjcm9zJyB9KSlcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjYXNlICdSVU5fVEVTVF9TVUlURSc6IHtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKClcclxuICAgICAgICBpZiAoc3RhdGUuc3RhdHVzICE9PSBDLkFQUF9TVEFUVVMuTk9STUFMKSB7XHJcbiAgICAgICAgICBtZXNzYWdlLmVycm9yKCdjYW4gb25seSBydW4gdGVzdCBzdWl0ZXMgd2hlbiBpdCBpcyBub3QgcmVjb3JkaW5nIG9yIHBsYXlpbmcnKVxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB7IHRlc3RTdWl0ZSwgb3B0aW9ucyB9ID0gYXJnc1xyXG4gICAgICAgIGNvbnN0IHRzID0gc3RhdGUuZWRpdG9yLnRlc3RTdWl0ZXMuZmluZCh0cyA9PiB0cy5uYW1lID09PSB0ZXN0U3VpdGUubmFtZSlcclxuICAgICAgICBpZiAoIXRzKSB7XHJcbiAgICAgICAgICBtZXNzYWdlLmVycm9yKGBubyBtYWNybyBmb3VuZCB3aXRoIG5hbWUgJyR7dGVzdFN1aXRlLm5hbWV9J2ApXHJcbiAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldFBsYXllcih7IG5hbWU6ICd0ZXN0U3VpdGUnIH0pLnBsYXkoe1xyXG4gICAgICAgICAgdGl0bGU6IHRzLm5hbWUsXHJcbiAgICAgICAgICBleHRyYToge1xyXG4gICAgICAgICAgICBpZDogdHMuaWQsXHJcbiAgICAgICAgICAgIG5hbWU6IHRzLm5hbWVcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBtb2RlOiBnZXRQbGF5ZXIoKS5DLk1PREUuU1RSQUlHSFQsXHJcbiAgICAgICAgICBzdGFydEluZGV4OiAwLFxyXG4gICAgICAgICAgcmVzb3VyY2VzOiB0cy5jYXNlcy5tYXAoaXRlbSA9PiAoe1xyXG4gICAgICAgICAgICBpZDogICAgIGl0ZW0udGVzdENhc2VJZCxcclxuICAgICAgICAgICAgbG9vcHM6ICBpdGVtLmxvb3BzXHJcbiAgICAgICAgICB9KSksXHJcbiAgICAgICAgICBjYWxsYmFjazogZ2VuUGxheWVyUGxheUNhbGxiYWNrKHsgb3B0aW9ucyB9KVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHVwZGF0ZVVJKHsgc2lkZWJhclRhYjogJ3Rlc3Rfc3VpdGVzJyB9KSlcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjYXNlICdJTVBPUlRfSFRNTF9BTkRfUlVOJzoge1xyXG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gYXJnc1xyXG4gICAgICAgIGxldCB0ZXN0Q2FzZVxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdGVzdENhc2UgPSBmcm9tSHRtbChhcmdzLmh0bWwpXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgbWVzc2FnZS5lcnJvcignRmFpbGVkIHRvIHBhcnNlIGh0bWwnLCAxLjUpXHJcbiAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHVwc2VydFRlc3RDYXNlKHRlc3RDYXNlKSlcclxuXHJcbiAgICAgICAgcmV0dXJuIGRlbGF5KCgpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKVxyXG4gICAgICAgICAgY29uc3QgdGMgPSBzdGF0ZS5lZGl0b3IudGVzdENhc2VzLmZpbmQodGMgPT4gdGMubmFtZSA9PT0gdGVzdENhc2UubmFtZSlcclxuICAgICAgICAgIGNvbnN0IG9wZW5UYyAgPSB0Yy5kYXRhLmNvbW1hbmRzLmZpbmQoaXRlbSA9PiBpdGVtLmNtZC50b0xvd2VyQ2FzZSgpID09PSAnb3BlbicpXHJcblxyXG4gICAgICAgICAgc3RvcmUuZGlzcGF0Y2goZWRpdFRlc3RDYXNlKHRjLmlkKSlcclxuICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHBsYXllclBsYXkoe1xyXG4gICAgICAgICAgICB0aXRsZTogdGMubmFtZSxcclxuICAgICAgICAgICAgZXh0cmE6IHtcclxuICAgICAgICAgICAgICBpZDogdGMgJiYgdGMuaWRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW9kZTogICAgICAgUGxheWVyLkMuTU9ERS5TVFJBSUdIVCxcclxuICAgICAgICAgICAgc3RhcnRJbmRleDogMCxcclxuICAgICAgICAgICAgc3RhcnRVcmw6ICAgb3BlblRjID8gb3BlblRjLnRhcmdldCA6IG51bGwsXHJcbiAgICAgICAgICAgIHJlc291cmNlczogIHRjLmRhdGEuY29tbWFuZHMsXHJcbiAgICAgICAgICAgIHBvc3REZWxheTogIHN0YXRlLnBsYXllci5wbGF5SW50ZXJ2YWwgKiAxMDAwLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogICBnZW5QbGF5ZXJQbGF5Q2FsbGJhY2soeyBvcHRpb25zIH0pXHJcbiAgICAgICAgICB9KSlcclxuICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgfSwgMTAwMClcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBsb2cuZXJyb3IoZS5zdGFjaylcclxuICAgICAgICAgIHRocm93IGVcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjYXNlICdBRERfVklTSU9OX0lNQUdFJzoge1xyXG4gICAgICAgIGNvbnN0IHsgZGF0YVVybCB9ID0gYXJnc1xyXG4gICAgICAgIGNvbnN0IGZpbGVOYW1lICAgID0gYCR7cmFuZG9tTmFtZSgpfV9kcGlfJHtnZXRTY3JlZW5EcGkoKX0ucG5nYFxyXG4gICAgICAgIGNvbnN0IG1hbiAgICAgICAgID0gZ2V0VmlzaW9uTWFuKClcclxuXHJcbiAgICAgICAgbWFuLndyaXRlKGZpbGVOYW1lLCBkYXRhVVJJdG9CbG9iKGRhdGFVcmwpKVxyXG4gICAgICAgIC50aGVuKHJlc3RvcmVWaXNpb25zKVxyXG4gICAgICAgIC5jYXRjaChlID0+IGxvZy5lcnJvcihlLnN0YWNrKSlcclxuXHJcbiAgICAgICAgcmV0dXJuIHsgZmlsZU5hbWUgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjYXNlICdSRVNUT1JFX1NDUkVFTlNIT1RTJzoge1xyXG4gICAgICAgIHJlc3RvcmVTY3JlZW5zaG90cygpXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgfVxyXG5cclxuICAgICAgY2FzZSAnVVBEQVRFX0FDVElWRV9UQUInOiB7XHJcbiAgICAgICAgdXBkYXRlUGFnZVRpdGxlKGFyZ3MpXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgfVxyXG5cclxuICAgICAgY2FzZSAnQUREX0xPRyc6IHtcclxuICAgICAgICBpZiAoIWFyZ3MpICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIGlmIChhcmdzLmluZm8pICAgICAgc3RvcmUuZGlzcGF0Y2goYWRkTG9nKCdpbmZvJywgYXJncy5pbmZvLCBhcmdzLm9wdGlvbnMpKVxyXG4gICAgICAgIGlmIChhcmdzLndhcm5pbmcpICAgc3RvcmUuZGlzcGF0Y2goYWRkTG9nKCd3YXJuaW5nJywgYXJncy53YXJuaW5nKSlcclxuICAgICAgICBpZiAoYXJncy5lcnJvcikgICAgIHN0b3JlLmRpc3BhdGNoKGFkZExvZygnZXJyb3InLCBhcmdzLmVycm9yKSlcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pXHJcbn1cclxuXHJcbmNvbnN0IGJpbmRXaW5kb3dFdmVudHMgPSAoKSA9PiB7XHJcbiAgLy8gcmVzZXQgc3RhdHVzIHRvIG5vcm1hbCB3aGVuIHBhbmVsIGNsb3NlZFxyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCAoKSA9PiB7XHJcbiAgICBjc0lwYy5hc2soJ1BBTkVMX1NUT1BfUkVDT1JESU5HJywge30pXHJcbiAgICBjc0lwYy5hc2soJ1BBTkVMX1NUT1BfUExBWUlORycsIHt9KVxyXG4gIH0pXHJcblxyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBzaXplID0ge1xyXG4gICAgICB3aWR0aDogd2luZG93Lm91dGVyV2lkdGgsXHJcbiAgICAgIGhlaWdodDogd2luZG93Lm91dGVySGVpZ2h0XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKClcclxuICAgIHN0b3JlLmRpc3BhdGNoKHVwZGF0ZUNvbmZpZyh7XHJcbiAgICAgIHNpemU6IHtcclxuICAgICAgICAuLi5zdGF0ZS5jb25maWcuc2l6ZSxcclxuICAgICAgICBbc3RhdGUuY29uZmlnLnNob3dTaWRlYmFyID8gJ3dpdGhfc2lkZWJhcicgOiAnc3RhbmRhcmQnXTogc2l6ZVxyXG4gICAgICB9XHJcbiAgICB9KSlcclxuICB9KVxyXG59XHJcblxyXG5jb25zdCBiaW5kVmFyaWFibGVDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgLy8gTm90ZTogYmluZCB0byBvbkNoYW5nZSBpbiBuZXh0IHRpY2ssIHRvIG1ha2Ugc3VyZSB2YXJzIGluc3RhbmNlIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWRcclxuICAvLyBzbyB0aGF0IGBiaW5kVmFyaWFibGVDaGFuZ2VgIGNvdWxkIGJlIGV4ZWN1dGVkIGJlZm9yZSBgaW5pdFBsYXllcmBcclxuICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgIGdldFZhcnNJbnN0YW5jZSgpLm9uQ2hhbmdlKCh7IHZhcnMgfSkgPT4ge1xyXG4gICAgICBjb25zdCB2YXJpYWJsZXMgPSBPYmplY3Qua2V5cyh2YXJzKS5tYXAoa2V5ID0+ICh7IGtleSwgdmFsdWU6IHZhcnNba2V5XSB9KSlcclxuICAgICAgc3RvcmUuZGlzcGF0Y2goc2V0VmFyaWFibGVzKHZhcmlhYmxlcykpXHJcbiAgICB9KVxyXG4gIH0sIDApXHJcbn1cclxuXHJcbmNvbnN0IGluaXRTYXZlVGVzdENhc2UgPSAoKSA9PiB7XHJcbiAgZ2V0U2F2ZVRlc3RDYXNlKHN0b3JlKVxyXG59XHJcblxyXG5jb25zdCB1cGRhdGVQYWdlVGl0bGUgPSAoYXJncykgPT4ge1xyXG4gIC8vIE5vdGU6IEZpcmVmb3ggaW5jbHVkZXMgcGFnZSB1cmwgaW4gdGl0bGUsIHRoZXJlIGNvdWxkIGJlIG5vdCBlbm91Z2ggc3BhY2UgZm9yIHRhYiB0aXRsZVxyXG4gIGlmIChFeHQuaXNGaXJlZm94KCkpICByZXR1cm4gdHJ1ZVxyXG4gIGNvbnN0IG9yaWdUaXRsZSA9IGRvY3VtZW50LnRpdGxlLnJlcGxhY2UoLyAtIC4qJC8sICcnKVxyXG4gIGRvY3VtZW50LnRpdGxlID0gYCR7b3JpZ1RpdGxlfSAtIChUYWI6ICR7YXJncy50aXRsZX0pYFxyXG59XHJcblxyXG5jb25zdCBwcmVpbnN0YWxsID0gKCkgPT4ge1xyXG4gIGxvZygnUFJFSU5TVEFMTF9DU1ZfTElTVCcsIFBSRUlOU1RBTExfQ1NWX0xJU1QpXHJcbiAgbG9nKCdQUkVJTlNUQUxMX1ZJU0lPTl9MSVNUJywgUFJFSU5TVEFMTF9WSVNJT05fTElTVClcclxuXHJcbiAgLy8gUHJlaW5zdGFsbCBtYWNyb3MgYW5kIHRlc3Qgc3VpdGVzXHJcbiAgc3RvcmFnZS5nZXQoJ3ByZWluc3RhbGwnKVxyXG4gIC50aGVuKHZhbCA9PiB7XHJcbiAgICBpZiAodmFsKSAgcmV0dXJuXHJcbiAgICBpZiAoIXByZVRjcyB8fCAhT2JqZWN0LmtleXMocHJlVGNzKS5sZW5ndGgpICByZXR1cm5cclxuXHJcbiAgICBjb25zdCB0Y3MgPSBPYmplY3Qua2V5cyhwcmVUY3MpLm1hcChrZXkgPT4ge1xyXG4gICAgICBjb25zdCBzdHIgPSBKU09OLnN0cmluZ2lmeShwcmVUY3Nba2V5XSlcclxuICAgICAgcmV0dXJuIGZyb21KU09OU3RyaW5nKHN0ciwga2V5KVxyXG4gICAgfSlcclxuICAgIHN0b3JlLmRpc3BhdGNoKGFkZFRlc3RDYXNlcyh0Y3MpKVxyXG5cclxuICAgIC8vIE5vdGU6IHRlc3QgY2FzZXMgbmVlZCB0byBiZSBzYXZlIHRvIGluZGV4ZWQgZGIgYmVmb3JlIGl0IHJlZmxlY3RzIGluIHN0b3JlXHJcbiAgICAvLyBzbyBpdCBtYXkgdGFrZSBzb21lIHRpbWUgYmVmb3JlIHdlIGNhbiBwcmVpbnN0YWxsIHRlc3Qgc3VpdGVzXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpXHJcblxyXG4gICAgICBjb25zdCB0c3MgICA9IHByZVRzcy5tYXAodHMgPT4ge1xyXG4gICAgICAgIHJldHVybiBwYXJzZVRlc3RTdWl0ZShKU09OLnN0cmluZ2lmeSh0cyksIHN0YXRlLmVkaXRvci50ZXN0Q2FzZXMpXHJcbiAgICAgIH0pXHJcbiAgICAgIHN0b3JlLmRpc3BhdGNoKGFkZFRlc3RTdWl0ZXModHNzKSlcclxuXHJcbiAgICAgIHJldHVybiBzdG9yYWdlLnNldCgncHJlaW5zdGFsbCcsICdkb25lJylcclxuICAgIH0sIDEwMDApXHJcbiAgfSlcclxuXHJcbiAgLy8gUHJlaW5zdGFsbCBjc3ZcclxuICBzdG9yYWdlLmdldCgncHJlaW5zdGFsbF9jc3YnKVxyXG4gIC50aGVuKHZhbCA9PiB7XHJcbiAgICBpZiAodmFsKSAgcmV0dXJuXHJcblxyXG4gICAgY29uc3QgbGlzdCA9IFBSRUlOU1RBTExfQ1NWX0xJU1RcclxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkgIHJldHVyblxyXG5cclxuICAgIGNvbnN0IG1hbiAgPSBnZXRDU1ZNYW4oKVxyXG4gICAgY29uc3QgcHMgICA9IGxpc3QubWFwKHVybCA9PiB7XHJcbiAgICAgIGNvbnN0IHBhcnRzICAgICA9IHVybC5zcGxpdCgnLycpXHJcbiAgICAgIGNvbnN0IGZpbGVOYW1lICA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdXHJcblxyXG4gICAgICByZXR1cm4gbG9hZENzdih1cmwpXHJcbiAgICAgIC50aGVuKHRleHQgPT4ge1xyXG4gICAgICAgIHJldHVybiBtYW4ud3JpdGUoZmlsZU5hbWUsIHRleHQpXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG5cclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocHMpXHJcbiAgICAvLyBOb3RlOiBkZWxheSBuZWVkZWQgZm9yIEZpcmVmb3ggYW5kIHNsb3cgQ2hyb21lXHJcbiAgICAudGhlbigoKSA9PiBkZWxheSgoKSA9PiB7fSwgMzAwMCkpXHJcbiAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgIHN0b3JlLmRpc3BhdGNoKGxpc3RDU1YoKSlcclxuICAgIH0pXHJcbiAgfSlcclxuICAudGhlbigoKSA9PiBzdG9yYWdlLnNldCgncHJlaW5zdGFsbF9jc3YnLCAnZG9uZScpKVxyXG5cclxuICAvLyBQcmVpbnN0YWxsIHZpc2lvbiBpbWFnZXNcclxuICBzdG9yYWdlLmdldCgncHJlaW5zdGFsbF92aXNpb24nKVxyXG4gIC50aGVuKHZhbCA9PiB7XHJcbiAgICBpZiAodmFsKSAgcmV0dXJuXHJcblxyXG4gICAgY29uc3QgbGlzdCA9IFBSRUlOU1RBTExfVklTSU9OX0xJU1RcclxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkgIHJldHVyblxyXG5cclxuICAgIGNvbnN0IG1hbiAgPSBnZXRWaXNpb25NYW4oKVxyXG4gICAgY29uc3QgcHMgICA9IGxpc3QubWFwKHVybCA9PiB7XHJcbiAgICAgIGNvbnN0IHBhcnRzICAgICA9IHVybC5zcGxpdCgnLycpXHJcbiAgICAgIGNvbnN0IGZpbGVOYW1lICA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdXHJcblxyXG4gICAgICByZXR1cm4gbG9hZEltYWdlKHVybClcclxuICAgICAgLnRoZW4oYmxvYiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG1hbi53cml0ZShmaWxlTmFtZSwgYmxvYilcclxuICAgICAgfSlcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwcylcclxuICAgIC8vIE5vdGU6IGRlbGF5IG5lZWRlZCBmb3IgRmlyZWZveCBhbmQgc2xvdyBDaHJvbWVcclxuICAgIC50aGVuKCgpID0+IGRlbGF5KCgpID0+IHt9LCAzMDAwKSlcclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgc3RvcmUuZGlzcGF0Y2gobGlzdFZpc2lvbnMoKSlcclxuICAgIH0pXHJcbiAgfSlcclxuICAudGhlbigoKSA9PiBzdG9yYWdlLnNldCgncHJlaW5zdGFsbF92aXNpb24nLCAnZG9uZScpKVxyXG59XHJcblxyXG5iaW5kREIoKVxyXG5iaW5kSXBjRXZlbnQoKVxyXG5iaW5kV2luZG93RXZlbnRzKClcclxuYmluZFZhcmlhYmxlQ2hhbmdlKClcclxuaW5pdFBsYXllcihzdG9yZSlcclxucmVzdG9yZUVkaXRpbmcoKVxyXG5yZXN0b3JlQ29uZmlnKClcclxucmVzdG9yZUNTVigpXHJcbnJlc3RvcmVTY3JlZW5zaG90cygpXHJcbnJlc3RvcmVWaXNpb25zKClcclxuaW5pdFNhdmVUZXN0Q2FzZSgpXHJcbnByZWluc3RhbGwoKVxyXG5cclxuY3NJcGMuYXNrKCdJX0FNX1BBTkVMJywge30pXHJcblxyXG5kb2N1bWVudC50aXRsZSA9IGRvY3VtZW50LnRpdGxlICsgJyAnICsgRXh0LnJ1bnRpbWUuZ2V0TWFuaWZlc3QoKS52ZXJzaW9uXHJcblxyXG5jc0lwYy5hc2soJ1BBTkVMX0NVUlJFTlRfUExBWV9UQUJfSU5GTycpXHJcbi50aGVuKHVwZGF0ZVBhZ2VUaXRsZSlcclxuXHJcbnJlbmRlcihBcHApXHJcbiIsImltcG9ydCB7IG1lc3NhZ2UgfSBmcm9tICdhbnRkJ1xyXG5pbXBvcnQgdmFyc0ZhY3RvcnkgZnJvbSAnLi9jb21tb24vdmFyaWFibGVzJ1xyXG5pbXBvcnQgSW50ZXJwcmV0ZXIgZnJvbSAnLi9jb21tb24vaW50ZXJwcmV0ZXInXHJcbmltcG9ydCB7IGdldENTVk1hbiB9IGZyb20gJy4vY29tbW9uL2Nzdl9tYW4nXHJcbmltcG9ydCB7IHBhcnNlRnJvbUNTViwgc3RyaW5naWZ5VG9DU1YgfSBmcm9tICcuL2NvbW1vbi9jc3YnXHJcbmltcG9ydCB7IFBsYXllciwgZ2V0UGxheWVyIH0gZnJvbSAnLi9jb21tb24vcGxheWVyJ1xyXG5pbXBvcnQgY3NJcGMgZnJvbSAnLi9jb21tb24vaXBjL2lwY19jcydcclxuaW1wb3J0IGxvZyBmcm9tICcuL2NvbW1vbi9sb2cnXHJcbmltcG9ydCB7IHVwZGF0ZUluLCBzZXRJbiwgb2JqTWFwLCBkYXRhVVJJdG9CbG9iLCBkZWxheSwgcmV0cnksIHdpdGhDb3VudERvd24gfSBmcm9tICcuL2NvbW1vbi91dGlscydcclxuaW1wb3J0ICogYXMgQyBmcm9tICcuL2NvbW1vbi9jb25zdGFudCdcclxuaW1wb3J0ICogYXMgYWN0IGZyb20gJy4vYWN0aW9ucydcclxuaW1wb3J0IHsgZ2V0U2NyZWVuc2hvdE1hbiB9IGZyb20gJy4vY29tbW9uL3NjcmVlbnNob3RfbWFuJ1xyXG5pbXBvcnQgeyBnZXRWaXNpb25NYW4gfSBmcm9tICcuL2NvbW1vbi92aXNpb25fbWFuJ1xyXG5pbXBvcnQgRXh0IGZyb20gJy4vY29tbW9uL3dlYl9leHRlbnNpb24nXHJcbmltcG9ydCBGaWxlU2F2ZXIgZnJvbSAnLi9jb21tb24vbGliL2ZpbGVfc2F2ZXInXHJcbmltcG9ydCB7IHJlbmRlckxvZyB9IGZyb20gJy4vY29tbW9uL21hY3JvX2xvZydcclxuXHJcbmNsYXNzIFRpbWVUcmFja2VyIHtcclxuICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICB0aGlzLnJlc2V0KClcclxuICB9XHJcblxyXG4gIHJlc2V0ICgpIHtcclxuICAgIHRoaXMuc3RhcnRUaW1lID0gbmV3IERhdGUoKVxyXG4gIH1cclxuXHJcbiAgZWxhcHNlZCAoKSB7XHJcbiAgICByZXR1cm4gKG5ldyBEYXRlKCkgLSB0aGlzLnN0YXJ0VGltZSlcclxuICB9XHJcblxyXG4gIGVsYXBzZWRJblNlY29uZHMgKCkge1xyXG4gICAgY29uc3QgZGlmZiA9IHRoaXMuZWxhcHNlZCgpXHJcbiAgICByZXR1cm4gKGRpZmYgLyAxMDAwKS50b0ZpeGVkKDIpICsgJ3MnXHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBUaW1lb3V0IHtcclxuICBjb25zdHJ1Y3RvciAoY2FsbGJhY2spIHtcclxuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFja1xyXG4gIH1cclxuXHJcbiAgcmVzZXQgKGNhbGxiYWNrKSB7XHJcbiAgICB0aGlzLmNhbmNlbCgpXHJcblxyXG4gICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFja1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudGltZXIgICAgICA9IG51bGxcclxuICAgIHRoaXMudGltZW91dCAgICA9IG51bGxcclxuICAgIHRoaXMuc3RhcnRUaW1lICA9IG51bGxcclxuICB9XHJcblxyXG4gIHJlc3RhcnQgKG5ld1RpbWVvdXQpIHtcclxuICAgIGlmICghdGhpcy50aW1lb3V0KSB7XHJcbiAgICAgIHRoaXMudGltZW91dCAgICA9IG5ld1RpbWVvdXRcclxuICAgICAgdGhpcy5zdGFydFRpbWUgID0gbmV3IERhdGUoKVxyXG4gICAgICB0aGlzLnRpbWVyICAgICAgPSBzZXRUaW1lb3V0KHRoaXMuY2FsbGJhY2ssIHRoaXMudGltZW91dClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHBhc3QgPSBuZXcgRGF0ZSgpICogMSAtIHRoaXMuc3RhcnRUaW1lICogMVxyXG4gICAgICBjb25zdCByZXN0ID0gbmV3VGltZW91dCAtIHBhc3RcclxuXHJcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKVxyXG5cclxuICAgICAgaWYgKHJlc3QgPCAwKSByZXR1cm4gdGhpcy5jYWxsYmFjaygpXHJcblxyXG4gICAgICB0aGlzLnRpbWVvdXQgID0gbmV3VGltZW91dFxyXG4gICAgICB0aGlzLnRpbWVyICAgID0gc2V0VGltZW91dCh0aGlzLmNhbGxiYWNrLCByZXN0KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2FuY2VsICgpIHtcclxuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgcmVwbGFjZUVzY2FwZWRDaGFyID0gKHN0ciwgY29tbWFuZCwgZmllbGQpID0+IHtcclxuICBpZiAoWydzdG9yZUV2YWwnLCAnZ290b0lmJywgJ2lmJywgJ3doaWxlJ10uaW5kZXhPZihjb21tYW5kLmNtZCkgIT09IC0xICYmIGZpZWxkID09PSAndGFyZ2V0Jykge1xyXG4gICAgcmV0dXJuIHN0clxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFtcclxuICAgIFsvXFxcXG4vZywgJ1xcbiddLFxyXG4gICAgWy9cXFxcdC9nLCAnXFx0J11cclxuICBdLnJlZHVjZSgocHJldiwgW3JlZywgY10pID0+IHtcclxuICAgIHJldHVybiBwcmV2LnJlcGxhY2UocmVnLCBjKVxyXG4gIH0sIHN0cilcclxufVxyXG5cclxuY29uc3QgcmV0cnlJZkhlYXJ0QmVhdEV4cGlyZWQgPSAobWFpbkZ1bmMpID0+IHtcclxuICBjb25zdCBydW5XaXRoSGVhcnRCZWF0ID0gKCkgPT4ge1xyXG4gICAgbGV0IHN0b3AgPSBmYWxzZVxyXG5cclxuICAgIGNvbnN0IGluZmluaXRlQ2hlY2tIZWFydEJlYXQgPSAoKCkgPT4ge1xyXG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG4gICAgICBsZXQgc3RvcCAgICAgICAgPSBmYWxzZVxyXG4gICAgICBsZXQgbGFzdFNlY3JldCAgPSBudWxsXHJcblxyXG4gICAgICBjb25zdCBmbiA9ICgpID0+IHtcclxuICAgICAgICBsb2coJ3N0YXJ0IHRvIHNlbmQgaGVhcnQgYmVhdCB0byBiYWNrZ3JvdW5kJylcclxuICAgICAgICBpZiAoc3RvcCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXHJcblxyXG4gICAgICAgIHJldHVybiBjc0lwYy5hc2soJ1BBTkVMX0hFQVJUX0JFQVQnLCB7fSwgMzAwKVxyXG4gICAgICAgIC50aGVuKFxyXG4gICAgICAgICAgKHNlY3JldCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBOb3RlOiBzZWNyZXQgPT09IC0xIG1lYW5zIG5vIGhlYXJ0IGJlYXQgYXZhaWxhYmxlXHJcbiAgICAgICAgICAgIGlmIChzZWNyZXQgPT09IC0xKSAgcmV0dXJuIG5ldyBQcm9taXNlKCgpID0+IHt9KVxyXG5cclxuICAgICAgICAgICAgaWYgKHNlY3JldCA9PT0gbGFzdFNlY3JldCkge1xyXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbG9zdCBiYWNrZ3JvdW5kIGhlYXJ0IGJlYXQgd2hlbiBydW5uaW5nIGNvbW1hbmQnKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGxhc3RTZWNyZXQgPSBzZWNyZXRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGRlbGF5KCgpID0+IHt9LCAzMDAwKS50aGVuKGZuKVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGUgPT4ge1xyXG4gICAgICAgICAgICBsb2cuZXJyb3IoJ2xvc3QgYmFja2dyb3VuZCBoZWFydCBiZWFydCEhJywgZS5zdGFjaylcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsb3N0IGJhY2tncm91bmQgaGVhcnQgYmVhdCB3aGVuIHJ1bm5pbmcgY29tbWFuZCcpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgICB9XHJcbiAgICAgIGZuLnN0b3AgPSAoKSA9PiB7XHJcbiAgICAgICAgbG9nKCdzdG9wcGluZyBiYWNrZ3JvdW5kIGhlYXJ0IGJlYXQnKVxyXG4gICAgICAgIHN0b3AgPSB0cnVlXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBmblxyXG4gICAgfSkoKVxyXG5cclxuICAgIHJldHVybiBQcm9taXNlLnJhY2UoW1xyXG4gICAgICBtYWluRnVuYygpXHJcbiAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICBpbmZpbml0ZUNoZWNrSGVhcnRCZWF0LnN0b3AoKVxyXG4gICAgICAgICAgcmV0dXJuIGRhdGFcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgIGluZmluaXRlQ2hlY2tIZWFydEJlYXQuc3RvcCgpXHJcbiAgICAgICAgICB0aHJvdyBlXHJcbiAgICAgICAgfSksXHJcbiAgICAgIGluZmluaXRlQ2hlY2tIZWFydEJlYXQoKVxyXG4gICAgXSlcclxuICB9XHJcblxyXG4gIGNvbnN0IHJldHJ5Rm4gPSByZXRyeShydW5XaXRoSGVhcnRCZWF0LCB7XHJcbiAgICB0aW1lb3V0OiA5OTk5OTksXHJcbiAgICBzaG91bGRSZXRyeTogKGUsIHJldHJ5Q291bnQpID0+IHtcclxuICAgICAgcmV0dXJuICBlICYmXHJcbiAgICAgICAgICAgICAgZS5tZXNzYWdlICYmXHJcbiAgICAgICAgICAgICAgZS5tZXNzYWdlLmluZGV4T2YoJ2xvc3QgYmFja2dyb3VuZCBoZWFydCBiZWF0IHdoZW4gcnVubmluZyBjb21tYW5kJykgIT09IC0xICYmXHJcbiAgICAgICAgICAgICAgcmV0cnlDb3VudCA8IDEwXHJcbiAgICB9XHJcbiAgfSlcclxuXHJcbiAgcmV0dXJuIHJldHJ5Rm4oKVxyXG59XHJcblxyXG5jb25zdCBpbnRlcnByZXRTcGVjaWFsQ29tbWFuZHMgPSAoeyBzdG9yZSwgdmFycyB9KSA9PiB7XHJcbiAgY29uc3QgY29tbWFuZFJ1bm5lcnMgPSBbXHJcbiAgICBpbnRlcnByZXRDU1ZDb21tYW5kcyh7IHN0b3JlLCB2YXJzIH0pLFxyXG4gICAgaW50ZXJwcmV0Q3NGcmVlQ29tbWFuZHMoeyBzdG9yZSwgdmFycyB9KVxyXG4gIF1cclxuXHJcbiAgcmV0dXJuIChjb21tYW5kLCBpbmRleCkgPT4ge1xyXG4gICAgcmV0dXJuIGNvbW1hbmRSdW5uZXJzLnJlZHVjZSgocHJldiwgY3VyKSA9PiB7XHJcbiAgICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQpIHJldHVybiBwcmV2XHJcbiAgICAgIHJldHVybiBjdXIoY29tbWFuZCwgaW5kZXgpXHJcbiAgICB9LCB1bmRlZmluZWQpXHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBpbnRlcnByZXRDc0ZyZWVDb21tYW5kcyA9ICh7IHN0b3JlLCB2YXJzIH0pID0+IChjb21tYW5kLCBpbmRleCkgPT4ge1xyXG4gIGNvbnN0IGNzdk1hbiA9IGdldENTVk1hbigpXHJcbiAgY29uc3Qgc3NNYW4gID0gZ2V0U2NyZWVuc2hvdE1hbigpXHJcbiAgY29uc3QgeyBjbWQsIHRhcmdldCwgdmFsdWUsIGV4dHJhIH0gPSBjb21tYW5kXHJcbiAgY29uc3QgcmVzdWx0ID0ge1xyXG4gICAgaXNGbG93TG9naWM6IHRydWVcclxuICB9XHJcblxyXG4gIGxvZygnaW50ZXJwcmV0Q3NGcmVlQ29tbWFuZHMnLCBjb21tYW5kKVxyXG5cclxuICBzd2l0Y2ggKGNtZCkge1xyXG4gICAgY2FzZSAnc3RvcmUnOiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgYnlQYXNzOiB0cnVlLFxyXG4gICAgICAgIHZhcnM6IHtcclxuICAgICAgICAgIFt2YWx1ZV06IHRhcmdldFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ2VjaG8nOiB7XHJcbiAgICAgIGNvbnN0IGV4dHJhID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodmFsdWUgPT09ICcjc2hvd25vdGlmaWNhdGlvbicpICByZXR1cm4geyBvcHRpb25zOiB7IG5vdGlmaWNhdGlvbjogdHJ1ZSB9IH1cclxuICAgICAgICBpZiAodmFsdWUpICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBvcHRpb25zOiB7IGNvbG9yOiB2YWx1ZSB9IH1cclxuICAgICAgICByZXR1cm4ge31cclxuICAgICAgfSkoKVxyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBieVBhc3M6IHRydWUsXHJcbiAgICAgICAgbG9nOiB7XHJcbiAgICAgICAgICBpbmZvOiB0YXJnZXQsXHJcbiAgICAgICAgICAuLi5leHRyYVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ3Rocm93RXJyb3InOiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcih0YXJnZXQpXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAncGF1c2UnOiB7XHJcbiAgICAgIGNvbnN0IG4gPSBwYXJzZUludCh0YXJnZXQpXHJcblxyXG4gICAgICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0Lmxlbmd0aCB8fCBuID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGJ5UGFzczogdHJ1ZSxcclxuICAgICAgICAgIGNvbnRyb2w6IHtcclxuICAgICAgICAgICAgdHlwZTogJ3BhdXNlJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzTmFOKG4pIHx8IG4gPCAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0YXJnZXQgb2YgcGF1c2UgY29tbWFuZCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB3aXRoQ291bnREb3duKHtcclxuICAgICAgICB0aW1lb3V0OiBuLFxyXG4gICAgICAgIGludGVydmFsOiAxMDAwLFxyXG4gICAgICAgIG9uVGljazogKHsgdG90YWwsIHBhc3QgfSkgPT4ge1xyXG4gICAgICAgICAgc3RvcmUuZGlzcGF0Y2goYWN0LnNldFRpbWVvdXRTdGF0dXMoe1xyXG4gICAgICAgICAgICBwYXN0LFxyXG4gICAgICAgICAgICB0b3RhbCxcclxuICAgICAgICAgICAgdHlwZTogJ3BhdXNlJ1xyXG4gICAgICAgICAgfSkpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigoKSA9PiAoeyBieVBhc3M6IHRydWUgfSkpXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAnbG9jYWxTdG9yYWdlRXhwb3J0Jzoge1xyXG4gICAgICBjb25zdCBkZWxldGVBZnRlckV4cG9ydCA9IC9cXHMqI0RlbGV0ZUFmdGVyRXhwb3J0XFxzKi9pLnRlc3QodmFsdWUpXHJcblxyXG4gICAgICBpZiAoL15cXHMqbG9nXFxzKiQvaS50ZXN0KHRhcmdldCkpIHtcclxuICAgICAgICBjb25zdCB0ZXh0ID0gc3RvcmUuZ2V0U3RhdGUoKS5sb2dzLm1hcChyZW5kZXJMb2cpLmpvaW4oJ1xcbicpXHJcbiAgICAgICAgRmlsZVNhdmVyLnNhdmVBcyhuZXcgQmxvYihbdGV4dF0pLCAna2FudHVfbG9nLnR4dCcpXHJcblxyXG4gICAgICAgIGlmIChkZWxldGVBZnRlckV4cG9ydCkge1xyXG4gICAgICAgICAgc3RvcmUuZGlzcGF0Y2goYWN0LmNsZWFyTG9ncygpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoL1xcLmNzdiQvaS50ZXN0KHRhcmdldCkpIHtcclxuICAgICAgICByZXR1cm4gY3N2TWFuLmV4aXN0cyh0YXJnZXQpXHJcbiAgICAgICAgLnRoZW4oZXhpc3RlZCA9PiB7XHJcbiAgICAgICAgICBpZiAoIWV4aXN0ZWQpIHRocm93IG5ldyBFcnJvcihgJHt0YXJnZXR9IGRvZXNuJ3QgZXhpc3RgKVxyXG5cclxuICAgICAgICAgIHJldHVybiBjc3ZNYW4ucmVhZCh0YXJnZXQpXHJcbiAgICAgICAgICAudGhlbih0ZXh0ID0+IHtcclxuICAgICAgICAgICAgRmlsZVNhdmVyLnNhdmVBcyhuZXcgQmxvYihbdGV4dF0pLCB0YXJnZXQpXHJcblxyXG4gICAgICAgICAgICBpZiAoZGVsZXRlQWZ0ZXJFeHBvcnQpIHtcclxuICAgICAgICAgICAgICBjc3ZNYW4ucmVtb3ZlKHRhcmdldClcclxuICAgICAgICAgICAgICAudGhlbigoKSA9PiBzdG9yZS5kaXNwYXRjaChhY3QubGlzdENTVigpKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoL1xcLnBuZyQvaS50ZXN0KHRhcmdldCkpIHtcclxuICAgICAgICByZXR1cm4gc3NNYW4uZXhpc3RzKHRhcmdldClcclxuICAgICAgICAudGhlbihleGlzdGVkID0+IHtcclxuICAgICAgICAgIGlmICghZXhpc3RlZCkgdGhyb3cgbmV3IEVycm9yKGAke3RhcmdldH0gZG9lc24ndCBleGlzdGApXHJcblxyXG4gICAgICAgICAgcmV0dXJuIHNzTWFuLnJlYWQodGFyZ2V0KVxyXG4gICAgICAgICAgLnRoZW4oYnVmZmVyID0+IHtcclxuICAgICAgICAgICAgRmlsZVNhdmVyLnNhdmVBcyhuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKV0pLCB0YXJnZXQpXHJcblxyXG4gICAgICAgICAgICBpZiAoZGVsZXRlQWZ0ZXJFeHBvcnQpIHtcclxuICAgICAgICAgICAgICBzc01hbi5yZW1vdmUodGFyZ2V0KVxyXG4gICAgICAgICAgICAgIC50aGVuKCgpID0+IHN0b3JlLmRpc3BhdGNoKGFjdC5saXN0U2NyZWVuc2hvdHMoKSkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RhcmdldH0gZG9lc24ndCBleGlzdGApXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAndmlzdWFsVmVyaWZ5JzpcclxuICAgIGNhc2UgJ3Zpc3VhbEFzc2VydCc6XHJcbiAgICBjYXNlICd2aXN1YWxTZWFyY2gnOlxyXG4gICAgY2FzZSAndmlzaW9uRmluZCc6IHtcclxuICAgICAgaWYgKGNtZCA9PT0gJ3Zpc3VhbFNlYXJjaCcpIHtcclxuICAgICAgICBpZiAoIXZhbHVlIHx8ICF2YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtjbWR9OiBNdXN0IHNwZWNpZnkgYSB2YXJpYWJsZSB0byBzYXZlIHRoZSByZXN1bHRgKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdmVyaWZ5UGF0dGVybkltYWdlID0gKGZpbGVOYW1lLCBjb21tYW5kKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGdldFZpc2lvbk1hbigpLmV4aXN0cyhmaWxlTmFtZSlcclxuICAgICAgICAudGhlbihleGlzdGVkID0+IHtcclxuICAgICAgICAgIGlmICghZXhpc3RlZCkgdGhyb3cgbmV3IEVycm9yKGAke2NvbW1hbmR9OiBObyBpbnB1dCBpbWFnZSBmb3VuZCBmb3IgZmlsZSBuYW1lICcke2ZpbGVOYW1lfSdgKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGlzTm90VmVyaWZ5T3JBc3NlcnQgPSBbJ3Zpc3VhbFZlcmlmeScsICd2aXN1YWxBc3NlcnQnXS5pbmRleE9mKGNtZCkgPT09IC0xXHJcbiAgICAgIGNvbnN0IFt2aXNpb25GaWxlTmFtZSwgY29uZmlkZW5jZV0gPSB0YXJnZXQuc3BsaXQoJ0AnKVxyXG4gICAgICBjb25zdCBtaW5TaW1pbGFyaXR5ID0gY29uZmlkZW5jZSA/IHBhcnNlRmxvYXQoY29uZmlkZW5jZSkgOiBzdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy5kZWZhdWx0VmlzaW9uU2VhcmNoQ29uZmlkZW5jZVxyXG4gICAgICBjb25zdCBzZWFyY2hBcmVhICAgID0gdmFycy5nZXQoJyF2aXN1YWxTZWFyY2hBcmVhJylcclxuICAgICAgY29uc3QgdGltZW91dCAgICAgICA9IHZhcnMuZ2V0KCchVElNRU9VVF9XQUlUJykgKiAxMDAwXHJcblxyXG4gICAgICBjb25zdCBydW4gPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGNzSXBjLmFzaygnUEFORUxfQ0xFQVJfVklTSU9OX1JFQ1RTX09OX1BMQVlJTkdfUEFHRScpXHJcbiAgICAgICAgLy8gIzMyNCAudGhlbigoKSA9PiBkZWxheSgoKSA9PiB7fSwgNTAwKSlcclxuICAgICAgICAudGhlbigoKSA9PiBjc0lwYy5hc2soJ1BBTkVMX1NFQVJDSF9WSVNJT05fT05fUExBWUlOR19QQUdFJywge1xyXG4gICAgICAgICAgdmlzaW9uRmlsZU5hbWUsXHJcbiAgICAgICAgICBtaW5TaW1pbGFyaXR5LFxyXG4gICAgICAgICAgc2VhcmNoQXJlYSxcclxuICAgICAgICAgIHN0b3JlZEltYWdlUmVjdDogdmFycy5nZXQoJyFzdG9yZWRJbWFnZVJlY3QnKSxcclxuICAgICAgICAgIGNvbW1hbmQ6IGNtZFxyXG4gICAgICAgIH0pKVxyXG4gICAgICAgIC50aGVuKHJlZ2lvbnMgPT4ge1xyXG4gICAgICAgICAgbG9nKCdyZWdpb25zJywgcmVnaW9ucylcclxuXHJcbiAgICAgICAgICBpZiAocmVnaW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbWFnZSAnJHt2aXNpb25GaWxlTmFtZX0nIChjb25mLiA9ICR7bWluU2ltaWxhcml0eX0pIG5vdCBmb3VuZGApXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY29uc3QgYmVzdCA9IHJlZ2lvbnNbMF1cclxuICAgICAgICAgIGNzSXBjLmFzaygnUEFORUxfSElHSExJR0hUX1JFQ1RTJywgeyBzY29yZWRSZWN0czogcmVnaW9ucyB9KVxyXG5cclxuICAgICAgICAgIHJldHVybiBkZWxheSgoKSA9PiAoe1xyXG4gICAgICAgICAgICBieVBhc3M6IHRydWUsXHJcbiAgICAgICAgICAgIHZhcnM6IHtcclxuICAgICAgICAgICAgICAnIWltYWdlWCc6IGJlc3QubGVmdCArIGJlc3Qud2lkdGggLyAyLFxyXG4gICAgICAgICAgICAgICchaW1hZ2VZJzogYmVzdC50b3AgKyBiZXN0LmhlaWdodCAvIDIsXHJcbiAgICAgICAgICAgICAgLi4uKGlzTm90VmVyaWZ5T3JBc3NlcnQgJiYgdmFsdWUgJiYgdmFsdWUubGVuZ3RoID8geyBbdmFsdWVdOiByZWdpb25zLmxlbmd0aCB9IDoge30pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pLCAxMDApXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBydW5XaXRoUmV0cnkgPSByZXRyeShydW4sIHtcclxuICAgICAgICB0aW1lb3V0LFxyXG4gICAgICAgIHNob3VsZFJldHJ5OiAoZSkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCkuc3RhdHVzID09PSBDLkFQUF9TVEFUVVMuUExBWUVSICYmIC9JbWFnZS4qXFwoY29uZlxcLiA9LipcXCkgbm90IGZvdW5kLy50ZXN0KGUubWVzc2FnZSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJldHJ5SW50ZXJ2YWw6IChyZXRyeUNvdW50LCBsYXN0UmV0cnlJbnRlcnZhbCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIDAuNSArIDAuMjUgKiByZXRyeUNvdW50XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkZpcnN0RmFpbDogKCkgPT4ge1xyXG4gICAgICAgICAgY3NJcGMuYXNrKCdQQU5FTF9USU1FT1VUX1NUQVRVUycsIHsgdGltZW91dCwgdHlwZTogJ1Zpc2lvbiB3YWl0aW5nJyB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25GaW5hbDogKCkgPT4ge1xyXG4gICAgICAgICAgY3NJcGMuYXNrKCdQQU5FTF9DTEVBUl9USU1FT1VUX1NUQVRVUycpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgcmV0dXJuIHZlcmlmeVBhdHRlcm5JbWFnZSh2aXNpb25GaWxlTmFtZSwgY21kKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJ1bldpdGhSZXRyeSgpXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgLy8gTm90ZTogZXh0cmEudGhyb3dFcnJvciA9PT0gdHJ1ZSwgd2hlbiBcIkZpbmRcIiBidXR0b24gaXMgdXNlZFxyXG4gICAgICAgICAgaWYgKGNtZCA9PT0gJ3Zpc3VhbEFzc2VydCcgfHwgKGV4dHJhICYmIGV4dHJhLnRocm93RXJyb3IpKSB7XHJcbiAgICAgICAgICAgIHRocm93IGVcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBieVBhc3M6IHRydWUsXHJcbiAgICAgICAgICAgIC4uLihpc05vdFZlcmlmeU9yQXNzZXJ0ICYmIHZhbHVlICYmIHZhbHVlLmxlbmd0aCA/IHtcclxuICAgICAgICAgICAgICB2YXJzOiB7XHJcbiAgICAgICAgICAgICAgICBbdmFsdWVdOiAwXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IDoge30pLFxyXG4gICAgICAgICAgICAuLi4oY21kID09PSAndmlzdWFsVmVyaWZ5JyA/IHtcclxuICAgICAgICAgICAgICBsb2c6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yOiBlLm1lc3NhZ2VcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gOiB7fSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ3Zpc2lvbkxpbWl0U2VhcmNoQXJlYSc6IHtcclxuICAgICAgbGV0IGFyZWEgID0gdGFyZ2V0LnRyaW0oKVxyXG4gICAgICBsZXQgcCAgICAgPSBQcm9taXNlLnJlc29sdmUoeyBieVBhc3M6IHRydWUgfSlcclxuXHJcbiAgICAgIGlmICgvXnZpZXdwb3J0JC8udGVzdChhcmVhKSkge1xyXG4gICAgICAgIGFyZWEgPSAndmlld3BvcnQnXHJcbiAgICAgIH0gZWxzZSBpZiAoL15mdWxsJC8udGVzdChhcmVhKSkge1xyXG4gICAgICAgIGFyZWEgPSAnZnVsbCdcclxuICAgICAgfSBlbHNlIGlmICgvXmVsZW1lbnQ6Ly50ZXN0KGFyZWEpKSB7XHJcbiAgICAgICAgLy8gTm90ZTogbGV0IGNzIHBhZ2UgdG8gcHJvY2VzcyB0aGlzIGNhc2UsIGl0IGFjdHMgYWxtb3N0IHRoZSBzYW1lIGFzIGEgYHN0b3JlSW1hZ2VgIGNvbW1hbmRcclxuICAgICAgICBwID0gUHJvbWlzZS5yZXNvbHZlKHsgYnlQYXNzOiBmYWxzZSB9KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVGFyZ2V0IG9mIHZpc2lvbkxpbWl0U2VhcmNoQXJlYSBjb3VsZCBvbmx5IGJlIGVpdGhlciAndmlld3BvcnQnLCAnZnVsbCcgb3IgJ2VsZW1lbnQ6Li4uJ2ApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhcnMuc2V0KHsgJyF2aXN1YWxTZWFyY2hBcmVhJzogYXJlYSB9LCB0cnVlKVxyXG4gICAgICByZXR1cm4gcFxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ2JyaW5nQnJvd3NlclRvRm9yZWdyb3VuZCc6IHtcclxuICAgICAgcmV0dXJuIGNzSXBjLmFzaygnUEFORUxfQlJJTkdfUExBWUlOR19XSU5ET1dfVE9fRk9SRUdST1VORCcpXHJcbiAgICAgIC50aGVuKCgpID0+ICh7IGJ5UGFzczogdHJ1ZSB9KSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdyZXNpemUnOiB7XHJcbiAgICAgIGlmICghL1xccypcXGQrQFxcZCtcXHMqLy50ZXN0KHRhcmdldCkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFN5bnRheCBmb3IgdGFyZ2V0IG9mIHJlc2l6ZSBjb21tYW5kIGlzIHhAeSwgZS5nLiA4MDBANjAwYClcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgW3N0cldpZHRoLCBzdHJIZWlnaHRdID0gdGFyZ2V0LnNwbGl0KCdAJylcclxuICAgICAgY29uc3Qgd2lkdGggICA9IHBhcnNlSW50KHN0cldpZHRoLCAxMClcclxuICAgICAgY29uc3QgaGVpZ2h0ICA9IHBhcnNlSW50KHN0ckhlaWdodCwgMTApXHJcblxyXG4gICAgICBsb2coJ3Jlc2l6ZScsIHdpZHRoLCBoZWlnaHQpXHJcbiAgICAgIHJldHVybiBjc0lwYy5hc2soJ1BBTkVMX1JFU0laRV9QTEFZX1RBQicsIHsgd2lkdGgsIGhlaWdodCB9KVxyXG4gICAgICAudGhlbigoeyBhY3R1YWwsIGRlc2lyZWQsIGRpZmYgfSkgPT4ge1xyXG4gICAgICAgIGlmIChkaWZmLmxlbmd0aCA9PT0gMCkgIHJldHVybiB7IGJ5UGFzczogdHJ1ZSB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBieVBhc3M6IHRydWUsXHJcbiAgICAgICAgICBsb2c6IHtcclxuICAgICAgICAgICAgd2FybmluZzogYE9ubHkgYWJsZSB0byByZXNpemUgaXQgdG8gJHthY3R1YWwud2lkdGh9QCR7YWN0dWFsLmhlaWdodH0sIGdpdmVuICR7ZGVzaXJlZC53aWR0aH1AJHtkZXNpcmVkLmhlaWdodH1gXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWRcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGludGVycHJldENTVkNvbW1hbmRzID0gKHsgc3RvcmUsIHZhcnMgfSkgPT4gKGNvbW1hbmQsIGluZGV4KSA9PiB7XHJcbiAgY29uc3QgY3N2TWFuID0gZ2V0Q1NWTWFuKClcclxuICBjb25zdCB7IGNtZCwgdGFyZ2V0LCB2YWx1ZSB9ID0gY29tbWFuZFxyXG5cclxuICBzd2l0Y2ggKGNtZCkge1xyXG4gICAgY2FzZSAnY3N2UmVhZCc6IHtcclxuICAgICAgcmV0dXJuIGNzdk1hbi5leGlzdHModGFyZ2V0KVxyXG4gICAgICAudGhlbihpc0V4aXN0ZWQgPT4ge1xyXG4gICAgICAgIGlmICghaXNFeGlzdGVkKSB7XHJcbiAgICAgICAgICB2YXJzLnNldCh7ICchQ3N2UmVhZFN0YXR1cyc6ICdGSUxFX05PVF9GT1VORCcgfSwgdHJ1ZSlcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY3N2IGZpbGUgJyR7dGFyZ2V0fScgZG9lcyBub3QgZXhpc3RgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNzdk1hbi5yZWFkKHRhcmdldClcclxuICAgICAgICAudGhlbihwYXJzZUZyb21DU1YpXHJcbiAgICAgICAgLnRoZW4ocm93cyA9PiB7XHJcbiAgICAgICAgICAvLyBOb3RlOiAhQ3N2UmVhZExpbmVOdW1iZXIgc3RhcnRzIGZyb20gMVxyXG4gICAgICAgICAgY29uc3QgaW5kZXggPSB2YXJzLmdldCgnIUNzdlJlYWRMaW5lTnVtYmVyJykgLSAxXHJcbiAgICAgICAgICBjb25zdCByb3cgICA9IHJvd3NbaW5kZXhdXHJcblxyXG4gICAgICAgICAgaWYgKGluZGV4ID49IHJvd3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhcnMuc2V0KHsgJyFDc3ZSZWFkU3RhdHVzJzogJ0VORF9PRl9GSUxFJyB9LCB0cnVlKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VuZCBvZiBjc3YgZmlsZSByZWFjaGVkJylcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhcnMuc2V0KHtcclxuICAgICAgICAgICAgICAnIUNzdlJlYWRTdGF0dXMnOiAnT0snLFxyXG4gICAgICAgICAgICAgICchQ3N2UmVhZE1heFJvdyc6IHJvd3MubGVuZ3RoXHJcbiAgICAgICAgICAgIH0sIHRydWUpXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdmFycy5jbGVhcigvXiFDT0xcXGQrJC9pKVxyXG5cclxuICAgICAgICAgIHJvdy5mb3JFYWNoKChkYXRhLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIHZhcnMuc2V0KHsgW2AhQ09MJHtpICsgMX1gXTogZGF0YSB9KVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigoKSA9PiAoe1xyXG4gICAgICAgIGlzRmxvd0xvZ2ljOiB0cnVlXHJcbiAgICAgIH0pKVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgJ2NzdlNhdmUnOiB7XHJcbiAgICAgIGNvbnN0IGNzdkxpbmUgPSB2YXJzLmdldCgnIUNTVkxJTkUnKVxyXG5cclxuICAgICAgaWYgKCFjc3ZMaW5lIHx8ICFjc3ZMaW5lLmxlbmd0aCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZGF0YSB0byBzYXZlIHRvIGNzdicpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBzdHJpbmdpZnlUb0NTVihbY3N2TGluZV0pXHJcbiAgICAgIC50aGVuKG5ld0xpbmVUZXh0ID0+IHtcclxuICAgICAgICBjb25zdCBmaWxlTmFtZSA9IC9cXC5jc3YkL2kudGVzdCh0YXJnZXQpID8gdGFyZ2V0IDogKHRhcmdldCArICcuY3N2JylcclxuXHJcbiAgICAgICAgcmV0dXJuIGNzdk1hbi5leGlzdHMoZmlsZU5hbWUpXHJcbiAgICAgICAgLnRoZW4oaXNFeGlzdGVkID0+IHtcclxuICAgICAgICAgIGlmICghaXNFeGlzdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjc3ZNYW4ud3JpdGUoZmlsZU5hbWUsIG5ld0xpbmVUZXh0KVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBjc3ZNYW4ucmVhZChmaWxlTmFtZSlcclxuICAgICAgICAgIC50aGVuKG9yaWdpbmFsVGV4dCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSAob3JpZ2luYWxUZXh0ICsgJ1xcbicgKyBuZXdMaW5lVGV4dCkucmVwbGFjZSgvXFxuKy9nLCAnXFxuJylcclxuICAgICAgICAgICAgcmV0dXJuIGNzdk1hbi53cml0ZShmaWxlTmFtZSwgdGV4dClcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHZhcnMuY2xlYXIoL14hQ1NWTElORSQvKVxyXG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKGFjdC5saXN0Q1NWKCkpXHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKCgpID0+ICh7XHJcbiAgICAgICAgaXNGbG93TG9naWM6IHRydWVcclxuICAgICAgfSkpXHJcbiAgICB9XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxyXG4gIH1cclxufVxyXG5cclxuLy8gTm90ZTogaW5pdGlhbGl6ZSB0aGUgcGxheWVyLCBhbmQgbGlzdGVuIHRvIGFsbCBldmVudHMgaXQgZW1pdHNcclxuZXhwb3J0IGNvbnN0IGluaXRQbGF5ZXIgPSAoc3RvcmUpID0+IHtcclxuICBjb25zdCB2YXJzICAgICAgICA9IHZhcnNGYWN0b3J5KClcclxuICBjb25zdCBpbnRlcnByZXRlciA9IG5ldyBJbnRlcnByZXRlcih7IHJ1bjogaW50ZXJwcmV0U3BlY2lhbENvbW1hbmRzKHt2YXJzLCBzdG9yZX0pIH0pXHJcbiAgY29uc3QgdGNQbGF5ZXIgICAgPSBpbml0VGVzdENhc2VQbGF5ZXIoe3N0b3JlLCB2YXJzLCBpbnRlcnByZXRlcn0pXHJcbiAgY29uc3QgdHNQbGF5ZXIgICAgPSBpbml0VGVzdFN1aXRQbGF5ZXIoe3N0b3JlLCB0Y1BsYXllcn0pXHJcblxyXG4gIC8vIE5vdGU6IE5vIG5lZWQgdG8gcmV0dXJuIGFueXRoaW5nIGluIHRoaXMgbWV0aG9kLlxyXG4gIC8vIEJlY2F1c2UgYm90aCB0ZXN0IGNhc2UgcGxheWVyIGFuZCB0ZXN0IHN1aXRlIHBsYXllciBhcmUgY2FjaGVkIGluIHBsYXllci5qc1xyXG4gIC8vIEFsbCBsYXRlciB1c2FnZSBvZiBwbGF5ZXIgdXRpbGl6ZSBgZ2V0UGxheWVyYCBtZXRob2RcclxufVxyXG5cclxuY29uc3QgaW5pdFRlc3RDYXNlUGxheWVyID0gKHsgc3RvcmUsIHZhcnMsIGludGVycHJldGVyIH0pID0+IHtcclxuICBjb25zdCBtYWluVHJhY2tlciA9IG5ldyBUaW1lVHJhY2tlcigpXHJcbiAgY29uc3QgbG9vcFRyYWNrZXIgPSBuZXcgVGltZVRyYWNrZXIoKVxyXG4gIGNvbnN0IG1hY3JvVGltZXIgID0gbmV3IFRpbWVvdXQoKCkgPT4gcGxheWVyLnN0b3BXaXRoRXJyb3IobmV3IEVycm9yKGBtYWNybyB0aW1lb3V0ICR7dmFycy5nZXQoJyFUSU1FT1VUX01BQ1JPJyl9cyAoY2hhbmdlIHRoZSB2YWx1ZSBpbiB0aGUgc2V0dGluZ3MgaWYgbmVlZGVkKWApKSlcclxuICBjb25zdCBuZXh0Q29tbWFuZCA9IChwbGF5ZXJTdGF0ZSkgPT4ge1xyXG4gICAgY29uc3QgeyByZXNvdXJjZXMsIG5leHRJbmRleCB9ID0gcGxheWVyU3RhdGVcclxuICAgIHJldHVybiByZXNvdXJjZXNbbmV4dEluZGV4ICsgMV1cclxuICB9XHJcbiAgLy8gTm90ZTogdXNlIHRoaXMgdG8gdHJhY2sgYG9uRXJyb3JgIGNvbW1hbmRcclxuICAvLyBgb25FcnJvcmAgd29ya3MgbGlrZSBhIGdsb2JhbCB0cnkgY2F0Y2gsIGl0IHRha2VzIGVmZmVjdHMgb24gYW55IGNvbW1hbmRzIGNvbWluZyBhZnRlciBgb25FcnJvcmBcclxuICAvLyBNdWx0aWxwbGUgYG9uRXJyb3JgIGFyZSBhbGxvd2VkLCBsYXR0ZXIgb25lIG92ZXJ3cml0ZXMgcHJldmlvdXMgb25lLlxyXG4gIC8vIFRoZSBzY29wZSBvZiBgb25FcnJvcmAgaXMgY3VycmVudCBsb29wXHJcbiAgbGV0IG9uRXJyb3JDb21tYW5kID0gbnVsbFxyXG4gIGNvbnN0IHBsYXllciAgICAgID0gZ2V0UGxheWVyKHtcclxuICAgIHByZXBhcmU6IChzdGF0ZSkgPT4ge1xyXG4gICAgICAvLyBFYWNoICdyZXBsYXknIGhhcyBhbiBpbmRlcGVuZGVudCB2YXJpYWJsZSBzY29wZSxcclxuICAgICAgLy8gd2l0aCBnbG9iYWwgdmFyaWFibGVzIGFzIGluaXRpYWwgc2NvcGVcclxuICAgICAgdmFycy5yZXNldCh7IGtlZXBHbG9iYWw6IHRydWUgfSlcclxuICAgICAgdmFycy5zZXQoc3RhdGUucHVibGljLnNjb3BlIHx8IHt9LCB0cnVlKVxyXG4gICAgICB2YXJzLnNldCh7XHJcbiAgICAgICAgJyFTdGF0dXNPSyc6IHRydWUsXHJcbiAgICAgICAgJyFXYWl0Rm9yVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICchSU1BR0VYJzogMCxcclxuICAgICAgICAnIUlNQUdFWSc6IDBcclxuICAgICAgfSlcclxuXHJcbiAgICAgIG1haW5UcmFja2VyLnJlc2V0KClcclxuICAgICAgbG9vcFRyYWNrZXIucmVzZXQoKVxyXG5cclxuICAgICAgaW50ZXJwcmV0ZXIucmVzZXQoKVxyXG4gICAgICBpbnRlcnByZXRlci5wcmVwcm9jZXNzKHN0YXRlLnJlc291cmNlcylcclxuXHJcbiAgICAgIHJldHVybiBjc0lwYy5hc2soJ1BBTkVMX1NUQVJUX1BMQVlJTkcnLCB7XHJcbiAgICAgICAgdXJsOiBzdGF0ZS5zdGFydFVybCxcclxuICAgICAgICBzaG91bGROb3RBY3RpdmF0ZVRhYjogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICAgIHJ1bjogKGNvbW1hbmQsIHN0YXRlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHVzZUNsaXBib2FyZCA9IC8hY2xpcGJvYXJkL2kudGVzdChjb21tYW5kLnRhcmdldCArICc7JyArIGNvbW1hbmQudmFsdWUpXHJcbiAgICAgIGNvbnN0IHByZXBhcmUgPSAhdXNlQ2xpcGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBQcm9taXNlLnJlc29sdmUoeyB1c2VDbGlwYm9hcmQ6IGZhbHNlIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjc0lwYy5hc2soJ0dFVF9DTElQQk9BUkQnKS50aGVuKGNsaXBib2FyZCA9PiAoeyB1c2VDbGlwYm9hcmQ6IHRydWUsIGNsaXBib2FyZCB9KSlcclxuXHJcbiAgICAgIGlmIChFeHQuaXNGaXJlZm94KCkpIHtcclxuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQuY21kKSB7XHJcbiAgICAgICAgICBjYXNlICdvbkRvd25sb2FkJzpcclxuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goYWN0LmFkZExvZygnd2FybmluZycsICdvbkRvd25sb2FkIC0gY2hhbmdpbmcgZmlsZSBuYW1lcyBub3Qgc3VwcG9ydGVkIGJ5IEZpcmVmb3ggZXh0ZW5zaW9uIGFwaSB5ZXQnKSlcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBwcmVwYXJlLnRoZW4oKHsgdXNlQ2xpcGJvYXJkLCBjbGlwYm9hcmQgPSAnJyB9KSA9PiB7XHJcbiAgICAgICAgLy8gU2V0IGNsaXBib2FyZCB2YXJpYWJsZSBpZiBpdCBpcyB1c2VkXHJcbiAgICAgICAgaWYgKHVzZUNsaXBib2FyZCkge1xyXG4gICAgICAgICAgdmFycy5zZXQoeyAnIUNMSVBCT0FSRCc6IGNsaXBib2FyZCB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2V0IGxvb3AgaW4gZXZlcnkgcnVuXHJcbiAgICAgICAgdmFycy5zZXQoe1xyXG4gICAgICAgICAgJyFMT09QJzogc3RhdGUubG9vcHNDdXJzb3IsXHJcbiAgICAgICAgICAnIVJVTlRJTUUnOiBsb29wVHJhY2tlci5lbGFwc2VkSW5TZWNvbmRzKClcclxuICAgICAgICB9LCB0cnVlKVxyXG5cclxuICAgICAgICBpZiAoY29tbWFuZC5jbWQgPT09ICdvcGVuJykge1xyXG4gICAgICAgICAgY29tbWFuZCA9IHsuLi5jb21tYW5kLCBocmVmOiBzdGF0ZS5zdGFydFVybH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5vdGU6IHRyYW5zbGF0ZSBzaG9ydGhhbmQgJyNlZnAnXHJcbiAgICAgICAgaWYgKGNvbW1hbmQudGFyZ2V0ICYmIC9eI2VmcCQvaS50ZXN0KGNvbW1hbmQudGFyZ2V0LnRyaW0oKSkpIHtcclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmdcclxuICAgICAgICAgIGNvbW1hbmQudGFyZ2V0ID0gJyNlbGVtZW50ZnJvbXBvaW50ICgkeyFpbWFnZVh9LCAkeyFpbWFnZVl9KSdcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb21tYW5kLmNtZCAhPT0gJ2NvbW1lbnQnKSB7XHJcbiAgICAgICAgICAvLyBSZXBsYWNlIHZhcmlhYmxlcyBpbiAndGFyZ2V0JyBhbmQgJ3ZhbHVlJyBvZiBjb21tYW5kc1xyXG4gICAgICAgICAgO1sndGFyZ2V0JywgJ3ZhbHVlJ10uZm9yRWFjaChmaWVsZCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjb21tYW5kW2ZpZWxkXSA9PT0gdW5kZWZpbmVkKSByZXR1cm5cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9wdHMgPSAgKGNvbW1hbmQuY21kID09PSAnc3RvcmVFdmFsJyAmJiBmaWVsZCA9PT0gJ3RhcmdldCcpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbW1hbmQuY21kID09PSAnZ290b0lmJyAmJiBmaWVsZCA9PT0gJ3RhcmdldCcpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbW1hbmQuY21kID09PSAnaWYnICYmIGZpZWxkID09PSAndGFyZ2V0JykgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAoY29tbWFuZC5jbWQgPT09ICd3aGlsZScgJiYgZmllbGQgPT09ICd0YXJnZXQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7IHdpdGhIYXNoTm90YXRpb246IHRydWUgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7fVxyXG5cclxuICAgICAgICAgICAgY29tbWFuZCA9IHtcclxuICAgICAgICAgICAgICAuLi5jb21tYW5kLFxyXG4gICAgICAgICAgICAgIFtmaWVsZF06IHZhcnMucmVuZGVyKFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZUVzY2FwZWRDaGFyKFxyXG4gICAgICAgICAgICAgICAgICBjb21tYW5kLmNtZCA9PT0gJ3R5cGUnID8gY29tbWFuZFtmaWVsZF0gOiBjb21tYW5kW2ZpZWxkXS50cmltKCksXHJcbiAgICAgICAgICAgICAgICAgIGNvbW1hbmQsXHJcbiAgICAgICAgICAgICAgICAgIGZpZWxkXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgb3B0c1xyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFkZCB0aW1lb3V0IGluZm8gdG8gZWFjaCBjb21tYW5kJ3MgZXh0cmFcclxuICAgICAgICAvLyBQbGVhc2Ugbm90ZSB0aGF0IHdlIG11c3Qgc2V0IHRoZSB0aW1lb3V0IGluZm8gYXQgcnVudGltZSBmb3IgZWFjaCBjb21tYW5kLFxyXG4gICAgICAgIC8vIHNvIHRoYXQgdGltZW91dCBjb3VsZCBiZSBtb2RpZmllZCBieSBzb21lICdzdG9yZScgY29tbWFuZHMgYW5kIGFmZmVjdFxyXG4gICAgICAgIC8vIHRoZSByZXN0IG9mIGNvbW1hbmRzXHJcbiAgICAgICAgY29tbWFuZCA9IHVwZGF0ZUluKFsnZXh0cmEnXSwgZXh0cmEgPT4gKHtcclxuICAgICAgICAgIC4uLihleHRyYSB8fCB7fSksXHJcbiAgICAgICAgICB0aW1lb3V0UGFnZUxvYWQ6ICB2YXJzLmdldCgnIVRJTUVPVVRfUEFHRUxPQUQnKSxcclxuICAgICAgICAgIHRpbWVvdXRFbGVtZW50OiAgIHZhcnMuZ2V0KCchVElNRU9VVF9XQUlUJyksXHJcbiAgICAgICAgICB0aW1lb3V0RG93bmxvYWQ6ICB2YXJzLmdldCgnIVRJTUVPVVRfRE9XTkxPQUQnKSxcclxuICAgICAgICAgIGxhc3RDb21tYW5kT2s6ICAgIHZhcnMuZ2V0KCchTEFTVENPTU1BTkRPSycpLFxyXG4gICAgICAgICAgZXJyb3JJZ25vcmU6ICAgICAgISF2YXJzLmdldCgnIUVSUk9SSUdOT1JFJyksXHJcbiAgICAgICAgICB3YWl0Rm9yVmlzaWJsZTogICAhIXZhcnMuZ2V0KCchV0FJVEZPUlZJU0lCTEUnKVxyXG4gICAgICAgIH0pLCBjb21tYW5kKVxyXG5cclxuICAgICAgICAvLyBOb3RlOiBhbGwgY29tbWFuZHMgbmVlZCB0byBiZSBydW4gYnkgaW50ZXJwcmV0ZXIgYmVmb3JlIGl0IGlzIHNlbnQgdG8gYmdcclxuICAgICAgICAvLyBzbyB0aGF0IGludGVycHJldGVyIGNvdWxkIHBpY2sgdGhvc2UgZmxvdyBsb2dpYyBjb21tYW5kcyBhbmQgZG8gaXRzIGpvYlxyXG4gICAgICAgIHJldHVybiBpbnRlcnByZXRlci5ydW4oY29tbWFuZCwgc3RhdGUubmV4dEluZGV4KVxyXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICBjb25zdCB7IGJ5UGFzcywgaXNGbG93TG9naWMsIG5leHRJbmRleCwgcmVzZXRWYXJzIH0gPSByZXN1bHRcclxuXHJcbiAgICAgICAgICAvLyBSZWNvcmQgb25FcnJvciBjb21tYW5kXHJcbiAgICAgICAgICBpZiAoY29tbWFuZC5jbWQgPT09ICdvbkVycm9yJykge1xyXG4gICAgICAgICAgICBvbkVycm9yQ29tbWFuZCA9IGNvbW1hbmRcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoYnlQYXNzKSAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdClcclxuICAgICAgICAgIGlmIChpc0Zsb3dMb2dpYykgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBuZXh0SW5kZXggfSlcclxuXHJcbiAgICAgICAgICAvLyBOb3RlOiAtMSB3aWxsIGRpc2FibGUgaXBjIHRpbWVvdXQgZm9yICdwYXVzZScgY29tbWFuZFxyXG4gICAgICAgICAgY29uc3QgdGltZW91dCA9IGNvbW1hbmQuY21kID09PSAncGF1c2UnID8gLTEgOiBudWxsXHJcblxyXG4gICAgICAgICAgcmV0dXJuIHJldHJ5SWZIZWFydEJlYXRFeHBpcmVkKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGNzSXBjLmFzaygnUEFORUxfUlVOX0NPTU1BTkQnLCB7IGNvbW1hbmQgfSwgdGltZW91dClcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAvLyBOb3RlOiBpdCB3aWxsIGp1c3QgbG9nIGVycm9ycyBpbnN0ZWFkIG9mIGEgc3RvcCBvZiB3aG9sZSBtYWNybywgaW4gZm9sbG93aW5nIHNpdHVhdGlvbnNcclxuICAgICAgICAgIC8vIDEuIHZhcmlhYmxlICFFUlJPUklHTk9SRSBpcyBzZXQgdG8gdHJ1ZVxyXG4gICAgICAgICAgLy8gMi4gVGhlcmUgaXMgYW4gYG9uRXJyb3JgIGNvbW1hbmQgYWhlYWQgaW4gY3VycmVudCBsb29wLlxyXG4gICAgICAgICAgLy8gMy4gaXQncyBpbiBsb29wIG1vZGUsIGFuZCBpdCdzIG5vdCB0aGUgbGFzdCBsb29wLCBhbmQgb25FcnJvckluTG9vcCBpcyBjb250aW51ZV9uZXh0X2xvb3AsXHJcbiAgICAgICAgICBpZiAodmFycy5nZXQoJyFFUlJPUklHTk9SRScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgbG9nOiB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcjogZS5tZXNzYWdlXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKG9uRXJyb3JDb21tYW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlICAgICAgICAgICA9IG9uRXJyb3JDb21tYW5kLnZhbHVlICYmIG9uRXJyb3JDb21tYW5kLnZhbHVlLnRyaW0oKVxyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgICAgICAgICAgPSBvbkVycm9yQ29tbWFuZC50YXJnZXQgJiYgb25FcnJvckNvbW1hbmQudGFyZ2V0LnRyaW0oKVxyXG5cclxuICAgICAgICAgICAgaWYgKC9eI3Jlc3RhcnQkL2kudGVzdCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goYWN0LmFkZExvZygnc3RhdHVzJywgJ29uRXJyb3IgLSBhYm91dCB0byByZXN0YXJ0JykpXHJcblxyXG4gICAgICAgICAgICAgIGUucmVzdGFydCA9IHRydWVcclxuICAgICAgICAgICAgICB0aHJvdyBlXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL14jZ290byQvaS50ZXN0KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChhY3QuYWRkTG9nKCdzdGF0dXMnLCBgb25FcnJvciAtIGFib3V0IHRvIGdvdG8gbGFiZWwgJyR7dmFsdWV9J2ApKVxyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgIGxvZzoge1xyXG4gICAgICAgICAgICAgICAgICBlcnJvcjogZS5tZXNzYWdlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbmV4dEluZGV4OiBpbnRlcnByZXRlci5jb21tYW5kSW5kZXhCeUxhYmVsKHZhbHVlKVxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb25zdCBjb250aW51ZU5leHRMb29wID0gIHN0YXRlLm1vZGUgPT09IFBsYXllci5DLk1PREUuTE9PUCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5sb29wc0N1cnNvciA8IHN0YXRlLmxvb3BzRW5kICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlLmdldFN0YXRlKCkuY29uZmlnLm9uRXJyb3JJbkxvb3AgPT09ICdjb250aW51ZV9uZXh0X2xvb3AnXHJcblxyXG4gICAgICAgICAgaWYgKGNvbnRpbnVlTmV4dExvb3ApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICBsb2c6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yOiBlLm1lc3NhZ2VcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIC8vIE5vdGU6IHNpbXBseSBzZXQgbmV4dEluZGV4IHRvIGNvbW1hbmQgY291bnQsIGl0IHdpbGwgZW50ZXIgbmV4dCBsb29wXHJcbiAgICAgICAgICAgICAgbmV4dEluZGV4OiBzdGF0ZS5yZXNvdXJjZXMubGVuZ3RoXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBOb3RlOiBzZXQgdGhlc2Ugc3RhdHVzIHZhbHVlcyB0byBmYWxzZVxyXG4gICAgICAgICAgLy8gc3RhdHVzIG9mIHRob3NlIGxvZ3MgYWJvdmUgd2lsbCBiZSB0YWtlbiBjYXJlIG9mIGJ5IGBoYW5kbGVSZXN1bHRgXHJcbiAgICAgICAgICB2YXJzLnNldCh7XHJcbiAgICAgICAgICAgICchTGFzdENvbW1hbmRPSyc6IGZhbHNlLFxyXG4gICAgICAgICAgICAnIVN0YXR1c09LJzogZmFsc2VcclxuICAgICAgICAgIH0sIHRydWUpXHJcblxyXG4gICAgICAgICAgdGhyb3cgZVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgaGFuZGxlUmVzdWx0OiAocmVzdWx0LCBjb21tYW5kLCBzdGF0ZSkgPT4ge1xyXG4gICAgICBjb25zdCBwcmVwYXJlcyA9IFtdXHJcbiAgICAgIGNvbnN0IGdldEN1cnJlbnRQbGF5ZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpXHJcblxyXG4gICAgICAgIHN3aXRjaCAoc3RhdGUucGxheWVyLm1vZGUpIHtcclxuICAgICAgICAgIGNhc2UgQy5QTEFZRVJfTU9ERS5URVNUX0NBU0U6XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRQbGF5ZXIoeyBuYW1lOiAndGVzdENhc2UnIH0pXHJcblxyXG4gICAgICAgICAgY2FzZSBDLlBMQVlFUl9NT0RFLlRFU1RfU1VJVEU6XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRQbGF5ZXIoeyBuYW1lOiAndGVzdFN1aXRlJyB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRXZlcnkgY29tbWFuZCBzaG91bGQgcmV0dXJuIGl0cyB3aW5kb3cudXJsXHJcbiAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnBhZ2VVcmwpIHtcclxuICAgICAgICB2YXJzLnNldCh7ICchVVJMJzogcmVzdWx0LnBhZ2VVcmwgfSwgdHJ1ZSlcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQudmFycykge1xyXG4gICAgICAgIGNvbnN0IG5ld1ZhcnMgPSBvYmpNYXAodmFsID0+IHtcclxuICAgICAgICAgIGlmICh2YWwuX191bmRlZmluZWRfXykgIHJldHVybiB1bmRlZmluZWRcclxuICAgICAgICAgIHJldHVybiB2YWxcclxuICAgICAgICB9LCByZXN1bHQudmFycylcclxuXHJcbiAgICAgICAgbG9nKCdzZXQgdmFycycsIG5ld1ZhcnMpXHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB2YXJzLnNldChuZXdWYXJzKVxyXG5cclxuICAgICAgICAgIC8vIE5vdGU6IGlmIHNldCB2YWx1ZSB0byAhQ2xpcGJvYXJkLCB0aGVyZSBpcyBhbiBhc3luYyBqb2Igd2UgbXVzdCBnZXQgZG9uZSBiZWZvcmUgaGFuZGxlUmVzdWx0IGNvdWxkIHJldHVyblxyXG4gICAgICAgICAgY29uc3QgY2xpcEJvYXJkS2V5ID0gT2JqZWN0LmtleXMocmVzdWx0LnZhcnMpLmZpbmQoa2V5ID0+IC8hY2xpcGJvYXJkL2kudGVzdChrZXkpKVxyXG4gICAgICAgICAgaWYgKGNsaXBCb2FyZEtleSkge1xyXG4gICAgICAgICAgICBwcmVwYXJlcy5wdXNoKFxyXG4gICAgICAgICAgICAgIGNzSXBjLmFzaygnU0VUX0NMSVBCT0FSRCcsIHsgdmFsdWU6IHJlc3VsdC52YXJzW2NsaXBCb2FyZEtleV0gfSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIE5vdGU6IGlmIHVzZXIgc2V0cyAhdGltZW91dF9tYWNybyB0byBzb21lIG90aGVyIHZhbHVlLCByZS1jYWxjdWxhdGUgdGhlIHRpbWUgbGVmdFxyXG4gICAgICAgICAgY29uc3QgdGltZW91dE1hY3JvS2V5ID0gT2JqZWN0LmtleXMocmVzdWx0LnZhcnMpLmZpbmQoa2V5ID0+IC8hdGltZW91dF9tYWNyby9pLnRlc3Qoa2V5KSlcclxuICAgICAgICAgIGlmICh0aW1lb3V0TWFjcm9LZXkpIHtcclxuICAgICAgICAgICAgbWFjcm9UaW1lci5yZXN0YXJ0KHJlc3VsdC52YXJzW3RpbWVvdXRNYWNyb0tleV0gKiAxMDAwKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGhhc0Vycm9yID0gZmFsc2VcclxuXHJcbiAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmxvZykge1xyXG4gICAgICAgIGlmIChyZXN1bHQubG9nLmluZm8pIHtcclxuICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGFjdC5hZGRMb2coJ2VjaG8nLCByZXN1bHQubG9nLmluZm8sIHJlc3VsdC5sb2cub3B0aW9ucykpXHJcblxyXG4gICAgICAgICAgaWYgKHJlc3VsdC5sb2cub3B0aW9ucyAmJiByZXN1bHQubG9nLm9wdGlvbnMubm90aWZpY2F0aW9uKSB7XHJcbiAgICAgICAgICAgIGNzSXBjLmFzaygnUEFORUxfTk9USUZZX0VDSE8nLCB7IHRleHQ6IHJlc3VsdC5sb2cuaW5mbyB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlc3VsdC5sb2cud2FybmluZykge1xyXG4gICAgICAgICAgc3RvcmUuZGlzcGF0Y2goYWN0LmFkZExvZygnd2FybmluZycsIHJlc3VsdC5sb2cud2FybmluZywgcmVzdWx0LmxvZy5vcHRpb25zKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXN1bHQubG9nLmVycm9yKSB7XHJcbiAgICAgICAgICBzdG9yZS5kaXNwYXRjaChhY3QuYWRkUGxheWVyRXJyb3JDb21tYW5kSW5kZXgoc3RhdGUubmV4dEluZGV4KSlcclxuICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGFjdC5hZGRMb2coJ2Vycm9yJywgcmVzdWx0LmxvZy5lcnJvciwgeyBpZ25vcmVkOiB0cnVlIH0pKVxyXG4gICAgICAgICAgaGFzRXJyb3IgPSB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBGcm9tIHNwZWM6ICFTdGF0dXNPSywgdmVyeSBzaW1pbGFyIHRvICFMYXN0Q29tbWFuZE9LIGJ1dCBpdCBkb2VzIG5vdCBnZXQgcmVzZXQgYnkgYSDigJxnb29k4oCdIGNvbW1hbmQuXHJcbiAgICAgIC8vIElmIHNldCB0byBlcnJvciwgaXQgcmVtYWlucyBsaWtlIHRoaXMuIEJ1dCBhIHVzZXIgY2FuIHVzZSBzdG9yZSB8IHRydWUgfCAhU3RhdHVzT0sgdG8gbWFudWFsbHkgcmVzZXQgaXQuXHJcbiAgICAgIGlmIChjb21tYW5kLmNtZCAhPT0gJ2VjaG8nKSB7XHJcbiAgICAgICAgdmFycy5zZXQoeyAnIUxhc3RDb21tYW5kT0snOiAhaGFzRXJyb3IgfSwgdHJ1ZSlcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgdmFycy5zZXQoeyAnIVN0YXR1c09LJzogZmFsc2UgfSwgdHJ1ZSlcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuc2NyZWVuc2hvdCkge1xyXG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKGFjdC5hZGRMb2coJ2luZm8nLCAnYSBuZXcgc2NyZWVuc2hvdCBjYXB0dXJlZCcpKVxyXG5cclxuICAgICAgICBnZXRTY3JlZW5zaG90TWFuKCkuZ2V0TGluayhyZXN1bHQuc2NyZWVuc2hvdC5uYW1lKVxyXG4gICAgICAgIC50aGVuKGxpbmsgPT4gKHtcclxuICAgICAgICAgIC4uLnJlc3VsdC5zY3JlZW5zaG90LFxyXG4gICAgICAgICAgdXJsOiBsaW5rXHJcbiAgICAgICAgfSkpXHJcbiAgICAgICAgLnRoZW4oc3MgPT4ge1xyXG4gICAgICAgICAgc3RvcmUuZGlzcGF0Y2goYWN0Lmxpc3RTY3JlZW5zaG90cygpKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgbG9nLmVycm9yKCdzY3JlZW5zaG90IG9iaiBlcnJvciAxJywgZSlcclxuICAgICAgICAgIGxvZy5lcnJvcignc2NyZWVuc2hvdCBvYmogZXJyb3Igc3RhY2snLCBlLnN0YWNrKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmNvbnRyb2wpIHtcclxuICAgICAgICBzd2l0Y2ggKHJlc3VsdC5jb250cm9sLnR5cGUpIHtcclxuICAgICAgICAgIGNhc2UgJ3BhdXNlJzpcclxuICAgICAgICAgICAgLy8gSW1wb3J0YW50OiBzaG91bGQgb25seSBwYXVzZSB0ZXN0IGNhc2UgcGxheWVyLCBub3QgdGVzdCBzdWl0ZSBwbGF5ZXJcclxuICAgICAgICAgICAgLy8gQmVjYXVzZSBvbmNlIHRlc3Qgc3VpdGUgcGxheWVyIGlzIHBhdXNlZCwgaXQgaXMgc3VwcG9zZWQgdG8gcnVuIHRoZSB0ZXN0IGNhc2UgZnJvbSBzdGFydCBhZ2FpblxyXG4gICAgICAgICAgICBnZXRQbGF5ZXIoeyBuYW1lOiAndGVzdENhc2UnIH0pLnBhdXNlKClcclxuICAgICAgICAgICAgY3NJcGMuYXNrKCdQQU5FTF9OT1RJRllfQVVUT19QQVVTRScsIHt9KVxyXG4gICAgICAgICAgICBicmVha1xyXG5cclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29udHJvbCB0eXBlICcke3Jlc3VsdC5jb250cm9sLnR5cGV9JyBub3Qgc3VwcG9ydGVkIHlldGApXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoL14oZmFzdHxtZWRpdW18c2xvdykkL2kudGVzdCh2YXJzLmdldCgnIVJFUExBWVNQRUVEJykpKSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gdmFycy5nZXQoJyFSRVBMQVlTUEVFRCcpLnRvVXBwZXJDYXNlKClcclxuICAgICAgICBwbGF5ZXIuc2V0UG9zdERlbGF5KCh7XHJcbiAgICAgICAgICBGQVNUOiAwLFxyXG4gICAgICAgICAgTUVESVVNOiAzMDAsXHJcbiAgICAgICAgICBTTE9XOiAyMDAwXHJcbiAgICAgICAgfSlbdmFsXSlcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRm9yIHRob3NlIGZsb3cgbG9naWMgdGhhdCBzZXQgbmV4dEluZGV4IGRpcmVjdGx5IGluIEludGVycHJldGVyLnJ1biBtZXRob2RcclxuICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQubmV4dEluZGV4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJlcGFyZXMpLnRoZW4oKCkgPT4gcmVzdWx0Lm5leHRJbmRleClcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRm9yIHRob3NlIGZsb3cgbG9naWMgdGhhdCBoYXMgdG8gZ2V0IHJlc3VsdCBmcm9tIGJnXHJcbiAgICAgIC8vIGFuZCByZXR1cm4gbmV4dEluZGV4IGluIEludGVycHJldGVyLnBvc3RSdW5cclxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByZXBhcmVzKVxyXG4gICAgICAudGhlbigoKSA9PiBpbnRlcnByZXRlci5wb3N0UnVuKGNvbW1hbmQsIHN0YXRlLm5leHRJbmRleCwgcmVzdWx0KSlcclxuICAgICAgLnRoZW4oKGRhdGEgPSB7fSkgPT4gZGF0YS5uZXh0SW5kZXgpXHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAgcHJlRGVsYXk6IDBcclxuICB9KVxyXG5cclxuICBwbGF5ZXIub24oJ0JSRUFLUE9JTlQnLCAoKSA9PiB7XHJcbiAgICBjc0lwYy5hc2soJ1BBTkVMX05PVElGWV9CUkVBS1BPSU5UJywge30pXHJcbiAgfSlcclxuXHJcbiAgcGxheWVyLm9uKCdMT09QX1NUQVJUJywgKHsgbG9vcHNDdXJzb3IgfSkgPT4ge1xyXG4gICAgLy8gTm90ZTogc2V0ICdjc3YgcmVhZCBsaW5lIG51bWJlcicgdG8gbG9vcHMgd2hlbmV2ZXIgYSBuZXcgbG9vcCBzdGFydHNcclxuICAgIHZhcnMuc2V0KHtcclxuICAgICAgJyFDc3ZSZWFkTGluZU51bWJlcic6IGxvb3BzQ3Vyc29yLFxyXG4gICAgICAnIXZpc3VhbFNlYXJjaEFyZWEnOiAgJ3ZpZXdwb3J0J1xyXG4gICAgfSwgdHJ1ZSlcclxuXHJcbiAgICBsb29wVHJhY2tlci5yZXNldCgpXHJcblxyXG4gICAgLy8gTm90ZTogcmVzZXQgbWFjcm8gdGltZW91dCBvbiBlYWNoIGxvb3BcclxuICAgIG1hY3JvVGltZXIucmVzZXQoKVxyXG4gICAgbWFjcm9UaW1lci5yZXN0YXJ0KHZhcnMuZ2V0KCchVElNRU9VVF9NQUNSTycpICogMTAwMClcclxuXHJcbiAgICAvLyBOb3RlOiByZXNldCBvbkVycm9yQ29tbWFuZCBvbiBlYWNoIGxvb3BcclxuICAgIG9uRXJyb3JDb21tYW5kID0gbnVsbFxyXG4gIH0pXHJcblxyXG4gIHBsYXllci5vbignTE9PUF9SRVNUQVJUJywgKHsgY3VycmVudExvb3AsIGxvb3BzQ3Vyc29yIH0pID0+IHtcclxuICAgIGNzSXBjLmFzaygnUEFORUxfU1RPUF9QTEFZSU5HJywge30pXHJcbiAgICBjc0lwYy5hc2soJ1BBTkVMX1NUQVJUX1BMQVlJTkcnLCB7IHNob3VsZE5vdEFjdGl2YXRlVGFiOiB0cnVlIH0pXHJcbiAgICBzdG9yZS5kaXNwYXRjaChhY3QuYWRkTG9nKCdzdGF0dXMnLCBgQ3VycmVudCBsb29wOiAke2N1cnJlbnRMb29wfWApKVxyXG4gIH0pXHJcblxyXG4gIHBsYXllci5vbignU1RBUlQnLCAoeyB0aXRsZSwgbG9vcHNDdXJzb3IgfSkgPT4ge1xyXG4gICAgbG9nKCdTVEFSVCcpXHJcblxyXG4gICAgc3RvcmUuZGlzcGF0Y2goYWN0LnN0YXJ0UGxheWluZygpKVxyXG5cclxuICAgIHN0b3JlLmRpc3BhdGNoKGFjdC5zZXRQbGF5ZXJTdGF0ZSh7XHJcbiAgICAgIHN0YXR1czogQy5QTEFZRVJfU1RBVFVTLlBMQVlJTkcsXHJcbiAgICAgIG5leHRDb21tYW5kSW5kZXg6IG51bGwsXHJcbiAgICAgIGVycm9yQ29tbWFuZEluZGljZXM6IFtdLFxyXG4gICAgICBkb25lQ29tbWFuZEluZGljZXM6IFtdXHJcbiAgICB9KSlcclxuXHJcbiAgICBzdG9yZS5kaXNwYXRjaChhY3QuYWRkTG9nKCdzdGF0dXMnLCBgUGxheWluZyBtYWNybyAke3RpdGxlfWApKVxyXG4gIH0pXHJcblxyXG4gIHBsYXllci5vbignUEFVU0VEJywgKCkgPT4ge1xyXG4gICAgbG9nKCdQQVVTRUQnKVxyXG4gICAgc3RvcmUuZGlzcGF0Y2goYWN0LnNldFBsYXllclN0YXRlKHtcclxuICAgICAgc3RhdHVzOiBDLlBMQVlFUl9TVEFUVVMuUEFVU0VEXHJcbiAgICB9KSlcclxuXHJcbiAgICBzdG9yZS5kaXNwYXRjaChhY3QuYWRkTG9nKCdzdGF0dXMnLCBgTWFjcm8gcGF1c2VkYCkpXHJcbiAgfSlcclxuXHJcbiAgcGxheWVyLm9uKCdSRVNVTUVEJywgKCkgPT4ge1xyXG4gICAgbG9nKCdSRVNVTUVEJylcclxuICAgIHN0b3JlLmRpc3BhdGNoKGFjdC5zZXRQbGF5ZXJTdGF0ZSh7XHJcbiAgICAgIHN0YXR1czogQy5QTEFZRVJfU1RBVFVTLlBMQVlJTkdcclxuICAgIH0pKVxyXG5cclxuICAgIHN0b3JlLmRpc3BhdGNoKGFjdC5hZGRMb2coJ3N0YXR1cycsIGBNYWNybyByZXN1bWVkYCkpXHJcbiAgfSlcclxuXHJcbiAgcGxheWVyLm9uKCdFTkQnLCAob2JqKSA9PiB7XHJcbiAgICBsb2coJ0VORCcsIG9iailcclxuXHJcbiAgICBtYWNyb1RpbWVyLmNhbmNlbCgpXHJcblxyXG4gICAgY3NJcGMuYXNrKCdQQU5FTF9TVE9QX1BMQVlJTkcnLCB7fSlcclxuXHJcbiAgICBzdG9yZS5kaXNwYXRjaChhY3Quc3RvcFBsYXlpbmcoKSlcclxuXHJcbiAgICBzdG9yZS5kaXNwYXRjaChhY3Quc2V0UGxheWVyU3RhdGUoe1xyXG4gICAgICBzdGF0dXM6IEMuUExBWUVSX1NUQVRVUy5TVE9QUEVELFxyXG4gICAgICBzdG9wUmVhc29uOiBvYmoucmVhc29uLFxyXG4gICAgICBuZXh0Q29tbWFuZEluZGV4OiBudWxsLFxyXG4gICAgICB0aW1lb3V0U3RhdHVzOiBudWxsXHJcbiAgICB9KSlcclxuXHJcbiAgICBjb25zdCB0Y0lkID0gb2JqLmV4dHJhICYmIG9iai5leHRyYS5pZFxyXG5cclxuICAgIHN3aXRjaCAob2JqLnJlYXNvbikge1xyXG4gICAgICBjYXNlIHBsYXllci5DLkVORF9SRUFTT04uQ09NUExFVEU6XHJcbiAgICAgICAgaWYgKHRjSWQpIHN0b3JlLmRpc3BhdGNoKGFjdC51cGRhdGVUZXN0Q2FzZVBsYXlTdGF0dXModGNJZCwgQy5URVNUX0NBU0VfU1RBVFVTLlNVQ0NFU1MpKVxyXG4gICAgICAgIG1lc3NhZ2Uuc3VjY2VzcygnTWFjcm8gY29tcGxldGVkIHJ1bm5pbmcnLCAxLjUpXHJcbiAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgIGNhc2UgcGxheWVyLkMuRU5EX1JFQVNPTi5FUlJPUjpcclxuICAgICAgICBpZiAodGNJZCkgc3RvcmUuZGlzcGF0Y2goYWN0LnVwZGF0ZVRlc3RDYXNlUGxheVN0YXR1cyh0Y0lkLCBDLlRFU1RfQ0FTRV9TVEFUVVMuRVJST1IpKVxyXG4gICAgICAgIG1lc3NhZ2UuZXJyb3IoJ01hY3JvIGVuY291bnRlcmVkIHNvbWUgZXJyb3InLCAxLjUpXHJcbiAgICAgICAgYnJlYWtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsb2dNc2cgPSB7XHJcbiAgICAgIFtwbGF5ZXIuQy5FTkRfUkVBU09OLkNPTVBMRVRFXTogJ01hY3JvIGNvbXBsZXRlZCcsXHJcbiAgICAgIFtwbGF5ZXIuQy5FTkRfUkVBU09OLkVSUk9SXTogJ01hY3JvIGZhaWxlZCcsXHJcbiAgICAgIFtwbGF5ZXIuQy5FTkRfUkVBU09OLk1BTlVBTF06ICdNYWNybyB3YXMgc3RvcHBlZCBtYW51YWxseSdcclxuICAgIH1cclxuXHJcbiAgICBzdG9yZS5kaXNwYXRjaChhY3QuYWRkTG9nKCdpbmZvJywgbG9nTXNnW29iai5yZWFzb25dICsgYCAoUnVudGltZSAke21haW5UcmFja2VyLmVsYXBzZWRJblNlY29uZHMoKX0pYCkpXHJcblxyXG4gICAgLy8gTm90ZTogc2hvdyBpbiBiYWRhZ2UgdGhlIHBsYXkgcmVzdWx0XHJcbiAgICBpZiAob2JqLnJlYXNvbiA9PT0gcGxheWVyLkMuRU5EX1JFQVNPTi5DT01QTEVURSB8fFxyXG4gICAgICAgIG9iai5yZWFzb24gPT09IHBsYXllci5DLkVORF9SRUFTT04uRVJST1IpIHtcclxuICAgICAgY3NJcGMuYXNrKCdQQU5FTF9VUERBVEVfQkFER0UnLCB7XHJcbiAgICAgICAgdHlwZTogJ3BsYXknLFxyXG4gICAgICAgIGJsaW5rOiA1MDAwLFxyXG4gICAgICAgIHRleHQ6IG9iai5yZWFzb24gPT09IHBsYXllci5DLkVORF9SRUFTT04uQ09NUExFVEUgPyAnZG9uZScgOiAnZXJyJyxcclxuICAgICAgICAuLi4ob2JqLnJlYXNvbiA9PT0gcGxheWVyLkMuRU5EX1JFQVNPTi5DT01QTEVURSA/IHt9IDogeyBjb2xvcjogJ29yYW5nZScgfSlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBwbGF5ZXIub24oJ1RPX1BMQVknLCAoeyBpbmRleCwgY3VycmVudExvb3AsIGxvb3BzLCByZXNvdXJjZSB9KSA9PiB7XHJcbiAgICBsb2coJ1RPX1BMQVknLCBpbmRleCwgcmVzb3VyY2UpXHJcbiAgICBzdG9yZS5kaXNwYXRjaChhY3Quc2V0UGxheWVyU3RhdGUoe1xyXG4gICAgICB0aW1lb3V0U3RhdHVzOiBudWxsLFxyXG4gICAgICBuZXh0Q29tbWFuZEluZGV4OiBpbmRleCxcclxuICAgICAgY3VycmVudExvb3AsXHJcbiAgICAgIGxvb3BzXHJcbiAgICB9KSlcclxuXHJcbiAgICBjb25zdCB0cmlwbGUgID0gW3Jlc291cmNlLmNtZCwgcmVzb3VyY2UudGFyZ2V0LCByZXNvdXJjZS52YWx1ZV1cclxuICAgIGNvbnN0IHN0ciAgICAgPSBbJycsIC4uLnRyaXBsZSwgJyddLmpvaW4oJyB8ICcpXHJcbiAgICBzdG9yZS5kaXNwYXRjaChhY3QuYWRkTG9nKCdyZWZsZWN0JywgYEV4ZWN1dGluZzogJHtzdHJ9YCkpXHJcblxyXG4gICAgLy8gTm90ZTogc2hvdyBpbiBiYWRhZ2UgdGhlIGN1cnJlbnQgY29tbWFuZCBpbmRleCAoc3RhcnQgZnJvbSAxKVxyXG4gICAgY3NJcGMuYXNrKCdQQU5FTF9VUERBVEVfQkFER0UnLCB7XHJcbiAgICAgIHR5cGU6ICdwbGF5JyxcclxuICAgICAgdGV4dDogJycgKyAoaW5kZXggKyAxKVxyXG4gICAgfSlcclxuICB9KVxyXG5cclxuICBwbGF5ZXIub24oJ1BMQVlFRF9MSVNUJywgKHsgaW5kaWNlcyB9KSA9PiB7XHJcbiAgICBsb2coJ1BMQVlFRF9MSVNUJywgaW5kaWNlcylcclxuICAgIHN0b3JlLmRpc3BhdGNoKGFjdC5zZXRQbGF5ZXJTdGF0ZSh7XHJcbiAgICAgIGRvbmVDb21tYW5kSW5kaWNlczogaW5kaWNlc1xyXG4gICAgfSkpXHJcbiAgfSlcclxuXHJcbiAgcGxheWVyLm9uKCdFUlJPUicsICh7IGVycm9ySW5kZXgsIG1zZywgcmVzdGFydCB9KSA9PiB7XHJcbiAgICBsb2cuZXJyb3IoYGNvbW1hbmQgaW5kZXg6ICR7ZXJyb3JJbmRleH0sIEVycm9yOiAke21zZ31gKVxyXG4gICAgc3RvcmUuZGlzcGF0Y2goYWN0LmFkZFBsYXllckVycm9yQ29tbWFuZEluZGV4KGVycm9ySW5kZXgpKVxyXG4gICAgc3RvcmUuZGlzcGF0Y2goYWN0LmFkZExvZygnZXJyb3InLCBtc2cpKVxyXG5cclxuICAgIC8vIE5vdGU6IHJlc3RhcnQgdGhpcyBwbGF5ZXIgaWYgcmVzdGFydCBpcyBzZXQgdG8gdHJ1ZSBpbiBlcnJvciwgYW5kIGl0J3Mgbm90IGluIHRlc3Qgc3VpdGUgbW9kZVxyXG4gICAgLy8gRGVsYXkgdGhlIGV4ZWN1dGlvbiBzbyB0aGF0ICdFTkQnIGV2ZW50IGlzIGVtaXR0ZWQsIGFuZCBwbGF5ZXIgaXMgaW4gc3RvcHBlZCBzdGF0ZVxyXG4gICAgaWYgKHJlc3RhcnQgJiYgc3RvcmUuZ2V0U3RhdGUoKS5wbGF5ZXIubW9kZSA9PT0gQy5QTEFZRVJfTU9ERS5URVNUX0NBU0UpIHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiBwbGF5ZXIucmVwbGF5TGFzdENvbmZpZygpLCA1MClcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBwbGF5ZXIub24oJ0RFTEFZJywgKHsgdG90YWwsIHBhc3QgfSkgPT4ge1xyXG4gICAgc3RvcmUuZGlzcGF0Y2goYWN0LnNldFBsYXllclN0YXRlKHtcclxuICAgICAgdGltZW91dFN0YXR1czoge1xyXG4gICAgICAgIHR5cGU6ICdkZWxheScsXHJcbiAgICAgICAgdG90YWwsXHJcbiAgICAgICAgcGFzdFxyXG4gICAgICB9XHJcbiAgICB9KSlcclxuICB9KVxyXG5cclxuICByZXR1cm4gcGxheWVyXHJcbn1cclxuXHJcbmNvbnN0IGluaXRUZXN0U3VpdFBsYXllciA9ICh7c3RvcmUsIHRjUGxheWVyfSkgPT4ge1xyXG4gIGNvbnN0IHRzVHJhY2tlciA9IG5ldyBUaW1lVHJhY2tlcigpXHJcbiAgY29uc3QgdGNUcmFja2VyID0gbmV3IFRpbWVUcmFja2VyKClcclxuICBsZXQgc3RhdGUgPSB7XHJcbiAgICBpc1BsYXlpbmc6IGZhbHNlLFxyXG4gICAgdHNJZDogbnVsbCxcclxuICAgIGxhc3RFcnJNc2c6ICcnLFxyXG4gICAgdGVzdENhc2VQcm9taXNlSGFuZGxlcnM6IG51bGwsXHJcbiAgICByZXBvcnRzOiBbXSxcclxuICAgIHN0b3BSZWFzb246IG51bGxcclxuXHJcbiAgfVxyXG4gIGNvbnN0IHNldFN0YXRlID0gKHN0KSA9PiB7XHJcbiAgICBzdGF0ZSA9IHtcclxuICAgICAgLi4uc3RhdGUsXHJcbiAgICAgIC4uLnN0XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbnN0IGFkZFJlcG9ydCA9IChyZXBvcnQpID0+IHtcclxuICAgIHNldFN0YXRlKHtcclxuICAgICAgcmVwb3J0czogc3RhdGUucmVwb3J0cy5jb25jYXQocmVwb3J0KVxyXG4gICAgfSlcclxuICB9XHJcbiAgY29uc3QgdHNQbGF5ZXIgID0gZ2V0UGxheWVyKHtcclxuICAgIG5hbWU6ICd0ZXN0U3VpdGUnLFxyXG4gICAgcHJlcGFyZTogKCkgPT4ge1xyXG4gICAgICBzZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNQbGF5aW5nOiB0cnVlLFxyXG4gICAgICAgIHJlcG9ydHM6IFtdXHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgcnVuOiAodGVzdENhc2UsIHBsYXllclN0YXRlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRjSWQgICAgPSB0ZXN0Q2FzZS5pZFxyXG4gICAgICBjb25zdCB0Y0xvb3BzID0gdGVzdENhc2UubG9vcHMgPiAxID8gcGFyc2VJbnQodGVzdENhc2UubG9vcHMsIDEwKSA6IDFcclxuICAgICAgY29uc3Qgc3RhdGUgICA9IHN0b3JlLmdldFN0YXRlKClcclxuICAgICAgY29uc3QgdGNzICAgICA9IHN0YXRlLmVkaXRvci50ZXN0Q2FzZXNcclxuICAgICAgY29uc3QgdGMgICAgICA9IHRjcy5maW5kKHRjID0+IHRjLmlkID09PSB0Y0lkKVxyXG4gICAgICBjb25zdCBvcGVuVGMgID0gdGMgJiYgdGMuZGF0YS5jb21tYW5kcy5maW5kKGMgPT4gYy5jbWQudG9Mb3dlckNhc2UoKSA9PT0gJ29wZW4nKVxyXG5cclxuICAgICAgaWYgKCF0Yykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbWFjcm8gZG9lcyBub3QgZXhpc3QnKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyB1cGRhdGUgZWRpdGluZyAmJiBzdGFydCB0byBwbGF5IHRjUGxheWVyXHJcbiAgICAgIHN0b3JlLmRpc3BhdGNoKGFjdC5lZGl0VGVzdENhc2UodGMuaWQpKVxyXG4gICAgICBzdG9yZS5kaXNwYXRjaChhY3QucGxheWVyUGxheSh7XHJcbiAgICAgICAgdGl0bGU6IHRjLm5hbWUsXHJcbiAgICAgICAgZXh0cmE6IHtcclxuICAgICAgICAgIGlkOiB0Yy5pZCxcclxuICAgICAgICAgIG5hbWU6IHRjLm5hbWUsXHJcbiAgICAgICAgICBzaG91bGROb3RBY3RpdmF0ZVRhYjogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW9kZTogdGNMb29wcyA9PT0gMSA/IFBsYXllci5DLk1PREUuU1RSQUlHSFQgOiBQbGF5ZXIuQy5NT0RFLkxPT1AsXHJcbiAgICAgICAgbG9vcHNTdGFydDogMSxcclxuICAgICAgICBsb29wc0VuZDogdGNMb29wcyxcclxuICAgICAgICBzdGFydEluZGV4OiAwLFxyXG4gICAgICAgIHN0YXJ0VXJsOiBvcGVuVGMgPyBvcGVuVGMudGFyZ2V0IDogbnVsbCxcclxuICAgICAgICByZXNvdXJjZXM6IHRjLmRhdGEuY29tbWFuZHMsXHJcbiAgICAgICAgcG9zdERlbGF5OiBzdGF0ZS5jb25maWcucGxheUNvbW1hbmRJbnRlcnZhbCAqIDEwMDBcclxuICAgICAgfSkpXHJcblxyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHNldFN0YXRlKHtcclxuICAgICAgICAgIHRlc3RDYXNlUHJvbWlzZUhhbmRsZXJzOiB7IHJlc29sdmUsIHJlamVjdCB9XHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBoYW5kbGVSZXN1bHQ6IChyZXN1bHQsIHRlc3RDYXNlLCBzdGF0ZSkgPT4ge1xyXG4gICAgICAvLyByZXR1cm4gdW5kZWZpbmVkLCBzbyB0aGF0IHBsYXllciB3aWxsIHBsYXkgdGhlIG5leHQgb25lXHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKVxyXG4gICAgfVxyXG4gIH0sIHsgcHJlRGVsYXk6IDAgfSlcclxuXHJcbiAgdHNQbGF5ZXIub24oJ1NUQVJUJywgKHsgdGl0bGUsIGV4dHJhIH0pID0+IHtcclxuICAgIGxvZygnU1RBUlQgU1VJVEUnKVxyXG4gICAgdHNUcmFja2VyLnJlc2V0KClcclxuXHJcbiAgICBzZXRTdGF0ZSh7XHJcbiAgICAgIHRzSWQ6IGV4dHJhLmlkLFxyXG4gICAgICBpc1BsYXlpbmc6IHRydWUsXHJcbiAgICAgIHN0b3BSZWFzb246IG51bGxcclxuICAgIH0pXHJcblxyXG4gICAgc3RvcmUuZGlzcGF0Y2goYWN0LmFkZExvZygnc3RhdHVzJywgYFBsYXlpbmcgdGVzdCBzdWl0ZSAke3RpdGxlfWApKVxyXG4gICAgc3RvcmUuZGlzcGF0Y2goYWN0LnNldFBsYXllck1vZGUoQy5QTEFZRVJfTU9ERS5URVNUX1NVSVRFKSlcclxuICAgIHN0b3JlLmRpc3BhdGNoKGFjdC51cGRhdGVUZXN0U3VpdGUoZXh0cmEuaWQsICh0cykgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnRzLFxyXG4gICAgICAgIHBsYXlTdGF0dXM6IHtcclxuICAgICAgICAgIGlzUGxheWluZzogdHJ1ZSxcclxuICAgICAgICAgIGN1cnJlbnRJbmRleDogLTEsXHJcbiAgICAgICAgICBlcnJvckluZGljZXM6IFtdLFxyXG4gICAgICAgICAgZG9uZUluZGljZXM6IFtdXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KSlcclxuICB9KVxyXG5cclxuICB0c1BsYXllci5vbignUEFVU0VEJywgKHsgZXh0cmEgfSkgPT4ge1xyXG4gICAgbG9nKCdQQVVTRUQgU1VJVEUnKVxyXG4gICAgc3RvcmUuZGlzcGF0Y2goYWN0LmFkZExvZygnc3RhdHVzJywgYFRlc3Qgc3VpdGUgcGF1c2VkYCkpXHJcbiAgICB0Y1BsYXllci5wYXVzZSgpXHJcbiAgfSlcclxuXHJcbiAgdHNQbGF5ZXIub24oJ1JFU1VNRUQnLCAoeyBleHRyYSB9KSA9PiB7XHJcbiAgICBsb2coJ1JFU1VNRUQgU1VJSVRFJylcclxuICAgIHN0b3JlLmRpc3BhdGNoKGFjdC5hZGRMb2coJ3N0YXR1cycsIGBUZXN0IHN1aXRlIHJlc3VtZWRgKSlcclxuICAgIHRjUGxheWVyLnJlc3VtZSgpXHJcbiAgfSlcclxuXHJcbiAgdHNQbGF5ZXIub24oJ1RPX1BMQVknLCAoeyBpbmRleCwgZXh0cmEgfSkgPT4ge1xyXG4gICAgdGNUcmFja2VyLnJlc2V0KClcclxuXHJcbiAgICBzZXRTdGF0ZSh7XHJcbiAgICAgIGxhc3RFcnJNc2c6ICcnLFxyXG4gICAgICB0Y0luZGV4OiBpbmRleFxyXG4gICAgfSlcclxuXHJcbiAgICBzdG9yZS5kaXNwYXRjaChhY3QudXBkYXRlVGVzdFN1aXRlKGV4dHJhLmlkLCAodHMpID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi50cyxcclxuICAgICAgICBwbGF5U3RhdHVzOiB7XHJcbiAgICAgICAgICAuLi50cy5wbGF5U3RhdHVzLFxyXG4gICAgICAgICAgY3VycmVudEluZGV4OiBpbmRleFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSkpXHJcbiAgfSlcclxuXHJcbiAgdHNQbGF5ZXIub24oJ1BMQVlFRF9MSVNUJywgKHsgaW5kaWNlcywgZXh0cmEgfSkgPT4ge1xyXG4gICAgc3RvcmUuZGlzcGF0Y2goYWN0LnVwZGF0ZVRlc3RTdWl0ZShleHRyYS5pZCwgKHRzKSA9PiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4udHMsXHJcbiAgICAgICAgcGxheVN0YXR1czoge1xyXG4gICAgICAgICAgLi4udHMucGxheVN0YXR1cyxcclxuICAgICAgICAgIGRvbmVJbmRpY2VzOiBpbmRpY2VzXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KSlcclxuICB9KVxyXG5cclxuICB0c1BsYXllci5vbignRU5EJywgKHsgcmVhc29uLCBleHRyYSwgb3B0cyB9KSA9PiB7XHJcbiAgICBpZiAoIXN0YXRlLmlzUGxheWluZykgIHJldHVyblxyXG5cclxuICAgIHNldFN0YXRlKHtcclxuICAgICAgaXNQbGF5aW5nOiBmYWxzZVxyXG4gICAgfSlcclxuXHJcbiAgICAvLyBOb3RlOiByZXNldCBwbGF5ZXIgbW9kZSB0byAndGVzdCBjYXNlJywgaXQgd2lsbCBvbmx5IGJlICd0ZXN0IHN1aXRlJ1xyXG4gICAgLy8gZHVyaW5nIHJlcGxheXMgb2YgdGVzdCBzdWl0ZXNcclxuICAgIHN0b3JlLmRpc3BhdGNoKGFjdC5zZXRQbGF5ZXJNb2RlKEMuUExBWUVSX01PREUuVEVTVF9DQVNFKSlcclxuICAgIHN0b3JlLmRpc3BhdGNoKGFjdC51cGRhdGVUZXN0U3VpdGUoZXh0cmEuaWQsICh0cykgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnRzLFxyXG4gICAgICAgIHBsYXlTdGF0dXM6IHtcclxuICAgICAgICAgIC4uLnRzLnBsYXlTdGF0dXMsXHJcbiAgICAgICAgICBpc1BsYXlpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgY3VycmVudEluZGV4OiAtMVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSkpXHJcblxyXG4gICAgaWYgKHJlYXNvbiA9PT0gUGxheWVyLkMuRU5EX1JFQVNPTi5NQU5VQUwgJiYgKCFvcHRzIHx8ICFvcHRzLnRjUGxheWVyU3RvcHBlZCkpIHtcclxuICAgICAgdGNQbGF5ZXIuc3RvcCgpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm90ZTogZ2l2ZSBpdCBzb21lIHRpbWUsIGluIGNhc2Ugd2UncmUgc3RvcHBpbmcgdGMgcGxheWVyIGFib3ZlXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY29uc3QgdG90YWxDb3VudCAgICA9IHN0YXRlLnJlcG9ydHMubGVuZ3RoXHJcbiAgICAgIGNvbnN0IGZhaWx1cmVDb3VudCAgPSBzdGF0ZS5yZXBvcnRzLmZpbHRlcihyID0+IHIuc3RvcFJlYXNvbiA9PT0gUGxheWVyLkMuRU5EX1JFQVNPTi5FUlJPUikubGVuZ3RoXHJcbiAgICAgIGNvbnN0IHN1Y2Nlc3NDb3VudCAgPSB0b3RhbENvdW50IC0gZmFpbHVyZUNvdW50XHJcblxyXG4gICAgICBjb25zdCBzdGF0dXNNYXAgPSB7XHJcbiAgICAgICAgW1BsYXllci5DLkVORF9SRUFTT04uTUFOVUFMXTogJ01hbnVhbGx5IHN0b3BwZWQnLFxyXG4gICAgICAgIFtQbGF5ZXIuQy5FTkRfUkVBU09OLkNPTVBMRVRFXTogJ09LJyxcclxuICAgICAgICBbUGxheWVyLkMuRU5EX1JFQVNPTi5FUlJPUl06ICdFcnJvcidcclxuICAgICAgfVxyXG4gICAgICBjb25zdCB0c1N0YXR1cyA9IHN0YXR1c01hcFtzdGF0ZS5zdG9wUmVhc29uIHx8IHJlYXNvbl1cclxuICAgICAgY29uc3QgbGluZXMgPSBbXHJcbiAgICAgICAgYFRlc3QgU3VpdGUgbmFtZTogJHtleHRyYS5uYW1lfWAsXHJcbiAgICAgICAgYFN0YXJ0IFRpbWU6ICR7dHNUcmFja2VyLnN0YXJ0VGltZS50b1N0cmluZygpfWAsXHJcbiAgICAgICAgYE92ZXJhbGwgc3RhdHVzOiAke3RzU3RhdHVzfSwgUnVudGltZTogJHt0c1RyYWNrZXIuZWxhcHNlZEluU2Vjb25kcygpfWAsXHJcbiAgICAgICAgYE1hY3JvIHJ1bjogJHt0b3RhbENvdW50fWAsXHJcbiAgICAgICAgYFN1Y2Nlc3M6ICR7c3VjY2Vzc0NvdW50fWAsXHJcbiAgICAgICAgYEZhaWx1cmU6ICR7ZmFpbHVyZUNvdW50fWAsXHJcbiAgICAgICAgYE1hY3JvIGV4ZWN1dGVkOmBcclxuICAgICAgXVxyXG5cclxuICAgICAgc3RhdGUucmVwb3J0cy5mb3JFYWNoKHIgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRjU3RhdHVzID0gc3RhdHVzTWFwW3Iuc3RvcFJlYXNvbl0gKyAoci5zdG9wUmVhc29uID09PSBQbGF5ZXIuQy5FTkRfUkVBU09OLkVSUk9SID8gYDogJHtyLmVyck1zZ31gIDogJycpXHJcbiAgICAgICAgbGluZXMucHVzaChgJHtyLm5hbWV9ICgke3RjU3RhdHVzfSwgUnVudGltZTogJHtyLnVzZWRUaW1lfSlgKVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgc3RvcmUuZGlzcGF0Y2goYWN0LmFkZExvZygnaW5mbycsIGxpbmVzLmpvaW4oJ1xcbicpKSlcclxuICAgIH0sIDIwMClcclxuICB9KVxyXG5cclxuICAvLyBUZXN0IENhc2UgUGxheWVyOiB3ZSBzaG91bGQgaGFuZGxlIGNhc2VzIHdoZW4gdGVzdCBjYXNlIHBsYXllciBzdG9wcyBhdXRvbWF0aWNhbGx5XHJcbiAgdGNQbGF5ZXIub24oJ0VORCcsICh7IHJlYXNvbiwgZXh0cmEgfSkgPT4ge1xyXG4gICAgaWYgKHN0b3JlLmdldFN0YXRlKCkucGxheWVyLm1vZGUgIT09IEMuUExBWUVSX01PREUuVEVTVF9TVUlURSkgIHJldHVyblxyXG5cclxuICAgIGFkZFJlcG9ydCh7XHJcbiAgICAgIGlkOiBleHRyYS5pZCxcclxuICAgICAgbmFtZTogZXh0cmEubmFtZSxcclxuICAgICAgZXJyTXNnOiBzdGF0ZS5sYXN0RXJyTXNnLFxyXG4gICAgICBzdG9wUmVhc29uOiByZWFzb24sXHJcbiAgICAgIHVzZWRUaW1lOiB0Y1RyYWNrZXIuZWxhcHNlZEluU2Vjb25kcygpXHJcbiAgICB9KVxyXG5cclxuICAgIC8vIEF2b2lkIGEgJ3N0b3AnIGxvb3AgYmV0d2VlbiB0c1BsYXllciBhbmQgdGNQbGF5ZXJcclxuICAgIHN3aXRjaCAocmVhc29uKSB7XHJcbiAgICAgIGNhc2UgUGxheWVyLkMuRU5EX1JFQVNPTi5NQU5VQUw6XHJcbiAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgIGNhc2UgUGxheWVyLkMuRU5EX1JFQVNPTi5DT01QTEVURTpcclxuICAgICAgICBzdGF0ZS50ZXN0Q2FzZVByb21pc2VIYW5kbGVycy5yZXNvbHZlKHRydWUpXHJcbiAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgIGNhc2UgUGxheWVyLkMuRU5EX1JFQVNPTi5FUlJPUjpcclxuICAgICAgICBzdG9yZS5kaXNwYXRjaChhY3QudXBkYXRlVGVzdFN1aXRlKHN0YXRlLnRzSWQsICh0cykgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4udHMsXHJcbiAgICAgICAgICAgIHBsYXlTdGF0dXM6IHtcclxuICAgICAgICAgICAgICAuLi50cy5wbGF5U3RhdHVzLFxyXG4gICAgICAgICAgICAgIGVycm9ySW5kaWNlczogdHMucGxheVN0YXR1cy5lcnJvckluZGljZXMuY29uY2F0KFt0c1BsYXllci5zdGF0ZS5uZXh0SW5kZXhdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSkpXHJcblxyXG4gICAgICAgIHNldFN0YXRlKHtcclxuICAgICAgICAgIHN0b3BSZWFzb246IFBsYXllci5DLkVORF9SRUFTT04uRVJST1JcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAvLyBVcGRhdGVkIG9uIDIwMTctMTItMTUsIEV2ZW4gaWYgdGhlcmUgaXMgZXJyb3IsIHRlc3Qgc3VpdGUgc2hvdWxkIG1vdmUgb24gdG8gbmV4dCBtYWNyb1xyXG4gICAgICAgIC8vIE5vdGU6IHRlbGwgdHNQbGF5ZXIgbm90IHRvIHRyaWdnZXIgdGNQbGF5ZXIgc3RvcCBhZ2FpblxyXG4gICAgICAgIC8vIHRzUGxheWVyLnN0b3AoeyB0Y1BsYXllclN0b3BwZWQ6IHRydWUgfSlcclxuICAgICAgICBzdGF0ZS50ZXN0Q2FzZVByb21pc2VIYW5kbGVycy5yZXNvbHZlKHRydWUpXHJcbiAgICAgICAgYnJlYWtcclxuICAgIH1cclxuICB9KVxyXG5cclxuICB0Y1BsYXllci5vbignRVJST1InLCAoeyBtc2csIHJlc3RhcnQgfSkgPT4ge1xyXG4gICAgc2V0U3RhdGUoe1xyXG4gICAgICBsYXN0RXJyTXNnOiBtc2dcclxuICAgIH0pXHJcblxyXG4gICAgLy8gTm90ZTogcmVzdGFydCB0aGlzIHBsYXllciBpZiByZXN0YXJ0IGlzIHNldCB0byB0cnVlIGluIGVycm9yLCBhbmQgaXQncyBub3QgaW4gdGVzdCBzdWl0ZSBtb2RlXHJcbiAgICAvLyBEZWxheSB0aGUgZXhlY3V0aW9uIHNvIHRoYXQgJ0VORCcgZXZlbnQgaXMgZW1pdHRlZCwgYW5kIHBsYXllciBpcyBpbiBzdG9wcGVkIHN0YXRlXHJcbiAgICAvL1xyXG4gICAgLy8gTm90ZSB0aGF0IGEgY291cGxlIG1vbWVudHMgYWZ0ZXIgdGNQbGF5ZXIgZW5jb3VudGVycyBhbiBlcnJvciBhbmQgZW50ZXIgc3RvcHBlZCBzdGF0ZSwgaXQgdHJpZXMgdG8gc2V0IHBsYXllciBtb2RlXHJcbiAgICAvLyBiYWNrIHRvIHRlc3QgY2FzZSBtb2RlICAoaW4gdHNQbGF5ZXIgJ0VORCcgZXZlbnQpXHJcbiAgICBpZiAocmVzdGFydCAmJiBzdG9yZS5nZXRTdGF0ZSgpLnBsYXllci5tb2RlID09PSBDLlBMQVlFUl9NT0RFLlRFU1RfU1VJVEUpIHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB0c1BsYXllci5yZXBsYXlMYXN0Q29uZmlnKCksIDUwKVxyXG4gICAgfVxyXG4gIH0pXHJcblxyXG4gIHJldHVybiB0c1BsYXllclxyXG59XHJcbiIsImltcG9ydCBEZXhpZSBmcm9tICdkZXhpZSdcclxuXHJcbmNvbnN0IGRiID0gbmV3IERleGllKCdzZWxlbml1bS1pZGUnKVxyXG5cclxuZGIudmVyc2lvbigxKS5zdG9yZXMoe1xyXG4gIHRlc3RDYXNlczogJ2lkLG5hbWUsdXBkYXRlVGltZSdcclxufSlcclxuXHJcbmRiLnZlcnNpb24oMikuc3RvcmVzKHtcclxuICB0ZXN0Q2FzZXM6ICdpZCxuYW1lLHVwZGF0ZVRpbWUnLFxyXG4gIHRlc3RTdWl0ZXM6ICdpZCxuYW1lLHVwZGF0ZVRpbWUnXHJcbn0pXHJcblxyXG5kYi5vcGVuKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkYlxyXG4iLCJpbXBvcnQgeyB1aWQsIHBpY2ssIGNvbXBvc2UsIG9uLCBtYXAgfSBmcm9tICcuLi9jb21tb24vdXRpbHMnXHJcbmltcG9ydCBkYiBmcm9tICcuL2RiJ1xyXG5cclxuY29uc3QgbW9kZWwgPSB7XHJcbiAgdGFibGU6IGRiLnRlc3RDYXNlcyxcclxuICBsaXN0OiAoKSA9PiB7XHJcbiAgICByZXR1cm4gZGIudGVzdENhc2VzLnRvQXJyYXkoKVxyXG4gIH0sXHJcbiAgaW5zZXJ0OiAoZGF0YSkgPT4ge1xyXG4gICAgaWYgKCFkYXRhLm5hbWUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCBUZXN0Q2FzZSAtIGluc2VydDogbWlzc2luZyBuYW1lJylcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWRhdGEuZGF0YSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIFRlc3RDYXNlIC0gaW5zZXJ0OiBtaXNzaW5nIGRhdGEnKVxyXG4gICAgfVxyXG5cclxuICAgIGRhdGEudXBkYXRlVGltZSA9IG5ldyBEYXRlKCkgKiAxXHJcbiAgICBkYXRhLmlkICAgICAgICAgPSB1aWQoKVxyXG4gICAgcmV0dXJuIGRiLnRlc3RDYXNlcy5hZGQobm9ybWFsaXplVGVzdENhc2UoZGF0YSkpXHJcbiAgfSxcclxuICBidWxrSW5zZXJ0OiAodGNzKSA9PiB7XHJcbiAgICBjb25zdCBsaXN0ID0gdGNzLm1hcChkYXRhID0+IHtcclxuICAgICAgaWYgKCFkYXRhLm5hbWUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIFRlc3RDYXNlIC0gaW5zZXJ0OiBtaXNzaW5nIG5hbWUnKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWRhdGEuZGF0YSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kZWwgVGVzdENhc2UgLSBpbnNlcnQ6IG1pc3NpbmcgZGF0YScpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRhdGEudXBkYXRlVGltZSA9IG5ldyBEYXRlKCkgKiAxXHJcbiAgICAgIGRhdGEuaWQgICAgICAgICA9IHVpZCgpXHJcblxyXG4gICAgICByZXR1cm4gbm9ybWFsaXplVGVzdENhc2UoZGF0YSlcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIGRiLnRlc3RDYXNlcy5idWxrQWRkKGxpc3QpXHJcbiAgfSxcclxuICB1cGRhdGU6IChpZCwgZGF0YSkgPT4ge1xyXG4gICAgcmV0dXJuIGRiLnRlc3RDYXNlcy51cGRhdGUoaWQsIG5vcm1hbGl6ZVRlc3RDYXNlKGRhdGEpKVxyXG4gIH0sXHJcbiAgcmVtb3ZlOiAoaWQpID0+IHtcclxuICAgIHJldHVybiBkYi50ZXN0Q2FzZXMuZGVsZXRlKGlkKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbW9kZWxcclxuXHJcbmV4cG9ydCBjb25zdCBub3JtYWxpemVDb21tYW5kID0gKGNvbW1hbmQpID0+IHtcclxuICByZXR1cm4gcGljayhbJ2NtZCcsICd0YXJnZXQnLCAndmFsdWUnXSwgY29tbWFuZClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVRlc3RDYXNlID0gKHRlc3RDYXNlKSA9PiB7XHJcbiAgcmV0dXJuIGNvbXBvc2UoXHJcbiAgICBvbignZGF0YScpLFxyXG4gICAgb24oJ2NvbW1hbmRzJyksXHJcbiAgICBtYXBcclxuICApKG5vcm1hbGl6ZUNvbW1hbmQpKHRlc3RDYXNlKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY29tbWFuZFdpdGhvdXRCYXNlVXJsID0gKGJhc2VVcmwpID0+IChjb21tYW5kKSA9PiB7XHJcbiAgaWYgKGNvbW1hbmQuY21kICE9PSAnb3BlbicpIHJldHVybiBjb21tYW5kXHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5jb21tYW5kLFxyXG4gICAgdGFyZ2V0OiAoYmFzZVVybCArICcvJyArIGNvbW1hbmQudGFyZ2V0KS5yZXBsYWNlKC9cXC8rL2csICcvJylcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBlbGltaW5hdGVCYXNlVXJsID0gKHRlc3RDYXNlKSA9PiB7XHJcbiAgaWYgKCF0ZXN0Q2FzZS5iYXNlVXJsKSAgcmV0dXJuIHRlc3RDYXNlXHJcbiAgcmV0dXJuIGNvbXBvc2UoXHJcbiAgICBvbignZGF0YScpLFxyXG4gICAgb24oJ2NvbW1hbmRzJyksXHJcbiAgICBtYXBcclxuICApKGNvbW1hbmRXaXRob3V0QmFzZVVybCh0ZXN0Q2FzZS5iYXNlVXJsKSkodGVzdENhc2UpXHJcbn1cclxuIiwiaW1wb3J0IHsgdWlkLCBwaWNrLCBjb21wb3NlLCBvbiwgbWFwIH0gZnJvbSAnLi4vY29tbW9uL3V0aWxzJ1xyXG5pbXBvcnQgZGIgZnJvbSAnLi9kYidcclxuXHJcbmNvbnN0IG1vZGVsID0ge1xyXG4gIHRhYmxlOiBkYi50ZXN0U3VpdGVzLFxyXG4gIGxpc3Q6ICgpID0+IHtcclxuICAgIHJldHVybiBkYi50ZXN0U3VpdGVzLnRvQXJyYXkoKVxyXG4gIH0sXHJcbiAgaW5zZXJ0OiAoZGF0YSkgPT4ge1xyXG4gICAgaWYgKCFkYXRhLm5hbWUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCBUZXN0U3VpdGUgLSBpbnNlcnQ6IG1pc3NpbmcgbmFtZScpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEuY2FzZXMpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignTW9kZWwgVGVzdFN1aXRlIC0gaW5zZXJ0OiBjYXNlcyBzaG91bGQgYW4gYXJyYXknKVxyXG4gICAgfVxyXG5cclxuICAgIGRhdGEudXBkYXRlVGltZSA9IG5ldyBEYXRlKCkgKiAxXHJcbiAgICBkYXRhLmlkICAgICAgICAgPSB1aWQoKVxyXG4gICAgcmV0dXJuIGRiLnRlc3RTdWl0ZXMuYWRkKGRhdGEpXHJcbiAgfSxcclxuICBidWxrSW5zZXJ0OiAodGNzKSA9PiB7XHJcbiAgICBjb25zdCBsaXN0ID0gdGNzLm1hcChkYXRhID0+IHtcclxuICAgICAgaWYgKCFkYXRhLm5hbWUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIFRlc3RTdWl0ZSAtIGluc2VydDogbWlzc2luZyBuYW1lJylcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEuY2FzZXMpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCBUZXN0U3VpdGUgLSBpbnNlcnQ6IGNhc2VzIHNob3VsZCBhbiBhcnJheScpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRhdGEudXBkYXRlVGltZSA9IG5ldyBEYXRlKCkgKiAxXHJcbiAgICAgIGRhdGEuaWQgICAgICAgICA9IHVpZCgpXHJcblxyXG4gICAgICByZXR1cm4gZGF0YVxyXG4gICAgfSlcclxuXHJcbiAgICByZXR1cm4gZGIudGVzdFN1aXRlcy5idWxrQWRkKGxpc3QpXHJcbiAgfSxcclxuICB1cGRhdGU6IChpZCwgZGF0YSkgPT4ge1xyXG4gICAgcmV0dXJuIGRiLnRlc3RTdWl0ZXMudXBkYXRlKGlkLCBkYXRhKVxyXG4gIH0sXHJcbiAgcmVtb3ZlOiAoaWQpID0+IHtcclxuICAgIHJldHVybiBkYi50ZXN0U3VpdGVzLmRlbGV0ZShpZClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1vZGVsXHJcbiIsIlxyXG5leHBvcnQgZnVuY3Rpb24gaGFzVW5zYXZlZE1hY3JvIChzdGF0ZSkge1xyXG4gIGNvbnN0IHsgZWRpdG9yIH0gPSBzdGF0ZVxyXG4gIGNvbnN0IHsgZWRpdGluZywgZWRpdGluZ1NvdXJjZSwgYWN0aXZlVGFiIH0gPSBlZGl0b3JcclxuXHJcbiAgaWYgKCFlZGl0aW5nLm1ldGEuc3JjKSAgcmV0dXJuIHRydWVcclxuXHJcbiAgc3dpdGNoIChhY3RpdmVUYWIpIHtcclxuICAgIGNhc2UgJ3RhYmxlX3ZpZXcnOiB7XHJcbiAgICAgIGNvbnN0IHsgaGFzVW5zYXZlZCB9ID0gZWRpdGluZy5tZXRhIHx8IHt9XHJcbiAgICAgIHJldHVybiBoYXNVbnNhdmVkXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSAnc291cmNlX3ZpZXcnOiB7XHJcbiAgICAgIHJldHVybiBlZGl0aW5nU291cmNlLm9yaWdpbmFsICE9PSBlZGl0aW5nU291cmNlLmN1cnJlbnRcclxuICAgIH1cclxuXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gYWN0aXZlVGFiJylcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlZGl0b3JTZWxlY3RlZENvbW1hbmQgKHN0YXRlKSB7XHJcbiAgY29uc3QgeyBtZXRhLCBjb21tYW5kcyB9ID0gc3RhdGUuZWRpdG9yLmVkaXRpbmdcclxuXHJcbiAgaWYgKCFtZXRhIHx8IG1ldGEuc2VsZWN0ZWRJbmRleCA9PT0gLTEpIHJldHVybiBudWxsXHJcbiAgcmV0dXJuIGNvbW1hbmRzW21ldGEuc2VsZWN0ZWRJbmRleF0gfHwgbnVsbFxyXG59XHJcbiIsImltcG9ydCBVUkwgZnJvbSAndXJsLXBhcnNlJ1xyXG5pbXBvcnQgaXNFcXVhbCBmcm9tICdsb2Rhc2guaXNlcXVhbCdcclxuaW1wb3J0IHsgdHlwZXMgYXMgVCB9IGZyb20gJy4uL2FjdGlvbnMvYWN0aW9uX3R5cGVzJ1xyXG5pbXBvcnQgeyBzZXRJbiwgdXBkYXRlSW4sIGNvbXBvc2UsIHBpY2ssIHBhcnRpYWwgfSBmcm9tICcuLi9jb21tb24vdXRpbHMnXHJcbmltcG9ydCB7IG5vcm1hbGl6ZUNvbW1hbmQsIG5vcm1hbGl6ZVRlc3RDYXNlIH0gZnJvbSAnLi4vbW9kZWxzL3Rlc3RfY2FzZV9tb2RlbCdcclxuaW1wb3J0IHsgdG9KU09OU3RyaW5nIH0gZnJvbSAnLi4vY29tbW9uL2NvbnZlcnRfdXRpbHMnXHJcbmltcG9ydCAqIGFzIEMgZnJvbSAnLi4vY29tbW9uL2NvbnN0YW50J1xyXG5pbXBvcnQgbG9nIGZyb20gJy4uL2NvbW1vbi9sb2cnO1xyXG5cclxuY29uc3QgbmV3VGVzdENhc2VFZGl0aW5nID0ge1xyXG4gIGNvbW1hbmRzOiBbXSxcclxuICBtZXRhOiB7XHJcbiAgICBzcmM6IG51bGwsXHJcbiAgICBoYXNVbnNhdmVkOiB0cnVlLFxyXG4gICAgc2VsZWN0ZWRJbmRleDogLTFcclxuICB9XHJcbn1cclxuXHJcbi8vICogZWRpdG9yXHJcbi8vICAgICogdGVzdENhc2VzOiAgICAgICAgICBhbGwgdGVzdCBjYXNlcyBzdG9yZWQgaW4gaW5kZXhlZERCXHJcbi8vICAgICogZWRpdGluZzogICAgICAgICAgICB0aGUgY3VycmVudCB0ZXN0IGNhc2VzIGJlaW5nIGVkaXRlZFxyXG4vLyAgICAqIGNsaXBiYXJkICAgICAgICAgICAgZm9yIGNvcHkgLyBjdXQgLyBwYXN0ZVxyXG4vL1xyXG4vLyAqIHBsYXllciAgICAgICAgICAgICAgICAgdGhlIHN0YXRlIGZvciBwbGF5ZXJcclxuLy8gICAgKiBuZXh0Q29tbWFuZEluZGV4ICAgIHRoZSBjdXJyZW50IGNvbW1hbmQgYmVnaW5nIGV4ZWN1dGVkXHJcbi8vICAgICogZXJyb3JDb21tYW5kSW5kaWNlcyBjb21tYW5kcyB0aGF0IGVuY291bnRlcnMgc29tZSBlcnJvclxyXG4vLyAgICAqIGRvbmVDb21tYW5kSW5kaWNlcyAgY29tbWFuZHMgdGhhdCBoYXZlIGJlZW4gZXhlY3V0ZWRcclxuLy8gICAgKiBjdXJyZW50TG9vcCAgICAgICAgIHRoZSBjdXJyZW50IHJvdW5kXHJcbi8vICAgICogbG9vcHMgICAgICAgICAgICAgICBob3cgbWFueSByb3VuZHMgdG8gcnVuIHRvdGFsbHlcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuICBzdGF0dXM6IEMuQVBQX1NUQVRVUy5OT1JNQUwsXHJcbiAgcmVjb3JkZXJTdGF0dXM6IEMuUkVDT1JERVJfU1RBVFVTLlNUT1BQRUQsXHJcbiAgaW5zcGVjdG9yU3RhdHVzOiBDLklOU1BFQ1RPUl9TVEFUVVMuU1RPUFBFRCxcclxuICBlZGl0b3I6IHtcclxuICAgIHRlc3RTdWl0ZXM6IFtdLFxyXG4gICAgdGVzdENhc2VzOiBbXSxcclxuICAgIGVkaXRpbmc6IHtcclxuICAgICAgLi4ubmV3VGVzdENhc2VFZGl0aW5nXHJcbiAgICB9LFxyXG4gICAgZWRpdGluZ1NvdXJjZToge1xyXG4gICAgICAvLyBTYXZlZCB2ZXJzaW9uXHJcbiAgICAgIG9yaWdpbmFsOiBudWxsLFxyXG4gICAgICAvLyBWZXJzaW9uIGJlZm9yZSBlZGl0aW5nXHJcbiAgICAgIHB1cmU6ICAgICBudWxsLFxyXG4gICAgICAvLyBWZXJzaW9uIGtlZXBpbmcgdHJhY2sgb2YgYW55IGVkaXRpbmdcclxuICAgICAgY3VycmVudDogIG51bGwsXHJcbiAgICAgIGVycm9yOiAgICBudWxsXHJcbiAgICB9LFxyXG4gICAgY2xpcGJvYXJkOiB7XHJcbiAgICAgIGNvbW1hbmRzOiBbXVxyXG4gICAgfSxcclxuICAgIGFjdGl2ZVRhYjogJ3RhYmxlX3ZpZXcnXHJcbiAgfSxcclxuICBwbGF5ZXI6IHtcclxuICAgIG1vZGU6IEMuUExBWUVSX01PREUuVEVTVF9DQVNFLFxyXG4gICAgc3RhdHVzOiBDLlBMQVlFUl9TVEFUVVMuU1RPUFBFRCxcclxuICAgIHN0b3BSZWFzb246IG51bGwsXHJcbiAgICBjdXJyZW50TG9vcDogMCxcclxuICAgIGxvb3BzOiAwLFxyXG4gICAgbmV4dENvbW1hbmRJbmRleDogbnVsbCxcclxuICAgIGVycm9yQ29tbWFuZEluZGljZXM6IFtdLFxyXG4gICAgZG9uZUNvbW1hbmRJbmRpY2VzOiBbXSxcclxuICAgIGJyZWFrcG9pbnRJbmRpY2VzOiBbXSxcclxuICAgIHBsYXlJbnRlcnZhbDogMCxcclxuICAgIHRpbWVvdXRTdGF0dXM6IHtcclxuICAgICAgdHlwZTogbnVsbCxcclxuICAgICAgdG90YWw6IG51bGwsXHJcbiAgICAgIHBhc3Q6IG51bGxcclxuICAgIH1cclxuICB9LFxyXG4gIHZhcmlhYmxlczogW10sXHJcbiAgbG9nczogW10sXHJcbiAgc2NyZWVuc2hvdHM6IFtdLFxyXG4gIGNzdnM6IFtdLFxyXG4gIHZpc2lvbnM6IFtdLFxyXG4gIGNvbmZpZzoge30sXHJcbiAgdWk6IHt9XHJcbn1cclxuXHJcbi8vIE5vdGU6IGZvciB1cGRhdGUgdGhlIGBoYXNVbnNhdmVkYCBzdGF0dXMgaW4gZWRpdGluZy5tZXRhXHJcbmNvbnN0IHVwZGF0ZUhhc1VuU2F2ZWQgPSAoc3RhdGUpID0+IHtcclxuICBjb25zdCB7IG1ldGEsIC4uLmRhdGEgfSA9IHN0YXRlLmVkaXRvci5lZGl0aW5nXHJcbiAgY29uc3QgaWQgPSBtZXRhLnNyYyAmJiBtZXRhLnNyYy5pZFxyXG4gIGlmICghaWQpICByZXR1cm4gc3RhdGVcclxuXHJcbiAgY29uc3QgdGMgPSBzdGF0ZS5lZGl0b3IudGVzdENhc2VzLmZpbmQodGMgPT4gdGMuaWQgPT09IGlkKVxyXG4gIGlmICghdGMpICByZXR1cm4gc3RhdGVcclxuXHJcbiAgY29uc3Qgbm9ybWFsaXplZEVkaXRpbmcgPSBub3JtYWxpemVUZXN0Q2FzZSh7IGRhdGEgfSlcclxuICBjb25zdCBoYXNVbnNhdmVkID0gIWlzRXF1YWwodGMuZGF0YSwgbm9ybWFsaXplZEVkaXRpbmcuZGF0YSlcclxuICByZXR1cm4gc2V0SW4oWydlZGl0b3InLCAnZWRpdGluZycsICdtZXRhJywgJ2hhc1Vuc2F2ZWQnXSwgaGFzVW5zYXZlZCwgc3RhdGUpXHJcbn1cclxuXHJcbmNvbnN0IHVwZGF0ZUJyZWFrcG9pbnRJbmRpY2VzID0gKGluZGljZXMsIGFjdGlvbiwgYWN0aW9uSW5kZXgpID0+IHtcclxuICBjb25zdCBoYW5kbGVTaW5nbGVBY3Rpb24gPSAoaW5kaWNlcywgYWN0aW9uLCBhY3Rpb25JbmRleCkgPT4ge1xyXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcclxuICAgICAgY2FzZSAnYWRkJzoge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBpbmRpY2VzLnNsaWNlKClcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgIGlmIChyZXN1bHRbaV0gPj0gYWN0aW9uSW5kZXgpIHtcclxuICAgICAgICAgICAgcmVzdWx0W2ldICs9IDFcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgfVxyXG5cclxuICAgICAgY2FzZSAnZGVsZXRlJzoge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBpbmRpY2VzLnNsaWNlKClcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGluZGljZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgIGlmIChyZXN1bHRbaV0gPiBhY3Rpb25JbmRleCkge1xyXG4gICAgICAgICAgICByZXN1bHRbaV0gLT0gMVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHRbaV0gPT09IGFjdGlvbkluZGV4KSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zcGxpY2UoaSwgMSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgfVxyXG5cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVwZGF0ZUJyZWFrcG9pbnRJbmRpY2VzOiB1bmtub3duIGFjdGlvbiwgJyR7YWN0aW9ufSdgKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiBhY3Rpb25JbmRleCA9PT0gJ251bWJlcicpIHtcclxuICAgIHJldHVybiBoYW5kbGVTaW5nbGVBY3Rpb24oaW5kaWNlcywgYWN0aW9uLCBhY3Rpb25JbmRleClcclxuICB9XHJcblxyXG4gIGlmIChBcnJheS5pc0FycmF5KGFjdGlvbkluZGV4KSkge1xyXG4gICAgLy8gTm90ZTogc29ydCBhY3Rpb24gaW5kaWNlcyBhcyBkZXNjLiAgQmlnZ2VyIGluZGljZSB3aWxsIGJlIGhhbmRsZWQgZWFybGllciwgc28gdGhhdCBpdCB3b24ndCBhZmZlY3Qgb3RoZXJzXHJcbiAgICBjb25zdCBhY3Rpb25JbmRpY2VzID0gYWN0aW9uSW5kZXguc2xpY2UoKVxyXG4gICAgYWN0aW9uSW5kaWNlcy5zb3J0KChhLCBiKSA9PiBiIC0gYSlcclxuXHJcbiAgICByZXR1cm4gYWN0aW9uSW5kaWNlcy5yZWR1Y2UoKGluZGljZXMsIGFjdGlvbkluZGV4KSA9PiB7XHJcbiAgICAgIHJldHVybiBoYW5kbGVTaW5nbGVBY3Rpb24oaW5kaWNlcywgYWN0aW9uLCBhY3Rpb25JbmRleClcclxuICAgIH0sIGluZGljZXMpXHJcbiAgfVxyXG5cclxuICB0aHJvdyBuZXcgRXJyb3IoJ3VwZGF0ZUJyZWFrcG9pbnRJbmRpY2VzOiBhY3Rpb25JbmRleCBzaG91bGQgYmUgZWl0aGVyIG51bWJlciBvciBhbiBhcnJheSBvZiBudW1iZXInKVxyXG59XHJcblxyXG5jb25zdCByZXNldEVkaXRpbmdTb3VyY2UgPSBwYXJ0aWFsKChtYWNybywgc3RhdGUpID0+IHtcclxuICBsb2coJ3Jlc2V0RWRpdGluZ1NvdXJjZScsIG1hY3JvKVxyXG4gIGNvbnN0IHN0ciA9IHRvSlNPTlN0cmluZyhtYWNybylcclxuICByZXR1cm4gc2V0SW4oXHJcbiAgICBbJ2VkaXRvcicsICdlZGl0aW5nU291cmNlJ10sXHJcbiAgICB7XHJcbiAgICAgIG9yaWdpbmFsOiBzdHIsXHJcbiAgICAgIHB1cmU6ICAgICBzdHIsXHJcbiAgICAgIGN1cnJlbnQ6ICBzdHIsXHJcbiAgICAgIGVycm9yOiAgICBudWxsXHJcbiAgICB9LFxyXG4gICAgc3RhdGVcclxuICApXHJcbn0pXHJcblxyXG5jb25zdCBzZXRFZGl0aW5nU291cmNlQ3VycmVudCA9IChzdGF0ZSkgPT4ge1xyXG4gIGNvbnN0IG1hY3JvID0ge1xyXG4gICAgbmFtZTogICAgIHN0YXRlLmVkaXRvci5lZGl0aW5nLm1ldGEuc3JjID8gc3RhdGUuZWRpdG9yLmVkaXRpbmcubWV0YS5zcmMubmFtZSA6ICdVbnRpdGxlZCcsXHJcbiAgICBjb21tYW5kczogc3RhdGUuZWRpdG9yLmVkaXRpbmcuY29tbWFuZHNcclxuICB9XHJcbiAgbG9nKCdzZXRFZGl0aW5nU291cmNlQ3VycmVudCcsIG1hY3JvKVxyXG5cclxuICBjb25zdCBzdHIgPSB0b0pTT05TdHJpbmcobWFjcm8pXHJcbiAgcmV0dXJuIHVwZGF0ZUluKFsnZWRpdG9yJywgJ2VkaXRpbmdTb3VyY2UnXSwgZWRpdGluZ1NvdXJjZSA9PiAoeyAuLi5lZGl0aW5nU291cmNlLCBwdXJlOiBzdHIsIGN1cnJlbnQ6IHN0ciB9KSwgc3RhdGUpXHJcbn1cclxuXHJcbmNvbnN0IHNhdmVFZGl0aW5nU291cmNlQ3VycmVudCA9IChzdGF0ZSkgPT4ge1xyXG4gIGNvbnN0IHsgY3VycmVudCB9ID0gc3RhdGUuZWRpdG9yLmVkaXRpbmdTb3VyY2VcclxuICByZXR1cm4gdXBkYXRlSW4oWydlZGl0b3InLCAnZWRpdGluZ1NvdXJjZSddLCBlZGl0aW5nU291cmNlID0+ICh7IC4uLmVkaXRpbmdTb3VyY2UsIHB1cmU6IGN1cnJlbnQsIG9yaWdpbmFsOiBjdXJyZW50IH0pLCBzdGF0ZSlcclxufVxyXG5cclxuY29uc3Qgc2V0RWRpdGluZ1NvdXJjZU9yaWdpbmFsQW5kUHVyZSA9IChtYWNybywgc3RhdGUpID0+IHtcclxuICBjb25zdCBzdHIgPSB0b0pTT05TdHJpbmcobWFjcm8pXHJcbiAgcmV0dXJuIHVwZGF0ZUluKFsnZWRpdG9yJywgJ2VkaXRpbmdTb3VyY2UnXSwgZWRpdGluZ1NvdXJjZSA9PiAoeyAuLi5lZGl0aW5nU291cmNlLCBwdXJlOiBzdHIsIG9yaWdpbmFsOiBzdHIgfSksIHN0YXRlKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWR1Y2VyIChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBULlNUQVJUX1JFQ09SRElOR19TVUNDRVNTOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHN0YXR1czogQy5BUFBfU1RBVFVTLlJFQ09SREVSLFxyXG4gICAgICAgIHJlY29yZGVyU3RhdHVzOiBDLkFQUF9TVEFUVVMuUEVORElORyxcclxuICAgICAgICBwbGF5ZXI6IHtcclxuICAgICAgICAgIC4uLnN0YXRlLnBsYXllcixcclxuICAgICAgICAgIG5leHRDb21tYW5kSW5kZXg6IG51bGwsXHJcbiAgICAgICAgICBlcnJvckNvbW1hbmRJbmRpY2VzOiBbXSxcclxuICAgICAgICAgIGRvbmVDb21tYW5kSW5kaWNlczogW11cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIGNhc2UgVC5TVE9QX1JFQ09SRElOR19TVUNDRVNTOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHN0YXR1czogQy5BUFBfU1RBVFVTLk5PUk1BTCxcclxuICAgICAgICByZWNvcmRlclN0YXR1czogQy5SRUNPUkRFUl9TVEFUVVMuU1RPUFBFRFxyXG4gICAgICB9XHJcbiAgICBjYXNlIFQuU1RBUlRfSU5TUEVDVElOR19TVUNDRVNTOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHN0YXR1czogQy5BUFBfU1RBVFVTLklOU1BFQ1RPUixcclxuICAgICAgICBpbnNwZWN0b3JTdGF0dXM6IEMuSU5TUEVDVE9SX1NUQVRVUy5QRU5ESU5HXHJcbiAgICAgIH1cclxuICAgIGNhc2UgVC5TVE9QX0lOU1BFQ1RJTkdfU1VDQ0VTUzpcclxuICAgIGNhc2UgVC5ET05FX0lOU1BFQ1RJTkc6XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgc3RhdHVzOiBDLkFQUF9TVEFUVVMuTk9STUFMLFxyXG4gICAgICAgIHJlY29yZGVyU3RhdHVzOiBDLklOU1BFQ1RPUl9TVEFUVVMuU1RPUFBFRFxyXG4gICAgICB9XHJcblxyXG4gICAgY2FzZSBULlNUQVJUX1BMQVlJTkc6XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgc3RhdHVzOiBDLkFQUF9TVEFUVVMuUExBWUVSXHJcbiAgICAgIH1cclxuXHJcbiAgICBjYXNlIFQuU1RPUF9QTEFZSU5HOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHN0YXR1czogQy5BUFBfU1RBVFVTLk5PUk1BTFxyXG4gICAgICB9XHJcblxyXG4gICAgY2FzZSBULkFQUEVORF9DT01NQU5EOlxyXG4gICAgICByZXR1cm4gY29tcG9zZShcclxuICAgICAgICBzZXRFZGl0aW5nU291cmNlQ3VycmVudCxcclxuICAgICAgICB1cGRhdGVIYXNVblNhdmVkLFxyXG4gICAgICAgIHVwZGF0ZUluKFxyXG4gICAgICAgICAgWydlZGl0b3InLCAnZWRpdGluZycsICdjb21tYW5kcyddLFxyXG4gICAgICAgICAgKGNvbW1hbmRzKSA9PiBbLi4uY29tbWFuZHMsIGFjdGlvbi5kYXRhLmNvbW1hbmRdXHJcbiAgICAgICAgKVxyXG4gICAgICApKHN0YXRlKVxyXG5cclxuICAgIGNhc2UgVC5EVVBMSUNBVEVfQ09NTUFORDpcclxuICAgICAgcmV0dXJuIGNvbXBvc2UoXHJcbiAgICAgICAgc2V0RWRpdGluZ1NvdXJjZUN1cnJlbnQsXHJcbiAgICAgICAgdXBkYXRlSGFzVW5TYXZlZCxcclxuICAgICAgICBzZXRJbihcclxuICAgICAgICAgIFsnZWRpdG9yJywgJ2VkaXRpbmcnLCAnbWV0YScsICdzZWxlY3RlZEluZGV4J10sXHJcbiAgICAgICAgICBhY3Rpb24uZGF0YS5pbmRleCArIDFcclxuICAgICAgICApLFxyXG4gICAgICAgIHVwZGF0ZUluKFxyXG4gICAgICAgICAgWydlZGl0b3InLCAnZWRpdGluZycsICdjb21tYW5kcyddLFxyXG4gICAgICAgICAgKGNvbW1hbmRzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgaW5kZXggfSAgID0gYWN0aW9uLmRhdGFcclxuICAgICAgICAgICAgY29uc3QgbmV3Q29tbWFuZHMgPSBjb21tYW5kcy5zbGljZSgpXHJcbiAgICAgICAgICAgIG5ld0NvbW1hbmRzLnNwbGljZShpbmRleCArIDEsIDAsIGNvbW1hbmRzW2luZGV4XSlcclxuICAgICAgICAgICAgcmV0dXJuIG5ld0NvbW1hbmRzXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKSxcclxuICAgICAgICB1cGRhdGVJbihcclxuICAgICAgICAgIFsncGxheWVyJywgJ2JyZWFrcG9pbnRJbmRpY2VzJ10sXHJcbiAgICAgICAgICAoaW5kaWNlcykgPT4gdXBkYXRlQnJlYWtwb2ludEluZGljZXMoaW5kaWNlcywgJ2FkZCcsIGFjdGlvbi5kYXRhLmluZGV4ICsgMSlcclxuICAgICAgICApXHJcbiAgICAgICkoc3RhdGUpXHJcblxyXG4gICAgY2FzZSBULklOU0VSVF9DT01NQU5EOlxyXG4gICAgICByZXR1cm4gY29tcG9zZShcclxuICAgICAgICBzZXRFZGl0aW5nU291cmNlQ3VycmVudCxcclxuICAgICAgICB1cGRhdGVIYXNVblNhdmVkLFxyXG4gICAgICAgIHNldEluKFxyXG4gICAgICAgICAgWydlZGl0b3InLCAnZWRpdGluZycsICdtZXRhJywgJ3NlbGVjdGVkSW5kZXgnXSxcclxuICAgICAgICAgIGFjdGlvbi5kYXRhLmluZGV4XHJcbiAgICAgICAgKSxcclxuICAgICAgICB1cGRhdGVJbihcclxuICAgICAgICAgIFsnZWRpdG9yJywgJ2VkaXRpbmcnLCAnY29tbWFuZHMnXSxcclxuICAgICAgICAgIChjb21tYW5kcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB7IGluZGV4LCBjb21tYW5kIH0gPSBhY3Rpb24uZGF0YVxyXG4gICAgICAgICAgICBjb25zdCBuZXdDb21tYW5kcyA9IGNvbW1hbmRzLnNsaWNlKClcclxuICAgICAgICAgICAgbmV3Q29tbWFuZHMuc3BsaWNlKGluZGV4LCAwLCBjb21tYW5kKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3Q29tbWFuZHNcclxuICAgICAgICAgIH1cclxuICAgICAgICApLFxyXG4gICAgICAgIHVwZGF0ZUluKFxyXG4gICAgICAgICAgWydwbGF5ZXInLCAnYnJlYWtwb2ludEluZGljZXMnXSxcclxuICAgICAgICAgIChpbmRpY2VzKSA9PiB1cGRhdGVCcmVha3BvaW50SW5kaWNlcyhpbmRpY2VzLCAnYWRkJywgYWN0aW9uLmRhdGEuaW5kZXgpXHJcbiAgICAgICAgKVxyXG4gICAgICApKHN0YXRlKVxyXG5cclxuICAgIGNhc2UgVC5VUERBVEVfQ09NTUFORDpcclxuICAgICAgcmV0dXJuIGNvbXBvc2UoXHJcbiAgICAgICAgc2V0RWRpdGluZ1NvdXJjZUN1cnJlbnQsXHJcbiAgICAgICAgdXBkYXRlSGFzVW5TYXZlZCxcclxuICAgICAgICBzZXRJbihcclxuICAgICAgICAgIFsnZWRpdG9yJywgJ2VkaXRpbmcnLCAnY29tbWFuZHMnLCBhY3Rpb24uZGF0YS5pbmRleF0sXHJcbiAgICAgICAgICBhY3Rpb24uZGF0YS5jb21tYW5kXHJcbiAgICAgICAgKVxyXG4gICAgICApKHN0YXRlKVxyXG5cclxuICAgIGNhc2UgVC5SRU1PVkVfQ09NTUFORDpcclxuICAgICAgcmV0dXJuIGNvbXBvc2UoXHJcbiAgICAgICAgc2V0RWRpdGluZ1NvdXJjZUN1cnJlbnQsXHJcbiAgICAgICAgdXBkYXRlSGFzVW5TYXZlZCxcclxuICAgICAgICB1cGRhdGVJbihcclxuICAgICAgICAgIFsnZWRpdG9yJywgJ2VkaXRpbmcnLCAnY29tbWFuZHMnXSxcclxuICAgICAgICAgIChjb21tYW5kcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB7IGluZGV4IH0gPSBhY3Rpb24uZGF0YVxyXG4gICAgICAgICAgICBjb25zdCBuZXdDb21tYW5kcyA9IGNvbW1hbmRzLnNsaWNlKClcclxuICAgICAgICAgICAgbmV3Q29tbWFuZHMuc3BsaWNlKGluZGV4LCAxKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3Q29tbWFuZHNcclxuICAgICAgICAgIH1cclxuICAgICAgICApLFxyXG4gICAgICAgIHVwZGF0ZUluKFxyXG4gICAgICAgICAgWydwbGF5ZXInLCAnYnJlYWtwb2ludEluZGljZXMnXSxcclxuICAgICAgICAgIChpbmRpY2VzKSA9PiB1cGRhdGVCcmVha3BvaW50SW5kaWNlcyhpbmRpY2VzLCAnZGVsZXRlJywgYWN0aW9uLmRhdGEuaW5kZXgpXHJcbiAgICAgICAgKVxyXG4gICAgICApKHN0YXRlKVxyXG5cclxuICAgIGNhc2UgVC5TRUxFQ1RfQ09NTUFORDpcclxuICAgICAgcmV0dXJuIGNvbXBvc2UoXHJcbiAgICAgICAgc2V0SW4oXHJcbiAgICAgICAgICBbJ2VkaXRvcicsICdlZGl0aW5nJywgJ21ldGEnLCAnc2VsZWN0ZWRJbmRleCddLFxyXG4gICAgICAgICAgKGFjdGlvbi5kYXRhLmZvcmNlQ2xpY2sgfHxcclxuICAgICAgICAgICAgc3RhdGUuZWRpdG9yLmVkaXRpbmcubWV0YS5zZWxlY3RlZEluZGV4ICE9PSBhY3Rpb24uZGF0YS5pbmRleClcclxuICAgICAgICAgICAgICAgID8gYWN0aW9uLmRhdGEuaW5kZXhcclxuICAgICAgICAgICAgICAgIDogLTFcclxuICAgICAgICApLFxyXG4gICAgICAgIC8vIE5vdGU6IG5vcm1hbGl6ZSBjb21tYW5kcyB3aGVuZXZlciBzd2l0Y2hpbmcgYmV0d2VlbiBjb21tYW5kcyBpbiBub3JtYWwgbW9kZVxyXG4gICAgICAgIHN0YXRlLnN0YXR1cyA9PT0gQy5BUFBfU1RBVFVTLk5PUk1BTFxyXG4gICAgICAgICAgPyB1cGRhdGVJbihcclxuICAgICAgICAgICAgWydlZGl0b3InLCAnZWRpdGluZycsICdjb21tYW5kcyddLFxyXG4gICAgICAgICAgICAoY21kcykgPT4gY21kcy5tYXAobm9ybWFsaXplQ29tbWFuZClcclxuICAgICAgICAgIClcclxuICAgICAgICAgIDogeCA9PiB4XHJcbiAgICAgICkoc3RhdGUpXHJcblxyXG4gICAgY2FzZSBULkNVVF9DT01NQU5EOiB7XHJcbiAgICAgIGNvbnN0IGNvbW1hbmRzID0gYWN0aW9uLmRhdGEuaW5kaWNlcy5tYXAoaSA9PiBzdGF0ZS5lZGl0b3IuZWRpdGluZy5jb21tYW5kc1tpXSlcclxuXHJcbiAgICAgIHJldHVybiBjb21wb3NlKFxyXG4gICAgICAgIHNldEVkaXRpbmdTb3VyY2VDdXJyZW50LFxyXG4gICAgICAgIHVwZGF0ZUhhc1VuU2F2ZWQsXHJcbiAgICAgICAgc2V0SW4oWydlZGl0b3InLCAnY2xpcGJvYXJkJywgJ2NvbW1hbmRzJ10sIGNvbW1hbmRzKSxcclxuICAgICAgICB1cGRhdGVJbihcclxuICAgICAgICAgIFsnZWRpdG9yJywgJ2VkaXRpbmcnLCAnY29tbWFuZHMnXSxcclxuICAgICAgICAgIChjb21tYW5kcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdDb21tYW5kcyA9IGNvbW1hbmRzLnNsaWNlKClcclxuICAgICAgICAgICAgcmV0dXJuIG5ld0NvbW1hbmRzLmZpbHRlcigoYywgaSkgPT4gYWN0aW9uLmRhdGEuaW5kaWNlcy5pbmRleE9mKGkpID09PSAtMSlcclxuICAgICAgICAgIH1cclxuICAgICAgICApLFxyXG4gICAgICAgIHVwZGF0ZUluKFxyXG4gICAgICAgICAgWydwbGF5ZXInLCAnYnJlYWtwb2ludEluZGljZXMnXSxcclxuICAgICAgICAgIChpbmRpY2VzKSA9PiB1cGRhdGVCcmVha3BvaW50SW5kaWNlcyhpbmRpY2VzLCAnZGVsZXRlJywgYWN0aW9uLmRhdGEuaW5kaWNlcylcclxuICAgICAgICApXHJcbiAgICAgICkoc3RhdGUpXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSBULkNPUFlfQ09NTUFORDoge1xyXG4gICAgICBjb25zdCBjb21tYW5kcyA9IGFjdGlvbi5kYXRhLmluZGljZXMubWFwKGkgPT4gc3RhdGUuZWRpdG9yLmVkaXRpbmcuY29tbWFuZHNbaV0pXHJcbiAgICAgIHJldHVybiBzZXRJbihbJ2VkaXRvcicsICdjbGlwYm9hcmQnLCAnY29tbWFuZHMnXSwgY29tbWFuZHMsIHN0YXRlKVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgVC5QQVNURV9DT01NQU5EOiB7XHJcbiAgICAgIGNvbnN0IHsgY29tbWFuZHMgfSA9IHN0YXRlLmVkaXRvci5jbGlwYm9hcmRcclxuXHJcbiAgICAgIHJldHVybiBjb21wb3NlKFxyXG4gICAgICAgIHNldEVkaXRpbmdTb3VyY2VDdXJyZW50LFxyXG4gICAgICAgIHVwZGF0ZUhhc1VuU2F2ZWQsXHJcbiAgICAgICAgdXBkYXRlSW4oXHJcbiAgICAgICAgICBbJ2VkaXRvcicsICdlZGl0aW5nJywgJ2NvbW1hbmRzJ10sXHJcbiAgICAgICAgICAoY21kcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdDbWRzID0gY21kcy5zbGljZSgpXHJcbiAgICAgICAgICAgIG5ld0NtZHMuc3BsaWNlKGFjdGlvbi5kYXRhLmluZGV4ICsgMSwgMCwgLi4uY29tbWFuZHMpXHJcbiAgICAgICAgICAgIHJldHVybiBuZXdDbWRzXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKSxcclxuICAgICAgICB1cGRhdGVJbihcclxuICAgICAgICAgIFsncGxheWVyJywgJ2JyZWFrcG9pbnRJbmRpY2VzJ10sXHJcbiAgICAgICAgICAoaW5kaWNlcykgPT4gdXBkYXRlQnJlYWtwb2ludEluZGljZXMoaW5kaWNlcywgJ2FkZCcsIGNvbW1hbmRzLm1hcChfID0+IGFjdGlvbi5kYXRhLmluZGV4ICsgMSkpXHJcbiAgICAgICAgKVxyXG4gICAgICApKHN0YXRlKVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgVC5OT1JNQUxJWkVfQ09NTUFORFM6XHJcbiAgICAgIHJldHVybiB1cGRhdGVJbihcclxuICAgICAgICBbJ2VkaXRvcicsICdlZGl0aW5nJywgJ2NvbW1hbmRzJ10sXHJcbiAgICAgICAgKGNtZHMpID0+IGNtZHMubWFwKG5vcm1hbGl6ZUNvbW1hbmQpLFxyXG4gICAgICAgIHN0YXRlXHJcbiAgICAgIClcclxuXHJcbiAgICBjYXNlIFQuVVBEQVRFX1NFTEVDVEVEX0NPTU1BTkQ6XHJcbiAgICAgIGlmIChzdGF0ZS5lZGl0b3IuZWRpdGluZy5tZXRhLnNlbGVjdGVkSW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBjb21wb3NlKFxyXG4gICAgICAgIHNldEVkaXRpbmdTb3VyY2VDdXJyZW50LFxyXG4gICAgICAgIHVwZGF0ZUhhc1VuU2F2ZWQsXHJcbiAgICAgICAgdXBkYXRlSW4oXHJcbiAgICAgICAgICBbJ2VkaXRvcicsICdlZGl0aW5nJywgJ2NvbW1hbmRzJywgc3RhdGUuZWRpdG9yLmVkaXRpbmcubWV0YS5zZWxlY3RlZEluZGV4XSxcclxuICAgICAgICAgIChjbWRPYmopID0+ICh7Li4uY21kT2JqLCAuLi5hY3Rpb24uZGF0YX0pXHJcbiAgICAgICAgKVxyXG4gICAgICApKHN0YXRlKVxyXG5cclxuICAgIGNhc2UgVC5TQVZFX0VESVRJTkdfQVNfRVhJU1RFRDpcclxuICAgICAgcmV0dXJuIGNvbXBvc2UoXHJcbiAgICAgICAgc2V0SW4oWydlZGl0b3InLCAnZWRpdGluZycsICdtZXRhJywgJ2hhc1Vuc2F2ZWQnXSwgZmFsc2UpLFxyXG4gICAgICAgIHNhdmVFZGl0aW5nU291cmNlQ3VycmVudFxyXG4gICAgICApKHN0YXRlKVxyXG5cclxuICAgIGNhc2UgVC5TQVZFX0VESVRJTkdfQVNfTkVXOlxyXG4gICAgICByZXR1cm4gY29tcG9zZShcclxuICAgICAgICB1cGRhdGVJbihcclxuICAgICAgICAgIFsnZWRpdG9yJywgJ2VkaXRpbmcnLCAnbWV0YSddLFxyXG4gICAgICAgICAgKG1ldGEpID0+ICh7XHJcbiAgICAgICAgICAgIC4uLm1ldGEsXHJcbiAgICAgICAgICAgIGhhc1Vuc2F2ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBzcmM6IHBpY2soWydpZCcsICduYW1lJ10sIGFjdGlvbi5kYXRhKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApLFxyXG4gICAgICAgIHNhdmVFZGl0aW5nU291cmNlQ3VycmVudFxyXG4gICAgICApKHN0YXRlKVxyXG5cclxuICAgIGNhc2UgVC5TRVRfVEVTVF9DQVNFUzoge1xyXG4gICAgICByZXR1cm4gY29tcG9zZShcclxuICAgICAgICAoc3RhdGUpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHsgc3JjIH0gPSBzdGF0ZS5lZGl0b3IuZWRpdGluZy5tZXRhXHJcbiAgICAgICAgICBpZiAoIXNyYykgcmV0dXJuIHN0YXRlXHJcblxyXG4gICAgICAgICAgY29uc3QgdGMgPSBzdGF0ZS5lZGl0b3IudGVzdENhc2VzLmZpbmQodGMgPT4gdGMuaWQgPT09IHNyYy5pZClcclxuICAgICAgICAgIGlmICghdGMpICByZXR1cm4gc3RhdGVcclxuXHJcbiAgICAgICAgICByZXR1cm4gc2V0RWRpdGluZ1NvdXJjZU9yaWdpbmFsQW5kUHVyZSh7XHJcbiAgICAgICAgICAgIG5hbWU6IHRjLm5hbWUsXHJcbiAgICAgICAgICAgIGNvbW1hbmRzOiB0Yy5kYXRhLmNvbW1hbmRzXHJcbiAgICAgICAgICB9LCBzdGF0ZSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldEluKFsnZWRpdG9yJywgJ3Rlc3RDYXNlcyddLCBhY3Rpb24uZGF0YSlcclxuICAgICAgKShzdGF0ZSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlIFQuU0VUX1RFU1RfU1VJVEVTOlxyXG4gICAgICByZXR1cm4gc2V0SW4oWydlZGl0b3InLCAndGVzdFN1aXRlcyddLCBhY3Rpb24uZGF0YSwgc3RhdGUpXHJcblxyXG4gICAgY2FzZSBULlVQREFURV9URVNUX1NVSVRFOiB7XHJcbiAgICAgIGNvbnN0IHsgaWQsIHVwZGF0ZWQgfSA9IGFjdGlvbi5kYXRhXHJcbiAgICAgIGNvbnN0IGluZGV4ID0gc3RhdGUuZWRpdG9yLnRlc3RTdWl0ZXMuZmluZEluZGV4KHRzID0+IHRzLmlkID09PSBpZClcclxuXHJcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBzdGF0ZVxyXG4gICAgICByZXR1cm4gc2V0SW4oWydlZGl0b3InLCAndGVzdFN1aXRlcycsIGluZGV4XSwgdXBkYXRlZCwgc3RhdGUpXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSBULlNFVF9FRElUSU5HOlxyXG4gICAgICBsb2coJ1JFRFVDRVIgU0VUX0VESVRJTkcnLCBhY3Rpb24uZGF0YSlcclxuXHJcbiAgICAgIGlmICghYWN0aW9uLmRhdGEpIHJldHVybiBzdGF0ZVxyXG4gICAgICByZXR1cm4gY29tcG9zZShcclxuICAgICAgICBzZXRFZGl0aW5nU291cmNlQ3VycmVudCxcclxuICAgICAgICB1cGRhdGVIYXNVblNhdmVkLFxyXG4gICAgICAgIHNldEluKFsnZWRpdG9yJywgJ2VkaXRpbmcnXSwgYWN0aW9uLmRhdGEpXHJcbiAgICAgICkoc3RhdGUpXHJcblxyXG4gICAgY2FzZSBULkVESVRfVEVTVF9DQVNFOiB7XHJcbiAgICAgIGNvbnN0IHsgdGVzdENhc2VzIH0gPSBzdGF0ZS5lZGl0b3JcclxuICAgICAgY29uc3QgdGMgPSB0ZXN0Q2FzZXMuZmluZCh0YyA9PiB0Yy5pZCA9PT0gYWN0aW9uLmRhdGEpXHJcblxyXG4gICAgICBpZiAoIXRjKSAgcmV0dXJuIHN0YXRlXHJcblxyXG4gICAgICByZXR1cm4gY29tcG9zZShcclxuICAgICAgICBzZXRJbihcclxuICAgICAgICAgIFsnZWRpdG9yJywgJ2VkaXRpbmcnXSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgLi4udGMuZGF0YSxcclxuICAgICAgICAgICAgbWV0YToge1xyXG4gICAgICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IC0xLFxyXG4gICAgICAgICAgICAgIGhhc1Vuc2F2ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIHNyYzogcGljayhbJ2lkJywgJ25hbWUnXSwgdGMpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICApLFxyXG4gICAgICAgIHVwZGF0ZUluKFxyXG4gICAgICAgICAgWydwbGF5ZXInXSxcclxuICAgICAgICAgIChwbGF5ZXIpID0+ICh7XHJcbiAgICAgICAgICAgIC4uLnBsYXllcixcclxuICAgICAgICAgICAgc3RhdHVzOiBDLlBMQVlFUl9TVEFUVVMuU1RPUFBFRCxcclxuICAgICAgICAgICAgc3RvcFJlYXNvbjogbnVsbCxcclxuICAgICAgICAgICAgbmV4dENvbW1hbmRJbmRleDogbnVsbCxcclxuICAgICAgICAgICAgZXJyb3JDb21tYW5kSW5kaWNlczogW10sXHJcbiAgICAgICAgICAgIGRvbmVDb21tYW5kSW5kaWNlczogW10sXHJcbiAgICAgICAgICAgIGJyZWFrcG9pbnRJbmRpY2VzOiBbXVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApLFxyXG4gICAgICAgIHJlc2V0RWRpdGluZ1NvdXJjZSh7XHJcbiAgICAgICAgICBuYW1lOiAgICAgdGMubmFtZSxcclxuICAgICAgICAgIGNvbW1hbmRzOiB0Yy5kYXRhLmNvbW1hbmRzXHJcbiAgICAgICAgfSlcclxuICAgICAgKShzdGF0ZSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlIFQuVVBEQVRFX1RFU1RfQ0FTRV9TVEFUVVM6IHtcclxuICAgICAgY29uc3QgeyBpZCwgc3RhdHVzIH0gPSBhY3Rpb24uZGF0YVxyXG4gICAgICBpZiAoIWlkKSAgcmV0dXJuIHN0YXRlXHJcblxyXG4gICAgICBjb25zdCB7IHRlc3RDYXNlcyB9ID0gc3RhdGUuZWRpdG9yXHJcbiAgICAgIGNvbnN0IGluZGV4ID0gdGVzdENhc2VzLmZpbmRJbmRleCh0YyA9PiB0Yy5pZCA9PT0gaWQpXHJcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBzdGF0ZVxyXG5cclxuICAgICAgcmV0dXJuIHNldEluKFxyXG4gICAgICAgIFsnZWRpdG9yJywgJ3Rlc3RDYXNlcycsIGluZGV4LCAnc3RhdHVzJ10sXHJcbiAgICAgICAgc3RhdHVzLFxyXG4gICAgICAgIHN0YXRlXHJcbiAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBjYXNlIFQuUkVOQU1FX1RFU1RfQ0FTRTpcclxuICAgICAgcmV0dXJuIHNldEluKFsnZWRpdG9yJywgJ2VkaXRpbmcnLCAnbWV0YScsICdzcmMnLCAnbmFtZSddLCBhY3Rpb24uZGF0YSwgc3RhdGUpXHJcblxyXG4gICAgY2FzZSBULlJFTU9WRV9URVNUX0NBU0U6IHtcclxuICAgICAgaWYgKCFhY3Rpb24uZGF0YS5pc0N1cnJlbnQpIHJldHVybiBzdGF0ZVxyXG5cclxuICAgICAgY29uc3QgeyBpZCB9ID0gc3RhdGUuZWRpdG9yLmVkaXRpbmcubWV0YS5zcmNcclxuICAgICAgY29uc3QgeyBzZWxlY3RlZEluZGV4IH0gPSBzdGF0ZS5lZGl0b3IuZWRpdGluZy5tZXRhXHJcbiAgICAgIGNvbnN0IGNhbmRpZGF0ZXMgICAgICAgID0gc3RhdGUuZWRpdG9yLnRlc3RDYXNlcy5maWx0ZXIodGMgPT4gdGMuaWQgIT09IGlkKVxyXG4gICAgICBsZXQgbGFzdEluZGV4ICAgICAgICAgICA9IHN0YXRlLmVkaXRvci50ZXN0Q2FzZXMuZmluZEluZGV4KHRjID0+IHRjLmlkID09PSBpZClcclxuICAgICAgbGV0IGVkaXRpbmdcclxuXHJcbiAgICAgIGlmIChjYW5kaWRhdGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGVkaXRpbmcgPSB7Li4ubmV3VGVzdENhc2VFZGl0aW5nfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gbGFzdEluZGV4ID09PSAtMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBsYXN0SW5kZXggPCBjYW5kaWRhdGVzLmxlbmd0aCA/IGxhc3RJbmRleCA6IChsYXN0SW5kZXggLSAxKVxyXG4gICAgICAgIGNvbnN0IHRjICAgID0gY2FuZGlkYXRlc1tpbmRleF1cclxuXHJcbiAgICAgICAgZWRpdGluZyAgICAgPSB7XHJcbiAgICAgICAgICAuLi50Yy5kYXRhLFxyXG4gICAgICAgICAgbWV0YToge1xyXG4gICAgICAgICAgICBzcmM6IHBpY2soWydpZCcsICduYW1lJ10sIHRjKSxcclxuICAgICAgICAgICAgaGFzVW5zYXZlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IGluZGV4XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gc2V0SW4oWydlZGl0b3InLCAnZWRpdGluZyddLCBlZGl0aW5nLCBzdGF0ZSlcclxuICAgIH1cclxuXHJcbiAgICBjYXNlIFQuRURJVF9ORVdfVEVTVF9DQVNFOiB7XHJcbiAgICAgIHJldHVybiBjb21wb3NlKFxyXG4gICAgICAgIHNldEluKFxyXG4gICAgICAgICAgWydlZGl0b3InLCAnZWRpdGluZyddLFxyXG4gICAgICAgICAgey4uLm5ld1Rlc3RDYXNlRWRpdGluZ31cclxuICAgICAgICApLFxyXG4gICAgICAgIHVwZGF0ZUluKFsncGxheWVyJ10sIChwbGF5ZXIpID0+ICh7XHJcbiAgICAgICAgICAuLi5wbGF5ZXIsXHJcbiAgICAgICAgICBuZXh0Q29tbWFuZEluZGV4OiBudWxsLFxyXG4gICAgICAgICAgZXJyb3JDb21tYW5kSW5kaWNlczogW10sXHJcbiAgICAgICAgICBkb25lQ29tbWFuZEluZGljZXM6IFtdLFxyXG4gICAgICAgICAgYnJlYWtwb2ludEluZGljZXM6IFtdXHJcbiAgICAgICAgfSkpLFxyXG4gICAgICAgIHJlc2V0RWRpdGluZ1NvdXJjZSh7XHJcbiAgICAgICAgICBuYW1lOiAgICAgJ1VudGl0bGVkJyxcclxuICAgICAgICAgIGNvbW1hbmRzOiBbXVxyXG4gICAgICAgIH0pXHJcbiAgICAgICkoc3RhdGUpXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSBULlNFVF9QTEFZRVJfU1RBVEU6XHJcbiAgICAgIHJldHVybiB1cGRhdGVJbihbJ3BsYXllciddLCAocGxheWVyU3RhdGUpID0+ICh7Li4ucGxheWVyU3RhdGUsIC4uLmFjdGlvbi5kYXRhfSksIHN0YXRlKVxyXG5cclxuICAgIGNhc2UgVC5QTEFZRVJfQUREX0VSUk9SX0NPTU1BTkRfSU5ERVg6XHJcbiAgICAgIHJldHVybiB1cGRhdGVJbihcclxuICAgICAgICBbJ3BsYXllcicsICdlcnJvckNvbW1hbmRJbmRpY2VzJ10sXHJcbiAgICAgICAgKGluZGljZXMpID0+IFsuLi5pbmRpY2VzLCBhY3Rpb24uZGF0YV0sXHJcbiAgICAgICAgc3RhdGVcclxuICAgICAgKVxyXG5cclxuICAgIGNhc2UgVC5BRERfQlJFQUtQT0lOVDpcclxuICAgICAgcmV0dXJuIHVwZGF0ZUluKFxyXG4gICAgICAgIFsncGxheWVyJywgJ2JyZWFrcG9pbnRJbmRpY2VzJ10sXHJcbiAgICAgICAgKGluZGljZXMpID0+IGluZGljZXMuaW5kZXhPZihhY3Rpb24uZGF0YSkgPT09IC0xID8gWy4uLmluZGljZXMsIGFjdGlvbi5kYXRhXSA6IGluZGljZXMsXHJcbiAgICAgICAgc3RhdGVcclxuICAgICAgKVxyXG5cclxuICAgIGNhc2UgVC5SRU1PVkVfQlJFQUtQT0lOVDpcclxuICAgICAgcmV0dXJuIHVwZGF0ZUluKFxyXG4gICAgICAgIFsncGxheWVyJywgJ2JyZWFrcG9pbnRJbmRpY2VzJ10sXHJcbiAgICAgICAgKGluZGljZXMpID0+IGluZGljZXMuZmlsdGVyKGluZGV4ID0+IGluZGV4ICE9PSBhY3Rpb24uZGF0YSksXHJcbiAgICAgICAgc3RhdGVcclxuICAgICAgKVxyXG5cclxuICAgIGNhc2UgVC5BRERfTE9HUzpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBsb2dzOiBbLi4uc3RhdGUubG9ncywgLi4uYWN0aW9uLmRhdGFdLnNsaWNlKC01MDApXHJcbiAgICAgIH1cclxuXHJcbiAgICBjYXNlIFQuQ0xFQVJfTE9HUzpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBsb2dzOiBbXVxyXG4gICAgICB9XHJcblxyXG4gICAgY2FzZSBULkFERF9TQ1JFRU5TSE9UOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHNjcmVlbnNob3RzOiBbXHJcbiAgICAgICAgICAuLi5zdGF0ZS5zY3JlZW5zaG90cyxcclxuICAgICAgICAgIGFjdGlvbi5kYXRhXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcblxyXG4gICAgY2FzZSBULkNMRUFSX1NDUkVFTlNIT1RTOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHNjcmVlbnNob3RzOiBbXVxyXG4gICAgICB9XHJcblxyXG4gICAgY2FzZSBULlVQREFURV9DT05GSUc6XHJcbiAgICAgIHJldHVybiB1cGRhdGVJbihcclxuICAgICAgICBbJ2NvbmZpZyddLFxyXG4gICAgICAgIChjZmcpID0+ICh7Li4uY2ZnLCAuLi5hY3Rpb24uZGF0YX0pLFxyXG4gICAgICAgIHN0YXRlXHJcbiAgICAgIClcclxuXHJcbiAgICBjYXNlIFQuU0VUX0NTVl9MSVNUOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGNzdnM6IGFjdGlvbi5kYXRhXHJcbiAgICAgIH1cclxuXHJcbiAgICBjYXNlIFQuU0VUX1NDUkVFTlNIT1RfTElTVDpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBzY3JlZW5zaG90czogYWN0aW9uLmRhdGFcclxuICAgICAgfVxyXG5cclxuICAgIGNhc2UgVC5TRVRfVklTSU9OX0xJU1Q6XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgdmlzaW9uczogYWN0aW9uLmRhdGFcclxuICAgICAgfVxyXG5cclxuICAgIGNhc2UgVC5TRVRfVkFSSUFCTEVfTElTVDpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICB2YXJpYWJsZXM6IGFjdGlvbi5kYXRhXHJcbiAgICAgIH1cclxuXHJcbiAgICBjYXNlIFQuVVBEQVRFX1VJOiB7XHJcbiAgICAgIHJldHVybiB1cGRhdGVJbihbJ3VpJ10sIHVpID0+ICh7Li4udWksIC4uLmFjdGlvbi5kYXRhfSksIHN0YXRlKVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgVC5TRVRfRURJVE9SX0FDVElWRV9UQUI6IHtcclxuICAgICAgcmV0dXJuIHNldEluKFsnZWRpdG9yJywgJ2FjdGl2ZVRhYiddLCBhY3Rpb24uZGF0YSwgc3RhdGUpXHJcbiAgICB9XHJcblxyXG4gICAgY2FzZSBULlNFVF9TT1VSQ0VfRVJST1I6IHtcclxuICAgICAgcmV0dXJuIHNldEluKFsnZWRpdG9yJywgJ2VkaXRpbmdTb3VyY2UnLCAnZXJyb3InXSwgYWN0aW9uLmRhdGEsIHN0YXRlKVxyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgVC5TRVRfU09VUkNFX0NVUlJFTlQ6IHtcclxuICAgICAgcmV0dXJuIHNldEluKFsnZWRpdG9yJywgJ2VkaXRpbmdTb3VyY2UnLCAnY3VycmVudCddLCBhY3Rpb24uZGF0YSwgc3RhdGUpXHJcbiAgICB9XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHN0YXRlXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtjcmVhdGVTdG9yZSBhcyBvbGRDcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB0aHVuayBmcm9tICdyZWR1eC10aHVuaydcclxuaW1wb3J0IGNyZWF0ZVByb21pc2VNaWRkbGV3YXJlIGZyb20gJy4vcHJvbWlzZV9taWRkbGV3YXJlJztcclxuaW1wb3J0IGNyZWF0ZVBvc3RMb2dpY01pZGRsZXdhcmUgZnJvbSAnLi9wb3N0X2xvZ2ljX21pZGRsZXdhcmUnO1xyXG5pbXBvcnQgcmVkdWNlciBmcm9tICcuLi9yZWR1Y2Vycyc7XHJcblxyXG5jb25zdCBjcmVhdGVTdG9yZSA9IGFwcGx5TWlkZGxld2FyZShcclxuICB0aHVuayxcclxuICBjcmVhdGVQcm9taXNlTWlkZGxld2FyZSgpLFxyXG4gIGNyZWF0ZVBvc3RMb2dpY01pZGRsZXdhcmUoKVxyXG4pKG9sZENyZWF0ZVN0b3JlKVxyXG5cclxuZXhwb3J0IHtcclxuICBQcm92aWRlcixcclxuICByZWR1Y2VyLFxyXG4gIGNyZWF0ZVN0b3JlXHJcbn07XHJcbiIsIi8vIE5vdGU6IGlmIGBwb3N0YCBmaWVsZCBwcm92aWRlZCwgaXQgd2lsbCBjYWxsIGBwb3N0YFxyXG4vLyBhZnRlciB0aGUgYWN0aW9uIGRpc3BhdGNoZWQgYW5kIHN0YXRlIHVwZGF0ZWRcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcG9zdExvZ2ljTWlkZGxlV2FyZSAoZXh0cmEpIHtcclxuICByZXR1cm4gKHtkaXNwYXRjaCwgZ2V0U3RhdGV9KSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xyXG4gICAgY29uc3QgeyBwb3N0LCAuLi5yZXN0IH0gPSBhY3Rpb25cclxuXHJcbiAgICBpZiAocG9zdCAmJiB0eXBlb2YgcG9zdCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBwb3N0KHtkaXNwYXRjaCwgZ2V0U3RhdGV9LCBhY3Rpb24sIGV4dHJhKVxyXG4gICAgICB9LCAwKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXh0KGFjdGlvbilcclxuICB9XHJcbn1cclxuIiwiLy8gTm90ZTogaWYgYSBgcHJvbWlzZWAgZmllbGQgYW5kIGEgYHR5cGVzYCBwcm92aWVkLCB0aGlzIG1pZGRsZXdhcmUgd2lsbCBkaXNwYXRjaFxyXG4vLyAzIGFjdGlvbnMgUkVRVUVTVCwgU1VDQ0VTUywgRkFJTFVSRSBiYXNlZCBvbiB0aGUgc3RhdHVzIG9mIHRoZSBwcm9taXNlIGl0IHJldHVybnNcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvbWlzZU1pZGRsZVdhcmUgKCkge1xyXG4gIHJldHVybiAoe2Rpc3BhdGNoLCBnZXRTdGF0ZX0pID0+IHtcclxuICAgIHJldHVybiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xyXG4gICAgICBjb25zdCB7IHByb21pc2UsIHR5cGVzLCAuLi5yZXN0IH0gPSBhY3Rpb247XHJcblxyXG4gICAgICBpZiAoIXByb21pc2UpIHtcclxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBbUkVRVUVTVCwgU1VDQ0VTUywgRkFJTFVSRV0gPSB0eXBlcztcclxuICAgICAgbmV4dCh7Li4ucmVzdCwgdHlwZTogUkVRVUVTVH0pO1xyXG4gICAgICByZXR1cm4gcHJvbWlzZSgpLnRoZW4oXHJcbiAgICAgICAgKGRhdGEpID0+IG5leHQoey4uLnJlc3QsIGRhdGEsIHR5cGU6IFNVQ0NFU1N9KSxcclxuICAgICAgICAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5leHQoey4uLnJlc3QsIGVycjogZXJyb3IsIHR5cGU6IEZBSUxVUkV9KTtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9O1xyXG4gIH07XHJcbn07XHJcbiIsIi8qIChpZ25vcmVkKSAqLyJdLCJzb3VyY2VSb290IjoiIn0=